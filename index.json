[{"content":" ref: Introduction: The slip-box and Overarching workflow, GTD 对记笔记的启示, How to Take Smart Notes 要想长久的掌握学到的内容：写下来；要想真正的理解所学内容：转换成自己的语言。所以笔记不仅仅是学习的方式，还是以下工作的结果：\n思考 阅读 理解和产生想法 收集笔记 通过以下两种方式可以收集笔记：\n临时笔记（fleeting notes）：捕捉脑海中的每一个想法，放到收件箱里稍后处理（丢弃或转换成正式笔记（permanent notes）） 阅读笔记（literature notes）：用自己的语言记录下阅读中想要记住的内容，并保持笔记内容简单、精悍。 然后在一到两天内（忘记之前）整理笔记：\n整理临时笔记，： a. 要么整理成正式笔记； b. 要么丢弃 阅读笔记：添加连接，索引内容。 如何连接正式笔记 从收集变成整理：开发想法、主题和讨论，确保之后可以通过索引或者相关的笔记找到现在撰写的这篇笔记。\n是否和现有的论述存在冲突或能够支持现有的笔记？ 是否可以结合现有的笔记产生新的想法？ 引发了什么新的问题？ 如何写正式笔记 撰写完整的句子 引用信息来源 尽量精准、清晰和间接 如何利用正式笔记 通过自下而上的系统开发主题、问题和课题：查漏补缺，跟随自己的兴趣读更多、记更多，或转移或深入，产生问题回答问题。 通过积攒足够笔记的笔记去创作：根据连接找到主题创作所需的一些，查重补漏。通过笔记适当的调整顺序产生操作，并完善草稿完成创作。 ","permalink":"https://notes.0081800.xyz/notes/20240504164207-%E6%94%B6%E9%9B%86%E7%AC%94%E8%AE%B0/","summary":" ref: Introduction: The slip-box and Overarching workflow, GTD 对记笔记的启示, How to Take Smart Notes 要想长久的掌握学到的内容：写下来；要想真正的理解所学内容：转换成自己的语言。所以笔记不仅仅是学习的方式，还是以下工作的结果：\n思考 阅读 理解和产生想法 收集笔记 通过以下两种方式可以收集笔记：\n临时笔记（fleeting notes）：捕捉脑海中的每一个想法，放到收件箱里稍后处理（丢弃或转换成正式笔记（permanent notes）） 阅读笔记（literature notes）：用自己的语言记录下阅读中想要记住的内容，并保持笔记内容简单、精悍。 然后在一到两天内（忘记之前）整理笔记：\n整理临时笔记，： a. 要么整理成正式笔记； b. 要么丢弃 阅读笔记：添加连接，索引内容。 如何连接正式笔记 从收集变成整理：开发想法、主题和讨论，确保之后可以通过索引或者相关的笔记找到现在撰写的这篇笔记。\n是否和现有的论述存在冲突或能够支持现有的笔记？ 是否可以结合现有的笔记产生新的想法？ 引发了什么新的问题？ 如何写正式笔记 撰写完整的句子 引用信息来源 尽量精准、清晰和间接 如何利用正式笔记 通过自下而上的系统开发主题、问题和课题：查漏补缺，跟随自己的兴趣读更多、记更多，或转移或深入，产生问题回答问题。 通过积攒足够笔记的笔记去创作：根据连接找到主题创作所需的一些，查重补漏。通过笔记适当的调整顺序产生操作，并完善草稿完成创作。 ","title":"收集和整理笔记：临时笔记、阅读笔记和正式笔记"},{"content":" ref: Introduction: The slip-box and Overarching workflow, slip-box 小片的笔记通过上下文进行关联，放在两个木头盒子里面（装满了索引卡）：\n两个木头盒子分别的作用：\n索引（bibliographical）：存放对所读的书目的引用（正面）和简单的笔记（反面）。 主要（main）：收集对所读内容产生的想法。 当读到一些内容，其主要工作流程:\n一张索引卡，正面：数目信息，反面：简短的内容笔记，放到索引盒子里之后就不再添加。 检查相关的想法和写作：不直接照抄所读，而是用自己的语言在一片纸上写上一个想法或者笔记，放到「主盒子」里； a. 有新的想法再写在另外一张纸上进行扩展，通过编号进行连接。 b. 多个笔记形成链式，一个笔记可以关联到多个上下文中。 卡片之间连接的方式：\n","permalink":"https://notes.0081800.xyz/notes/20240504162618-luhman_s_slip_box/","summary":"ref: Introduction: The slip-box and Overarching workflow, slip-box 小片的笔记通过上下文进行关联，放在两个木头盒子里面（装满了索引卡）：\n两个木头盒子分别的作用：\n索引（bibliographical）：存放对所读的书目的引用（正面）和简单的笔记（反面）。 主要（main）：收集对所读内容产生的想法。 当读到一些内容，其主要工作流程:\n一张索引卡，正面：数目信息，反面：简短的内容笔记，放到索引盒子里之后就不再添加。 检查相关的想法和写作：不直接照抄所读，而是用自己的语言在一片纸上写上一个想法或者笔记，放到「主盒子」里； a. 有新的想法再写在另外一张纸上进行扩展，通过编号进行连接。 b. 多个笔记形成链式，一个笔记可以关联到多个上下文中。 卡片之间连接的方式：","title":"Luhmann's slip-box"},{"content":" ref: How to Take Smart Notes, Introduction: The slip-box and Overarching workflow tags: GTD 传统计划 vs. GTD\n计划：往自身施加了一层禁锢，消耗意志力、让自身丧失灵活性，难以应对开放式的任务；比如写作。 GTD：通过收集、整理、决策、行动这一套可信的系统，让大脑意识到所有的事情都已经被妥善处理，从而大脑才会让我们能够专心的处理眼前的事项，大大增加了自身的灵活性. 一种好的笔记记录方式类似 GTD 帮我们开启一种新的工作流：\n收集笔记：记录、跟踪读到的内容； 整理笔记：头脑风暴开发想法； 连接笔记：激发新的想法； 创作：通过笔记进行快速创作。 ","permalink":"https://notes.0081800.xyz/notes/20240504160416-gtd_%E5%AF%B9%E8%AE%B0%E7%AC%94%E8%AE%B0%E7%9A%84%E5%90%AF%E7%A4%BA/","summary":" ref: How to Take Smart Notes, Introduction: The slip-box and Overarching workflow tags: GTD 传统计划 vs. GTD\n计划：往自身施加了一层禁锢，消耗意志力、让自身丧失灵活性，难以应对开放式的任务；比如写作。 GTD：通过收集、整理、决策、行动这一套可信的系统，让大脑意识到所有的事情都已经被妥善处理，从而大脑才会让我们能够专心的处理眼前的事项，大大增加了自身的灵活性. 一种好的笔记记录方式类似 GTD 帮我们开启一种新的工作流：\n收集笔记：记录、跟踪读到的内容； 整理笔记：头脑风暴开发想法； 连接笔记：激发新的想法； 创作：通过笔记进行快速创作。 ","title":"GTD 对记笔记的启示"},{"content":" tags: Introduction: The slip-box and Overarching workflgow ref: How to Take Smart Notes 通过记笔记可以：\n辅助记忆和理解我们读到的内容； 开发新的想法、主题和创意； 引用已有的研究成果； 整理我们的想法。 记笔记作为「写作工作」的主要工作，而不仅仅是准备阶段的学习，一个好的笔记结构可以让你：\n在交付阶段面临大量已经基本可用的素材，而不是空白的纸面或屏幕； 不消耗额外的意志力，让你可以随时切换到其它感兴趣的主题然后再随时切回到现在的研究课题； 可以启动心流 ","permalink":"https://notes.0081800.xyz/notes/20240504153745-%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E8%AE%B0%E7%AC%94%E8%AE%B0%E5%8F%8A%E5%A6%82%E4%BD%95%E8%AE%B0%E7%AC%94%E8%AE%B0/","summary":" tags: Introduction: The slip-box and Overarching workflgow ref: How to Take Smart Notes 通过记笔记可以：\n辅助记忆和理解我们读到的内容； 开发新的想法、主题和创意； 引用已有的研究成果； 整理我们的想法。 记笔记作为「写作工作」的主要工作，而不仅仅是准备阶段的学习，一个好的笔记结构可以让你：\n在交付阶段面临大量已经基本可用的素材，而不是空白的纸面或屏幕； 不消耗额外的意志力，让你可以随时切换到其它感兴趣的主题然后再随时切回到现在的研究课题； 可以启动心流 ","title":"为什么要记笔记"},{"content":" ref: 为什么我们需要纸和笔 source: https://china.kyodonews.net/news/2024/04/4db93f4c3bf3.html 如果写在纸上不扔掉则没有效果。\n","permalink":"https://notes.0081800.xyz/notes/20240504153442-%E5%9C%A8%E7%BA%B8%E4%B8%8A%E5%86%99%E4%B8%8B%E6%80%92%E6%84%8F%E6%89%94%E6%8E%89%E5%8F%AF%E4%BB%A5%E7%BC%93%E8%A7%A3%E6%83%85%E7%BB%AA/","summary":"ref: 为什么我们需要纸和笔 source: https://china.kyodonews.net/news/2024/04/4db93f4c3bf3.html 如果写在纸上不扔掉则没有效果。","title":"在纸上写下怒意扔掉可以缓解情绪"},{"content":" ref: 为什么我们需要纸和笔 source: https://www.solidot.org/story?sid=77170 通过检测脑电波，阅读纸质书的模式更贴近注意力集中的模式。\nhttps://news.slashdot.org/story/24/01/18/0225255/a-groundbreaking-study-shows-kids-learn-better-on-paper-not-screens-now-what?utm_source=rss1.0mainlinkanon\n","permalink":"https://notes.0081800.xyz/notes/20240504153254-%E7%94%B5%E5%AD%90%E5%B1%8F%E5%B9%95%E9%98%85%E8%AF%BB%E6%95%88%E6%9E%9C%E4%BD%8E%E4%BA%8E%E7%BA%B8%E8%B4%A8%E4%B9%A6/","summary":"ref: 为什么我们需要纸和笔 source: https://www.solidot.org/story?sid=77170 通过检测脑电波，阅读纸质书的模式更贴近注意力集中的模式。\nhttps://news.slashdot.org/story/24/01/18/0225255/a-groundbreaking-study-shows-kids-learn-better-on-paper-not-screens-now-what?utm_source=rss1.0mainlinkanon","title":"电子屏幕阅读效果低于纸质书"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20240504152849-%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E7%BA%B8%E5%92%8C%E7%AC%94/","summary":"","title":"为什么我们需要纸和笔"},{"content":" ref: How to Take Smart Notes, 为什么我们需要纸和笔 source: https://www.solidot.org/story?sid=77257 《心理学前沿》上发表的的一篇研究表明用纸笔写下来比用键盘打出来更有利于记忆：通过观察 36 名 24 多岁的学生分别通过纸笔写下来和键盘打出来的脑信号，纸笔写下来时大脑中央部分和大脑外部顶叶间的连接增加。\nhttps://news.sciencenet.cn/htmlnews/2024/1/516879.shtm https://www.frontiersin.org/articles/10.3389/fpsyg.2023.1219945/full ","permalink":"https://notes.0081800.xyz/notes/20240504152712-%E4%B9%A6%E5%86%99%E6%AF%94%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5%E6%9B%B4%E6%9C%89%E5%88%A9%E4%BA%8E%E8%AE%B0%E5%BF%86/","summary":" ref: How to Take Smart Notes, 为什么我们需要纸和笔 source: https://www.solidot.org/story?sid=77257 《心理学前沿》上发表的的一篇研究表明用纸笔写下来比用键盘打出来更有利于记忆：通过观察 36 名 24 多岁的学生分别通过纸笔写下来和键盘打出来的脑信号，纸笔写下来时大脑中央部分和大脑外部顶叶间的连接增加。\nhttps://news.sciencenet.cn/htmlnews/2024/1/516879.shtm https://www.frontiersin.org/articles/10.3389/fpsyg.2023.1219945/full ","title":"书写比键盘输入更有利于记忆"},{"content":" tags: Sui POST https://api.shinami.com/node/v1/sui_mainnet_bb70bc6a7d6d04694c4c719f0b6f27aa Content-Type: application/json Origin: https://app.turbos.finance Referer: https://app.turbos.finance/ { \u0026#34;id\u0026#34;: 1, \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;suix_getDynamicFieldObject\u0026#34;, \u0026#34;params\u0026#34;: [ \u0026#34;0xd836ea2a159743a568fe29e8f42672a1b88414ab21be5411f8f6331e66b218d3\u0026#34;, { \u0026#34;type\u0026#34;: \u0026#34;0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i32::I32\u0026#34;, \u0026#34;value\u0026#34;: 4294899946 } ] } ","permalink":"https://notes.0081800.xyz/notes/20240429203101-sui_dynamic_objects/","summary":" tags: Sui POST https://api.shinami.com/node/v1/sui_mainnet_bb70bc6a7d6d04694c4c719f0b6f27aa Content-Type: application/json Origin: https://app.turbos.finance Referer: https://app.turbos.finance/ { \u0026#34;id\u0026#34;: 1, \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;suix_getDynamicFieldObject\u0026#34;, \u0026#34;params\u0026#34;: [ \u0026#34;0xd836ea2a159743a568fe29e8f42672a1b88414ab21be5411f8f6331e66b218d3\u0026#34;, { \u0026#34;type\u0026#34;: \u0026#34;0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i32::I32\u0026#34;, \u0026#34;value\u0026#34;: 4294899946 } ] } ","title":"Sui Dynamic Objects"},{"content":"","permalink":"https://notes.0081800.xyz/personal/20240429203024-fire/","summary":"","title":"FIRE"},{"content":" tags: Linux, Systemd source: “Systemd by Example - Part 1: Minimization - Sebastian Jambor’s Blog.” Accessed February 18, 2024. https://seb.jambor.dev/posts/systemd-by-example-part-1-minimization/. systemd unit types There are 11 different unit types, the most common 3 of them:\ntargets: activated by different system state, it\u0026rsquo;s useful as a dependency, e.g. sleep.target:do something when system is going to sleep.\nOf course, we can use systemctl to list the units that dependant on a specific unit.\nsystemctl list-dependencies graphical.target services Processes that are controlled by systemd.\nsockets Enables to open a socket without running a service, and only start the service onece there is traffic on the socket.\n","permalink":"https://notes.0081800.xyz/notes/20240218123608-systemd_by_example/","summary":"tags: Linux, Systemd source: “Systemd by Example - Part 1: Minimization - Sebastian Jambor’s Blog.” Accessed February 18, 2024. https://seb.jambor.dev/posts/systemd-by-example-part-1-minimization/. systemd unit types There are 11 different unit types, the most common 3 of them:\ntargets: activated by different system state, it\u0026rsquo;s useful as a dependency, e.g. sleep.target:do something when system is going to sleep.\nOf course, we can use systemctl to list the units that dependant on a specific unit.","title":"systemd by example"},{"content":" tags: Linux,Systemd source: Walsh, Daniel. “How to Run Systemd in a Container.” Red Hat Developer, April 24, 2019. https://developers.redhat.com/blog/2019/04/24/how-to-run-systemd-in-a-container. Podmand is a container engine which is published by Red Hat, has the same command-line interface(CLI) as Docker.\n","permalink":"https://notes.0081800.xyz/notes/20240218123120-use_podman_to_run_systemd_in_a_container/","summary":"tags: Linux,Systemd source: Walsh, Daniel. “How to Run Systemd in a Container.” Red Hat Developer, April 24, 2019. https://developers.redhat.com/blog/2019/04/24/how-to-run-systemd-in-a-container. Podmand is a container engine which is published by Red Hat, has the same command-line interface(CLI) as Docker.","title":"Use Podman to Run Systemd in a Container"},{"content":" tags: Operating system ","permalink":"https://notes.0081800.xyz/notes/20231209105248-windows/","summary":" tags: Operating system ","title":"Windows"},{"content":" tags: Linux,Tools ","permalink":"https://notes.0081800.xyz/notes/20231101155522-logrotate/","summary":" tags: Linux,Tools ","title":"Logrotate"},{"content":" tags: Linux,Systemd,Supervisor,Logrotate Background I usually use supervisor1 to deploy my services, and capture the stdout/stderr to the log files, and then use logrotate to rotate the logs, which the configuration likes:\n/data/log/app/*/*.log { daily missingok rotate 180 dateext compress delaycompress notifempty create 640 nobody adm sharedscripts postrotate /usr/local/bin/supervisorctl -c /etc/supervisord.conf pid \u0026amp;\u0026amp; kill -USR2 `/usr/local/bin/supervisorctl -c /etc/supervisord.conf pid` \u0026gt; /tmp/kill.log 2\u0026gt;\u0026amp;1 endscript } As you can see, I make the logrotate to send a signal to supervisord after the logs have been rotated, to let the supervisord reopen the logs.\nBut when I deployed my services onto a Ubuntu 20.04, it just don\u0026rsquo;t work.\nShow The Verbose Then I change the logrotate.service to show the verbose outputs of logrorate, I changed the ExecStart in the logrotate.service to:\nExecStart=/usr/sbin/logrotate -f -v /etc/logrotate.conf -f to force logrotate run. Then I noticed a line in the outputs of command journalctl -xe:\nNov 01 15:49:51 vm logrotate[3952467]: unix:///tmp/supervisor.sock no such file Solve the Problem I identify that this is the output of supervisorctl, but the file is existed, then I noticed a line in the logrotate.service:\nPrivateTmp=true According to its documentation:\nPrivateTmp= Takes a boolean argument. If true, sets up a new file system namespace for the executed processes and mounts private /tmp and /var/tmp directories inside it that is not shared by processes outside of the namespace. This is useful to secure access to temporary files of the process, but makes sharing between processes via /tmp or /var/tmp impossible.\nSo I changed it to false, then the problem solved. If the security is more important to you, you can change the unix socket path.\nSee also Access files in system tmp directory, when using PrivateTmp logrotate succeeds when manually run as root, but fails with \u0026ldquo;Read-only file system\u0026rdquo; when run by logrotate.service http://supervisord.org/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://notes.0081800.xyz/articles/20231101155419-logrotate_don_t_work_with_supervisor_on_ubuntu_20_04_with_systemd/","summary":"tags: Linux,Systemd,Supervisor,Logrotate Background I usually use supervisor1 to deploy my services, and capture the stdout/stderr to the log files, and then use logrotate to rotate the logs, which the configuration likes:\n/data/log/app/*/*.log { daily missingok rotate 180 dateext compress delaycompress notifempty create 640 nobody adm sharedscripts postrotate /usr/local/bin/supervisorctl -c /etc/supervisord.conf pid \u0026amp;\u0026amp; kill -USR2 `/usr/local/bin/supervisorctl -c /etc/supervisord.conf pid` \u0026gt; /tmp/kill.log 2\u0026gt;\u0026amp;1 endscript } As you can see, I make the logrotate to send a signal to supervisord after the logs have been rotated, to let the supervisord reopen the logs.","title":"Logrotate Don't Work With Supervisor on Ubuntu 20.04 With Systemd"},{"content":" tags: Tools ","permalink":"https://notes.0081800.xyz/notes/20231101155445-supervisor/","summary":" tags: Tools ","title":"Supervisor"},{"content":" tags: Linux ","permalink":"https://notes.0081800.xyz/notes/20231101155430-systemd/","summary":" tags: Linux ","title":"Systemd"},{"content":" tags: High Performance, Linux ","permalink":"https://notes.0081800.xyz/notes/20231031084640-bpf/","summary":" tags: High Performance, Linux ","title":"BPF"},{"content":" tags: Linux, Tools, BPF source: “Porting OpenBSD Pledge() to Linux.” Accessed October 31, 2023. https://justine.lol/pledge/. $ ./pledge.com \u0026#39;stdio rpath\u0026#39; ls # read only list files ","permalink":"https://notes.0081800.xyz/notes/20231031084456-porting_openbsd_pledge_to_linux/","summary":" tags: Linux, Tools, BPF source: “Porting OpenBSD Pledge() to Linux.” Accessed October 31, 2023. https://justine.lol/pledge/. $ ./pledge.com \u0026#39;stdio rpath\u0026#39; ls # read only list files ","title":"Porting OpenBSD pledge() to Linux"},{"content":" tags: Python, SIMD, High Performance source: Turner-Trauring, Itamar. “Speeding up Cython with SIMD.” Python⇒Speed, October 18, 2023. https://pythonspeed.com/articles/faster-cython-simd/. ","permalink":"https://notes.0081800.xyz/notes/20231031082500-speeding_up_cython_with_simd/","summary":" tags: Python, SIMD, High Performance source: Turner-Trauring, Itamar. “Speeding up Cython with SIMD.” Python⇒Speed, October 18, 2023. https://pythonspeed.com/articles/faster-cython-simd/. ","title":"Speeding up Cython with SIMD"},{"content":" tags: ZFS, FreeBSD $ mkdir /tmp/zroot $ zpool import -fR /tmp/zroot zroot $ zfs mount zroot/ROOT/default ","permalink":"https://notes.0081800.xyz/notes/20231020160536-freebsd_livecd_import_zfs/","summary":" tags: ZFS, FreeBSD $ mkdir /tmp/zroot $ zpool import -fR /tmp/zroot zroot $ zfs mount zroot/ROOT/default ","title":"FreeBSD LiveCD Import ZFS"},{"content":" source: Evans, Julia. “New Talk: Making Hard Things Easy.” Julia Evans, October 6, 2023. https://jvns.ca/blog/2023/10/06/new-talk--making-hard-things-easy/. How to:\nReusable tools: shellcheck Find Good Documentation in that field, for example, HTTP: MDN RFC(rfc9110) Big list to small list, focus on the core: Only learn a few arguments about grep Only know a few fields about the output of dig Understand how computer executed chronologically: SQL Understand the hidden parts: DNS (resolve, library, servers) Communication with each other ","permalink":"https://notes.0081800.xyz/notes/20231008091859-making_hard_things_easy/","summary":" source: Evans, Julia. “New Talk: Making Hard Things Easy.” Julia Evans, October 6, 2023. https://jvns.ca/blog/2023/10/06/new-talk--making-hard-things-easy/. How to:\nReusable tools: shellcheck Find Good Documentation in that field, for example, HTTP: MDN RFC(rfc9110) Big list to small list, focus on the core: Only learn a few arguments about grep Only know a few fields about the output of dig Understand how computer executed chronologically: SQL Understand the hidden parts: DNS (resolve, library, servers) Communication with each other ","title":"Making Hard Things Easy"},{"content":" tags: GPG, Yubikey source: https://github.com/drduh/YubiKey-Guide ","permalink":"https://notes.0081800.xyz/notes/20231005202026-yubikey_guide/","summary":" tags: GPG, Yubikey source: https://github.com/drduh/YubiKey-Guide ","title":"YubiKey-Guide"},{"content":" tags: GPG, Yubikey source: “A Visual Explanation of GPG Subkeys - Richard Goulter’s Blog.” Accessed October 5, 2023. https://rgoulter.com/blog/posts/programming/2022-06-10-a-visual-explanation-of-gpg-subkeys.html. What does the [SC] or [E] mean in the output of gpt --list-keys:\nE = encrypt/descript S = sign C = certify(sign another key, establishing a trust relation) A = authentication(log in to SSH with a PG key) ","permalink":"https://notes.0081800.xyz/notes/20231005201518-a_visual_explanation_of_gpg_subkeys/","summary":" tags: GPG, Yubikey source: “A Visual Explanation of GPG Subkeys - Richard Goulter’s Blog.” Accessed October 5, 2023. https://rgoulter.com/blog/posts/programming/2022-06-10-a-visual-explanation-of-gpg-subkeys.html. What does the [SC] or [E] mean in the output of gpt --list-keys:\nE = encrypt/descript S = sign C = certify(sign another key, establishing a trust relation) A = authentication(log in to SSH with a PG key) ","title":"A Visual Explanation of GPG Subkeys"},{"content":" tags: Sui POST https://fullnode.mainnet.sui.io Content-Type: application/json { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;method\u0026#34;: \u0026#34;sui_getTransactionBlock\u0026#34;, \u0026#34;params\u0026#34;: [ \u0026#34;6wthaE4QzjWM7HnAzm6Pd4ymkNtadbHnqQkTXY7Ne1L3\u0026#34;, { \u0026#34;showInput\u0026#34;: true, \u0026#34;showRawInput\u0026#34;: false, \u0026#34;showEffects\u0026#34;: true, \u0026#34;showEvents\u0026#34;: true, \u0026#34;showObjectChanges\u0026#34;: true, \u0026#34;showBalanceChanges\u0026#34;: true } ] } ","permalink":"https://notes.0081800.xyz/notes/20230926105739-sui_gettransactionblock/","summary":" tags: Sui POST https://fullnode.mainnet.sui.io Content-Type: application/json { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;method\u0026#34;: \u0026#34;sui_getTransactionBlock\u0026#34;, \u0026#34;params\u0026#34;: [ \u0026#34;6wthaE4QzjWM7HnAzm6Pd4ymkNtadbHnqQkTXY7Ne1L3\u0026#34;, { \u0026#34;showInput\u0026#34;: true, \u0026#34;showRawInput\u0026#34;: false, \u0026#34;showEffects\u0026#34;: true, \u0026#34;showEvents\u0026#34;: true, \u0026#34;showObjectChanges\u0026#34;: true, \u0026#34;showBalanceChanges\u0026#34;: true } ] } ","title":"sui_getTransactionBlock"},{"content":" Tags: FreeBSD First, configure to start service during the bootstrap:\nsysrc nfs_server_enable=\u0026#34;YES\u0026#34; sysrc nfs_server_flags=\u0026#34;-u -t -n 4\u0026#34; sysrc rpcbind_enable=\u0026#34;YES\u0026#34; sysrc rpc_statd_enable=\u0026#34;YES\u0026#34; sysrc rpc_lockd_enable=\u0026#34;YES\u0026#34; sysrc mountd_flags=\u0026#34;-r\u0026#34; sysrc mountd_enable=\u0026#34;YES\u0026#34; Second, export volume to the network in /etc/exports:\n/data/warehouse -mapall=root -network 192.168.1.0/24 NOTE: you shouldn\u0026rsquo;t export the pool root while you are using ZFS, as it can\u0026rsquo;t show the children in a datasets of it.\nAnd then we can start the services:\nservice nfsd start service statd start service lockd start You need to stop extra services when you want to restart:\nservice mountd stop service rpcbind stop service nfsd restart service statd restart service lockd restart Finally, we can use showmount command to see if it works:\nshowamount -e 192.168.1.x # replace 192.168.1.x to your real ip ","permalink":"https://notes.0081800.xyz/notes/20230915142523-freebsd_13_2_nfs/","summary":"Tags: FreeBSD First, configure to start service during the bootstrap:\nsysrc nfs_server_enable=\u0026#34;YES\u0026#34; sysrc nfs_server_flags=\u0026#34;-u -t -n 4\u0026#34; sysrc rpcbind_enable=\u0026#34;YES\u0026#34; sysrc rpc_statd_enable=\u0026#34;YES\u0026#34; sysrc rpc_lockd_enable=\u0026#34;YES\u0026#34; sysrc mountd_flags=\u0026#34;-r\u0026#34; sysrc mountd_enable=\u0026#34;YES\u0026#34; Second, export volume to the network in /etc/exports:\n/data/warehouse -mapall=root -network 192.168.1.0/24 NOTE: you shouldn\u0026rsquo;t export the pool root while you are using ZFS, as it can\u0026rsquo;t show the children in a datasets of it.\nAnd then we can start the services:","title":"FreeBSD 13.2 NFS"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20230911145434-zfs/","summary":"","title":"ZFS"},{"content":" tags: FreeBSD, ZFS source: Shen Leo. “ZFS 入门指北：规划与创建存储池.” Leo’s Field, March 21, 2022. https://szclsya.me/zh-cn/posts/storage/zfs-setup/. ","permalink":"https://notes.0081800.xyz/notes/20230911145426-zfs_%E5%85%A5%E9%97%A8%E6%8C%87%E5%8C%97_%E8%A7%84%E5%88%92%E4%B8%8E%E5%88%9B%E5%BB%BA%E5%AD%98%E5%82%A8%E6%B1%A0/","summary":" tags: FreeBSD, ZFS source: Shen Leo. “ZFS 入门指北：规划与创建存储池.” Leo’s Field, March 21, 2022. https://szclsya.me/zh-cn/posts/storage/zfs-setup/. ","title":"ZFS 入门指北：规划与创建存储池"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20230911142417-freebsd/","summary":"","title":"FreeBSD"},{"content":" TAGS: FreeBSD, NAS Source: “Building a FreeBSD Backup Server.” Accessed September 11, 2023. https://ogris.de/howtos/freebsd-backup-server.html. $ zfs create -quota=1T data/timemachine [global] workgroup = WORKGROUP security = user netbios name = backup server string = backup.your-local-domain.invalid hostname lookups = yes load printers = no show add printer wizard = no time server = yes map to guest = Bad User use mmap = yes dos charset = 850 unix charset = UTF-8 mangled names = no log level = 0 vfs objects = fruit streams_xattr zfsacl fruit:model = MacPro fruit:resource = file fruit:metadata = netatalk ; time machines [macbook] path = /data/timemachine read only = no use sendfile = yes browseable = no hosts allow = macbook.your-local-domain.invalid fe80::/10 fruit:time machine = yes fruit:time machine max size = 500G valid users = tm Then we can set our Macbook Pro to use the timemachine:\nsudo tmutil setdestination \u0026#39;smb://user:password@ip/macbook\u0026#39; ","permalink":"https://notes.0081800.xyz/notes/20230911142350-building_a_freebsd_backup_server/","summary":"TAGS: FreeBSD, NAS Source: “Building a FreeBSD Backup Server.” Accessed September 11, 2023. https://ogris.de/howtos/freebsd-backup-server.html. $ zfs create -quota=1T data/timemachine [global] workgroup = WORKGROUP security = user netbios name = backup server string = backup.your-local-domain.invalid hostname lookups = yes load printers = no show add printer wizard = no time server = yes map to guest = Bad User use mmap = yes dos charset = 850 unix charset = UTF-8 mangled names = no log level = 0 vfs objects = fruit streams_xattr zfsacl fruit:model = MacPro fruit:resource = file fruit:metadata = netatalk ; time machines [macbook] path = /data/timemachine read only = no use sendfile = yes browseable = no hosts allow = macbook.","title":"Building a FreeBSD backup server"},{"content":" TAGS: Blockchain ","permalink":"https://notes.0081800.xyz/notes/20230911093102-sui/","summary":" TAGS: Blockchain ","title":"Sui"},{"content":" TAGS: Sui POST http://127.0.0.1:9000 Content-Type: application/json { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;sui_moveCall\u0026#34;, \u0026#34;params\u0026#34;: [ \u0026#34;0x1\u0026#34;, \u0026#34;0xc8\u0026#34;, \u0026#34;obc_dao\u0026#34;, \u0026#34;voting_delay\u0026#34;, \u0026#34; ] } ","permalink":"https://notes.0081800.xyz/notes/20230911093008-sui_move_call/","summary":" TAGS: Sui POST http://127.0.0.1:9000 Content-Type: application/json { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;sui_moveCall\u0026#34;, \u0026#34;params\u0026#34;: [ \u0026#34;0x1\u0026#34;, \u0026#34;0xc8\u0026#34;, \u0026#34;obc_dao\u0026#34;, \u0026#34;voting_delay\u0026#34;, \u0026#34; ] } ","title":"Sui Move Call"},{"content":" tags: Uniswap V3, Ethereum POST https://rpc.ankr.com/eth Content-Type: application/json { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;method\u0026#34;: \u0026#34;eth_getTransactionReceipt\u0026#34;, \u0026#34;params\u0026#34;: [\u0026#34;0xeedf302cc12f4b7194742694aabec075c1c229f7b9d8e57a53c44c992bc6690c\u0026#34;] } ","permalink":"https://notes.0081800.xyz/notes/20230731163157-uniswap_v3_event_log/","summary":" tags: Uniswap V3, Ethereum POST https://rpc.ankr.com/eth Content-Type: application/json { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;method\u0026#34;: \u0026#34;eth_getTransactionReceipt\u0026#34;, \u0026#34;params\u0026#34;: [\u0026#34;0xeedf302cc12f4b7194742694aabec075c1c229f7b9d8e57a53c44c992bc6690c\u0026#34;] } ","title":"Uniswap V3 Event Log"},{"content":" tags: Microstartup source: The Best Way To Launch Your Startup | Startup School, 2023. https://www.youtube.com/watch?v=u36A-YTxiOw. Emphasis Launch it ASAP, and launch it again and again.\nHow to Write a Pitch 1-line description\nto introduce your bussiness:\nTell WHAT, not WHY(maybe later). What problem it it solving, and for who. X for Y may not the best sentence. Ways: Launch in Different Channels Silent Launch Launch to Friends and family Launch to Strangers Online Community Lanuch: HN Waitlist Launch: Domain/Landing Page/Email list. ","permalink":"https://notes.0081800.xyz/notes/20230726091549-the_best_way_to_launch_your_startup/","summary":"tags: Microstartup source: The Best Way To Launch Your Startup | Startup School, 2023. https://www.youtube.com/watch?v=u36A-YTxiOw. Emphasis Launch it ASAP, and launch it again and again.\nHow to Write a Pitch 1-line description\nto introduce your bussiness:\nTell WHAT, not WHY(maybe later). What problem it it solving, and for who. X for Y may not the best sentence. Ways: Launch in Different Channels Silent Launch Launch to Friends and family Launch to Strangers Online Community Lanuch: HN Waitlist Launch: Domain/Landing Page/Email list.","title":"The Best Way To Launch Your Startup"},{"content":" tags: Papers source: “Mrb: Should I Read Papers?” Accessed February 20, 2023. https://michaelrbernste.in/2014/10/21/should-i-read-papers.html. Yes, but reading a paper isn\u0026rsquo;t the same as reading a blogpost or a novel.\nA paper could be an idea captured by someone, or the result of a life\u0026rsquo;s work, or anything in between.\nYou might need to read it bit by bit, again and again.\n","permalink":"https://notes.0081800.xyz/notes/20230719091127-should_i_read_papers/","summary":"tags: Papers source: “Mrb: Should I Read Papers?” Accessed February 20, 2023. https://michaelrbernste.in/2014/10/21/should-i-read-papers.html. Yes, but reading a paper isn\u0026rsquo;t the same as reading a blogpost or a novel.\nA paper could be an idea captured by someone, or the result of a life\u0026rsquo;s work, or anything in between.\nYou might need to read it bit by bit, again and again.","title":"Should I read papers"},{"content":" tags: Papers source: Al-Ansari, Khaled. “Software Engineers Should Read Academic Papers.” Medium (blog), July 15, 2023. https://medium.com/@KhaledElAnsari/software-engineers-should-read-academic-papers-9a6ee6ebc40d. There are some benefits of reading academic papers:\nStructured content can enhance your technical writing, you can learn structured writing.\n(Reading - Writing - Reviewing) cycle making you a better reader and reviewer.\nReading to gain information. Structured writing make review easier. Better deading and writing make you a better reviewer. Bridge the industry and the academic field.\nThere is a gap between the industry and the acamedic field. Anyone who can decrease the gap between them is the best enginer in technical field. One of the way to decrease the gap between them is reading academic papers, and then apply them to the industry trend. Learn new topics.\n","permalink":"https://notes.0081800.xyz/notes/20230717111715-software_engineers_should_read_academic_papers/","summary":"tags: Papers source: Al-Ansari, Khaled. “Software Engineers Should Read Academic Papers.” Medium (blog), July 15, 2023. https://medium.com/@KhaledElAnsari/software-engineers-should-read-academic-papers-9a6ee6ebc40d. There are some benefits of reading academic papers:\nStructured content can enhance your technical writing, you can learn structured writing.\n(Reading - Writing - Reviewing) cycle making you a better reader and reviewer.\nReading to gain information. Structured writing make review easier. Better deading and writing make you a better reviewer. Bridge the industry and the academic field.","title":"Software Engineers Should Read Academic Papers"},{"content":" tags: Solana source: https://github.com/solana-labs/solana/blob/eabe1070667e87f447b9cb892e2d916ca5b68e34/sdk/src/offchain_message.rs#L237-L240 /// Serialize the off-chain message to bytes including full header pub fn serialize(\u0026amp;self) -\u0026gt; Result\u0026lt;Vec\u0026lt;u8\u0026gt;, SanitizeError\u0026gt; { // serialize signing domain let mut data = Self::SIGNING_DOMAIN.to_vec(); // serialize version and call version specific serializer match self { Self::V0(msg) =\u0026gt; { data.push(0); msg.serialize(\u0026amp;mut data)?; } } Ok(data) } ","permalink":"https://notes.0081800.xyz/notes/20230615180334-solana_off_chain_message_signing/","summary":" tags: Solana source: https://github.com/solana-labs/solana/blob/eabe1070667e87f447b9cb892e2d916ca5b68e34/sdk/src/offchain_message.rs#L237-L240 /// Serialize the off-chain message to bytes including full header pub fn serialize(\u0026amp;self) -\u0026gt; Result\u0026lt;Vec\u0026lt;u8\u0026gt;, SanitizeError\u0026gt; { // serialize signing domain let mut data = Self::SIGNING_DOMAIN.to_vec(); // serialize version and call version specific serializer match self { Self::V0(msg) =\u0026gt; { data.push(0); msg.serialize(\u0026amp;mut data)?; } } Ok(data) } ","title":"Solana Off-Chain Message Signing"},{"content":" tags: Ethereum Networking Layer ","permalink":"https://notes.0081800.xyz/notes/20230614091826-ethereum_execution_layer/","summary":" tags: Ethereum Networking Layer ","title":"Ethereum Execution Layer"},{"content":" tags: Ethereum Networking, Ethereum Execution Layer ","permalink":"https://notes.0081800.xyz/notes/20230614091155-ethereum_sub_protocols/","summary":" tags: Ethereum Networking, Ethereum Execution Layer ","title":"Ethereum Sub-protocols"},{"content":" tags: Ethereum Sub-protocols, Ethereum Simulator Node Started when a RLPx session had initiated. Three main tasks before switch to PoS:\nChain synchronization Block propagation Transaction exchange: exchange pending transaction between nodes. Only transaction exchange remit after switch to PoS.\n","permalink":"https://notes.0081800.xyz/notes/20230614091142-ethereum_wire_protocol/","summary":"tags: Ethereum Sub-protocols, Ethereum Simulator Node Started when a RLPx session had initiated. Three main tasks before switch to PoS:\nChain synchronization Block propagation Transaction exchange: exchange pending transaction between nodes. Only transaction exchange remit after switch to PoS.","title":"Ethereum Wire Protocol"},{"content":" tags: Ethereum Networking, Ethereum Execution Layer Basic stack for p2p networking. Initiating RLPx Session.\nRLPX Session Communicate messages that encoded in RLP between peers.\n","permalink":"https://notes.0081800.xyz/notes/20230614090850-ethereum_devp2p/","summary":"tags: Ethereum Networking, Ethereum Execution Layer Basic stack for p2p networking. Initiating RLPx Session.\nRLPX Session Communicate messages that encoded in RLP between peers.","title":"Ethereum DevP2P"},{"content":" tags: Ethereum source: https://ethereum.org/en/developers/docs/networking-layer/ ","permalink":"https://notes.0081800.xyz/notes/20230614090110-ethereum_networking/","summary":" tags: Ethereum source: https://ethereum.org/en/developers/docs/networking-layer/ ","title":"Ethereum Networking Layer"},{"content":" tags: Ethereum Networking, Ethereum Simulator Node Boot nodes Using a small set that hardcoded bootnodes to bootstrap.\nProtocol Kademlia a modified form of Distributed Hash Table.\nSteps to join the network start client \u0026ndash;\u0026gt; connect to bootnode \u0026ndash;\u0026gt; bond to bootnode \u0026ndash;\u0026gt; find neighbours \u0026ndash;\u0026gt; bond to neighbours\n","permalink":"https://notes.0081800.xyz/notes/20230614090056-ethereum_discovery_nodes/","summary":"tags: Ethereum Networking, Ethereum Simulator Node Boot nodes Using a small set that hardcoded bootnodes to bootstrap.\nProtocol Kademlia a modified form of Distributed Hash Table.\nSteps to join the network start client \u0026ndash;\u0026gt; connect to bootnode \u0026ndash;\u0026gt; bond to bootnode \u0026ndash;\u0026gt; find neighbours \u0026ndash;\u0026gt; bond to neighbours","title":"Ethereum Discovery Nodes"},{"content":" tags: Ethereum Simulator Node, Ethereum Execution Layer Node Side: Receive pending transactions If we want to broadcast our transactions to the network in Ethereum, two RPC calls are involved:\nhttps://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendtransaction https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendrawtransaction So let\u0026rsquo;s follow those two calls to track how a transaction is broadcasted. Those two corresponding implementations are defined at internal/ethapi/api.go:\nSendTransaction SendRawTransaction And both of them are pointing to SubmitTransaction, which calls SendTx to put transaction into the txpool by calling:\nfunc (b *EthAPIBackend) SendTx(ctx context.Context, signedTx *types.Transaction) error { return b.eth.txPool.AddLocal(signedTx) } Miner Side: Execute pending transactions Miner start here at cmd/geth/main.go, which is calling:\n*EthAPIBackend.StartMining *Ethereum.StartMining *Miner.Start -\u0026gt; miner.worker.start() *worker.start -\u0026gt; \u0026lt;-startCh -\u0026gt; commit -\u0026gt; \u0026lt;-newWorkCh *worker.commitWork *worker.fillTransactions sealing pending transactions in txpool to a block. *worker.commitTransactions *worker.commitTransaction executing transaction core.ApplyTransaction *worker.commit *worker.engine.FinalizeAndAssemble *beacon.FinalizeAndAssemble *worker.updateSnapshot -\u0026gt; w.snapshotBlock / w.snapshotReceipts / w.snapshotState *Miner.Pending \u0026lt;- w.snapshotBlock / w.snapshotReceipts / w.snapshotState Remote Transactions Here we can see that we loaded some transactions from remote in *worker.fillTransactions:\n// Split the pending transactions into locals and remotes // Fill the block with all available pending transactions. pending := w.eth.TxPool().Pending(true) localTxs, remoteTxs := make(map[common.Address]types.Transactions), pending The w.eth here is the Ethereum structure, and its TxPool returns core.txpool.TxPool1 structure. The remote transactions should be added by calling *TxPool.AddRemotes, so let\u0026rsquo;s check where is calling it.\nhandleSendTx in les2 package. Which will be used in RegisterEthService at cmd/utils package. And then will be used in makeFullNode. Finally will be started in geth. P2P Side: Exchange pending transactions Ethereum Wire Protocol defined how transactions are exchanged between nodes.\nNodes use GetPooledTransactions (0x09)3 message to pull pending transactions from the peer. Which peers anwsered here:\nfunc answerGetPooledTransactions(backend Backend, query GetPooledTransactionsPacket, peer *Peer) ([]common.Hash, []rlp.RawValue) { // Gather transactions until the fetch or network limits is reached var ( bytes int hashes []common.Hash txs []rlp.RawValue ) for _, hash := range query { if bytes \u0026gt;= softResponseLimit { break } // Retrieve the requested transaction, skipping if unknown to us tx := backend.TxPool().Get(hash) if tx == nil { continue } // If known, encode and queue for response packet if encoded, err := rlp.EncodeToBytes(tx); err != nil { log.Error(\u0026#34;Failed to encode transaction\u0026#34;, \u0026#34;err\u0026#34;, err) } else { hashes = append(hashes, hash) txs = append(txs, encoded) bytes += len(encoded) } } return hashes, txs } Conclusion The node provide JSONRPC API to receive transaction from client side, and then put it into the txpool; The miner extracts transctions from txpool and executes them, and then seals the transactions into a pending block. https://github.com/ethereum/go-ethereum/blob/281e8cd5abaac86ed3f37f98250ff147b3c9fe62/eth/backend.go#L209\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://ethereum.org/en/developers/docs/networking-layer/#les\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://github.com/ethereum/devp2p/blob/master/caps/eth.md#getpooledtransactions-0x09\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://notes.0081800.xyz/notes/20230612100850-how_is_a_transaction_broadcasted/","summary":"tags: Ethereum Simulator Node, Ethereum Execution Layer Node Side: Receive pending transactions If we want to broadcast our transactions to the network in Ethereum, two RPC calls are involved:\nhttps://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendtransaction https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendrawtransaction So let\u0026rsquo;s follow those two calls to track how a transaction is broadcasted. Those two corresponding implementations are defined at internal/ethapi/api.go:\nSendTransaction SendRawTransaction And both of them are pointing to SubmitTransaction, which calls SendTx to put transaction into the txpool by calling:","title":"How is a Transaction Broadcasted"},{"content":" tags: Ethereum Simulator Only use the data of the mainnet to simulate transaction, and DONOT commit the final transaction to the mainnet.\nRelay To identify our transactions that need to simulate, if it\u0026rsquo;s failed then drop that tx, otherwise commit the final transaction to the mainnet.\nThings need to consider:\nHow to limit or identify transactions that need to simulate?\nOnly execute the transactions from local txpool.\nWhere to execute the transction previously?\nAdd a new RPC method to simuluate and then send the transaction(e.g. eth_simuluateAndSendTransaction / eth_simuluateAndSendRawTransaction). Execute the transaction before we put the transaction into the txpool How to drop that transction from txpool?\nDon\u0026rsquo;t put it into the txpool if the transaction is failed. Do transaction need to be signed?\nHow to trace the changes during executing transaction? Query StateDB via two different state root.\nPre-execute before put tx into the txpool The tx may not be seal into block if gas too low. Pre-execute before put tx into the block The tx may be sealed by another node because the txpool will be synchronized between nodes. ","permalink":"https://notes.0081800.xyz/notes/20230612100350-ethereum_simulator_node/","summary":"tags: Ethereum Simulator Only use the data of the mainnet to simulate transaction, and DONOT commit the final transaction to the mainnet.\nRelay To identify our transactions that need to simulate, if it\u0026rsquo;s failed then drop that tx, otherwise commit the final transaction to the mainnet.\nThings need to consider:\nHow to limit or identify transactions that need to simulate?\nOnly execute the transactions from local txpool.\nWhere to execute the transction previously?","title":"Ethereum Simulator Node"},{"content":" tags: Essay Writing Guide\nList outlines\nExplore the resources and documentation to understand\nTaking notes during the exploring\nUse the method of How to Take Smart Notes\n","permalink":"https://notes.0081800.xyz/notes/20230608223754-how_to_write_a_technical_article/","summary":"tags: Essay Writing Guide\nList outlines\nExplore the resources and documentation to understand\nTaking notes during the exploring\nUse the method of How to Take Smart Notes","title":"How to Write a Technical Article"},{"content":" tags: Learning English, Journal ","permalink":"https://notes.0081800.xyz/notes/20230608214607-english_words/","summary":" tags: Learning English, Journal ","title":"English Words"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20230608214629-journal/","summary":"","title":"Journal"},{"content":" tags: English Words Adjective\n(of an argument , theory, or policy) logical and consistent: they failed to develop a coherent economic strategy. united as or forming a whole: divided into a number of geographically coherent kingdoms. Physics (of waves) having a constant phase relationship. ","permalink":"https://notes.0081800.xyz/notes/20230608214518-coherent/","summary":" tags: English Words Adjective\n(of an argument , theory, or policy) logical and consistent: they failed to develop a coherent economic strategy. united as or forming a whole: divided into a number of geographically coherent kingdoms. Physics (of waves) having a constant phase relationship. ","title":"coherent"},{"content":" source: https://jordanbpeterson.com/wp-content/uploads/2018/02/Essay_Writing_Guide.docx tags: How to Write PART I: INTRODUCTION Why are we need to learn how to write an essay? Writing an essay is to think by writing, formulate and organize ideas. Writing an essay is also to learn or explore a new topic. How to get things done? If you don\u0026rsquo;t have a big chunk of time in your daily life, then don\u0026rsquo;t relay your success on it, take 15 minutes every day is still powerful: 「日拱一卒，功不唐捐」.\nPART II: LEVELS OF RESOUTION Word Sentence Paragraph: 100 words or 10 sentences, rule is the rule A single idea. Less than 100 words a paragraph looks like a bad idea More than 300 words a paragraph may contain multiple ideas Forth Level: Proper Order of Paragraph Fifth Level: Whole Essay Context Culture PART III: THE TOPIC AND THE READING LIST Topic: question try to answer.\nIf you already have potential topics to choose, start with Topics, otherwise start with Reading List.\nPART IV: THE OUTLINE First Draft: Should be 25% longer than the final version.\nWrite 10 - 15 sentences outline for serval thousand words Essay.\nPART V: PARAGRAPHS PART VI: EDITING AND ARRANGING OF SENTENCES WITHIN PARAGRAPHS PART VII: RE-ORDERING THE PARAGRAPHS PART VIII: GENERATING A NEW OUTLINE PART IX: REPEAT PART X: REFERENCES AND BIBLIGRAPHY ","permalink":"https://notes.0081800.xyz/notes/20230608213315-essay_writing_guide/","summary":"source: https://jordanbpeterson.com/wp-content/uploads/2018/02/Essay_Writing_Guide.docx tags: How to Write PART I: INTRODUCTION Why are we need to learn how to write an essay? Writing an essay is to think by writing, formulate and organize ideas. Writing an essay is also to learn or explore a new topic. How to get things done? If you don\u0026rsquo;t have a big chunk of time in your daily life, then don\u0026rsquo;t relay your success on it, take 15 minutes every day is still powerful: 「日拱一卒，功不唐捐」.","title":"Essay Writing Guide"},{"content":" tags: PostgresQL Recently, I met a problem in PostgresQL: the index mismatched after batch rows inserted.\nRun ANALYZE on the table solved this problem after batch rows inerted.\nTurns out autovacuum has been disabled on the PostgresQL instance:\nshow autovacuum_analyze_scale_factor; show autovacuum_analyze_threshold ; SELECT * FROM pg_settings WHERE name LIKE \u0026#39;%autovacuum%\u0026#39;; ","permalink":"https://notes.0081800.xyz/notes/20230529093313-postgresql_autovacuum_analyze/","summary":" tags: PostgresQL Recently, I met a problem in PostgresQL: the index mismatched after batch rows inserted.\nRun ANALYZE on the table solved this problem after batch rows inerted.\nTurns out autovacuum has been disabled on the PostgresQL instance:\nshow autovacuum_analyze_scale_factor; show autovacuum_analyze_threshold ; SELECT * FROM pg_settings WHERE name LIKE \u0026#39;%autovacuum%\u0026#39;; ","title":"PostgresQL autovacuum \u0026 ANALYZE"},{"content":" tags: On The Road https://www.google.com/maps/dir/New+York/Joliet/Rock+Island,+IL/Rapids+City,+IL/Des+Moines,+IA/Adel,+Iowa/Stuart,+Iowa/Council+Bluffs,+Iowa/Omaha,+NE/Grand+Island,+NE/@40.7489186,-96.7492412,5z/data=!3m1!4b1!4m62!4m61!1m5!1m1!1s0x89c24fa5d33f083b:0xc80b8f06e177fe62!2m2!1d-74.0059728!2d40.7127753!1m5!1m1!1s0x880e456bec363d7d:0x9f9e66f7a36bc042!2m2!1d-88.0817251!2d41.525031!1m5!1m1!1s0x87e232c357044b77:0xecc19371d71475f1!2m2!1d-90.5787476!2d41.5094771!1m5!1m1!1s0x87e23f0ad2e7aeb3:0x43aab678fe9e328d!2m2!1d-90.3434615!2d41.5817!1m5!1m1!1s0x87ee99a4c1611ee7:0x710028512691e4b2!2m2!1d-93.6249593!2d41.5868353!1m5!1m1!1s0x87ec39285c3540b9:0x84581d5d4142c1ec!2m2!1d-94.017453!2d41.6144325!1m5!1m1!1s0x87ec60c99a9a7d0f:0xb0c00a66d8103978!2m2!1d-94.3183715!2d41.5034243!1m5!1m1!1s0x879381cfa109322f:0xbe4e81fa5222799e!2m2!1d-95.8608333!2d41.2619444!1m5!1m1!1s0x87938dc8b50cfced:0x46424d4fae37b604!2m2!1d-95.9345034!2d41.2565369!1m5!1m1!1s0x87998644ec7765f7:0xa12d5b784951b17b!2m2!1d-98.3420118!2d40.9263957!3e0\n","permalink":"https://notes.0081800.xyz/notes/20230508154357-met_eddie/","summary":"tags: On The Road https://www.google.com/maps/dir/New+York/Joliet/Rock+Island,+IL/Rapids+City,+IL/Des+Moines,+IA/Adel,+Iowa/Stuart,+Iowa/Council+Bluffs,+Iowa/Omaha,+NE/Grand+Island,+NE/@40.7489186,-96.7492412,5z/data=!3m1!4b1!4m62!4m61!1m5!1m1!1s0x89c24fa5d33f083b:0xc80b8f06e177fe62!2m2!1d-74.0059728!2d40.7127753!1m5!1m1!1s0x880e456bec363d7d:0x9f9e66f7a36bc042!2m2!1d-88.0817251!2d41.525031!1m5!1m1!1s0x87e232c357044b77:0xecc19371d71475f1!2m2!1d-90.5787476!2d41.5094771!1m5!1m1!1s0x87e23f0ad2e7aeb3:0x43aab678fe9e328d!2m2!1d-90.3434615!2d41.5817!1m5!1m1!1s0x87ee99a4c1611ee7:0x710028512691e4b2!2m2!1d-93.6249593!2d41.5868353!1m5!1m1!1s0x87ec39285c3540b9:0x84581d5d4142c1ec!2m2!1d-94.017453!2d41.6144325!1m5!1m1!1s0x87ec60c99a9a7d0f:0xb0c00a66d8103978!2m2!1d-94.3183715!2d41.5034243!1m5!1m1!1s0x879381cfa109322f:0xbe4e81fa5222799e!2m2!1d-95.8608333!2d41.2619444!1m5!1m1!1s0x87938dc8b50cfced:0x46424d4fae37b604!2m2!1d-95.9345034!2d41.2565369!1m5!1m1!1s0x87998644ec7765f7:0xa12d5b784951b17b!2m2!1d-98.3420118!2d40.9263957!3e0","title":"Met Eddie"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20230508154308-on_the_road/","summary":"","title":"On The Road"},{"content":" tags: Emacs, macOS source: Simon, Ben. “Gotcha: Emacs on Mac OS: Too Many Files Open.” Accessed April 18, 2023. https://www.blogbyben.com/2022/05/gotcha-emacs-on-mac-os-too-many-files.html. Add below code snippet to your init.el:\n(defun file-notify-rm-all-watches () \u0026#34;Remove all existing file notification watches from Emacs.\u0026#34; (interactive) (maphash (lambda (key _value) (file-notify-rm-watch key)) file-notify-descriptors)) Then just execute M-x file-notify-rm-all-watches when you meet this problem next time.\n","permalink":"https://notes.0081800.xyz/notes/20230418212343-emacs_on_macos_too_many_files_open/","summary":"tags: Emacs, macOS source: Simon, Ben. “Gotcha: Emacs on Mac OS: Too Many Files Open.” Accessed April 18, 2023. https://www.blogbyben.com/2022/05/gotcha-emacs-on-mac-os-too-many-files.html. Add below code snippet to your init.el:\n(defun file-notify-rm-all-watches () \u0026#34;Remove all existing file notification watches from Emacs.\u0026#34; (interactive) (maphash (lambda (key _value) (file-notify-rm-watch key)) file-notify-descriptors)) Then just execute M-x file-notify-rm-all-watches when you meet this problem next time.","title":"Emacs on Macos: Too Many Files Open"},{"content":" tags: AI Clone nltk_data\ngit clone https://github.com/nltk/nltk_data.git ~/.local/nltk_data Link nltk_data\nln -sf ~/.local/nltk_data/packages ~/nltk_data Unzip\ncd ~/nltk_data/path unzip xx.zip ","permalink":"https://notes.0081800.xyz/notes/20230418151139-nltk_data/","summary":" tags: AI Clone nltk_data\ngit clone https://github.com/nltk/nltk_data.git ~/.local/nltk_data Link nltk_data\nln -sf ~/.local/nltk_data/packages ~/nltk_data Unzip\ncd ~/nltk_data/path unzip xx.zip ","title":"NLTK Data"},{"content":" tags: Linux ","permalink":"https://notes.0081800.xyz/notes/20230417095019-bash/","summary":" tags: Linux ","title":"Bash"},{"content":" tags: Cheatsheet, Bash source: Devhints.io cheatsheets. “Bash Scripting Cheatsheet.” Accessed April 17, 2023. https://devhints.io/bash. ","permalink":"https://notes.0081800.xyz/notes/20230417095009-bash_scripting_cheatsheet/","summary":" tags: Cheatsheet, Bash source: Devhints.io cheatsheets. “Bash Scripting Cheatsheet.” Accessed April 17, 2023. https://devhints.io/bash. ","title":"Bash scripting cheatsheet"},{"content":" tags: Cheatsheet, Linux source: “Searchable Linux Syscall Table for X86 and X86_64 | PyTux.” Accessed April 17, 2023. https://filippo.io/linux-syscall-table/. ","permalink":"https://notes.0081800.xyz/notes/20230417094911-searchable_linux_syscall_table_for_x86_and_x86_64/","summary":" tags: Cheatsheet, Linux source: “Searchable Linux Syscall Table for X86 and X86_64 | PyTux.” Accessed April 17, 2023. https://filippo.io/linux-syscall-table/. ","title":"Searchable Linux Syscall Table for x86 and x86_64"},{"content":" tags: Starcoin Web3 StarTrek, Sign Message Invocation Path Dapp request personal_sign1\nconst msg = `0x${Buffer.from(exampleMessage, \u0026#39;utf8\u0026#39;).toString(\u0026#39;hex\u0026#39;)}` console.log({ msg }) const networkId = networkDiv.innerHTML const extraParams = { networkId } const sign = await window.starcoin.request({ method: \u0026#39;personal_sign\u0026#39;, // params: [msg, from, \u0026#39;Example password\u0026#39;], // extraParams = params[2] || {}; means it should be an object: // params: [msg, from, { pwd: \u0026#39;Example password\u0026#39; }], params: [msg, from, extraParams], }) Starmask handling request signPersonalMessage\nkeyringController.signPersonalMessage(cleanMsgParams) 2 , 3\n3 types of keyring:4\nSimpleKeyring.signPersonalMessage HdKeyring.signPersonalMessage HdKeyringAptos.signPersonalMessage utils.signedMessage.generateSignedMessage5\nstarcoin.js implementing generatedSignedMessage6 Conclusion Message signed at keyring:\n/** * Sign Personal Message * * Attempts to sign the provided message paramaters. * Prefixes the hash before signing per the personal sign expectation. * * @param {Object} msgParams - The message parameters to sign. * @returns {Promise\u0026lt;Buffer\u0026gt;} The raw signature. */ signPersonalMessage(msgParams, opts = {}) { const address = normalizeAddress(msgParams.from) return this.getKeyringForAccount(address) .then((keyring) =\u0026gt; { return keyring.signPersonalMessage(address, msgParams.rawData, opts) }) } The rawData is built at2:\nconst rawData = Buffer.from(stripHexPrefix(cleanMsgParams.data), \u0026#39;hex\u0026#39;).toString(\u0026#39;utf8\u0026#39;) Then the getEd25519SignMsgBytes will be invoked:\nexport function getEd25519SignMsgBytes( signingMessage: SigningMessage, ): bytes { const hasher = createSigningMessageHasher(); const hashSeedBytes = hasher.get_salt(); const signingMessageBytes = (function () { const se = new BcsSerializer(); signingMessage.serialize(se); return se.getBytes(); })(); const msgBytes = ((a, b) =\u0026gt; { const tmp = new Uint8Array(a.length + b.length); tmp.set(a, 0); tmp.set(b, a.length); return tmp; })(hashSeedBytes, signingMessageBytes); return msgBytes; } The msgBytes is the combination of hashSeedBytes and message itself.\nhttps://starcoin.org/en/developers/others/starcoin_dapp/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://github.com/starcoinorg/starmask-extension/blob/0b8f2c796f3bb45f5dcf46a0ead650fd51e14b2c/app/scripts/metamask-controller.js#L1688-L1691\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://github.com/starcoinorg/stc-keyring-controller/blob/master/index.js#L385-L400\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://github.com/starcoinorg/stc-keyring-controller/blob/master/index.js#L12-L20\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://github.com/starcoinorg/starmask-extension/blob/0b8f2c796f3bb45f5dcf46a0ead650fd51e14b2c/app/scripts/metamask-controller.js#L1695\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://github.com/starcoinorg/starcoin.js/blob/a9b21262f9550cb98aaf7bf9f7ef2d5d2967fc7a/src/utils/signed-message.ts#L55-L67\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://notes.0081800.xyz/notes/20230412102128-starcoin_signing_message/","summary":"tags: Starcoin Web3 StarTrek, Sign Message Invocation Path Dapp request personal_sign1\nconst msg = `0x${Buffer.from(exampleMessage, \u0026#39;utf8\u0026#39;).toString(\u0026#39;hex\u0026#39;)}` console.log({ msg }) const networkId = networkDiv.innerHTML const extraParams = { networkId } const sign = await window.starcoin.request({ method: \u0026#39;personal_sign\u0026#39;, // params: [msg, from, \u0026#39;Example password\u0026#39;], // extraParams = params[2] || {}; means it should be an object: // params: [msg, from, { pwd: \u0026#39;Example password\u0026#39; }], params: [msg, from, extraParams], }) Starmask handling request signPersonalMessage","title":"Starcoin Signing Message"},{"content":" tags: Python ","permalink":"https://notes.0081800.xyz/notes/20230411180138-pyenv/","summary":" tags: Python ","title":"pyenv"},{"content":" tags: Python, pyenv export PYTHON_BUILD_MIRROR_URL_SKIP_CHECKSUM=1 export PYTHON_BUILD_MIRROR_URL=\u0026#34;https://npm.taobao.org/mirrors/python/\u0026#34; ","permalink":"https://notes.0081800.xyz/notes/20230411180124-speedup_python_installation_of_pyenv/","summary":" tags: Python, pyenv export PYTHON_BUILD_MIRROR_URL_SKIP_CHECKSUM=1 export PYTHON_BUILD_MIRROR_URL=\u0026#34;https://npm.taobao.org/mirrors/python/\u0026#34; ","title":"Speedup Python Installation of pyenv"},{"content":" tags: Sign Message The starmask has implemented about signing message of APTOS.\n","permalink":"https://notes.0081800.xyz/notes/20230411092153-aptos_signing_message/","summary":"tags: Sign Message The starmask has implemented about signing message of APTOS.","title":"Aptos Signing Message"},{"content":" tags: Python, LSP\nsource: https://emacs-lsp.github.io/lsp-pyright/#usage-notes\nDownload Default Type Stubs git clone https://github.com/microsoft/python-type-stubs $HOME/.local/src/python-type-stubs Use it in Emacs (setq lsp-pyright-stub-path (concat (getenv \u0026#34;HOME\u0026#34;) \u0026#34;/.local//src/python-type-stubs\u0026#34;)) ;; example Add Django Type Stubs git clone git@github.com:typeddjango/django-stubs.git ~/.local/src/django-stubs ln -sf ~/.local/src/django-stubs/django-stubs ~/.local/src/python-type-stubs/django Add Celery Type Stubs git clone https://github.com/sbdchd/celery-types ~/.local/src/celery-types ln -sf ~/.local/src/celery-types/amqp-stubs ~/.local/src/python-type-stubs/amqp ln -sf ~/.local/src/celery-types/billiard-stubs ~/.local/src/python-type-stubs/billiard ln -sf ~/.local/src/celery-types/celery-stubs ~/.local/src/python-type-stubs/celery ln -sf ~/.local/src/celery-types/django_celery_results-stubs ~/.local/src/python-type-stubs/django_celery_results ln -sf ~/.local/src/celery-types/ephem-stubs ~/.local/src/python-type-stubs/ephem ln -sf ~/.local/src/celery-types/kombu-stubs ~/.local/src/python-type-stubs/kombu ln -sf ~/.local/src/celery-types/vine-stubs ~/.local/src/python-type-stubs/vine ","permalink":"https://notes.0081800.xyz/notes/20230410161857-pyright_type_stubs/","summary":"tags: Python, LSP\nsource: https://emacs-lsp.github.io/lsp-pyright/#usage-notes\nDownload Default Type Stubs git clone https://github.com/microsoft/python-type-stubs $HOME/.local/src/python-type-stubs Use it in Emacs (setq lsp-pyright-stub-path (concat (getenv \u0026#34;HOME\u0026#34;) \u0026#34;/.local//src/python-type-stubs\u0026#34;)) ;; example Add Django Type Stubs git clone git@github.com:typeddjango/django-stubs.git ~/.local/src/django-stubs ln -sf ~/.local/src/django-stubs/django-stubs ~/.local/src/python-type-stubs/django Add Celery Type Stubs git clone https://github.com/sbdchd/celery-types ~/.local/src/celery-types ln -sf ~/.local/src/celery-types/amqp-stubs ~/.local/src/python-type-stubs/amqp ln -sf ~/.local/src/celery-types/billiard-stubs ~/.local/src/python-type-stubs/billiard ln -sf ~/.local/src/celery-types/celery-stubs ~/.local/src/python-type-stubs/celery ln -sf ~/.local/src/celery-types/django_celery_results-stubs ~/.local/src/python-type-stubs/django_celery_results ln -sf ~/.local/src/celery-types/ephem-stubs ~/.local/src/python-type-stubs/ephem ln -sf ~/.local/src/celery-types/kombu-stubs ~/.local/src/python-type-stubs/kombu ln -sf ~/.","title":"Pyright Type Stubs"},{"content":" tags: Memory Management, Heap Fragmentation ","permalink":"https://notes.0081800.xyz/notes/20230407181930-jemalloc/","summary":" tags: Memory Management, Heap Fragmentation ","title":"jemalloc"},{"content":" tags: Memory Model ","permalink":"https://notes.0081800.xyz/notes/20230407181835-memory_management/","summary":" tags: Memory Model ","title":"Memory Management"},{"content":" tags: Memory Management ","permalink":"https://notes.0081800.xyz/notes/20230407181757-heap_fragmentation/","summary":" tags: Memory Management ","title":"Heap Fragmentation"},{"content":" tags: Heap Fragmentation, jemalloc source:Svix Blog. “Spotting and Avoiding Heap Fragmentation in Rust Applications,” April 4, 2023. https://www.svix.com/blog/heap-fragmentation-in-rust-applications/. Heap fragmentation cause stair-step memeory usage, use jemalloc to solve heap fragmentation.\n","permalink":"https://notes.0081800.xyz/notes/20230407181742-spotting_and_avoiding_heap_fragmentation_in_rust_applications/","summary":"tags: Heap Fragmentation, jemalloc source:Svix Blog. “Spotting and Avoiding Heap Fragmentation in Rust Applications,” April 4, 2023. https://www.svix.com/blog/heap-fragmentation-in-rust-applications/. Heap fragmentation cause stair-step memeory usage, use jemalloc to solve heap fragmentation.","title":"Spotting and Avoiding Heap Fragmentation in Rust Applications"},{"content":" tags: Blockchain ","permalink":"https://notes.0081800.xyz/notes/20230407180408-sign_message/","summary":" tags: Blockchain ","title":"Sign Message"},{"content":" tags: Tron, Sign Message Three methods tronweb.trx.signMessageV11 tronweb.trx.signMessageV22 tronweb.trx._signtypeddata3, 4 https://github.com/tronprotocol/tronweb/blob/859253856c79d3aff26ec6c89afefc73840d648d/src/lib/trx.js#L727-L739\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://github.com/tronprotocol/tronweb/blob/859253856c79d3aff26ec6c89afefc73840d648d/src/utils/message.js#L8-L18\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://github.com/tronprotocol/tronweb/blob/859253856c79d3aff26ec6c89afefc73840d648d/src/utils/crypto.js#L89\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nTIP 104\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://notes.0081800.xyz/notes/20230407180424-tron_signing_data/","summary":"tags: Tron, Sign Message Three methods tronweb.trx.signMessageV11 tronweb.trx.signMessageV22 tronweb.trx._signtypeddata3, 4 https://github.com/tronprotocol/tronweb/blob/859253856c79d3aff26ec6c89afefc73840d648d/src/lib/trx.js#L727-L739\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://github.com/tronprotocol/tronweb/blob/859253856c79d3aff26ec6c89afefc73840d648d/src/utils/message.js#L8-L18\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://github.com/tronprotocol/tronweb/blob/859253856c79d3aff26ec6c89afefc73840d648d/src/utils/crypto.js#L89\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nTIP 104\u0026#160;\u0026#x21a9;\u0026#xfe0e;","title":"Tron Signing Data"},{"content":" tags: Ethereum, Sign Message source: “Signing Data | MetaMask Docs.” Accessed April 6, 2023. https://docs.metamask.io/guide/signing-data.html#signtypeddata-v4. Five Methods1 eth_sign allow to sign arbitrary hash.2 personal_sign add prefix to data and human readable text that encoded UFT-8.3 signTypedData or signTypedData_v1 first release that lacked some later security improvements. signTypedData_v3 signTypedData_v4 compatible with V3. Differences Between V3 and V44 Some input types that V3 doesn\u0026rsquo;t support but V4 does:\nCustom type array Custom type with null input Some input types that V4 doesn\u0026rsquo;t support but V3 does:\nAtomic type with undefined input Dynamic type with undefined input Atomic types are of a fixed size (e.g. int8d), whereas dynamic types can vary in size (e.g. strings, bytes). We also test arrays of each of these types.\nA Brief History\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://github.com/MetaMask/test-dapp/blob/fb848448bd58d4ef725d6817ad2f99bc86827a27/src/index.js#L1149-L1150\u0026#160;\u0026#x21a9;\u0026#xfe0e;\npackages/util/src/signature.ts#L183-L193\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nsrc/sign-typed-data.test.ts#L343-L384\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://notes.0081800.xyz/notes/20230406090923-ethereum_signing_data/","summary":"tags: Ethereum, Sign Message source: “Signing Data | MetaMask Docs.” Accessed April 6, 2023. https://docs.metamask.io/guide/signing-data.html#signtypeddata-v4. Five Methods1 eth_sign allow to sign arbitrary hash.2 personal_sign add prefix to data and human readable text that encoded UFT-8.3 signTypedData or signTypedData_v1 first release that lacked some later security improvements. signTypedData_v3 signTypedData_v4 compatible with V3. Differences Between V3 and V44 Some input types that V3 doesn\u0026rsquo;t support but V4 does:\nCustom type array Custom type with null input Some input types that V4 doesn\u0026rsquo;t support but V3 does:","title":"Ethereum Signing Data"},{"content":" tags: Go, GDB Enable Core Dumps ulimit -S -c unlimited Confirm or Change The Location of Core Dumps sysctl -w kernel.core_pattern=/tmp/core.%e.%p # Or echo \u0026#39;/tmp/core.%e.%p\u0026#39; | tee /proc/sys/kernel/core_pattern Set GOTRACEBACK Environment Variable to Let Go Program Core Dumps when Panic export GOTRACEBACK=crash Run Go Program and Wait Segmentation Fault Use GDB to Debug gdb /path/to/goprogram /tmp/core-xx-xx Then use thread apply all bt to see all backtraces, include compiled C code.\nNote: -g option should be applied to the compiled C code to generate debug symbols.\n","permalink":"https://notes.0081800.xyz/notes/20230405200523-use_gdb_to_debug_cgo_segmentation_fault/","summary":"tags: Go, GDB Enable Core Dumps ulimit -S -c unlimited Confirm or Change The Location of Core Dumps sysctl -w kernel.core_pattern=/tmp/core.%e.%p # Or echo \u0026#39;/tmp/core.%e.%p\u0026#39; | tee /proc/sys/kernel/core_pattern Set GOTRACEBACK Environment Variable to Let Go Program Core Dumps when Panic export GOTRACEBACK=crash Run Go Program and Wait Segmentation Fault Use GDB to Debug gdb /path/to/goprogram /tmp/core-xx-xx Then use thread apply all bt to see all backtraces, include compiled C code.","title":"Use GDB to Debug Cgo Segmentation Fault"},{"content":" tags: Ethereum Layer 2 Background You may meet the below error when you\u0026rsquo;re trying to transfer all your ETH from one address to another address:\ninvalid transaction: insufficient funds for l1fee + gas * price + value\nThe reason is that the Layer 1 fee are included in Scroll\u0026rsquo;s gas fee system, but the wallet only exclude the Layer 2 gas fee to do so when you transfer all your ETH. 1\nHow the L1 Fee be Caculated? Some state is stored in the state store slots2, which including:\nl1BaseFee precision overhead scalar You got some RLP3 encoded raw data when you send tx to Scroll, which need to be stored to the Layer 1 network as a calldata, which requires fee charge4. let\u0026rsquo;s name it:\nraw Finally we put all these together5\n// EIP-1559 // 16 * non-zero calldata bytes + 4 * zero calldata bytes l1GasUsed = calcCalldataFee(calldata) + overhead l1Gas = round((l1GasUsed * l1GasPrice * scalar) / precision) How to Retrieve State Slots? L1BaseFeeSlot POST https://alpha-rpc.scroll.io/l2 Content-Type: application/json { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 40, \u0026#34;method\u0026#34;: \u0026#34;eth_getStorageAt\u0026#34;, \u0026#34;params\u0026#34;: [ \u0026#34;0x5300000000000000000000000000000000000002\u0026#34;, \u0026#34;0x1\u0026#34;] } OverheadSlot POST https://alpha-rpc.scroll.io/l2 Content-Type: application/json { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 40, \u0026#34;method\u0026#34;: \u0026#34;eth_getStorageAt\u0026#34;, \u0026#34;params\u0026#34;: [ \u0026#34;0x5300000000000000000000000000000000000002\u0026#34;, \u0026#34;0x2\u0026#34;] } ScalarSlot POST https://alpha-rpc.scroll.io/l2 Content-Type: application/json { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 40, \u0026#34;method\u0026#34;: \u0026#34;eth_getStorageAt\u0026#34;, \u0026#34;params\u0026#34;: [ \u0026#34;0x5300000000000000000000000000000000000002\u0026#34;, \u0026#34;0x3\u0026#34;] } In a Batch POST https://alpha-rpc.scroll.io/l2 Content-Type: application/json [ { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;method\u0026#34;: \u0026#34;eth_getStorageAt\u0026#34;, \u0026#34;params\u0026#34;: [ \u0026#34;0x5300000000000000000000000000000000000002\u0026#34;, \u0026#34;0x1\u0026#34;] }, { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 2, \u0026#34;method\u0026#34;: \u0026#34;eth_getStorageAt\u0026#34;, \u0026#34;params\u0026#34;: [ \u0026#34;0x5300000000000000000000000000000000000002\u0026#34;, \u0026#34;0x2\u0026#34;] }, { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 3, \u0026#34;method\u0026#34;: \u0026#34;eth_getStorageAt\u0026#34;, \u0026#34;params\u0026#34;: [ \u0026#34;0x5300000000000000000000000000000000000002\u0026#34;, \u0026#34;0x3\u0026#34;] } ] VerifyFee\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nL1 Gas Definition\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nRecursive-length prefix (RLP) serialization\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nEIP-1559\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nCalculateL1Fee\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://notes.0081800.xyz/notes/20230323083609-scrolll2_how_to_cacluate_l1fee/","summary":"tags: Ethereum Layer 2 Background You may meet the below error when you\u0026rsquo;re trying to transfer all your ETH from one address to another address:\ninvalid transaction: insufficient funds for l1fee + gas * price + value\nThe reason is that the Layer 1 fee are included in Scroll\u0026rsquo;s gas fee system, but the wallet only exclude the Layer 2 gas fee to do so when you transfer all your ETH.","title":"ScrollL2: How to Caculate L1Fee"},{"content":" tags: Yubikey source: “How to Yubikey: A Configuration Cheatsheet,” March 1, 2023. https://debugging.works/blog/yubikey-cheatsheet/. ","permalink":"https://notes.0081800.xyz/notes/20230311085820-how_to_yubikey_a_configuration_cheatsheet/","summary":" tags: Yubikey source: “How to Yubikey: A Configuration Cheatsheet,” March 1, 2023. https://debugging.works/blog/yubikey-cheatsheet/. ","title":"How to Yubikey: a configuration cheatsheet"},{"content":" tags: Python, High Performance source: Textual Documentation. “Textual - Overhead of Python Asyncio Tasks,” March 8, 2023. https://textual.textualize.io/blog/2023/03/08/overhead-of-python-asyncio-tasks/. Tasks of asyncio from create to run, then shutdown is about: 260K tasks per second.\n","permalink":"https://notes.0081800.xyz/notes/20230309093002-overhead_of_python_asyncio_tasks_260k_s/","summary":"tags: Python, High Performance source: Textual Documentation. “Textual - Overhead of Python Asyncio Tasks,” March 8, 2023. https://textual.textualize.io/blog/2023/03/08/overhead-of-python-asyncio-tasks/. Tasks of asyncio from create to run, then shutdown is about: 260K tasks per second.","title":"Overhead of Python asyncio Tasks: 260K/s"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20230225090409-yubikey/","summary":"","title":"Yubikey"},{"content":" tags: Yubikey source: BHIS. “How to Weaponize the Yubikey.” Black Hills Information Security (blog), May 2, 2019. https://www.blackhillsinfosec.com/how-to-weaponize-the-yubikey/. ","permalink":"https://notes.0081800.xyz/notes/20230225090358-how_to_weaponize_the_yubikey/","summary":" tags: Yubikey source: BHIS. “How to Weaponize the Yubikey.” Black Hills Information Security (blog), May 2, 2019. https://www.blackhillsinfosec.com/how-to-weaponize-the-yubikey/. ","title":"How to Weaponize the Yubikey"},{"content":" tags: Online Tools,Microstartup\nsource: https://twitter.com/vikingmute/status/1597417185470992384\nHTTPS: Let\u0026rsquo;s Encrypt(acme.sh)\n企业邮箱：\nym.163.coom（3G 容量） zoho.com.cn/mail/ landing page 搭建\nhttps://tailblocks.cc/ https://landing.ant.design/ 图标素材\nfontawesome.com iconfinder.com 音乐素材\nhttps://uppbeat.io 插画\nhttps://undraw.co/illustrations https://www.manypixels.co/gallery storyset.com CDN\ncloudflare.com jsdelivr.com 静态托管\npages.cloudflare.com（无限请求和无线带宽） vercel.com(1G 带宽限制) 免费域名\nfreenom.com 免费 PS\nphotopea.com 非关系数据库\nAWS DynamoDB 25GB 存储 + 1G 传输,https://aws.amazon.com/cn/dynamodb/ Azure CosmosDB 25GB 存储，兼容 MongoDB 以及 PostgresQL 关系型数据库\nhttps://planetscale.com 5GB 存储，每月 10亿行读，1000万行写。 监控工具\nhttps://uptimerobot.com/ 对象存储\n网易云 nos https://163yun.com/nos/free 50GB 存储，20GB下行流量/月 又拍云联盟 https://upyun.com/league 10GB 存储，25GB流量/月 https://cloudinary.com/（国外），易用、强大、25GB存储，每月 25,000 次图片转换，25GB 流量。 客户信息\nhttps://crisp.chat/ IP 信息查询\nhttps://ipapi.co/ ","permalink":"https://notes.0081800.xyz/notes/20230224101131-%E4%BC%98%E8%B4%A8%E5%85%8D%E8%B4%B9%E6%9C%8D%E5%8A%A1/","summary":"tags: Online Tools,Microstartup\nsource: https://twitter.com/vikingmute/status/1597417185470992384\nHTTPS: Let\u0026rsquo;s Encrypt(acme.sh)\n企业邮箱：\nym.163.coom（3G 容量） zoho.com.cn/mail/ landing page 搭建\nhttps://tailblocks.cc/ https://landing.ant.design/ 图标素材\nfontawesome.com iconfinder.com 音乐素材\nhttps://uppbeat.io 插画\nhttps://undraw.co/illustrations https://www.manypixels.co/gallery storyset.com CDN\ncloudflare.com jsdelivr.com 静态托管\npages.cloudflare.com（无限请求和无线带宽） vercel.com(1G 带宽限制) 免费域名\nfreenom.com 免费 PS\nphotopea.com 非关系数据库\nAWS DynamoDB 25GB 存储 + 1G 传输,https://aws.amazon.com/cn/dynamodb/ Azure CosmosDB 25GB 存储，兼容 MongoDB 以及 PostgresQL 关系型数据库\nhttps://planetscale.com 5GB 存储，每月 10亿行读，1000万行写。 监控工具\nhttps://uptimerobot.com/ 对象存储\n网易云 nos https://163yun.com/nos/free 50GB 存储，20GB下行流量/月 又拍云联盟 https://upyun.com/league 10GB 存储，25GB流量/月 https://cloudinary.","title":"优质免费服务"},{"content":" tags: Ethereum Before EIP 1559 The miner receive both fees and block reward.\nAfter EIP 1559 The fee divide to 2 parts:\nBase Fee Priority Fee The miner receive priority fee and block reward, the base fee will be burned.\n","permalink":"https://notes.0081800.xyz/notes/20230221094510-eip_1559/","summary":"tags: Ethereum Before EIP 1559 The miner receive both fees and block reward.\nAfter EIP 1559 The fee divide to 2 parts:\nBase Fee Priority Fee The miner receive priority fee and block reward, the base fee will be burned.","title":"EIP 1559"},{"content":"","permalink":"https://notes.0081800.xyz/topic/20230220113214-papers/","summary":"","title":"Papers"},{"content":" source: https://github.com/papers-we-love/papers-we-love tags: Papers ","permalink":"https://notes.0081800.xyz/notes/20230220113243-papers_we_love/","summary":" source: https://github.com/papers-we-love/papers-we-love tags: Papers ","title":"Papers We Love"},{"content":" source: The Refreshingly Rewarding Realm of Research Papers, 2015. https://www.youtube.com/watch?v=8eRx5Wo3xYA. tags: Papers Finding Something to Read Sources:\nColleagues Papers We Love the morning paper With some topics/categories, to search on ACM Classification System(Require membership) Librarian Reading \u0026amp; Comprehending 3 Passes:\nGo though: title/sections/concclusions/references. (10min) Read more closely (1-2 hours) Mark unread References Step though closely Summarize in 1-2 sentences; outline major contributes; note strengths/weaknesses (couple hours) Implementing Use familar tools, except the paper used specific tool. Be aware to pseudo code. Prepare to work and results Test early. Test often. Interacting with the authors. ","permalink":"https://notes.0081800.xyz/notes/20230220113142-the_refreshingly_rewarding_realm_of_research_papers/","summary":"source: The Refreshingly Rewarding Realm of Research Papers, 2015. https://www.youtube.com/watch?v=8eRx5Wo3xYA. tags: Papers Finding Something to Read Sources:\nColleagues Papers We Love the morning paper With some topics/categories, to search on ACM Classification System(Require membership) Librarian Reading \u0026amp; Comprehending 3 Passes:\nGo though: title/sections/concclusions/references. (10min) Read more closely (1-2 hours) Mark unread References Step though closely Summarize in 1-2 sentences; outline major contributes; note strengths/weaknesses (couple hours) Implementing Use familar tools, except the paper used specific tool.","title":"The Refreshingly Rewarding Realm of Research Papers"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20230218143222-mpc/","summary":"","title":"MPC"},{"content":" tags: Database, PostgresQL source: Crunchy Data. “Five Tips For a Healthier Postgres Database in the New Year.” Accessed February 13, 2023. https://crunchydata.com/blog/five-tips-for-a-healthier-postgres-database-in-the-new-year. ","permalink":"https://notes.0081800.xyz/notes/20230213164423-five_tips_for_a_healthier_postgres_database_in_the_new_year/","summary":" tags: Database, PostgresQL source: Crunchy Data. “Five Tips For a Healthier Postgres Database in the New Year.” Accessed February 13, 2023. https://crunchydata.com/blog/five-tips-for-a-healthier-postgres-database-in-the-new-year. ","title":"Five Tips For a Healthier Postgres Database in the New Year"},{"content":" tags: Ethereum,Blockchain,Tron source: https://ethereum.stackexchange.com/a/110498 const data = \u0026#39;0x7ff36ab50000000000000000000000000000000000000000000000bc18ba4144048bbab00000000000000000000000000000000000000000000000000000000000000080000000000000000000000000c0c5eb43e2df059e3be6e4fb0284c283caa5991900000000000000000000000000000000000000000000000000000000614d87a80000000000000000000000000000000000000000000000000000000000000002000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c00000000000000000000000008ba0619b1e7a582e0bce5bbe9843322c954c340\u0026#39;; ethers.utils.defaultAbiCoder.decode( [\u0026#39;uint256\u0026#39;, \u0026#39;address[]\u0026#39;, \u0026#39;address\u0026#39;, \u0026#39;uint256\u0026#39;], ethers.utils.hexDataSlice(data, 4) ) // gives: [e, [\u0026#34;0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\u0026#34;, \u0026#34;0x08ba0619b1e7A582E0BCe5BBE9843322C954C340\u0026#34;], \u0026#34;0xC0C5eb43E2dF059e3Be6E4fb0284C283CAa59919\u0026#34;, e] (4) Online tools: Playground.\n","permalink":"https://notes.0081800.xyz/notes/20230203133843-decode_input_data_of_ethereum/","summary":"tags: Ethereum,Blockchain,Tron source: https://ethereum.stackexchange.com/a/110498 const data = \u0026#39;0x7ff36ab50000000000000000000000000000000000000000000000bc18ba4144048bbab00000000000000000000000000000000000000000000000000000000000000080000000000000000000000000c0c5eb43e2df059e3be6e4fb0284c283caa5991900000000000000000000000000000000000000000000000000000000614d87a80000000000000000000000000000000000000000000000000000000000000002000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c00000000000000000000000008ba0619b1e7a582e0bce5bbe9843322c954c340\u0026#39;; ethers.utils.defaultAbiCoder.decode( [\u0026#39;uint256\u0026#39;, \u0026#39;address[]\u0026#39;, \u0026#39;address\u0026#39;, \u0026#39;uint256\u0026#39;], ethers.utils.hexDataSlice(data, 4) ) // gives: [e, [\u0026#34;0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\u0026#34;, \u0026#34;0x08ba0619b1e7A582E0BCe5BBE9843322C954C340\u0026#34;], \u0026#34;0xC0C5eb43E2dF059e3Be6E4fb0284C283CAa59919\u0026#34;, e] (4) Online tools: Playground.","title":"Decode input data of Ethereum"},{"content":" tags: Blockchain ","permalink":"https://notes.0081800.xyz/notes/20230203133859-tron/","summary":" tags: Blockchain ","title":"Tron"},{"content":" tags: Emacs source: http://bjornwestergard.com/log/2022-04-19-hypertext-emacs.gmi C-x C-f M-n to find-file-at-point.\n","permalink":"https://notes.0081800.xyz/notes/20230131105103-hypertext_in_emacs_find_file_at_point/","summary":"tags: Emacs source: http://bjornwestergard.com/log/2022-04-19-hypertext-emacs.gmi C-x C-f M-n to find-file-at-point.","title":"Hypertext in Emacs: find-file-at-point"},{"content":" tags: Solana, Solana 101: 2. Anchor What is Program Derived Address(PDA)?1 A Program Derived Address is simply an account owned by the program, but has no private key. Instead it\u0026rsquo;s signature is obtained by a set of seeds and a bump (a nonce which makes sure it\u0026rsquo;s off curve). \u0026ldquo;Generating\u0026rdquo; a Program Address is different from \u0026ldquo;creating\u0026rdquo; it.\nGenerating One can generate a PDA using Pubkey::find_program_address in Rust or PublicKey.findProgramAddressSync in JavaScript; Creating a PDA essentially means to initialize the address with space and set the state to it. #+end_quote\nHow to Generate a PDA? In frontend by using @solana/web3.js:\nimport * as web3 from \u0026#34;@solana/web3.js\u0026#34;; import { Buffer } from \u0026#39;buffer\u0026#39;; const keypair = await connectWallet(); const programId = \u0026#34;Cj9VjDrohXuz914FNbaTMmEqYXkLkJKZn9FCq4UGGGwr\u0026#34;; const [pda, dump] = web3.PublicKey.findProgramAddressSync( [ Buffer.from(\u0026#34;seed1\u0026#34;), keypair.publicKey, ], new web3.PublicKey(programId), ); Summary:\nSeeds can be used to distinguish different purpose of PDA for one program; Multipe items of bump shall be returned, but the first dump is called \u0026ldquo;canonical bump\u0026rdquo;; bump is needed when to use PDA sign tx on chain via program. How the PDA be Created By a Program?2 Change the owner of PDA to the specific program by AccountInfo.assign; Transfer some lamports from funding account to the PDA to pay the rent; Allocate data space by AccountInfo.realloc. // Assessing required lamports and creating transaction instruction let lamports_required = Rent::get()?.minimum_balance(ACCOUNT_DATA_LEN); let create_pda_account_ix = system_instruction::create_account( \u0026amp;funding_account.key, \u0026amp;pda_account.key, lamports_required, ACCOUNT_DATA_LEN.try_into().unwrap(), \u0026amp;program_id, ); // Invoking the instruction but with PDAs as additional signer invoke_signed( \u0026amp;create_pda_account_ix, \u0026amp;[ funding_account.clone(), pda_account.clone(), system_program.clone(), ], \u0026amp;[signers_seeds], )?; How the PDA be Created By anchor?3 By using #[account(init)] macro attribute:\n#[account] pub struct UserStats { level: u16, name: String, bump: u8, } // validation struct #[derive(Accounts)] pub struct CreateUserStats\u0026lt;\u0026#39;info\u0026gt; { #[account(mut)] pub user: Signer\u0026lt;\u0026#39;info\u0026gt;, // space: 8 discriminator + 2 level + 4 name length + 200 name + 1 bump #[account( init, payer = user, space = 8 + 2 + 4 + 200 + 1, seeds = [b\u0026#34;user-stats\u0026#34;, user.key().as_ref()], bump )] pub user_stats: Account\u0026lt;\u0026#39;info, UserStats\u0026gt;, pub system_program: Program\u0026lt;\u0026#39;info, System\u0026gt;, } Program Derived Addresses (PDAs)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nHow to create a PDA\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nPDAs\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://notes.0081800.xyz/notes/20221226154617-solana_pda/","summary":"tags: Solana, Solana 101: 2. Anchor What is Program Derived Address(PDA)?1 A Program Derived Address is simply an account owned by the program, but has no private key. Instead it\u0026rsquo;s signature is obtained by a set of seeds and a bump (a nonce which makes sure it\u0026rsquo;s off curve). \u0026ldquo;Generating\u0026rdquo; a Program Address is different from \u0026ldquo;creating\u0026rdquo; it.\nGenerating One can generate a PDA using Pubkey::find_program_address in Rust or PublicKey.","title":"Solana PDA"},{"content":" tags: Nginx One Endpoint for Both WebSocket and Normal Requests,Solana,Solana 101: Create an Escrow dApp I met a lot network issues about connecting to RPC node of Solana, so I\u0026rsquo;m using a nginx server as a reverse proxy to bypass this problem:\nlocation / { # https://serverfault.com/a/923254 try_files /nonexistent @$http_upgrade; } location @ { proxy_pass https://api.testnet.solana.com; proxy_read_timeout 300s; proxy_send_timeout 300s; proxy_set_header Host \u0026#34;api.testnet.solana.com\u0026#34;; } location @websocket { proxy_redirect off; proxy_pass https://api.testnet.solana.com; proxy_http_version 1.1; proxy_read_timeout 300s; proxy_send_timeout 300s; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \u0026#34;Upgrade\u0026#34;; } ","permalink":"https://notes.0081800.xyz/notes/20221224153042-reverse_proxy_to_bypass_network_issue_of_solana_rpc_node/","summary":"tags: Nginx One Endpoint for Both WebSocket and Normal Requests,Solana,Solana 101: Create an Escrow dApp I met a lot network issues about connecting to RPC node of Solana, so I\u0026rsquo;m using a nginx server as a reverse proxy to bypass this problem:\nlocation / { # https://serverfault.com/a/923254 try_files /nonexistent @$http_upgrade; } location @ { proxy_pass https://api.testnet.solana.com; proxy_read_timeout 300s; proxy_send_timeout 300s; proxy_set_header Host \u0026#34;api.testnet.solana.com\u0026#34;; } location @websocket { proxy_redirect off; proxy_pass https://api.","title":"Reverse Proxy to bypass Network Issue of Solana RPC Node"},{"content":" tags: Linux ","permalink":"https://notes.0081800.xyz/notes/20221224152920-nginx/","summary":" tags: Linux ","title":"Nginx"},{"content":" tags: Nginx source: https://serverfault.com/a/923254 server { # ... location / { # If \u0026#34;Websocket\u0026#34; is in Upgrade header, then @websocket will take effect, # otherwise @ will take effect. try_files /nonexistent @$http_upgrade; } location @websocket { # websocket related stuff } location @ { # web related stuff } } ","permalink":"https://notes.0081800.xyz/notes/20221224152905-nginx_one_endpoint_for_both_websocket_and_normal_requests/","summary":" tags: Nginx source: https://serverfault.com/a/923254 server { # ... location / { # If \u0026#34;Websocket\u0026#34; is in Upgrade header, then @websocket will take effect, # otherwise @ will take effect. try_files /nonexistent @$http_upgrade; } location @websocket { # websocket related stuff } location @ { # web related stuff } } ","title":"Nginx One Endpoint for Both WebSocket and Normal Requests"},{"content":"参考 https://github.com/RobbieXie/2020DecorationNote Ideas 在马桶旁边要留一个插座，用于智能马桶垫； 厨房油烟机机一个光滑斜面可以在餐厅坐着看锅里的情况； 全屋六类线预留 AP 和插座，最好能扩大弱电箱能放进去个 NAS； 面向扫地机器人装修； ","permalink":"https://notes.0081800.xyz/notes/20221224110813-decoration/","summary":"参考 https://github.com/RobbieXie/2020DecorationNote Ideas 在马桶旁边要留一个插座，用于智能马桶垫； 厨房油烟机机一个光滑斜面可以在餐厅坐着看锅里的情况； 全屋六类线预留 AP 和插座，最好能扩大弱电箱能放进去个 NAS； 面向扫地机器人装修； ","title":"Decoration"},{"content":" tags: Ethereum Knowning Layer 2 Chain Rollup(or bundle) transactions off-chain to reduce fee and scale capacity, such as Bitcoin Lightning.\nTwo layer 2 rollups Optimistic Rollups Zero-Knowledge Rollups Record on-chain state by writing calldata to L1(Ethereum), which more cheaper than change state on L1 chain.\nFees Some layer 2 chain like Optimism should plus l1 fee when executing transaction on layer 1.1\nMany Ethereum applications display estimated fees to users by multiplying the gas price by the gas limit. However, as discussed earlier, users on Optimism are charged both an L2 execution fee and an L1 data fee. As a result, you should display the sum of both of these fees to give users the most accurate estimate of the total cost of a transaction.\nSome chain will include the fee of layer 1 to layer 2 transaction execution, such as Arbitrum2:\nTools https://l2fees.info/ https://l2beat.com/scaling/tvl/ Displaying fees to users\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nEstimating Gas\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://notes.0081800.xyz/notes/20221223100819-ethereum_layer_2/","summary":"tags: Ethereum Knowning Layer 2 Chain Rollup(or bundle) transactions off-chain to reduce fee and scale capacity, such as Bitcoin Lightning.\nTwo layer 2 rollups Optimistic Rollups Zero-Knowledge Rollups Record on-chain state by writing calldata to L1(Ethereum), which more cheaper than change state on L1 chain.\nFees Some layer 2 chain like Optimism should plus l1 fee when executing transaction on layer 1.1\nMany Ethereum applications display estimated fees to users by multiplying the gas price by the gas limit.","title":"Ethereum Layer 2"},{"content":" tags: Go Elem() Returns Value type T struct { } t := \u0026amp;T{} v := reflect.New(reflect.TypeOf(t)).Elem() // type of v is `T` Interface() Returns Pointer type T struct { } t := \u0026amp;T{} v := reflect.New(reflect.TypeOf(t)).Interface() // type of v is `\u0026amp;T` ","permalink":"https://notes.0081800.xyz/notes/20221123104729-go_reflect/","summary":" tags: Go Elem() Returns Value type T struct { } t := \u0026amp;T{} v := reflect.New(reflect.TypeOf(t)).Elem() // type of v is `T` Interface() Returns Pointer type T struct { } t := \u0026amp;T{} v := reflect.New(reflect.TypeOf(t)).Interface() // type of v is `\u0026amp;T` ","title":"Go Reflect"},{"content":" tags: Solana 101: Create an Escrow dApp ","permalink":"https://notes.0081800.xyz/notes/20221122204630-solana_101_5_escrow_dapp/","summary":" tags: Solana 101: Create an Escrow dApp ","title":"Solana 101: 5. Escrow dApp"},{"content":" tags: Solana 101: Create an Escrow dApp 连接钱包 安装 Phantom 钱包； 使用 @solana/wallet-adapter 连接钱包。官方提供了 React 相关的实现，Vue 可以通过社区提供的库：https://github.com/lorisleiva/solana-wallets-vue。 npm install solana-wallets-vue @solana/wallet-adapter-wallets 创建 SPL Token 安装依赖 npm install --save @solana/spl-token 创建代币 通过 Token Program 创建 Token，Solana 通过其特有的账号机制，通过创建一个账号并将 Owner 设置为一个统一的 Token Program 即可发行一种代币。1\n发行代币 要持有代币必须创建一个对应的 Associated Token Account（ATA），也就是要接收一个代币首先要检查有没有对应代币的 ATA，没有则创建，然后给对应的 ATA 转移代币。\n代币转帐 燃烧代币 SPL Token 交互：授权 Program 转帐 Libraries:\nspl_associated_token_account Steps:\nDelegate token to Program \u0026ndash; in frontend. Create a Associated Token Account for Program to hold token. Q: How to avoid duplicated initialization? A: data size of account. Program: Transfer token from wallet to Program USDT\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://notes.0081800.xyz/notes/20221122204508-solana_101_3_create_a_spl_token/","summary":"tags: Solana 101: Create an Escrow dApp 连接钱包 安装 Phantom 钱包； 使用 @solana/wallet-adapter 连接钱包。官方提供了 React 相关的实现，Vue 可以通过社区提供的库：https://github.com/lorisleiva/solana-wallets-vue。 npm install solana-wallets-vue @solana/wallet-adapter-wallets 创建 SPL Token 安装依赖 npm install --save @solana/spl-token 创建代币 通过 Token Program 创建 Token，Solana 通过其特有的账号机制，通过创建一个账号并将 Owner 设置为一个统一的 Token Program 即可发行一种代币。1\n发行代币 要持有代币必须创建一个对应的 Associated Token Account（ATA），也就是要接收一个代币首先要检查有没有对应代币的 ATA，没有则创建，然后给对应的 ATA 转移代币。\n代币转帐 燃烧代币 SPL Token 交互：授权 Program 转帐 Libraries:\nspl_associated_token_account Steps:\nDelegate token to Program \u0026ndash; in frontend. Create a Associated Token Account for Program to hold token.","title":"Solana 101: 3. SPL Token"},{"content":" tags: Solana 101: Create an Escrow dApp ","permalink":"https://notes.0081800.xyz/notes/20221122204541-solana_101_4_create_a_spl_nft/","summary":" tags: Solana 101: Create an Escrow dApp ","title":"Solana 101: 4. SPL NFT"},{"content":" tags: Solana 101: Create an Escrow dApp 链上数据存储 账号所有权 账号可以通过 Metadata 指定一个 Program 作为拥有者（Owner）； Program 作为拥有者可以： 修改账号数据； 可以使用该 PDA 进行签名。 PDA(Program Derived Address) 1 使用 PDA 进行合约状态链上存储。\nPDA 只有一个类似公钥的地址，但是没有对应的私钥； 链下生成：通过 PublicKey.findProgramAddress 生成 PDA，seeds 用于生成多个 PDA； 链上创建：将 PDA 作为账号传递给 Program 进行链上创建：填充足够的 lamports 用于支付租金、开辟空间、指定 program 作为 Owner。 创建一个计数器 部署智能合约； 生成一个 PDA 并进行链上创建； 增加计数器； 其他账号获取 PDA，并增加计数器； 使用 Anchor 重写计数器 安装 Anchor 安装 Yarn 安装 avm cargo install --git https://github.com/project-serum/anchor avm --locked --force 使用 avm 安装 anchor avm install latest avm use latest 创建 anchor 项目 anchor init hello-anchor anchor 项目结构 Understanding Program Derived Addresses\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://notes.0081800.xyz/notes/20221122204442-solana_101_2_anchor/","summary":"tags: Solana 101: Create an Escrow dApp 链上数据存储 账号所有权 账号可以通过 Metadata 指定一个 Program 作为拥有者（Owner）； Program 作为拥有者可以： 修改账号数据； 可以使用该 PDA 进行签名。 PDA(Program Derived Address) 1 使用 PDA 进行合约状态链上存储。\nPDA 只有一个类似公钥的地址，但是没有对应的私钥； 链下生成：通过 PublicKey.findProgramAddress 生成 PDA，seeds 用于生成多个 PDA； 链上创建：将 PDA 作为账号传递给 Program 进行链上创建：填充足够的 lamports 用于支付租金、开辟空间、指定 program 作为 Owner。 创建一个计数器 部署智能合约； 生成一个 PDA 并进行链上创建； 增加计数器； 其他账号获取 PDA，并增加计数器； 使用 Anchor 重写计数器 安装 Anchor 安装 Yarn 安装 avm cargo install --git https://github.com/project-serum/anchor avm --locked --force 使用 avm 安装 anchor avm install latest avm use latest 创建 anchor 项目 anchor init hello-anchor anchor 项目结构 Understanding Program Derived Addresses\u0026#160;\u0026#x21a9;\u0026#xfe0e;","title":"Solana 101: 2. Anchor"},{"content":" tags: Solana 101: Create an Escrow dApp Account UTXO Unspend Transaction Output.\nEVM Accounts1 EOA(Externally-owned acount) - 用户用私钥控制的账号； 合约账号（Contract account） - 代码控制的账号，用于部署智能合约代码。 账号模型通过用户地址为用户开辟一块单独的存储，简单的理解就是用公私钥导出的唯一地址作为主键存储在节点的存储系统里（RocksDB）； 这样只要将链上转账或者智能合约产生的结果或副作用存储在账号下面即可。\nSolana Account Model Accounts2 账号用于提供给智能合约（Program）跨交易存储状态，类似文件系统； 包含元数据（metadata）说明谁有权限访问这些状态； Solana 独特的创新：账号伴有生命周期，也就是对应的私钥并不完全拥有一个账号，而是从链上租借（rent）了一个账号，并支付对应的租金，当租借过期且没有足够的余额（lamports）支付租金的情况下，账号下的数据将被链回收； 一笔交易里可以参与的账号类型有：\nSigners 一笔交易可以包含一个或多个签名者，表示授权此笔交易（多签机制）； Read-only 交易里对该账号只读； Executable 其账号可以作为智能合约进行调用（将其账号对应的公钥地址作为 program id）； Programs or Smart Contract3 账号被标记为 Executable 可以部署代码（Program）作为智能合约。两种类型的智能合约：\nNative Programs \u0026ndash; 区块链系统提供的标准库； On Chain Programs \u0026ndash; 用户开发部署到链上的智能合约。 同时智能合约可以控制多个其他账号，并且只能修改它所拥有的账号数据，但是可以读取其他账号的数据。\nSolana 的 Program 可以被更新。\n搭建开发环境 命令行钱包 sh -c \u0026#34;$(curl -sSfL https://release.solana.com/stable/install)\u0026#34; 连接到测试节点 solana config set --url https://api.testnet.solana.com 官方文档是连接到本地节点，这里不太推荐，因为使用测试节点可以结合链浏览器比较直观的观测结果。\n注意 Solana 命令最好和集群匹配，不然可能会有一些难以定位的问题，通过一下两个命令确认4：\n$ solana cluster-version $ solana --version 通过水龙头（Faucet）领取测试币5 TODO\nRust 安装和简介 curl --proto \u0026#39;=https\u0026#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh 特点：\n内存安全6 系统级的编程语言，C/C++。 设置 设置国内源，将以下内容放在 ~/.cargo/config\n[source.crates-io] registry = \u0026#34;https://github.com/rust-lang/crates.io-index\u0026#34; replace-with = \u0026#39;ustc\u0026#39; [source.ustc] registry = \u0026#34;git://mirrors.ustc.edu.cn/crates.io-index\u0026#34; 开发智能合约7 编写部署第一个智能合约 三个参数：\nprogram_id 当前智能合约的 ProgramId，可以做一些硬编码检查； accounts 参与调用的账号列表；8 instruction_data 客户端传过来的参数。 调用智能合约 ETHEREUM ACCOUNTS\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nAccounts\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nPrograms\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://solana.stackexchange.com/a/4384\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nSol Faucet\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nAndroid 13 的内存安全漏洞大幅减少\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://github.com/coldnight/sol101\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nAccountInfo\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://notes.0081800.xyz/notes/20221122204241-solana_101_develop_model/","summary":"tags: Solana 101: Create an Escrow dApp Account UTXO Unspend Transaction Output.\nEVM Accounts1 EOA(Externally-owned acount) - 用户用私钥控制的账号； 合约账号（Contract account） - 代码控制的账号，用于部署智能合约代码。 账号模型通过用户地址为用户开辟一块单独的存储，简单的理解就是用公私钥导出的唯一地址作为主键存储在节点的存储系统里（RocksDB）； 这样只要将链上转账或者智能合约产生的结果或副作用存储在账号下面即可。\nSolana Account Model Accounts2 账号用于提供给智能合约（Program）跨交易存储状态，类似文件系统； 包含元数据（metadata）说明谁有权限访问这些状态； Solana 独特的创新：账号伴有生命周期，也就是对应的私钥并不完全拥有一个账号，而是从链上租借（rent）了一个账号，并支付对应的租金，当租借过期且没有足够的余额（lamports）支付租金的情况下，账号下的数据将被链回收； 一笔交易里可以参与的账号类型有：\nSigners 一笔交易可以包含一个或多个签名者，表示授权此笔交易（多签机制）； Read-only 交易里对该账号只读； Executable 其账号可以作为智能合约进行调用（将其账号对应的公钥地址作为 program id）； Programs or Smart Contract3 账号被标记为 Executable 可以部署代码（Program）作为智能合约。两种类型的智能合约：\nNative Programs \u0026ndash; 区块链系统提供的标准库； On Chain Programs \u0026ndash; 用户开发部署到链上的智能合约。 同时智能合约可以控制多个其他账号，并且只能修改它所拥有的账号数据，但是可以读取其他账号的数据。\nSolana 的 Program 可以被更新。\n搭建开发环境 命令行钱包 sh -c \u0026#34;$(curl -sSfL https://release.solana.com/stable/install)\u0026#34; 连接到测试节点 solana config set --url https://api.","title":"Solana 101: 1. Develop Model"},{"content":" tags: Solana 101: Create an Escrow dApp 聊聊区块链 一个完整的区块链系统生态：\n主币：进行 gas 费结算：BitCoin / ETH / TRX 等等 节点服务(JSONRPC 2.0)：提供数据查询、广播交易，交易广播（P2P -\u0026gt; 挖矿节点）； 交易验证：挣取 gas 费，出块奖励（挖矿）； PoW（Proof of Work）：通过算力证明提供交易验证（出块）；sha256(nonce + body) -\u0026gt; sha256 import hashlib from typing import Tuple raw_block = b\u0026#39;block data\u0026#39; dificulty = 5 def proof_my_work(dificulty, raw_block) -\u0026gt; Tuple[int, str]: nonce = 1 while True: body = bytes(nonce) + raw_block h = hashlib.sha256(body) hex_value = h.hexdigest() if hex_value[:dificulty] == \u0026#39;0\u0026#39; * dificulty: return nonce, hex_value nonce += 1 proof_my_work(dificulty, raw_block) PoS（Proof of Stake）：通过质押主币提供交易验证，一旦被发现作弊则扣除质押的主币； 链浏览器：通过 Web UI 进行链上数据查询； 钱包 == 私钥：资产证明，交易授权，公钥导出地址，私钥则是证明拥有该地址； 智能合约（Smart Contract）：对资产进行编程； 代币（Tokens）：基于智能合约实现，Fungible Tokens（ERC20 / TRC20） 和 Non-Fungible Tokens （ERC721） dApp：通过桥接钱包和链上智能合约实现一定的链上操作； 从智能合约来看各个区块链生态之间的区别 主要是虚拟机的区别，为了执行智能合约，区块链系统需要虚拟机来执行代码，目前主流的虚拟机包括：\n无智能合约：UTXO（Unspent transaction output），Bitcoin / DogeCoin / LiteCoin WASM（Soldity）: EVM(Ethereum / Binance Smart Chain / OKX Chain), TVM(Tron) Move：由 Facebook 之前推出的 Libra 现在改名 Diem 推出，Aptos / Starcoin / Sui LLVM(ELF / BPF)：Solana Solana 特点：PoS / 快 / Rust / gas 费低 Links Mempool Mempool TX Address bc1qkk382ctzp5k9mt9fn0muxtqmsln8x74yh3kr2j Address 3K7Wxw3kQSURcm7Un99ZyK9LfW2KEji2QQ Etherscan SOLSCAN / Solana eBPF Paxos ","permalink":"https://notes.0081800.xyz/notes/20221121160749-solana_101_prelude/","summary":"tags: Solana 101: Create an Escrow dApp 聊聊区块链 一个完整的区块链系统生态：\n主币：进行 gas 费结算：BitCoin / ETH / TRX 等等 节点服务(JSONRPC 2.0)：提供数据查询、广播交易，交易广播（P2P -\u0026gt; 挖矿节点）； 交易验证：挣取 gas 费，出块奖励（挖矿）； PoW（Proof of Work）：通过算力证明提供交易验证（出块）；sha256(nonce + body) -\u0026gt; sha256 import hashlib from typing import Tuple raw_block = b\u0026#39;block data\u0026#39; dificulty = 5 def proof_my_work(dificulty, raw_block) -\u0026gt; Tuple[int, str]: nonce = 1 while True: body = bytes(nonce) + raw_block h = hashlib.sha256(body) hex_value = h.hexdigest() if hex_value[:dificulty] == \u0026#39;0\u0026#39; * dificulty: return nonce, hex_value nonce += 1 proof_my_work(dificulty, raw_block) PoS（Proof of Stake）：通过质押主币提供交易验证，一旦被发现作弊则扣除质押的主币； 链浏览器：通过 Web UI 进行链上数据查询； 钱包 == 私钥：资产证明，交易授权，公钥导出地址，私钥则是证明拥有该地址； 智能合约（Smart Contract）：对资产进行编程； 代币（Tokens）：基于智能合约实现，Fungible Tokens（ERC20 / TRC20） 和 Non-Fungible Tokens （ERC721） dApp：通过桥接钱包和链上智能合约实现一定的链上操作； 从智能合约来看各个区块链生态之间的区别 主要是虚拟机的区别，为了执行智能合约，区块链系统需要虚拟机来执行代码，目前主流的虚拟机包括：","title":"Solana 101: 0. Prelude"},{"content":" tags: Solana ","permalink":"https://notes.0081800.xyz/notes/20221119104334-solana_101_create_a_escrow_dapp/","summary":" tags: Solana ","title":"Solana 101: Create an Escrow dApp"},{"content":" tags: Python _ = ( 255, lambda V ,B,c :c and Y(V*V+B,B, c -1)if(abs(V)\u0026lt;6)else ( 2+c-4*abs(V)**-0.4)/i ) ;v, x=1500,1000;C=range(v*x );import struct;P=struct.pack;M,\\ j =\u0026#39;\u0026lt;QIIHHHH\u0026#39;,open(\u0026#39;M.bmp\u0026#39;,\u0026#39;wb\u0026#39;).write for X in j(\u0026#39;BM\u0026#39;+P(M,v*x*3+26,26,12,v,x,1,24))or C: i ,Y=_;j(P(\u0026#39;BBB\u0026#39;,*(lambda T:(T*80+T**9 *i-950*T **99,T*70-880*T**18+701* T **9 ,T*i**(1-T**45*2)))(sum( [ Y(0,(A%3/3.+X%v+(X/v+ A/3/3.-x/2)/1j)*2.5 /x -2.7,i)**2 for \\ A in C [:9]]) /9) ) ) It generates a Mandelbrot like the code likes:\n","permalink":"https://notes.0081800.xyz/notes/20221024112631-python_lambda_generate_bitmap/","summary":"tags: Python _ = ( 255, lambda V ,B,c :c and Y(V*V+B,B, c -1)if(abs(V)\u0026lt;6)else ( 2+c-4*abs(V)**-0.4)/i ) ;v, x=1500,1000;C=range(v*x );import struct;P=struct.pack;M,\\ j =\u0026#39;\u0026lt;QIIHHHH\u0026#39;,open(\u0026#39;M.bmp\u0026#39;,\u0026#39;wb\u0026#39;).write for X in j(\u0026#39;BM\u0026#39;+P(M,v*x*3+26,26,12,v,x,1,24))or C: i ,Y=_;j(P(\u0026#39;BBB\u0026#39;,*(lambda T:(T*80+T**9 *i-950*T **99,T*70-880*T**18+701* T **9 ,T*i**(1-T**45*2)))(sum( [ Y(0,(A%3/3.+X%v+(X/v+ A/3/3.-x/2)/1j)*2.5 /x -2.7,i)**2 for \\ A in C [:9]]) /9) ) ) It generates a Mandelbrot like the code likes:","title":"Python lambda generate bitmap"},{"content":" tags: GTK\nGTK_DEBUG=interactive my-gtk-app ","permalink":"https://notes.0081800.xyz/notes/20221024111901-gtk_debug_mode/","summary":" tags: GTK\nGTK_DEBUG=interactive my-gtk-app ","title":"GTK Debug Mode"},{"content":" tags: Go source: “Wrap and Unwrap Errors in Go (Golang) | Gosamples.Dev.” Accessed October 12, 2022. https://gosamples.dev/wrap-unwrap-errors/. Overview Since Go1.13, there is a new feature about error add to go: Wrap \u0026amp; Unwrap errors. Let\u0026rsquo;s start from a simple example:\npackage main import ( \u0026#34;errors\u0026#34; \u0026#34;fmt\u0026#34; ) var errRollingInTheDeep = errors.New(\u0026#34;rolling in the deep\u0026#34;) func doSomeActualJob() error { return errRollingInTheDeep } func someFrameworkCaller() error { // We use fmt.Errorf to wrap error. // Notice the \u0026#34;%w\u0026#34; formater here and content surround the \u0026#34;[...]\u0026#34;. return fmt.Errorf(\u0026#34;[someFrameworkCaller] %w\u0026#34;, doSomeActualJob()) } func someEntrance() error { return fmt.Errorf(\u0026#34;[someUpperCaller] %w\u0026#34;, someFrameworkCaller()) } func main() { err := someEntrance() if errors.Is(err, errRollingInTheDeep) { fmt.Println(\u0026#34;This should be\u0026#34;) } else { panic(\u0026#34;Oooops!\u0026#34;) } fmt.Printf(\u0026#34;The final error: %v\\n\u0026#34;, err) fmt.Printf(\u0026#34;Unwrap: %v\\n\u0026#34;, errors.Unwrap(err)) } Its output:\nThis should be The final error: [someUpperCaller] [someFrameworkCaller] rolling in the deep Unwrap: [someFrameworkCaller] rolling in the deep Let\u0026rsquo;s add more line to see how about to continual unwrap it:\npackage main import ( \u0026#34;errors\u0026#34; \u0026#34;fmt\u0026#34; ) var errRollingInTheDeep = errors.New(\u0026#34;rolling in the deep\u0026#34;) func doSomeActualJob() error { return errRollingInTheDeep } func someFrameworkCaller() error { // We use fmt.Errorf to wrap error. // Notice the \u0026#34;%w\u0026#34; formater here and content surround the \u0026#34;[...]\u0026#34;. return fmt.Errorf(\u0026#34;[someFrameworkCaller] %w\u0026#34;, doSomeActualJob()) } func someEntrance() error { return fmt.Errorf(\u0026#34;[someUpperCaller] %w\u0026#34;, someFrameworkCaller()) } func main() { err := someEntrance() if errors.Is(err, errRollingInTheDeep) { fmt.Println(\u0026#34;This should be\u0026#34;) } else { panic(\u0026#34;Oooops!\u0026#34;) } fmt.Printf(\u0026#34;The final error: %v\\n\u0026#34;, err) err = errors.Unwrap(err) if errors.Is(err, errRollingInTheDeep) { fmt.Println(\u0026#34;This should be either\u0026#34;) } else { panic(\u0026#34;Oooops!\u0026#34;) } fmt.Printf(\u0026#34;Unwrapped error: %v\\n\u0026#34;, errors.Unwrap(err)) err = errors.Unwrap(err) fmt.Printf(\u0026#34;Unwrapped error: %v\\n\u0026#34;, errors.Unwrap(err)) err = errors.Unwrap(err) fmt.Printf(\u0026#34;Still unwrap to see what we have got: %v\\n\u0026#34;, errors.Unwrap(err)) err = errors.Unwrap(err) fmt.Printf(\u0026#34;Still unwrap to see what we have got: %v\\n\u0026#34;, errors.Unwrap(err)) } Its output:\nThis should be The final error: [someUpperCaller] [someFrameworkCaller] rolling in the deep This should be either Unwrapped error: rolling in the deep Unwrapped error: \u0026lt;nil\u0026gt; Still unwrap to see what we have got: \u0026lt;nil\u0026gt; Still unwrap to see what we have got: \u0026lt;nil\u0026gt; As we can see above, here is the conclusions:\nThe errors.Is could always check which the error is; The errors.Unwrap returns error the first wrapped error directly, which means we can\u0026rsquo;t get the errors amid the chain; Calling errors.Unwrap on a non-wrapped error or nil pointer, the nil pointer will always be returned. Does it Help for Error Tracing Purpose? As I already known, some logging frameworks/utilities provide like https://github.com/uber-go/zap provide a mechanic to print the invocation stacktrace of error. I\u0026rsquo;m wonder if this help.\nLet\u0026rsquo;s see a example:\npackage main import ( \u0026#34;errors\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;go.uber.org/zap\u0026#34; ) var errRollingInTheDeep = errors.New(\u0026#34;rolling in the deep\u0026#34;) func doSomeActualJob() error { return errRollingInTheDeep } func someFrameworkCaller() error { // We use fmt.Errorf to wrap error. // Notice the \u0026#34;%w\u0026#34; formater here and content surround the \u0026#34;[...]\u0026#34;. return fmt.Errorf(\u0026#34;[someFrameworkCaller] %w\u0026#34;, doSomeActualJob()) } func someEntrance() error { return fmt.Errorf(\u0026#34;[someUpperCaller] %w\u0026#34;, someFrameworkCaller()) } func main() { logger, _ := zap.NewDevelopment() defer logger.Sync() // flushes buffer, if any err := someEntrance() logger.Warn(\u0026#34;ERROR\u0026#34;, zap.Error(err)) } Its output:\n2022-10-12T10:52:32.792+0800 WARN demo/main.go:30 ERROR {\u0026#34;error\u0026#34;: \u0026#34;[someUpperCaller] [someFrameworkCaller] rolling in the deep\u0026#34;} main.main /Users/wanghui/codes/notes/demo/main.go:30 runtime.main /opt Ooops, the zap output output stacktrace based where its call, not the error.\nWe can do it with a Stack field that provided zap.\nConclusion: it does help for error tracing purpose, but only with the provided context that surround by \u0026ldquo;[\u0026hellip;]\u0026rdquo;.\n","permalink":"https://notes.0081800.xyz/articles/20221012101258-wrap_unwrap_errors_in_go/","summary":"tags: Go source: “Wrap and Unwrap Errors in Go (Golang) | Gosamples.Dev.” Accessed October 12, 2022. https://gosamples.dev/wrap-unwrap-errors/. Overview Since Go1.13, there is a new feature about error add to go: Wrap \u0026amp; Unwrap errors. Let\u0026rsquo;s start from a simple example:\npackage main import ( \u0026#34;errors\u0026#34; \u0026#34;fmt\u0026#34; ) var errRollingInTheDeep = errors.New(\u0026#34;rolling in the deep\u0026#34;) func doSomeActualJob() error { return errRollingInTheDeep } func someFrameworkCaller() error { // We use fmt.Errorf to wrap error.","title":"Wrap \u0026 Unwrap errors in Go"},{"content":" tags: Cheatsheet, macOS Retrieve Bundle ID osascript -e \u0026#39;id of app \u0026#34;/usr/local/MacGPG2/libexec/pinentry-mac.app\u0026#34;\u0026#39; osascript -e \u0026#39;id of app \u0026#34;Finder\u0026#34;\u0026#39; ","permalink":"https://notes.0081800.xyz/notes/20220914093806-macos_cheatsheet/","summary":" tags: Cheatsheet, macOS Retrieve Bundle ID osascript -e \u0026#39;id of app \u0026#34;/usr/local/MacGPG2/libexec/pinentry-mac.app\u0026#34;\u0026#39; osascript -e \u0026#39;id of app \u0026#34;Finder\u0026#34;\u0026#39; ","title":"macOS Cheatsheet"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20220913105435-cheatsheet/","summary":"","title":"Cheatsheet"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20220913105411-postgresql/","summary":"","title":"PostgresQL"},{"content":" tags: PostgresQL, Cheatsheet Create User and Role Docs: Examples of Create Role\nCREATE ROLE whoami WITH LOGIN PASSWORD \u0026#39;P@ssw0rd\u0026#39;; Create Database Docs: Examples of Create Database\nCREATE DATABASE sales OWNER whoami; ","permalink":"https://notes.0081800.xyz/notes/20220913105403-postgresql_cheatsheet/","summary":" tags: PostgresQL, Cheatsheet Create User and Role Docs: Examples of Create Role\nCREATE ROLE whoami WITH LOGIN PASSWORD \u0026#39;P@ssw0rd\u0026#39;; Create Database Docs: Examples of Create Database\nCREATE DATABASE sales OWNER whoami; ","title":"PostgresQL Cheatsheet"},{"content":" tags: GPG, GnuPG Agent,Cheatsheet Stop GPG Agent\ngpg-connect-agent killagent /bye obsolete option \u0026ldquo;write-env-file\u0026rdquo; - it has no effect\nset -gx GPG_TTY (tty) set -gx SSH_AUTH_SOCK (gpgconf --list-dirs agent-ssh-socket) gpgconf --launch gpg-agent ","permalink":"https://notes.0081800.xyz/notes/20220908111543-gpg_agent/","summary":" tags: GPG, GnuPG Agent,Cheatsheet Stop GPG Agent\ngpg-connect-agent killagent /bye obsolete option \u0026ldquo;write-env-file\u0026rdquo; - it has no effect\nset -gx GPG_TTY (tty) set -gx SSH_AUTH_SOCK (gpgconf --list-dirs agent-ssh-socket) gpgconf --launch gpg-agent ","title":"GnuPG Agent Cheatsheet"},{"content":" tags: DeFi, Blockchain, Uniswap, Uniswap V3 I need derive price from decentralized exchanges, and I have finished some research about Uniswap v3.\nIt\u0026rsquo;s brand new for me, and after that I want to share some ideas about DeFi, and I think it would be helpful for you to understand Uniswap and some other decentralized exchanges.\nDeFi from Scratch We exchange stuffs very often, and we can exchange tokens in a centralized exchange.\nFor example, Alice owns some ETH, and Bob owns some DAI. Now, Alice want to swap some ETH for DAI, and Bob want to swap some DAI for ETH. How could they do?\nA Centralized Exchange Both Alice and Bob can goto a centralized exchange, like Binance.com, they can swap their tokens which they owned to the tokens which they want.\nIt\u0026rsquo;s very convenient. But how could they do if they don\u0026rsquo;t trust the centralized exchanges?\nOn-chain Swap Directly They can swap directly, you may say so. Yes, they can communicate with each other, and consider a price, then they can do it. Now Alice send the ETH to Bob, and wait Bob to send DAI back. But now Bob don\u0026rsquo;t want to send DAI back, what can Alice do?\nNothing! Alice loss her ETH!\nSwap via Smart Contract Both Alice and Bob don\u0026rsquo;t want to meet such above situation. So they can use a smart contract:\nAlice send the proper ETH to the smart contract and mark it\u0026rsquo;s to Bob; Then Bob send the proper DAI to the smart contract and mark it\u0026rsquo;s to Alice; The smart contract determined that the condition is satisfied, then the smart contract: Send proper DAI to Alice; Send proper ETH to Bob; Otherwise, if Bob didn\u0026rsquo;t send the proper DAI to the smart contract, after some blocks(like timeout), the smart contract will send Alice\u0026rsquo;s ETH back, or both Alice and Bob can withdraw their tokens from the smart contract in any time. That was a perfectly progress, both Alice and Bob are trust in the smart contract.\nLiquidity Boost Decentralized Exchange Let\u0026rsquo;s admit that it\u0026rsquo;s difficult to find people who want to exchange with you. The smart contract can do more, like Uniswap:\nSomeone could be a liquidity provider: Put some tokens for exchanging into liquidity pool, let\u0026rsquo;s say you privode both ETH and DAI as liquidity; The Uniswap will give you a NFT to represent the position you hold(Non-Fungible Tokens vs. Fungible Tokens). Then someone else can swap tokens from liquidity, for example, Bob want to swap DAI for ETH: Bob will send DAI to the liquidity pool which hold by the smart contract; The smart contract then send back ETH from liquidity pool; Now you don\u0026rsquo;t need to find someone to swap, you can swap when the liquidity is satisfied, to do so, the liquidity providers will charge some fee from your operations, that engage people who owns tokens to be the liquidity providers.\n","permalink":"https://notes.0081800.xyz/notes/20220825160507-defi_from_scartch/","summary":"tags: DeFi, Blockchain, Uniswap, Uniswap V3 I need derive price from decentralized exchanges, and I have finished some research about Uniswap v3.\nIt\u0026rsquo;s brand new for me, and after that I want to share some ideas about DeFi, and I think it would be helpful for you to understand Uniswap and some other decentralized exchanges.\nDeFi from Scratch We exchange stuffs very often, and we can exchange tokens in a centralized exchange.","title":"DeFi from Scratch"},{"content":" tags: Uniswap V3 source: Shao, 田少谷. “Uniswap v3 Features Explained in Depth.” Taipei Ethereum Meetup (blog), July 20, 2021. https://medium.com/taipei-ethereum-meetup/uniswap-v3-features-explained-in-depth-178cfe45f223. Tick is a price range Each tick is a price range with upper bound and lower bound.\nTick price from index: \\(p(i) = 1.0001 ^ i\\)\n1.0001 ** 138162 # 999_998 Tick index from price: \\(log_{1.0001}p\\)\nimport math math.log(1000_000, base=1.0001) # 138162.01321981344 ","permalink":"https://notes.0081800.xyz/notes/20220825151409-uniswap_v3_tick/","summary":" tags: Uniswap V3 source: Shao, 田少谷. “Uniswap v3 Features Explained in Depth.” Taipei Ethereum Meetup (blog), July 20, 2021. https://medium.com/taipei-ethereum-meetup/uniswap-v3-features-explained-in-depth-178cfe45f223. Tick is a price range Each tick is a price range with upper bound and lower bound.\nTick price from index: \\(p(i) = 1.0001 ^ i\\)\n1.0001 ** 138162 # 999_998 Tick index from price: \\(log_{1.0001}p\\)\nimport math math.log(1000_000, base=1.0001) # 138162.01321981344 ","title":"Uniswap V3 Tick"},{"content":" tags: Uniswap The Graph: Uniswap V3 Subgraph ","permalink":"https://notes.0081800.xyz/notes/20220825151116-uniswap_v3/","summary":" tags: Uniswap The Graph: Uniswap V3 Subgraph ","title":"Uniswap V3"},{"content":" tags: Blockchain ","permalink":"https://notes.0081800.xyz/notes/20220825151036-defi/","summary":" tags: Blockchain ","title":"DeFi"},{"content":" tags: Blockchain,Ethereum,DeFi ","permalink":"https://notes.0081800.xyz/notes/20220825151023-uniswap/","summary":" tags: Blockchain,Ethereum,DeFi ","title":"Uniswap"},{"content":" tags: Blockchain,Ethereum source: “Graphical Guide to Understanding Uniswap - EthHub.” Accessed August 23, 2022. https://docs.ethhub.io/guides/graphical-guide-for-understanding-uniswap/. ERC20 tokens are the most common type of token built on top of Ethereum. They are fungible in nature, meaning that there isn’t a distinction between individual tokens. For example, if I have 100 metal marbles in my hand that are all the same size and color, it doesn’t matter which one I give you. In the same way, if I have 100 of the same ERC20 token, it doesn’t matter which one I give you. This contrasts with ERC721 tokens which are non-fungible tokens (NFTs) such as cryptokitties.\nEthereum Fungible Tokens Fungible Tokens, aka ERC20 tokens. Fungible means each one is the same of them, like the coins you are used to buy something in the supermarket.\nNon-Fungible Tokens(NFTs) Non-Fungible Tokens, aka ERC721 tokens, Non-Fungible means each one is different from others. Like some old money that worth more than its face, and you won\u0026rsquo;t and even can\u0026rsquo;t use it to buy some thing in supermarket.\n","permalink":"https://notes.0081800.xyz/notes/20220823105929-non_fungible_tokens_vs_fungible_tokens/","summary":"tags: Blockchain,Ethereum source: “Graphical Guide to Understanding Uniswap - EthHub.” Accessed August 23, 2022. https://docs.ethhub.io/guides/graphical-guide-for-understanding-uniswap/. ERC20 tokens are the most common type of token built on top of Ethereum. They are fungible in nature, meaning that there isn’t a distinction between individual tokens. For example, if I have 100 metal marbles in my hand that are all the same size and color, it doesn’t matter which one I give you.","title":"Non-Fungible Tokens vs. Fungible Tokens"},{"content":" tags: Makefile source: Davis-Hansson, Jacob. “Your Makefiles Are Wrong.” Jacob Davis-Hansson on Tech, December 15, 2019. https://tech.davis-hansson.com/p/make/. Best Makefile Defaults # Always use bash as the shell. SHELL := bash # Enable bash strict mode. .SHELLFLAGS := -eu -o pipefail -c ## Change some Defaults of Make. # Ensures each Make recipe is ran as one single shell session, # rather than one new shell per line. .ONESHELL: # Delete it\u0026#39;s target file if a Make rule fails. .DELETE_ON_ERROR: MAKEFLAGS += --warn-undefined-variables MAKEFLAGS += --no-builtin-rules # Always use GNU Make. ifeq ($(origin .RECIPEPREFIX), undefined) $(error This Make does not support .RECIPEPREFIX. Please use GNU Make 4.0 or later) endif # Use \u0026#39;\u0026gt;\u0026#39; to instead of tab. .RECIPEPREFIX = \u0026gt; ","permalink":"https://notes.0081800.xyz/notes/20220822112621-your_makefiles_are_wrong/","summary":"tags: Makefile source: Davis-Hansson, Jacob. “Your Makefiles Are Wrong.” Jacob Davis-Hansson on Tech, December 15, 2019. https://tech.davis-hansson.com/p/make/. Best Makefile Defaults # Always use bash as the shell. SHELL := bash # Enable bash strict mode. .SHELLFLAGS := -eu -o pipefail -c ## Change some Defaults of Make. # Ensures each Make recipe is ran as one single shell session, # rather than one new shell per line. .ONESHELL: # Delete it\u0026#39;s target file if a Make rule fails.","title":"Your Makefiles are wrong"},{"content":" tags: Online Tools website: https://www.castfeedvalidator.com/ ","permalink":"https://notes.0081800.xyz/notes/20220817142152-podcasts_rss_feed_validator/","summary":" tags: Online Tools website: https://www.castfeedvalidator.com/ ","title":"Podcasts RSS Feed Validator"},{"content":" tags: Solana, Solana 101: 1. Develop Model Account: a Memory region The solana term for a memory region is \u0026ldquo;account\u0026rdquo;. Some programs own thousands of independent accounts.\nPrograms own accounts, aka the owner of accounts.\nTransactions and Accounts You can make a program read and write data by sending transactions. Programs provide endpoints that can be called via transactions (In reality it\u0026rsquo;s a bit more complex than that but frameworks like Anchor abstract away this complexity). A function signature usually takes the following arguments:\nthe accounts that the program may read from and write to during this transaction. additional data specific to the function The first point means that even if in theory the program may read and write to a large part of the global heap, in the context of a transaction, it may only read from and write to the specific regions specified in the arguments of the transaction.\nAccounts Only Store Bytes Unlike other blockchain system, Solana didn\u0026rsquo;t provide data (de)serialization. So data in accounts are just raw bytes without any structure information, check the code in break:\nentrypoint!(process_instruction); fn process_instruction\u0026lt;\u0026#39;a\u0026gt;( _program_id: \u0026amp;Pubkey, accounts: \u0026amp;\u0026#39;a [AccountInfo\u0026lt;\u0026#39;a\u0026gt;], instruction_data: \u0026amp;[u8], ) -\u0026gt; ProgramResult { // Assume a writable account is at index 0 let mut account_data = accounts[0].try_borrow_mut_data()?; // xor with the account data using byte and bit from ix data let index = u16::from_be_bytes([instruction_data[0], instruction_data[1]]); let byte = index \u0026gt;\u0026gt; 3; let bit = (index \u0026amp; 0x7) as u8; account_data[byte as usize] ^= 1 \u0026lt;\u0026lt; (7 - bit); Ok(()) } Let\u0026rsquo;s check the signature of AccountInfo:\npub struct AccountInfo\u0026lt;\u0026#39;a\u0026gt; { pub key: \u0026amp;\u0026#39;a Pubkey, pub is_signer: bool, pub is_writable: bool, pub lamports: Rc\u0026lt;RefCell\u0026lt;\u0026amp;\u0026#39;a mut u64\u0026gt;\u0026gt;, pub data: Rc\u0026lt;RefCell\u0026lt;\u0026amp;\u0026#39;a mut [u8]\u0026gt;\u0026gt;, pub owner: \u0026amp;\u0026#39;a Pubkey, pub executable: bool, pub rent_epoch: Epoch, } Framework like anchor provided (de)serialization of accounts and instruction data.\nThis also means accounts in Solana is just data, your private key just prove you own that data.\n","permalink":"https://notes.0081800.xyz/notes/20220802181223-solana_account/","summary":"tags: Solana, Solana 101: 1. Develop Model Account: a Memory region The solana term for a memory region is \u0026ldquo;account\u0026rdquo;. Some programs own thousands of independent accounts.\nPrograms own accounts, aka the owner of accounts.\nTransactions and Accounts You can make a program read and write data by sending transactions. Programs provide endpoints that can be called via transactions (In reality it\u0026rsquo;s a bit more complex than that but frameworks like Anchor abstract away this complexity).","title":"Solana Account"},{"content":" tags: Solana, Solana 101: 1. Develop Model Program Owns Accounts And each memory region has a program that manages it (sometimes called the “owner”).\nHow to Communicate with Solana Programs? Off-chain This means your programs aren\u0026rsquo;t on-chain program, you can submit transactions with instructions to the network, it could be done via the JSON RPC API or any SDK built on top this API.\nOn-chain TODO\n","permalink":"https://notes.0081800.xyz/notes/20220802174748-solana_program/","summary":"tags: Solana, Solana 101: 1. Develop Model Program Owns Accounts And each memory region has a program that manages it (sometimes called the “owner”).\nHow to Communicate with Solana Programs? Off-chain This means your programs aren\u0026rsquo;t on-chain program, you can submit transactions with instructions to the network, it could be done via the JSON RPC API or any SDK built on top this API.\nOn-chain TODO","title":"Solana Program"},{"content":" tags: Rust source: Johnston, Dylan R. “Formally Verifying Rust’s Opaque Types,” August 1, 2022. https://dylanj.xyz/posts/rust-coq-opaque-types/. Prelude trait ToString { fn to_string(\u0026amp;self) -\u0026gt; String; } Static Dispatch fn yell\u0026lt;S: ToString\u0026gt;(stringable: S) { println!(stringable.to_string().to_uppercase()) } Dynamic Dispatch fn yell(stringable: \u0026amp;dyn ToString) { println!(stringable.to_string().to_uppercase()) } impl Trait fn yell(stringable: impl ToString) { println!(stringable.to_string().to_uppercase()) } ","permalink":"https://notes.0081800.xyz/notes/20220802104148-rust_opaque_types_static_dispatch_vs_dynamic_dispatch/","summary":" tags: Rust source: Johnston, Dylan R. “Formally Verifying Rust’s Opaque Types,” August 1, 2022. https://dylanj.xyz/posts/rust-coq-opaque-types/. Prelude trait ToString { fn to_string(\u0026amp;self) -\u0026gt; String; } Static Dispatch fn yell\u0026lt;S: ToString\u0026gt;(stringable: S) { println!(stringable.to_string().to_uppercase()) } Dynamic Dispatch fn yell(stringable: \u0026amp;dyn ToString) { println!(stringable.to_string().to_uppercase()) } impl Trait fn yell(stringable: impl ToString) { println!(stringable.to_string().to_uppercase()) } ","title":"Rust Opaque Types: Static Dispatch vs. Dynamic Dispatch"},{"content":" tags: Flutter,GUI,macOS souce: https://github.com/flutter/flutter/issues/73122 To solve this problem we should specify MACOSX_DEPLOYMENT_TARGET：\nI would imagine that there is Apple documentation on managing build settings in Xcode, but I don\u0026rsquo;t have a link offhand. There\u0026rsquo;s no Flutter-specific documentation of the process, if that\u0026rsquo;s what you mean; it isn\u0026rsquo;t any different in a Flutter macOS application as it would be any other macOS application.\nIf you don\u0026rsquo;t want to use Xcode, you can change MACOSX_DEPLOYMENT_TARGET directly in Runner.xcodeproj/project.pbxproj.\n","permalink":"https://notes.0081800.xyz/notes/20220728071920-error_is_only_available_in_macos_10_15_or_newer/","summary":"tags: Flutter,GUI,macOS souce: https://github.com/flutter/flutter/issues/73122 To solve this problem we should specify MACOSX_DEPLOYMENT_TARGET：\nI would imagine that there is Apple documentation on managing build settings in Xcode, but I don\u0026rsquo;t have a link offhand. There\u0026rsquo;s no Flutter-specific documentation of the process, if that\u0026rsquo;s what you mean; it isn\u0026rsquo;t any different in a Flutter macOS application as it would be any other macOS application.\nIf you don\u0026rsquo;t want to use Xcode, you can change MACOSX_DEPLOYMENT_TARGET directly in Runner.","title":"error: is only available in macOS 10.15 or newer"},{"content":"macOS Press Command + Shift + Control + D to enter debug mod.\nThen you can open url in brower: Help -\u0026gt; Debug -\u0026gt; 「浏览器 webview 相关-系统浏览器打开网页」\n","permalink":"https://notes.0081800.xyz/notes/20220725161801-wecom_debug_mode/","summary":"macOS Press Command + Shift + Control + D to enter debug mod.\nThen you can open url in brower: Help -\u0026gt; Debug -\u0026gt; 「浏览器 webview 相关-系统浏览器打开网页」","title":"Wecom Debug Mode"},{"content":" tags: GUI ","permalink":"https://notes.0081800.xyz/notes/20220725083304-flutter/","summary":" tags: GUI ","title":"Flutter"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20220725083317-ios/","summary":"","title":"iOS"},{"content":" tags: Rust,Flutter,iOS source: “Using Dummy Headers - Flutter_rust_bridge.” Accessed July 25, 2022. http://cjycode.com/flutter_rust_bridge/integrate/ios_headers.html. Recently, I met a problem that the iOS app didn\u0026rsquo;t work properly in release mode. After a little searching, I found it\u0026rsquo;s a Flutter app and invoked a Rust function by FFI. The inital call were not invoked during app startup, and it should be.\nI finally resolved the problem by following:\nhttps://github.com/fzyzcjy/flutter_rust_bridge/issues/496 http://cjycode.com/flutter_rust_bridge/integrate/ios_headers.html In short:\nXcode will strip the unused symbols in release mode, and won\u0026rsquo;t realize the FFI invocation; So we need add some dummy invocations to the AppDelegate.swift to make sure it have been used. Next, add this line to ios/Runner/Runner-Bridging-Header.h:\n+#import \u0026#34;bridge_generated.h\u0026#34; and in ios/Runner/AppDelegate.swift:\noverride func application( _ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]? ) -\u0026gt; Bool { + let dummy = dummy_method_to_enforce_bundling() + print(dummy) .. } ","permalink":"https://notes.0081800.xyz/notes/20220725081335-flutter_ffi_won_t_be_invoked_in_release_mode/","summary":"tags: Rust,Flutter,iOS source: “Using Dummy Headers - Flutter_rust_bridge.” Accessed July 25, 2022. http://cjycode.com/flutter_rust_bridge/integrate/ios_headers.html. Recently, I met a problem that the iOS app didn\u0026rsquo;t work properly in release mode. After a little searching, I found it\u0026rsquo;s a Flutter app and invoked a Rust function by FFI. The inital call were not invoked during app startup, and it should be.\nI finally resolved the problem by following:\nhttps://github.com/fzyzcjy/flutter_rust_bridge/issues/496 http://cjycode.com/flutter_rust_bridge/integrate/ios_headers.html In short:","title":"Flutter FFI didn't be Invoked in Release Mode"},{"content":" tags: Tools ","permalink":"https://notes.0081800.xyz/notes/20220715140459-openssl/","summary":" tags: Tools ","title":"openssl"},{"content":" tags: openssl This problem is caused about the ca certs are different between client and server.\n","permalink":"https://notes.0081800.xyz/notes/20220715140444-openssl_unknown_ca/","summary":"tags: openssl This problem is caused about the ca certs are different between client and server.","title":"openssl unknown ca"},{"content":" tags: Move,Starcoin Web3 StarTrek Bedrock \u0026ndash; Object-capability model In my words, Move is kind of a Resource-Oriented Programming language. The resource is represented by struct in Move, aka object in other programming language. By the way, the resource in Move is the struct which cannot be copied and cannot be dropped1.\nDistinct from other programming language, objects are stored in memory, resource in Move can store to the chain\u0026rsquo;s global storage.\nMove also provides public modifier for functions, and without that the function is private, which means that function only allow be invoked in the module.\nBut a public function doesn\u0026rsquo;t mean we want everybody to call it, especially in blockchain system. According object-capability model, we can define a witness parameter which is a specific object. Then the function can be invoked only if somebody have that resource.\nThere are two rules in Move enhance this model:\nStruct Can Only be Created or Destroyed in The Module It Belongs Struct types can only be created or destroyed inside the odule that defines the struct. The fields fo a struct are only accessable inside the module that defines the struct. Module Can Only be Invoked by Script Everybody Can Invoke Nobody Can Invoke Except The Resource Owner Nobody Can Invoke Except Who Initialized The Resource Nobody Can Invoke Except Whom The Module Belongs to Only structs with the key ability can be saved directly in persistent global storage. All Values stored within those key structs must have the store abilities. See Type Abilities.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://notes.0081800.xyz/notes/20220705071653-move_resources_permissions/","summary":"tags: Move,Starcoin Web3 StarTrek Bedrock \u0026ndash; Object-capability model In my words, Move is kind of a Resource-Oriented Programming language. The resource is represented by struct in Move, aka object in other programming language. By the way, the resource in Move is the struct which cannot be copied and cannot be dropped1.\nDistinct from other programming language, objects are stored in memory, resource in Move can store to the chain\u0026rsquo;s global storage.","title":"Move Resources Permissions"},{"content":" tags: How to Write,Online Tools source: https://brevity500.com/ ","permalink":"https://notes.0081800.xyz/notes/20220630120053-brevity_500_500_mini_games_to_help_you_learn_powerful_writing_skills/","summary":" tags: How to Write,Online Tools source: https://brevity500.com/ ","title":"Brevity 500: 500 mini-games to help you learn powerful writing skills"},{"content":" tags: Assembly source: https://github.com/hackclub/some-assembly-required What do we mean by an abstraction? Well, an abstraction is a layer above something else that makes that thing easier to do.\n","permalink":"https://notes.0081800.xyz/notes/20220629071413-github_hackclub_some_assembly_required/","summary":"tags: Assembly source: https://github.com/hackclub/some-assembly-required What do we mean by an abstraction? Well, an abstraction is a layer above something else that makes that thing easier to do.","title":"GitHub: hackclub/some-assembly-required"},{"content":" tags: Starcoin Web3 StarTrek,Move When I start learning Move and looking at the stdlib starcoin-framework and starcoin-framework-commons. Then I realized there are must some magic during the block execution in runtime. To roll the world, the runtime should provide some built in types and call some function in the stdlib.\nHow does StarcoinVM Validate Transactions? As a miner, it\u0026rsquo;s responsible for executing block, it follows:\nReceived some transactions from P2P network: EventHandler of PeerTransactionsMessage.\nImport transactions into transactions pool as pending transactions: txpool::pool::queue::TransactionQueue::import\nDuring importing, it\u0026rsquo;ll verify those transactions by calling verify_transaction.\nRetrieve pending transactions and put it into the a block prepare to execute.\nIn the step 2, the miner need to verify the received transactions before put it into queue as pending transactions.\nThe actually verify logic are defined at StarcoinVM::verify_transaction, it follows:\nCheck signature. Load configs from chain by calling some smart contract functions, see below. Verify transactions. Run 0x01::TransactionManager::prologue smart contract. How is StarcoinVM be Involved? The main functionality is provided by a struct StarcoinVM which is a wrapper of MoveVM.\nA starcoin_open_block::OpenedBlock will be created, when a block is created on chain by starcoin_chain::chain::BlockChain::create_block_template. Some pending transactions (if have any) will push into it by its push_txns, then it\u0026rsquo;s time to get StarcoinVM involved.\nStarcoinVM is on duty to execute those transactions.\nHow does StarcoinVM Execute Transactions in Block? StarcoinVM::execute_block_transactions will be invoked to execute transactions.\nPreparation Inject natives to MoveVM When we created a StarcoinVM by StarcoinVM::new, its will create MoveVM by:\npub fn new(metrics: Option\u0026lt;VMMetrics\u0026gt;) -\u0026gt; Self { let inner = MoveVM::new(super::natives::starcoin_natives()) .expect(\u0026#34;should be able to create Move VM; check if there are duplicated natives\u0026#34;); Self { move_vm: Arc::new(inner), vm_config: None, version: None, move_version: None, metrics, } } All the natives that been injected to MoveVM are defined at starcoin_natives::starcoin_natives().\nLoad Configs by Calling Move Module Defined in stdlib The first thing it will do is load configs and call some functions in stdlib(Here we will skip the operations of genesis, there in different branch).\nThose smart contract functions are invoked by StarcoinVM::execute_readonly_function:\n0x1::VMConfig::instruction_schedule() defines how many gas will be cost to execute each Move instruction. 0x1::VMConfig::native_schedule() defines how many gas will be cost to execute each native Move expression. 0x1::VMConfig::gas_constants() some constans about gas. With those configurations, the StarcoinVM knows how many gas will be cost during a execution. I think this way to maintain config is very smart, as it can change the gas cost way without change the node(Rust). Further more, can change it with DAO.\nWait a minute, How those smart contract functions are executed?\nExecute Readonly Function Let\u0026rsquo;s see what have done in StarcoinVM::execute_readonly_function:\nIn short words, provide a StateViewCache to a new session of MoveVM, then call session.execute_function.\nStateViewCache implements some necessary resolver traits that help MoveVM session to locate the module and resource:\nModuleResolver find module by ModuleID ResourceResolver find resource by address and type As the stdlib has already deployed on the chain at 0x01 address in the genesis process, so the StateViewCache with those resolver resolver implementations will lead MoveVM locate the stdlib module.\nExecute Block Transactions Now it\u0026rsquo;s time to check the remain logic, there two types of transactions we need to care about:\nTransactionBlock::Prologue Each block whether it contains transactions or not, a prologue always need to be done, mainly invoke a smart contract function in stdlib:\n0x01::TransactionManager::block_prologue TransactionBlock::UserTransaction When a block contains transactions, it have three kinds of payload, which are defined as:\n#[derive(Clone, Debug, Hash, Eq, PartialEq, Serialize, Deserialize, JsonSchema)] pub enum TransactionPayload { /// A transaction that executes code. Script(Script), /// A transaction that publish or update module code by a package. Package(Package), /// A transaction that executes an existing script function published on-chain. ScriptFunction(ScriptFunction), } TransactionPayload::Script and TransactionPayload::ScriptFuntion have the same behaviour, that defined in StarcoinVM::execute_script_or_script_function. Before the script or script funciton been executed, a prologue which defined in stdlib will be executed first, and then an epilogue will be executed when the transactions is exeucted successfully:\n0x01::TransactionManager::prologue\n0x01::TransactionManager::epilogue or 0x01::TransactionManager::epilogue_v2, it depends on which version of stdlib is used in current runtime.\nTransactionPayload::Package invovled the same smart contract functions, but it\u0026rsquo;s code logic is more complex, check StarcoinVM::execute_package:\nPublish the package as move module bundle. session .publish_module_bundle_with_option( package .modules() .iter() .map(|m| m.code().to_vec()) .collect(), package.package_address(), // be careful with the sender. cost_strategy, PublishModuleBundleOption { force_publish: enforced, only_new_module, }, ) .map_err(|e| e.into_vm_status())?; Invoke init_script of the package if has any. Same question as above, how this module stored into chain? Let\u0026rsquo;s check StateViewCache again, it haven\u0026rsquo;t the corresponding traits. After doing some research, I found the session we are used isn\u0026rsquo;t in the offcial Move language, it defined as move_vm::move_vm_runtime::move_vm_adapter::SessionAdapter. It\u0026rsquo;ll invoke DataStore::publish_module, it just put our package into our account cache. This explains how a smart contract is deployed.\nHow does a Smart Contract Be Executed I\u0026rsquo;m curious about how a smart contract been executed.\nSo, with those questions, let\u0026rsquo;s see how a block is executed on chain.\nTo execute a smart contract, or in starcoin to invoke Move modules from a Move script, we can simply make a RPC invocation contract.call_v2, which defines at rpc/server/src/module/contract_rpc.rs#L145:\nfn call_v2(\u0026amp;self, call: ContractCall) -\u0026gt; FutureResult\u0026lt;Vec\u0026lt;DecodedMoveValue\u0026gt;\u0026gt; { let service = self.chain_state.clone(); let storage = self.storage.clone(); let ContractCall { function_id, type_args, args, } = call; let metrics = self.playground.metrics.clone(); let f = async move { let state_root = service.state_root().await?; let state = ChainStateDB::new(storage, Some(state_root)); let output = call_contract( \u0026amp;state, function_id.0.module, function_id.0.function.as_str(), type_args.into_iter().map(|v| v.0).collect(), args.into_iter().map(|v| v.0).collect(), metrics, )?; let annotator = MoveValueAnnotator::new(\u0026amp;state); output .into_iter() .map(|(ty, v)| annotator.view_value(\u0026amp;ty, \u0026amp;v).map(Into::into)) .collect::\u0026lt;anyhow::Result\u0026lt;Vec\u0026lt;_\u0026gt;\u0026gt;\u0026gt;() } .map_err(map_err); Box::pin(f.boxed()) } The call_contract will eventually call StarcoinVM::execute_readonly_function which we have already discussed above.\nMint Block Once the block had been created and executed, the miner is going to mint the block: generate nounces to meet the diffculty. When it has been done, the block is ready to append to the chain, which means all the transactions in the block are take effect.\n","permalink":"https://notes.0081800.xyz/notes/20220624172625-how_a_block_is_executed/","summary":"tags: Starcoin Web3 StarTrek,Move When I start learning Move and looking at the stdlib starcoin-framework and starcoin-framework-commons. Then I realized there are must some magic during the block execution in runtime. To roll the world, the runtime should provide some built in types and call some function in the stdlib.\nHow does StarcoinVM Validate Transactions? As a miner, it\u0026rsquo;s responsible for executing block, it follows:\nReceived some transactions from P2P network: EventHandler of PeerTransactionsMessage.","title":"How is a Block Executed"},{"content":" tags: Starcoin Web3 StarTrek Start node with console:\n$ ./target/debug/starcoin -d ~/.starcoin -n dev console In console type:\nstarcoin% dev log level debug Note: starcoin% is the prompt.\nThen we can see debug log in ~/.starcoin/dev/starcoin.log.\n","permalink":"https://notes.0081800.xyz/notes/20220621153549-starcoin_node_debug/","summary":"tags: Starcoin Web3 StarTrek Start node with console:\n$ ./target/debug/starcoin -d ~/.starcoin -n dev console In console type:\nstarcoin% dev log level debug Note: starcoin% is the prompt.\nThen we can see debug log in ~/.starcoin/dev/starcoin.log.","title":"Starcoin Node Debug"},{"content":" tags: Move,Starcoin Web3 StarTrek source: Blackshear, Sam, Evan Cheng, David L Dill, Victor Gao, Ben Maurer, Todd Nowacki, Alistair Pott, et al. “Move: A Language With Programmable Resources,” n.d., 26. ","permalink":"https://notes.0081800.xyz/notes/20220618163332-move_a_language_with_programmable_resources/","summary":" tags: Move,Starcoin Web3 StarTrek source: Blackshear, Sam, Evan Cheng, David L Dill, Victor Gao, Ben Maurer, Todd Nowacki, Alistair Pott, et al. “Move: A Language With Programmable Resources,” n.d., 26. ","title":"Move: A Language With Programmable Resources"},{"content":" tags: Starcoin Web3 StarTrek,Blockchain,Smart contracts ","permalink":"https://notes.0081800.xyz/notes/20220618163155-move/","summary":" tags: Starcoin Web3 StarTrek,Blockchain,Smart contracts ","title":"Move"},{"content":" tags: Starcoin Web3 StarTrek,Account-Model Blockchain Systems We can create an account by wallet like MetaMask or StarMask, but I\u0026rsquo;m curious about how an account is created on the blockchain system.\nAs a wallet has been embedded in the starcoin node, we can use it to create an account as follow:\n$ ./target/debug/starcoin -d ~/.starcoin -n dev account create -p my-pass { \u0026#34;ok\u0026#34;: { \u0026#34;address\u0026#34;: \u0026#34;0x2f1aeb63bd30d8eb841d6a941c5d6df3\u0026#34;, \u0026#34;is_default\u0026#34;: false, \u0026#34;is_readonly\u0026#34;: false, \u0026#34;public_key\u0026#34;: \u0026#34;0x91f79bdd9ced49332bf85b751d02339e05aff047c386d0c14b380d8519d2fb4b\u0026#34;, \u0026#34;receipt_identifier\u0026#34;: \u0026#34;stc1p9udwkcaaxrvwhpqad22pchtd7vy2276p\u0026#34; } } As above we can see our account has been created, and the address is: 0x2f1aeb63bd30d8eb841d6a941c5d6df3. We\u0026rsquo;ll find some files are created, if we check our local directory at ~/.starcoin/dev:\n$ ls -l ~/.starcoin/dev drwxr-xr-x 10 wh staff 320 Jun 16 18:32 account_vaults -rw-r--r-- 1 wh staff 257 Jun 16 18:32 config.toml -rw-r--r-- 1 wh staff 89048 Jun 16 18:32 genesis -rw-r--r-- 1 wh staff 10710 Jun 16 18:32 genesis_config.json -rw------- 1 wh staff 64 Jun 16 18:32 network_key srw------- 1 wh staff 0 Jun 16 18:32 starcoin.ipc -rw-r--r-- 1 wh staff 14678 Jun 16 18:32 starcoin.log drwxr-xr-x 3 wh staff 96 Jun 16 18:32 starcoindb We\u0026rsquo;ll meet them later, for now, let\u0026rsquo;s follow the source code to find how an account is created.\nTwo Account Provider Strategies From the code here we can see:\nIf there is a account_dir configured, then it should be AccountProviderStrategy::Local Otherwise AccountProviderStrategy::RPC is used. As we specify the -d ~/.starcoin to run above command to create an account, so I think the account_dir could be ~/.starcoin/dev/account_vaults. Just simply add a print statement in account/provider/src/provider/mod.rs, and remove the directory, then build \u0026amp; run it again:\n$ rm -rf ~/.starcoin/dev/ $ cargo build $ ./target/debug/starcoin -d ~/.starcoin -n dev account create -p my-pass +++++++ RPC { \u0026#34;ok\u0026#34;: { \u0026#34;address\u0026#34;: \u0026#34;0x7760d5c787b9918005d82cca6d8225a9\u0026#34;, \u0026#34;is_default\u0026#34;: false, \u0026#34;is_readonly\u0026#34;: false, \u0026#34;public_key\u0026#34;: \u0026#34;0xa8459efd0f6becd563bca5ea6d8b930e9f6f19a30aef1b9632baa62f59e2a21d\u0026#34;, \u0026#34;receipt_identifier\u0026#34;: \u0026#34;stc1pwasdt3u8hxgcqpwc9n9xmq394y0qwh24\u0026#34; } } Emmm, things don\u0026rsquo;t always happen as your thoughts, aren\u0026rsquo;t they? AccountProviderStrategy only will be used if we run command and pass --local-account-dir option:\n$ ./target/debug/starcoin -d ~/.starcoin/ --local-account-dir=~/.starcoin/dev/account_vaults/ -n dev account create -p my-pass +++++++ LOCAL { \u0026#34;ok\u0026#34;: { \u0026#34;address\u0026#34;: \u0026#34;0x18d44098682869343f232d6cf0bdf9a9\u0026#34;, \u0026#34;is_default\u0026#34;: true, \u0026#34;is_readonly\u0026#34;: false, \u0026#34;public_key\u0026#34;: \u0026#34;0x17e9deb0b3784b5abebad3a7cb8030c23360d6b7f8d108a8186d20e2a23b51ff\u0026#34;, \u0026#34;receipt_identifier\u0026#34;: \u0026#34;stc1prr2ypxrg9p5ng0er94k0p00e4yhnhgw0\u0026#34; } } There it is.\nAccountManager \u0026amp; AccountStorage I\u0026rsquo;m tracing the invocation path, and find that no matter which strategy is used, then eventually, the AccountManager is used to do the actually job. And it mainly relys on AccountStorage.\nNow let\u0026rsquo;s check the defination of AccountManager.create_account:\npub fn create_account(\u0026amp;self, password: \u0026amp;str) -\u0026gt; AccountResult\u0026lt;Account\u0026gt; { let private_key = gen_private_key(); let private_key = AccountPrivateKey::Single(private_key); let address = private_key.public_key().derived_address(); self.save_account( address, private_key.public_key(), Some((private_key, password.to_string())), ) } It\u0026rsquo;s very simple, just generate a private key, and use it\u0026rsquo;s public key to derive an address, that\u0026rsquo;s how your account address comes out.\nTwo more invocations are involved: generate_private_key and AccountManager.save_account. Let\u0026rsquo;s check the first one:\ngenerate_private_key pub(crate) fn gen_private_key() -\u0026gt; Ed25519PrivateKey { let mut seed_rng = rand::rngs::OsRng; let seed_buf: [u8; 32] = seed_rng.gen(); let mut rng: StdRng = SeedableRng::from_seed(seed_buf); Ed25519PrivateKey::generate(\u0026amp;mut rng) } Emmm, we are using Ed25519, as konwn as EdDSA(Edwards-curve Digital Signature Algorithm).\nThen how an address is derived? As we can see, the address is derived by a public key, which defined in starcoin_vm_types::transaction::authenticator::AccountPublicKey.derived_address. The main function of this invocation is use starcoin_vm_types::transaction::authenticator::AuthenticationKey::from_preimage create and AuthenticationKey can call derived_address that bind to it:\n/// Create an authentication key from a preimage by taking its sha3 hash pub fn from_preimage(preimage: \u0026amp;AuthenticationKeyPreimage) -\u0026gt; AuthenticationKey { AuthenticationKey::new(*HashValue::sha3_256_of(\u0026amp;preimage.0).as_ref()) } /// Return an address derived from the last `AccountAddress::LENGTH` bytes of this /// authentication key. pub fn derived_address(\u0026amp;self) -\u0026gt; AccountAddress { // keep only last 16 bytes let mut array = [0u8; AccountAddress::LENGTH]; array.copy_from_slice(\u0026amp;self.0[Self::LENGTH - AccountAddress::LENGTH..]); AccountAddress::new(array) } How to avoid collision of address? TODO\nHow is an Account be Saved? It\u0026rsquo;s mainly implemented in AccountManager.save_account:\nCheck existence. Verify private key and password. Invoke Account::create to create the account: store it to corresponding place, and change the corresponding settings. Add to store. Set it to default, if it\u0026rsquo;s the first address. Conclusion So, an account has been created. There is no magic happens, which means no on chain operations are involved. Just generates a private key and public key pair, and derives an address.\nThe key pair is just a way that proof you own the address. So on the blockchain, you can send coins to any address, if nobody can proof that his owns that address, then the coins some how is lost forever.\n","permalink":"https://notes.0081800.xyz/notes/20220616181130-how_a_account_is_created/","summary":"tags: Starcoin Web3 StarTrek,Account-Model Blockchain Systems We can create an account by wallet like MetaMask or StarMask, but I\u0026rsquo;m curious about how an account is created on the blockchain system.\nAs a wallet has been embedded in the starcoin node, we can use it to create an account as follow:\n$ ./target/debug/starcoin -d ~/.starcoin -n dev account create -p my-pass { \u0026#34;ok\u0026#34;: { \u0026#34;address\u0026#34;: \u0026#34;0x2f1aeb63bd30d8eb841d6a941c5d6df3\u0026#34;, \u0026#34;is_default\u0026#34;: false, \u0026#34;is_readonly\u0026#34;: false, \u0026#34;public_key\u0026#34;: \u0026#34;0x91f79bdd9ced49332bf85b751d02339e05aff047c386d0c14b380d8519d2fb4b\u0026#34;, \u0026#34;receipt_identifier\u0026#34;: \u0026#34;stc1p9udwkcaaxrvwhpqad22pchtd7vy2276p\u0026#34; } } As above we can see our account has been created, and the address is: 0x2f1aeb63bd30d8eb841d6a941c5d6df3.","title":"How is an Account Created"},{"content":" tags: Career,How To Get Rich (without getting lucky) source: Frontera. “Luck Surface Area: How to Get Lucky In Life,” May 31, 2022. https://fronterablog.com/luck-surface-area/. 5 ways to expand your luck surface area:\nDo \u0026amp; Tell, don\u0026rsquo;t miss the \u0026ldquo;telling\u0026rdquo; part. Follow your curiosity Talk to new peopli Build a personal brand Take luck as a skill ","permalink":"https://notes.0081800.xyz/notes/20220615183503-luck_surface_area_how_to_get_lucky_in_life_a_note_of_how_to_get_rich/","summary":" tags: Career,How To Get Rich (without getting lucky) source: Frontera. “Luck Surface Area: How to Get Lucky In Life,” May 31, 2022. https://fronterablog.com/luck-surface-area/. 5 ways to expand your luck surface area:\nDo \u0026amp; Tell, don\u0026rsquo;t miss the \u0026ldquo;telling\u0026rdquo; part. Follow your curiosity Talk to new peopli Build a personal brand Take luck as a skill ","title":"Luck Surface Area: How to Get Lucky In Life(a Note of \"How to Get Rich\")"},{"content":" tags: libp2p,Starcoin Web3 StarTrek source: https://docs.rs/libp2p/0.45.1/libp2p/tutorials/index.html Ping: Four necessary traits Identity: PeerId and corresponding Keypair Transport: send and receive bytes on the network. NetworkBehaviour: decode or encode the bytes from the Transport. Swarm: drives both a Transport and a NetworkBehaviour forward. use futures::StreamExt; use libp2p::ping::{Ping, PingConfig}; use libp2p::{identity, Multiaddr, PeerId, Swarm}; use std::error::Error; #[async_std::main] async fn main() -\u0026gt; Result\u0026lt;(), Box\u0026lt;dyn Error\u0026gt;\u0026gt; { // First we need to create a network identity. let local_key = identity::Keypair::generate_ed25519(); let local_peer_id = PeerId::from(local_key.public()); println!(\u0026#34;Local peer id: {:?}\u0026#34;, local_peer_id); // Then construct a transport: defines how to send bytes on the network. let transport = libp2p::development_transport(local_key).await?; // NetworkBehaviour defines what bytes to send on the network. let behaviour = Ping::new(PingConfig::new().with_keep_alive(true)); // Swarm connects transport and behaviour together: // // 1. Passing commands from NetworkBehaviour to the Transport. // 2. As well ass events from the Transport to the NetworkBehaviour. let mut swarm = Swarm::new(transport, behaviour, local_peer_id); swarm.listen_on(\u0026#34;/ip4/0.0.0.0/tcp/0\u0026#34;.parse()?)?; if let Some(addr) = std::env::args().nth(1) { let remote: Multiaddr = addr.parse()?; swarm.dial(remote)?; println!(\u0026#34;Dialed {}\u0026#34;, addr); } loop { match swarm.select_next_some().await { libp2p::swarm::SwarmEvent::NewListenAddr { listener_id: _, address, } =\u0026gt; println!(\u0026#34;Listening on {:?}\u0026#34;, address), libp2p::swarm::SwarmEvent::Behaviour(event) =\u0026gt; println!(\u0026#34;{:?}\u0026#34;, event), _ =\u0026gt; {} } } Ok(()) } ","permalink":"https://notes.0081800.xyz/notes/20220615073334-rust_libp2p/","summary":"tags: libp2p,Starcoin Web3 StarTrek source: https://docs.rs/libp2p/0.45.1/libp2p/tutorials/index.html Ping: Four necessary traits Identity: PeerId and corresponding Keypair Transport: send and receive bytes on the network. NetworkBehaviour: decode or encode the bytes from the Transport. Swarm: drives both a Transport and a NetworkBehaviour forward. use futures::StreamExt; use libp2p::ping::{Ping, PingConfig}; use libp2p::{identity, Multiaddr, PeerId, Swarm}; use std::error::Error; #[async_std::main] async fn main() -\u0026gt; Result\u0026lt;(), Box\u0026lt;dyn Error\u0026gt;\u0026gt; { // First we need to create a network identity.","title":"Rust libp2p"},{"content":" tags: P2P,libp2p,Starcoin Web3 StarTrek ","permalink":"https://notes.0081800.xyz/notes/20220615072945-distributed_hash_table_dht/","summary":" tags: P2P,libp2p,Starcoin Web3 StarTrek ","title":"Distributed Hash Table"},{"content":" tags: P2P,Starcoin Web3 StarTrek,Network source: https://docs.libp2p.io/ A set of protocols for peer identity, discover, routing, transport and more.\nPeer-to-peer network Peers or nodes communicate with oen another directly, it\u0026rsquo;s different from the client-server architecture.\nlibp2p Solved Transport abstract data transmission and receipt to adapte many protocols, include the future protocols.\nIdentity use public key cryptography as the basis of peer identity， with this:\nIt gives each peer a globally unique \u0026ldquo;name\u0026rdquo;, in the form of a PeerId. PeerId allows anyone to retreve the public key for the identified peer, which enables secure communication between peers. Security libp2p supports \u0026ldquo;upgrading\u0026rdquo; a connection provided by a transport into a securely encrypted channel. Currently support;\nTLS 1.3 Noise Peer Routing: Distributed Hash Table(DHT)\nTwo key pieces:\nPeerId The way to locate them on the network to open a connection. Content Discovery content routing interface by using DHT.\nMessaging / PubSub\n","permalink":"https://notes.0081800.xyz/notes/20220615071057-libp2p/","summary":"tags: P2P,Starcoin Web3 StarTrek,Network source: https://docs.libp2p.io/ A set of protocols for peer identity, discover, routing, transport and more.\nPeer-to-peer network Peers or nodes communicate with oen another directly, it\u0026rsquo;s different from the client-server architecture.\nlibp2p Solved Transport abstract data transmission and receipt to adapte many protocols, include the future protocols.\nIdentity use public key cryptography as the basis of peer identity， with this:\nIt gives each peer a globally unique \u0026ldquo;name\u0026rdquo;, in the form of a PeerId.","title":"libp2p"},{"content":" tags: Starcoin Web3 StarTrek,Blockchain ","permalink":"https://notes.0081800.xyz/notes/20220615070942-p2p/","summary":" tags: Starcoin Web3 StarTrek,Blockchain ","title":"P2P"},{"content":" tags: Starcoin Web3 StarTrek,starcoin issue solving Today I saw this issue: starcoin#3450 at GitHub, I decide to give it a try.\nThe corresponding type VMStatus is defined out of starcoin\u0026rsquo;s reposiotry, here.\nThe work need to be done seems are:\nconvert function from u16 to a readable string. convert status_code from StatusCode to a readable string. Let\u0026rsquo;s take a look at StatusCode first, StatusCode is a enum that contains lot of variants, WOW! My intuition is that can we just get the name of the variant by it\u0026rsquo;s value. Or I\u0026rsquo;ll write an ugly match that contains tons of arms. Maybe there already existed some similar code, Let me do a search.\nIn further research, I found the related struct of this issue is KeptVMStatus, starcoin returns it as TransactionStatusView.\nKeptVMStatus is defined in move, at here. The variant ExecutionFailure of it doesn\u0026rsquo;t contain status_code and function_name fields like VmStatus does. The status_code was removed in this commit.\nAs the commit message says:\n[vm] Filter StatusCodes away from TransactionOutput\nChanges the information kept in TransactionStatus Kept transactions have a new KeptVMStatus. Runtime errors have detailed information, but no error codes. All other errors are bucketed Discarded transactions have a StatusCode Closes: #5071 Approved by: sblackshear\nEmmm, how to get the detailed information from Runtime errors?\n","permalink":"https://notes.0081800.xyz/notes/20220611164505-starcoin_3450/","summary":"tags: Starcoin Web3 StarTrek,starcoin issue solving Today I saw this issue: starcoin#3450 at GitHub, I decide to give it a try.\nThe corresponding type VMStatus is defined out of starcoin\u0026rsquo;s reposiotry, here.\nThe work need to be done seems are:\nconvert function from u16 to a readable string. convert status_code from StatusCode to a readable string. Let\u0026rsquo;s take a look at StatusCode first, StatusCode is a enum that contains lot of variants, WOW!","title":"starcoin#3450"},{"content":" tags: Starcoin Web3 StarTrek ","permalink":"https://notes.0081800.xyz/notes/20220611154932-starcoin_issue_solving/","summary":" tags: Starcoin Web3 StarTrek ","title":"starcoin issue solving"},{"content":" tags: Merkle tree,Blockchain,Starcoin Web3 StarTrek source: Gao, Zhenhuan, Yuxuan Hu, and Qinfan Wu. “Jellyfish Merkle Tree,” n.d., 12. What is Addressable mean? It means the leaf node in the tree can be found by an address. The address encoded the path to the leaf node, for example, a leaf node in a binary tree, which has 3 level. Its address may be encoded to 010, the corresponding path is: left-\u0026gt;right-\u0026gt;left:\n0 1 0 + + + v v v left right left root / \\ H1 H2 /\\ /\\ D1 D2 D3 D4 As we can see, the address 010 leads us to the leaf node D2.\nThis may explain what a colleague told me about the lower the address we got the lower gas we cost.\nHow does AMT work? The main goal of AMT is to let a verifier V can verify a large data structure D without holding it, which D provided by an untrusted prover P, which holds D.\nP computes \\(f(D) \\rightarrow r\\) and \\(\\pi\\) to the verifier.\nBoth:\n\\(r\\) the result of the computation of some function \\(f\\) on \\(D\\)(e.g. SHA1). \\(\\pi\\) a proof of the correct computation of the result. V can run \\(Verify(a, f, r, \\pi)\\), which returns true if and only if \\(f(D) = r\\).\n\\(a\\) holds by V is a short authenticator, forms a binding commitment to the large data structure D. As above shown, this is a Merkle tree stroing \\(D = \\{0: s0, 1: s1, 2: s2, 3: s3\\}\\). If we want to verify the third item(at the bottom of the tree, from left to right, shown with a dashed line), then \\(r = s2\\) and \\(\\pi = [h3, h4]\\)(shown with a dotted line). \\(Verify(a, f, r, \\pi)\\) returns if and only if the result of below equals to a:\n\\(hash(h4 || hash(hash(2 || r) || h3))\\)\n","permalink":"https://notes.0081800.xyz/notes/20220607191822-addressable_merkle_tree_amt/","summary":"tags: Merkle tree,Blockchain,Starcoin Web3 StarTrek source: Gao, Zhenhuan, Yuxuan Hu, and Qinfan Wu. “Jellyfish Merkle Tree,” n.d., 12. What is Addressable mean? It means the leaf node in the tree can be found by an address. The address encoded the path to the leaf node, for example, a leaf node in a binary tree, which has 3 level. Its address may be encoded to 010, the corresponding path is: left-\u0026gt;right-\u0026gt;left:","title":"Addressable Merkle Tree(AMT)"},{"content":" tags: Starcoin Web3 StarTrek,Account-Model Blockchain Systems source: https://academy.horizen.io/technology/expert/utxo-vs-account-model/ ","permalink":"https://notes.0081800.xyz/notes/20220607185225-utxo_vs_account_model/","summary":" tags: Starcoin Web3 StarTrek,Account-Model Blockchain Systems source: https://academy.horizen.io/technology/expert/utxo-vs-account-model/ ","title":"UTXO VS. ACCOUNT MODEL"},{"content":" tags: Starcoin Web3 StarTrek,Ethereum,Merkle tree ","permalink":"https://notes.0081800.xyz/notes/20220607185130-account_model_blockchain_systems/","summary":" tags: Starcoin Web3 StarTrek,Ethereum,Merkle tree ","title":"Account-Model Blockchain Systems"},{"content":" tags: Starcoin Web3 StarTrek,Merkle tree,Ethereum Powers the widely known Ethereum network.\n","permalink":"https://notes.0081800.xyz/notes/20220607184852-patricia_merkle_tree/","summary":"tags: Starcoin Web3 StarTrek,Merkle tree,Ethereum Powers the widely known Ethereum network.","title":"Patricia Merkle Tree"},{"content":" tags: Let\u0026rsquo;s Encrypt,Merkle tree source: https://docs.planet.ink/data/seal/ This idea is genius, it use a merkle tree to combine serval notes. And use the root hash of merkel tree to obtain a certificate from Let\u0026rsquo;s Encrypt.\n","permalink":"https://notes.0081800.xyz/notes/20220606141221-seal_is_a_verifiable_timestamp_mechanism_for_cryptographically_proving_that_a_note_is_created_before_a_specific_time/","summary":"tags: Let\u0026rsquo;s Encrypt,Merkle tree source: https://docs.planet.ink/data/seal/ This idea is genius, it use a merkle tree to combine serval notes. And use the root hash of merkel tree to obtain a certificate from Let\u0026rsquo;s Encrypt.","title":"Seal is a verifiable timestamp mechanism for cryptographically proving that a note is created before a specific time."},{"content":" tags: Binary Search,LeetCodeNJ YouTube: https://www.youtube.com/watch?v=LPFhl65R7ww The most difficult thing is doing binary search among two sorted arrays, in this video Tushar Roy given us a straightforward method of how to do binary search among tow sorted arrays.\nAssume we have two sorted arrays, X and Y, and cut them between at x2,x3 and y3,y4:\nIf we meet the conditions:\nx2 \u0026lt;= y3 y2 \u0026lt;= x3 then we find the median postion, as the merged arrays of the four elements may be order by:\nAs above shows, in the left side: x1,y1,y2, and in the right side: x4,x5,y5. Both sides have the same number of elements, and in the left side are less than or equal those four elements, and in the right side are greater than or equal those four elements.\n","permalink":"https://notes.0081800.xyz/notes/20220606071010-binary_search_median_of_two_sorted_arrays_of_different_sizes/","summary":"tags: Binary Search,LeetCodeNJ YouTube: https://www.youtube.com/watch?v=LPFhl65R7ww The most difficult thing is doing binary search among two sorted arrays, in this video Tushar Roy given us a straightforward method of how to do binary search among tow sorted arrays.\nAssume we have two sorted arrays, X and Y, and cut them between at x2,x3 and y3,y4:\nIf we meet the conditions:\nx2 \u0026lt;= y3 y2 \u0026lt;= x3 then we find the median postion, as the merged arrays of the four elements may be order by:","title":"Binary Search : Median of two sorted arrays of different sizes."},{"content":" tags: Algorithm,Data Structures Make my best effort to move to Nanjing for my son. This is a successor of LeetCode101.\n","permalink":"https://notes.0081800.xyz/notes/20220606071040-leetcodenj/","summary":"tags: Algorithm,Data Structures Make my best effort to move to Nanjing for my son. This is a successor of LeetCode101.","title":"LeetCodeNJ"},{"content":" tags: Starcoin Web3 StarTrek,Blockchain Overview Block is the basic element in a blockchain system, as we known blockchain system is just a ledger, which means a bookkeeping1 that recording of financial transactions. In the blockchain system, those transactions are stored in the blocks. In each block, the data stored in may look like:\nTXN FROM TO VALUE #0 God Cale 100 #1 Cale Alice 10 #2 Alice Bob 1 #3 Bob Mike 0.5 Then what\u0026rsquo;s a blockchain? Just simply chain the blocks together, usually add a field to point to its parent:\nBlocks #0\nParent: None\nData:\nTXN FROM TO VALUE #0 God Cale 100 Blocks #1\nParent: #0\nData:\nTXN FROM TO VALUE #0 Cale Alice 10 #1 Cale Mike 1 Blocks #2 Parent: #1\nData:\nTXN FROM TO VALUE #0 Alice Bob 1 #1 Mike David 0.5 Blocks #3\nParent: #2\nData:\nTXN FROM TO VALUE #0 Bob David 0.5 As above shows, we can figure out each person\u0026rsquo;s balance:\nACCOUNT BALANCE WHY? Cale 89 +100 from god, -10 to Alice, -1 to Mike Alice 9 +10 from Cale, -1 to Bob Bob 0 +1 from Alice, -0.5 to Mike, -0.5 to David Mike 0 +0.5 from Bob, -0.5 to David David 1 +0.5 from Bob, +0.5 from Mike https://en.wikipedia.org/wiki/Bookkeeping\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://notes.0081800.xyz/notes/20220602110916-starcoin_blockchain/","summary":"tags: Starcoin Web3 StarTrek,Blockchain Overview Block is the basic element in a blockchain system, as we known blockchain system is just a ledger, which means a bookkeeping1 that recording of financial transactions. In the blockchain system, those transactions are stored in the blocks. In each block, the data stored in may look like:\nTXN FROM TO VALUE #0 God Cale 100 #1 Cale Alice 10 #2 Alice Bob 1 #3 Bob Mike 0.","title":"Starcoin Blockchain from Scartch"},{"content":" tags: Merkle tree,Starcoin Web3 StarTrek ","permalink":"https://notes.0081800.xyz/notes/20220602102655-sparse_merkle_tree/","summary":" tags: Merkle tree,Starcoin Web3 StarTrek ","title":"Sparse Merkle Tree"},{"content":" tags: Starcoin Web3 StarTrek,Sparse Merkle Tree,Merkle tree,LSM-Tree,Account-Model Blockchain Systems source: Gao, Zhenhuan, Yuxuan Hu, and Qinfan Wu. “Jellyfish Merkle Tree,” n.d., 12. JMT(Jellyfish Merkle Tree) a LSM-tree based Implementation of Sparse Merkle Tree Inspired by Patricia Merkle Tree and has been implemented in Rust, but it is language-independent.\nMerkel tree fits pretty well as an authenticated key-value store holding a huge amount of data in a tamper-proof way.\nTwo major concerns where people have been trying to achieve some enhnacements:\nComputation cost\nStorage footprint\nAmong above: Sparse Merkel Tree cut off unnecessary complexity in more compact and efficient merkel tree design, to provide a more compact and efficient merkel tree.\nWith sparseness can benefit:\nEscape from excessive computation and space overhead.\nLess CPU time in generation and verification: Smaller tree sizes, shorter proofs.\nLess network bandwidth in transmission.\nJMT(Jellyfish Merkle Tree) is built on top of a LSM-tree based key-value storage, featuring version-based key prevent heavy I/O.\n","permalink":"https://notes.0081800.xyz/notes/20220602102439-jellyfish_merkle_tree/","summary":"tags: Starcoin Web3 StarTrek,Sparse Merkle Tree,Merkle tree,LSM-Tree,Account-Model Blockchain Systems source: Gao, Zhenhuan, Yuxuan Hu, and Qinfan Wu. “Jellyfish Merkle Tree,” n.d., 12. JMT(Jellyfish Merkle Tree) a LSM-tree based Implementation of Sparse Merkle Tree Inspired by Patricia Merkle Tree and has been implemented in Rust, but it is language-independent.\nMerkel tree fits pretty well as an authenticated key-value store holding a huge amount of data in a tamper-proof way.\nTwo major concerns where people have been trying to achieve some enhnacements:","title":"Jellyfish Merkle Tree"},{"content":" tags: Starcoin Web3 StarTrek, Proof-of-work Generate nonce (random data) as salt to join to the data of block to be hash. The goal is to find a hash value that less than target. The target is influenced by difficulty. As the difficulty gets bigger and the target will be smaller, which means more difficult to find.\npub fn difficult_to_target(difficulty: U256) -\u0026gt; U256 { U256::max_value() / difficulty } ","permalink":"https://notes.0081800.xyz/notes/20220601190052-starcoin_pow/","summary":" tags: Starcoin Web3 StarTrek, Proof-of-work Generate nonce (random data) as salt to join to the data of block to be hash. The goal is to find a hash value that less than target. The target is influenced by difficulty. As the difficulty gets bigger and the target will be smaller, which means more difficult to find.\npub fn difficult_to_target(difficulty: U256) -\u0026gt; U256 { U256::max_value() / difficulty } ","title":"Starcoin PoW"},{"content":" tags: Starcoin Web3 StarTrek,Blockchain source: Wikipedia: Merkle tree Starcoin Cookbook What is a Merkle tree. Merkle tree is a hash tree, named after Ralph Merkle, who patented in 1979.\nMost implementations of them are binary, which means two child nodes under each node.\nWhy the merkle tree is important to the peer-to-peer network? The main purpose of a merkle tree is to ensure the data we received from a peer-to-peer network are undamaged and unaltered, it\u0026rsquo;s important as the data were splitted into many blocks and stored in multiple nodes in the network.\nIt\u0026rsquo;s also provide a mechanism to check the data without to receive all the data.\nHow does a merkle tree work. Let\u0026rsquo;s check the follow image that download from Wikipedia:\nFrom bottom to top:\nL1,L2,L3,L4: The data are splitted into 4 blocks, and stored as leaf node in the merkle tree. Hash 0-0,Hash 0-1,Hash 1-0,Hash 1-1: Each parent of the data blocks stores the hash of each data block, usually by a cryptographic hash function such as SHA-2. Hash 0, Hash 1: Hash of their children\u0026rsquo;s hash. Top Hash: Hash of their children\u0026rsquo;s hash. As we can see, if any data block is changed, then the root hash or top hash will be changed too. So we can simply compare any two root hash or top hash values to check if the data are changed or not.\nHow does a blockchain industry use the merkel tree? Addressable Merkle Tree(AMT) ","permalink":"https://notes.0081800.xyz/notes/20220601110304-merkle_tree/","summary":"tags: Starcoin Web3 StarTrek,Blockchain source: Wikipedia: Merkle tree Starcoin Cookbook What is a Merkle tree. Merkle tree is a hash tree, named after Ralph Merkle, who patented in 1979.\nMost implementations of them are binary, which means two child nodes under each node.\nWhy the merkle tree is important to the peer-to-peer network? The main purpose of a merkle tree is to ensure the data we received from a peer-to-peer network are undamaged and unaltered, it\u0026rsquo;s important as the data were splitted into many blocks and stored in multiple nodes in the network.","title":"Merkle tree"},{"content":" tags: Starcoin Web3 StarTrek The documentation of Starcoin are written in multiple places:\nThe Developers Documentation on the main site English Version Chinese Version The Starcoin Cookbook English Version Chinese Version ","permalink":"https://notes.0081800.xyz/notes/20220601104619-starcoin_learn_resource/","summary":" tags: Starcoin Web3 StarTrek The documentation of Starcoin are written in multiple places:\nThe Developers Documentation on the main site English Version Chinese Version The Starcoin Cookbook English Version Chinese Version ","title":"Starcoin Learn Resource"},{"content":" tags: Starcoin Web3 StarTrek Why compile starcoin from source? Why not download a released binary? Because I want to contribute code to it, maybe in the future.\nBut the toolchain is awesome, the progress is very simple. Just two steps:\nClone the code from GitHub\ngit clone git@github.com:starcoinorg/starcoin.git Run scripts/dev_setup.sh:\ncd starcoin ./scripts/dev_setup.sh Then we are ready to compile:\ncargo build Wait? You haven\u0026rsquo;t install Rust yet? Please refer to Getting started.\nWhen it have done, then we can run our dev node:\n./target/debug/starcoin -n dev console A starcoin% is waiting for you.\n","permalink":"https://notes.0081800.xyz/notes/20220531133557-compile_starcoin_and_setup_a_dev_node/","summary":"tags: Starcoin Web3 StarTrek Why compile starcoin from source? Why not download a released binary? Because I want to contribute code to it, maybe in the future.\nBut the toolchain is awesome, the progress is very simple. Just two steps:\nClone the code from GitHub\ngit clone git@github.com:starcoinorg/starcoin.git Run scripts/dev_setup.sh:\ncd starcoin ./scripts/dev_setup.sh Then we are ready to compile:\ncargo build Wait? You haven\u0026rsquo;t install Rust yet? Please refer to Getting started.","title":"Compile Starcoin from Source And Setup a Dev Node"},{"content":" tags: Web3 Learn journal of Starcoin Web3 StarTrek Program, check the follow \u0026ldquo;Links to this note\u0026rdquo;.\n","permalink":"https://notes.0081800.xyz/notes/20220531104515-starcoin_web3_startrek/","summary":"tags: Web3 Learn journal of Starcoin Web3 StarTrek Program, check the follow \u0026ldquo;Links to this note\u0026rdquo;.","title":"Starcoin Web3 StarTrek"},{"content":" tags: ipfs source: https://blogchain.app/home ","permalink":"https://notes.0081800.xyz/notes/20220531102226-blogchain/","summary":" tags: ipfs source: https://blogchain.app/home ","title":"Blogchain"},{"content":" source: https://github.com/ipfs/ipfs site: https://ipfs.io/ ","permalink":"https://notes.0081800.xyz/notes/20220531102232-ipfs/","summary":" source: https://github.com/ipfs/ipfs site: https://ipfs.io/ ","title":"ipfs"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20220531102139-ipfs/","summary":"","title":"IPFS"},{"content":"Some words that I always forget util I wrote it down:\ndiscipline collapse phantom ","permalink":"https://notes.0081800.xyz/notes/20220514204502-words_that_i_always_forgot/","summary":"Some words that I always forget util I wrote it down:\ndiscipline collapse phantom ","title":"Words that I always forgot"},{"content":" tags: High Performance,SIMD source: Lemire, Author Daniel. “Fast Bitset Decoding Using Intel AVX-512.” Daniel Lemire’s Blog (blog). Accessed May 12, 2022. https://lemire.me/blog/2022/05/06/fast-bitset-decoding-using-intel-avx-512/. ","permalink":"https://notes.0081800.xyz/notes/20220512182310-fast_bitset_decoding_using_intel_avx_512/","summary":" tags: High Performance,SIMD source: Lemire, Author Daniel. “Fast Bitset Decoding Using Intel AVX-512.” Daniel Lemire’s Blog (blog). Accessed May 12, 2022. https://lemire.me/blog/2022/05/06/fast-bitset-decoding-using-intel-avx-512/. ","title":"Fast bitset decoding using Intel AVX-512"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20220506111914-master_s_degree_in_computer_science/","summary":"","title":"Master’s Degree in Computer Science"},{"content":" tags: Degree source: evanprodromou. “Master’s Degree in Computer Science.” Evan Prodromou’s Blog (blog), May 4, 2022. https://evanp.me/2022/05/04/masters-degree-in-computer-science/. ","permalink":"https://notes.0081800.xyz/notes/20220506111923-master_s_degree_in_computer_science/","summary":" tags: Degree source: evanprodromou. “Master’s Degree in Computer Science.” Evan Prodromou’s Blog (blog), May 4, 2022. https://evanp.me/2022/05/04/masters-degree-in-computer-science/. ","title":"Master’s Degree in Computer Science"},{"content":" tags: Degree source: “【01B0801】 计算机及应用（独立本科段）.” Accessed May 6, 2022. http://zkxcx.bjeea.cn/portal/kszylb.jsp?zydm=01B0801\u0026amp;amp;tab=2. Required Courses Code Name Credit Type Level1 Status2 Free Online Courses 03708 中国近现代史纲要 2 Political 5 pending 03708 马克思主义基本原理概论 4 Political 5 pending 00015 英语（二） 14 Basic 1 passed 00023 高等数学（工本） 10 Basic 7 pending 02197 概率论与数理统计（二） 3 Basic 7 pending 02324 离散数学 4 CS 7 pending 腾讯课堂 04737 C++程序设计 3 CS 1 pending 04738 C++程序设计（实践） 2 CS - pending 02326 操作系统 4 CS 2 pending 02327 操作系统（实践） 1 CS - pending 02331 数据结构 3 CS 2 pending 04734 数据结构（实践） 2 CS - pending 02325 计算机系统结构 4 CS 3 pending 04735 数据库系统原理 4 CS 1 pending 04736 数据库系统原理（实践） 2 CS - pending 02333 软件工程 3 CS 3 pending 02334 软件工程（实践） 1 CS - pending 04741 计算机网络原理 4 CS 2 pending 04747 Java语言程序设计（一） 3 CS 1 pending 04748 Java语言程序设计（一）（实践） 1 CS 1 pending 10027 计算机及应用专业毕业设计 0 CS 1 wait Summary:\nThere are 5 courses were marked as hard: 2 political courses and 3 further mathematic courses. We make levels more distinct by using the fibonacci numbers: 1: don\u0026rsquo;t need care. 2: shall take a look. 3: shall study. 5: shall study hard. 7: shall study really hard. Materials We can buy those materials in the e-shop, named JD or Taobao in China. Just search the code of the speciality in those platforms, here is what I input: 01B0801.\nMoney Tracking Item Cost Time Let\u0026rsquo;s Sprint Sprint 2022/10 I found some examination papers that used before to evaluate the level.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\npending, processing, passed\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://notes.0081800.xyz/notes/20220506104347-01b0801_%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8F%8A%E5%BA%94%E7%94%A8_%E7%8B%AC%E7%AB%8B%E6%9C%AC%E7%A7%91%E6%AE%B5/","summary":"tags: Degree source: “【01B0801】 计算机及应用（独立本科段）.” Accessed May 6, 2022. http://zkxcx.bjeea.cn/portal/kszylb.jsp?zydm=01B0801\u0026amp;amp;tab=2. Required Courses Code Name Credit Type Level1 Status2 Free Online Courses 03708 中国近现代史纲要 2 Political 5 pending 03708 马克思主义基本原理概论 4 Political 5 pending 00015 英语（二） 14 Basic 1 passed 00023 高等数学（工本） 10 Basic 7 pending 02197 概率论与数理统计（二） 3 Basic 7 pending 02324 离散数学 4 CS 7 pending 腾讯课堂 04737 C++程序设计 3 CS 1 pending 04738 C++程序设计（实践） 2 CS - pending 02326 操作系统 4 CS 2 pending 02327 操作系统（实践） 1 CS - pending 02331 数据结构 3 CS 2 pending 04734 数据结构（实践） 2 CS - pending 02325 计算机系统结构 4 CS 3 pending 04735 数据库系统原理 4 CS 1 pending 04736 数据库系统原理（实践） 2 CS - pending 02333 软件工程 3 CS 3 pending 02334 软件工程（实践） 1 CS - pending 04741 计算机网络原理 4 CS 2 pending 04747 Java语言程序设计（一） 3 CS 1 pending 04748 Java语言程序设计（一）（实践） 1 CS 1 pending 10027 计算机及应用专业毕业设计 0 CS 1 wait Summary:","title":"【01B0801】 计算机及应用（独立本科段）"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20220506102543-carr/","summary":"","title":"Carr"},{"content":" tags: Degree, Career I haven\u0026rsquo;t got a CS degree, it wasn\u0026rsquo;t a big deal when I was yonger, as I was cheap and many employers could affort, and didn\u0026rsquo;t care too much about it.\nBut now days, when I\u0026rsquo;m 30+ years old, and not cheap anymore. The employers who can affort me are much less. And most of them are required a CS degree, so the degree is important to me now.\nIn China, there are three ways to get a degree after leave school, which are provided by Education Examinations Authority. As I live in Beijing, it names Beijing Education Examinations Authority(BEEA). The three ways are similar: All of them have courses to study, and pass the examination to get credit, then get the degree when credit is enough.\nBut they are diffent in the diffcult level:\nThe easiest is study from network, follow the schedule of university, and go to the proper university to take examinations, it easy because the teacher will tell you the answer before the examination. It takes about 4 years, as it like the normal school, but over internet. The second one is study at school, follow the schedule of university, take examinations. The difference between above is you need study in the university. The most hard is study by yourself, and take the proper examinations, pass them, get the credit. The time flexible, you can make your own schedule. I choose the most hard way: self study and take examinations, as I could pass a lot courses without study.\nThe most hard parts are:\nSome political courses which can\u0026rsquo;t avoid in China, it has no logics, must force remember. Further Mathematics. Now we need a plan and I\u0026rsquo;ll record all the time costs.\n","permalink":"https://notes.0081800.xyz/notes/20220506102535-why_i_decide_to_get_a_computer_science_degree_in_2022/","summary":"tags: Degree, Career I haven\u0026rsquo;t got a CS degree, it wasn\u0026rsquo;t a big deal when I was yonger, as I was cheap and many employers could affort, and didn\u0026rsquo;t care too much about it.\nBut now days, when I\u0026rsquo;m 30+ years old, and not cheap anymore. The employers who can affort me are much less. And most of them are required a CS degree, so the degree is important to me now.","title":"Why I Decide to Get A Computer Science Degree in 2022"},{"content":" tags: Degree source: Engineer, Lowly Midwestern. “My Experience Getting a Tech Job with No Degree or Relevant Work Experience.” Substack newsletter. Lowly Midwestern Engineers’ Newsletter (blog), May 2, 2022. https://lowlyswe.substack.com/p/my-experience-getting-a-tech-job. ","permalink":"https://notes.0081800.xyz/notes/20220506101358-my_experience_getting_a_tech_job_with_no_degree_or_relevant_work_experience/","summary":" tags: Degree source: Engineer, Lowly Midwestern. “My Experience Getting a Tech Job with No Degree or Relevant Work Experience.” Substack newsletter. Lowly Midwestern Engineers’ Newsletter (blog), May 2, 2022. https://lowlyswe.substack.com/p/my-experience-getting-a-tech-job. ","title":"My experience getting a tech job with no degree or relevant work experience"},{"content":" tags: Degree source: “How I Got a Computer Science Degree in 3 Months for Less Than $5000 | Miguel Rochefort.” Accessed April 28, 2022. https://miguelrochefort.com/blog/cs-degree/. ","permalink":"https://notes.0081800.xyz/notes/20220506101023-how_i_got_a_computer_science_degree_in_3_months_for_less_than_5000_miguel_rochefort/","summary":" tags: Degree source: “How I Got a Computer Science Degree in 3 Months for Less Than $5000 | Miguel Rochefort.” Accessed April 28, 2022. https://miguelrochefort.com/blog/cs-degree/. ","title":"How I Got a Computer Science Degree in 3 Months for Less Than $5000 | Miguel Rochefort"},{"content":" tags: Career ","permalink":"https://notes.0081800.xyz/notes/20220506100932-degree/","summary":" tags: Career ","title":"Degree"},{"content":" tags: SIMD,High Performance source: “Luhn Algorithm Using SWAR and SIMD.” Accessed May 5, 2022. https://nullprogram.com/blog/2022/04/30/. 3x increase after used SIMD.\n","permalink":"https://notes.0081800.xyz/notes/20220505144135-luhn_algorithm_using_swar_and_simd/","summary":"tags: SIMD,High Performance source: “Luhn Algorithm Using SWAR and SIMD.” Accessed May 5, 2022. https://nullprogram.com/blog/2022/04/30/. 3x increase after used SIMD.","title":"Luhn algorithm using SWAR and SIMD"},{"content":" tags: SSE/AVX/AVX2/AVX512,High Performance source: Lemire, Author Daniel. “Removing Characters from Strings Faster with AVX-512.” Daniel Lemire’s Blog (blog). Accessed May 5, 2022. https://lemire.me/blog/2022/04/28/removing-characters-from-strings-faster-with-avx-512/. It\u0026rsquo;s 21.25 times faster with AVX-152: 0.4 GB/s to 8.5 GB/s.\n","permalink":"https://notes.0081800.xyz/notes/20220505141919-removing_characters_from_strings_faster_with_avx_512/","summary":"tags: SSE/AVX/AVX2/AVX512,High Performance source: Lemire, Author Daniel. “Removing Characters from Strings Faster with AVX-512.” Daniel Lemire’s Blog (blog). Accessed May 5, 2022. https://lemire.me/blog/2022/04/28/removing-characters-from-strings-faster-with-avx-512/. It\u0026rsquo;s 21.25 times faster with AVX-152: 0.4 GB/s to 8.5 GB/s.","title":"Removing characters from strings faster with AVX-512"},{"content":" tags: Emacs,GnuPG Pinentry,GnuPG,GnuPG Agent There is a little bit more background here: I\u0026rsquo;m using Windows Subsystem Linux(WSL) now, which means I was running Emacs in a virtual machine with Debian Linux distro.\nAnd also I ran Emacs in GUI mode with WSL, the pinentry for GnuPG Agent is: /usr/bin/pinentry-gtk2, everything was prefect.\nThis morning I couldn\u0026rsquo;t commit with Magit in Emacs, when I was running my Emacs in Terminal Text Mode.\nThe first thing I had done is change the pinentry:\nsudo apt install pinentry-tty sudo update-alternatives --config pinentry # Choice /usr/bin/pinentry-tty That not work, even in the bash without Magit, then I tried:\nexport GPG_TTY=$(tty) gpg-connect-agent updatestartuptty /bye \u0026gt;/dev/null Then I could commit in bash, but still couldn\u0026rsquo;t commit with Magit.\nFinally I realized that I executed above commands that still in the Emacs, with vterm. So:\nI quit the Emacs. Executed the above commands. Start Emacs again. And it works, for temporary, as GnuPG Agent has cached the credential, we just didn\u0026rsquo;t need to enter password.\n","permalink":"https://notes.0081800.xyz/notes/20220501082812-gnupg_can_not_sign_commit_with_magit_in_terminal_text_mode/","summary":"tags: Emacs,GnuPG Pinentry,GnuPG,GnuPG Agent There is a little bit more background here: I\u0026rsquo;m using Windows Subsystem Linux(WSL) now, which means I was running Emacs in a virtual machine with Debian Linux distro.\nAnd also I ran Emacs in GUI mode with WSL, the pinentry for GnuPG Agent is: /usr/bin/pinentry-gtk2, everything was prefect.\nThis morning I couldn\u0026rsquo;t commit with Magit in Emacs, when I was running my Emacs in Terminal Text Mode.","title":"GnuPG Can not Sign Commit with Magit in Terminal Text Mode"},{"content":" tags: Unix,Tools ","permalink":"https://notes.0081800.xyz/notes/20220501082607-gnupg/","summary":" tags: Unix,Tools ","title":"GnuPG"},{"content":" tags: GnuPG ","permalink":"https://notes.0081800.xyz/notes/20220501082647-gnupg_agent/","summary":" tags: GnuPG ","title":"GnuPG Agent"},{"content":" tags: GnuPG,GnuPG Agent ","permalink":"https://notes.0081800.xyz/notes/20220501082558-gnupg_pinentry/","summary":" tags: GnuPG,GnuPG Agent ","title":"GnuPG Pinentry"},{"content":" tags: Data Structures,Algorithm ","permalink":"https://notes.0081800.xyz/notes/20220427074209-graph/","summary":" tags: Data Structures,Algorithm ","title":"Graph"},{"content":" tags: Algorithm,Tree,Graph source: https://en.wikipedia.org/wiki/Minimum%5Fspanning%5Ftree ","permalink":"https://notes.0081800.xyz/notes/20220427074048-minimum_spanning_tree/","summary":" tags: Algorithm,Tree,Graph source: https://en.wikipedia.org/wiki/Minimum%5Fspanning%5Ftree ","title":"Minimum spanning tree"},{"content":" tags: High Performance source: https://en.wikipedia.org/wiki/Non-uniform_memory_access ","permalink":"https://notes.0081800.xyz/notes/20220416080519-numa/","summary":" tags: High Performance source: https://en.wikipedia.org/wiki/Non-uniform_memory_access ","title":"NUMA"},{"content":" tags: Linux,Network,Tools netstat -s: show network status(errors) # show udp status $ netstat -s --udp Udp: 437.0k/s packets received 0.0/s packets to unknown port received. 386.9k/s packet receive errors 0.0/s packets sent RcvbufErrors: 123.8k/s SndbufErrors: 0 InCsumErrors: 0 ","permalink":"https://notes.0081800.xyz/notes/20220416075544-netstat/","summary":" tags: Linux,Network,Tools netstat -s: show network status(errors) # show udp status $ netstat -s --udp Udp: 437.0k/s packets received 0.0/s packets to unknown port received. 386.9k/s packet receive errors 0.0/s packets sent RcvbufErrors: 123.8k/s SndbufErrors: 0 InCsumErrors: 0 ","title":"netstat"},{"content":" tags: Linux,Network,TCP,UDP,Tools ethtool -S: Reveal where the packets actuaaly went receiver$ watch \u0026#39;sudo ethtool -S eth2 |grep rx\u0026#39; rx_nodesc_drop_cnt: 451.3k/s rx-0.rx_packets: 8.0/s rx-1.rx_packets: 0.0/s rx-2.rx_packets: 0.0/s rx-3.rx_packets: 0.5/s rx-4.rx_packets: 355.2k/s rx-5.rx_packets: 0.0/s rx-6.rx_packets: 0.0/s rx-7.rx_packets: 0.5/s rx-8.rx_packets: 0.0/s rx-9.rx_packets: 0.0/s rx-10.rx_packets: 0.0/s ","permalink":"https://notes.0081800.xyz/notes/20220416073825-ethtool/","summary":" tags: Linux,Network,TCP,UDP,Tools ethtool -S: Reveal where the packets actuaaly went receiver$ watch \u0026#39;sudo ethtool -S eth2 |grep rx\u0026#39; rx_nodesc_drop_cnt: 451.3k/s rx-0.rx_packets: 8.0/s rx-1.rx_packets: 0.0/s rx-2.rx_packets: 0.0/s rx-3.rx_packets: 0.5/s rx-4.rx_packets: 355.2k/s rx-5.rx_packets: 0.0/s rx-6.rx_packets: 0.0/s rx-7.rx_packets: 0.5/s rx-8.rx_packets: 0.0/s rx-9.rx_packets: 0.0/s rx-10.rx_packets: 0.0/s ","title":"ethtool"},{"content":" tags: Linux,High Performance,Network,ethtool source: The Cloudflare Blog. “How to Receive a Million Packets per Second,” June 16, 2015. http://blog.cloudflare.com/how-to-receive-a-million-packets/. What are Multi-queue NICs RX queue was used to pass packets between hardware and kernel. Now days NICs support multiple RX queues: Each RX queue is pinned to a separate CPU.\nMulti-queue hashing algorithms Use a hash from packet to decide the RX queue number. The hash is usually counted from a tuple (src IP, dst IP, src port, dst port). This guarantees that packets for a single flow will always end up on exactly the same RX queue, and reordering of packets within a single flow can\u0026rsquo;t happen.\nThe hash algorithm is configurable with ethtool\nreceiver$ ethtool -n eth2 rx-flow-hash udp4 UDP over IPV4 flows use these fields for computing Hash flow key: IP SA IP DA Reads as\nRX_queue_number = hash(\u0026#39;192.168.254.30\u0026#39;, \u0026#39;192.168.254.1\u0026#39;) % number_of_queues ","permalink":"https://notes.0081800.xyz/notes/20220416073757-multi_queue_nics/","summary":"tags: Linux,High Performance,Network,ethtool source: The Cloudflare Blog. “How to Receive a Million Packets per Second,” June 16, 2015. http://blog.cloudflare.com/how-to-receive-a-million-packets/. What are Multi-queue NICs RX queue was used to pass packets between hardware and kernel. Now days NICs support multiple RX queues: Each RX queue is pinned to a separate CPU.\nMulti-queue hashing algorithms Use a hash from packet to decide the RX queue number. The hash is usually counted from a tuple (src IP, dst IP, src port, dst port).","title":"Multi-queue NICs"},{"content":" tags: Network,Linux,Tools ","permalink":"https://notes.0081800.xyz/notes/20220416073414-iptables/","summary":" tags: Network,Linux,Tools ","title":"iptables"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20220415065058-assembly/","summary":"","title":"Assembly"},{"content":" tags: Network,UDP,High Performance,iptables,ethtool,netstat,NUMA source: The Cloudflare Blog. “How to Receive a Million Packets per Second,” June 16, 2015. http://blog.cloudflare.com/how-to-receive-a-million-packets/. Keys:\nMake sure traffic won\u0026rsquo;t be interfered with by the iptables\niptables -I INPUT 1 -p udp --dport 4321 -j ACCEPT iptables -t raw -I PREROUTING 1 -p udp --dport 4321 -j NOTRACK #+end_src[[id:C471A6FF-7F4E-4E23-B070-14CE146BFA14][Multi-queue NICs]] 2. The first bottleneck ​\t+ All packets are received by a signal RX queue, checked out with =ethtool -S=. ​\t+ How to solve: according to [[id:C471A6FF-7F4E-4E23-B070-14CE146BFA14][Multi-queue NICs]], change the hash algorithm with =ethtool=: #+begin_src bash ethtool -N eth2 rx-flow-hash udp4 sdfn Multiple threads with NUMA, and with multiple receiver ips to fit in multi-queue hash algorithm. Also note that there is a lock contention on the UDP receive buffer side, see Rivera, Diego, Eduardo Acha, Jose Piquer, and Javier Bustos-Jimenez. “Analysis of Linux UDP Sockets Concurrent Performance.” In 2014 33rd International Conference of the Chilean Computer Science Society (SCCC), 65–69. Talca: IEEE, 2014. https://doi.org/10.1109/SCCC.2014.8.\nSO_REUSEPORT to avoid the lock on the UDP receive buffer.\nWhen this flag is set on a socket descriptor, Linux will allow many processes to bind to the same port. In fact, any number of processes will be allowed to bind and the load will be spread across them.\nWith SO_REUSEPORT each of the processes will have a separate socket descriptor. Therefore each will own a dedicated UDP receive buffer. This avoids the contention issues previously encountered:\n","permalink":"https://notes.0081800.xyz/notes/20220414185003-how_to_receive_a_million_packets_per_second/","summary":"tags: Network,UDP,High Performance,iptables,ethtool,netstat,NUMA source: The Cloudflare Blog. “How to Receive a Million Packets per Second,” June 16, 2015. http://blog.cloudflare.com/how-to-receive-a-million-packets/. Keys:\nMake sure traffic won\u0026rsquo;t be interfered with by the iptables\niptables -I INPUT 1 -p udp --dport 4321 -j ACCEPT iptables -t raw -I PREROUTING 1 -p udp --dport 4321 -j NOTRACK #+end_src[[id:C471A6FF-7F4E-4E23-B070-14CE146BFA14][Multi-queue NICs]] 2. The first bottleneck ​\t+ All packets are received by a signal RX queue, checked out with =ethtool -S=.","title":"How to receive a million packets per second"},{"content":" tags: Network ","permalink":"https://notes.0081800.xyz/notes/20220414185017-udp/","summary":" tags: Network ","title":"UDP"},{"content":" tags: Network ","permalink":"https://notes.0081800.xyz/notes/20220414161423-multicast/","summary":" tags: Network ","title":"Multicast"},{"content":" tags: Distributed Systems ","permalink":"https://notes.0081800.xyz/notes/20220414150932-clock_synchronization/","summary":" tags: Distributed Systems ","title":"Clock Synchronization"},{"content":" tags: C/C++ Capture a map with reference If we capture a map by value, then we can\u0026rsquo;t use the operator []:\nunordered_map\u0026lt;int, int\u0026gt; freq; // Won\u0026#39;t compile // auto comp_by_map = [freq](const int\u0026amp; a, const int\u0026amp; b) { return freq[a] \u0026lt; freq[b];}; auto comp_by_map = [\u0026amp;freq](const int\u0026amp; a, const int\u0026amp; b) { return freq[a] \u0026lt; freq[b];}; ","permalink":"https://notes.0081800.xyz/notes/20220409082936-c_lambda/","summary":" tags: C/C++ Capture a map with reference If we capture a map by value, then we can\u0026rsquo;t use the operator []:\nunordered_map\u0026lt;int, int\u0026gt; freq; // Won\u0026#39;t compile // auto comp_by_map = [freq](const int\u0026amp; a, const int\u0026amp; b) { return freq[a] \u0026lt; freq[b];}; auto comp_by_map = [\u0026amp;freq](const int\u0026amp; a, const int\u0026amp; b) { return freq[a] \u0026lt; freq[b];}; ","title":"C++ Lambda"},{"content":" tags: Hash Table,Heap (data structure),LeetCode101,Priority Queue,C++ Lambda class Solution { public: vector\u0026lt;int\u0026gt; topKFrequent(vector\u0026lt;int\u0026gt;\u0026amp; nums, int k) { vector\u0026lt;int\u0026gt; res; unordered_map\u0026lt;int, int\u0026gt; freq; // Note that: we need caputre a map by reference, // otherwise we can\u0026#39;t use the operator[]. // See also: https://stackoverflow.com/a/6281071 auto comp_by_map = [\u0026amp;freq](const int\u0026amp; a, const int\u0026amp; b) { return freq[a] \u0026lt; freq[b]; }; // Note that: here we need pass our lambda /comp_by_map/ to the // constructor of std::priority_queue. priority_queue\u0026lt;int, vector\u0026lt;int\u0026gt;, decltype(comp_by_map)\u0026gt; pq(comp_by_map); for (auto n: nums) { freq[n] = freq.find(n) == freq.end() ? 1 : freq[n] + 1; } for (auto iter: freq) { pq.push(iter.first); } while (k \u0026gt; 0) { res.push_back(pq.top()); pq.pop(); k--; } return res; } }; ","permalink":"https://notes.0081800.xyz/notes/20220409082813-leetcode101_347_top_k_frequent_elements/","summary":"tags: Hash Table,Heap (data structure),LeetCode101,Priority Queue,C++ Lambda class Solution { public: vector\u0026lt;int\u0026gt; topKFrequent(vector\u0026lt;int\u0026gt;\u0026amp; nums, int k) { vector\u0026lt;int\u0026gt; res; unordered_map\u0026lt;int, int\u0026gt; freq; // Note that: we need caputre a map by reference, // otherwise we can\u0026#39;t use the operator[]. // See also: https://stackoverflow.com/a/6281071 auto comp_by_map = [\u0026amp;freq](const int\u0026amp; a, const int\u0026amp; b) { return freq[a] \u0026lt; freq[b]; }; // Note that: here we need pass our lambda /comp_by_map/ to the // constructor of std::priority_queue.","title":"LeetCode101: 347. Top K Frequent Elements"},{"content":" tags: LeetCode101,In-place Travel array in reverse order, and record how many times need to swap, which is how many elements not equal val.\nclass Solution { public: int removeElement(vector\u0026lt;int\u0026gt;\u0026amp; nums, int val) { int k = 0; for (int j = nums.size() - 1; j \u0026gt;= 0; --j) { if (nums[j] == val) { for (int i = 0; i \u0026lt; k; ++i) { swap(nums[i + j], nums[j + i + 1]); } } else { k++; } } return k; } }; ","permalink":"https://notes.0081800.xyz/notes/20220408131130-leetcode101_27_remove_element/","summary":" tags: LeetCode101,In-place Travel array in reverse order, and record how many times need to swap, which is how many elements not equal val.\nclass Solution { public: int removeElement(vector\u0026lt;int\u0026gt;\u0026amp; nums, int val) { int k = 0; for (int j = nums.size() - 1; j \u0026gt;= 0; --j) { if (nums[j] == val) { for (int i = 0; i \u0026lt; k; ++i) { swap(nums[i + j], nums[j + i + 1]); } } else { k++; } } return k; } }; ","title":"LeetCode101: 27. Remove Element"},{"content":" tags: Two Pointers,Three Pointers,LeetCode101,Sorting Based on:\nLeetCode101: 167. Two Sum II - Input Array Is Sorted LeetCode101: 15. 3Sum We create a new loop:\nclass Solution { public: vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; fourSum(vector\u0026lt;int\u0026gt;\u0026amp; nums, int target) { sort(nums.begin(), nums.end()); vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; res; int T, S, r, l; for (int i = 0; i \u0026lt; nums.size(); ++i) { if (i \u0026gt; 0 \u0026amp;\u0026amp; nums[i] == nums[i - 1]) { continue; } for (int j = i + 1; j \u0026lt; nums.size(); ++j) { if (j \u0026gt; i + 1 \u0026amp;\u0026amp; nums[j] == nums[j - 1]) { continue; } l = j + 1; r = nums.size() - 1; T = target - nums[i] - nums[j]; while (l \u0026lt; r) { S = nums[l] + nums[r]; if (S == T) { res.push_back({nums[i], nums[j], nums[l], nums[r]}); while (l \u0026lt; r \u0026amp;\u0026amp; nums[l] == nums[l + 1]) { l++; } while (l \u0026lt; r \u0026amp;\u0026amp; nums[r] == nums[r - 1]) { r--; } l++; r--; } else if (S \u0026lt; T) { l++; } else { r--; } } } } return res; } }; ","permalink":"https://notes.0081800.xyz/notes/20220408125015-leetcode101_18_4sum/","summary":"tags: Two Pointers,Three Pointers,LeetCode101,Sorting Based on:\nLeetCode101: 167. Two Sum II - Input Array Is Sorted LeetCode101: 15. 3Sum We create a new loop:\nclass Solution { public: vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; fourSum(vector\u0026lt;int\u0026gt;\u0026amp; nums, int target) { sort(nums.begin(), nums.end()); vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; res; int T, S, r, l; for (int i = 0; i \u0026lt; nums.size(); ++i) { if (i \u0026gt; 0 \u0026amp;\u0026amp; nums[i] == nums[i - 1]) { continue; } for (int j = i + 1; j \u0026lt; nums.","title":"LeetCode101: 18. 4Sum"},{"content":" tags: Priority Queue,LeetCode101 Using a min heap to keep k elements, top is the Kth largest element.\nclass KthLargest { private: // min heap priority_queue\u0026lt;int, vector\u0026lt;int\u0026gt;, std::greater\u0026lt;int\u0026gt;\u0026gt; pq; int K; public: KthLargest(int k, vector\u0026lt;int\u0026gt;\u0026amp; nums) { K = k; for (auto n: nums) { add(n); } } int add(int val) { pq.push(val); while (pq.size() \u0026gt; K) { pq.pop(); } return pq.top(); } }; /** * Your KthLargest object will be instantiated and called as such: * KthLargest* obj = new KthLargest(k, nums); * int param_1 = obj-\u0026gt;add(val); */ ","permalink":"https://notes.0081800.xyz/notes/20220408123913-leetcode101_703_kth_largest_element_in_a_stream/","summary":" tags: Priority Queue,LeetCode101 Using a min heap to keep k elements, top is the Kth largest element.\nclass KthLargest { private: // min heap priority_queue\u0026lt;int, vector\u0026lt;int\u0026gt;, std::greater\u0026lt;int\u0026gt;\u0026gt; pq; int K; public: KthLargest(int k, vector\u0026lt;int\u0026gt;\u0026amp; nums) { K = k; for (auto n: nums) { add(n); } } int add(int val) { pq.push(val); while (pq.size() \u0026gt; K) { pq.pop(); } return pq.top(); } }; /** * Your KthLargest object will be instantiated and called as such: * KthLargest* obj = new KthLargest(k, nums); * int param_1 = obj-\u0026gt;add(val); */ ","title":"LeetCode101: 703. Kth Largest Element in a Stream"},{"content":" tags: Heap (data structure),LeetCode101 Find top k values, classical heap problems.\nHere we need find top 2 values, and pop them from heap, then we will meet two cases:\nIf they are not same, put back the differ between them, continue. Otherwise, continue directly. ","permalink":"https://notes.0081800.xyz/notes/20220408070926-leetcode101_1046_last_stone_weight/","summary":" tags: Heap (data structure),LeetCode101 Find top k values, classical heap problems.\nHere we need find top 2 values, and pop them from heap, then we will meet two cases:\nIf they are not same, put back the differ between them, continue. Otherwise, continue directly. ","title":"LeetCode101: 1046. Last Stone Weight"},{"content":" tags: LeetCode101,Sorting,Two Pointers Key ideas:\nMove both sides to inwards. If the sum value less than target, move left pointer. Otherwise move right poinger. class Solution { public: vector\u0026lt;int\u0026gt; twoSum(vector\u0026lt;int\u0026gt;\u0026amp; numbers, int target) { int S, l = 0, r = numbers.size() - 1; vector\u0026lt;int\u0026gt; res(2, 0); while (l \u0026lt; r) { S = numbers[l] + numbers[r]; if (S == target) { break; } if (S \u0026lt; target) { l++; } else { r--; } } res[0] = l + 1; res[1] = r + 1; return res; } }; ","permalink":"https://notes.0081800.xyz/notes/20220407081954-leetcode101_167_two_sum_ii_input_array_is_sorted/","summary":" tags: LeetCode101,Sorting,Two Pointers Key ideas:\nMove both sides to inwards. If the sum value less than target, move left pointer. Otherwise move right poinger. class Solution { public: vector\u0026lt;int\u0026gt; twoSum(vector\u0026lt;int\u0026gt;\u0026amp; numbers, int target) { int S, l = 0, r = numbers.size() - 1; vector\u0026lt;int\u0026gt; res(2, 0); while (l \u0026lt; r) { S = numbers[l] + numbers[r]; if (S == target) { break; } if (S \u0026lt; target) { l++; } else { r--; } } res[0] = l + 1; res[1] = r + 1; return res; } }; ","title":"LeetCode101: 167. Two Sum II - Input Array Is Sorted"},{"content":" tags: LeetCode101,Sorting,Two Pointers,Three Pointers Key ideas see LeetCode101: 15. 3Sum\nclass Solution { public: int threeSumClosest(vector\u0026lt;int\u0026gt;\u0026amp; nums, int target) { sort(nums.begin(), nums.end()); int closest = INT_MAX, l, r, sum, T, res; for (int i = 0; i \u0026lt; nums.size(); i++) { l = i + 1; r = nums.size() - 1; T = target - nums[i]; while (l \u0026lt; r) { sum = nums[l] + nums[r]; if (abs(sum - T) \u0026lt; closest) { res = sum + nums[i]; closest = abs(sum - T); } if (sum == T) { return target; } if (sum \u0026lt; T) { l++; } else { r--; } } } return res; } }; ","permalink":"https://notes.0081800.xyz/notes/20220407081015-leetcode101_16_3sum_closest/","summary":" tags: LeetCode101,Sorting,Two Pointers,Three Pointers Key ideas see LeetCode101: 15. 3Sum\nclass Solution { public: int threeSumClosest(vector\u0026lt;int\u0026gt;\u0026amp; nums, int target) { sort(nums.begin(), nums.end()); int closest = INT_MAX, l, r, sum, T, res; for (int i = 0; i \u0026lt; nums.size(); i++) { l = i + 1; r = nums.size() - 1; T = target - nums[i]; while (l \u0026lt; r) { sum = nums[l] + nums[r]; if (abs(sum - T) \u0026lt; closest) { res = sum + nums[i]; closest = abs(sum - T); } if (sum == T) { return target; } if (sum \u0026lt; T) { l++; } else { r--; } } } return res; } }; ","title":"LeetCode101: 16. 3Sum Closest"},{"content":" tags: LeetCode101,Sorting,Two Pointers,Three Pointers Key ideas:\nSort the nums first. Then, we travel the nums, pick current element as nums[i], and apply LeetCode101: 167. Two Sum II - Input Array Is Sorted to the remains. We skip the same numbers to avoid duplicate. class Solution { public: vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; threeSum(vector\u0026lt;int\u0026gt;\u0026amp; nums) { sort(nums.begin(), nums.end()); int l, r, sum, T; vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; res; for (int i = 0; i \u0026lt; nums.size(); i++) { // Skip same numbers to avoid duplicate if(i \u0026gt; 0 \u0026amp;\u0026amp; nums[i] == nums[i-1]) { continue; } l = i + 1; r = nums.size() - 1; T = 0 - nums[i]; while (l \u0026lt; r) { sum = nums[l] + nums[r]; if (sum == T) { res.push_back({nums[i], nums[l], nums[r]}); // Skip same numbers in each side to avoid duplicate while (l \u0026lt; r \u0026amp;\u0026amp; nums[l] == nums[l + 1]) l++; while (l \u0026lt; r \u0026amp;\u0026amp; nums[r] == nums[r - 1]) r--; l++; r--; } else if (sum \u0026lt; T) { l++; } else { r--; } } } return res; } }; ","permalink":"https://notes.0081800.xyz/notes/20220407080010-leetcode101_15_3sum/","summary":"tags: LeetCode101,Sorting,Two Pointers,Three Pointers Key ideas:\nSort the nums first. Then, we travel the nums, pick current element as nums[i], and apply LeetCode101: 167. Two Sum II - Input Array Is Sorted to the remains. We skip the same numbers to avoid duplicate. class Solution { public: vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; threeSum(vector\u0026lt;int\u0026gt;\u0026amp; nums) { sort(nums.begin(), nums.end()); int l, r, sum, T; vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; res; for (int i = 0; i \u0026lt; nums.size(); i++) { // Skip same numbers to avoid duplicate if(i \u0026gt; 0 \u0026amp;\u0026amp; nums[i] == nums[i-1]) { continue; } l = i + 1; r = nums.","title":"LeetCode101: 15. 3Sum"},{"content":" tags: Two Pointers ","permalink":"https://notes.0081800.xyz/notes/20220407080033-three_pointers/","summary":" tags: Two Pointers ","title":"Three Pointers"},{"content":" tags: String,Two Pointers,LeetCode101 Two pointers move inwards, when we meet two different characters:\nRemove left character to see if the remains string still satisfied a valid palindrome. Remove right character to see if the remains string still satisfied a valid palindrome. Returns true if either one above two is true.\nclass Solution { public: bool validPalindrome(string s) { for (int i = 0, j = s.size() -1; i \u0026lt; j; i++,j--) { if (s[i] != s[j]) { // remove left auto left = isPalindrome(s, i + 1, j); // remove right auto right = isPalindrome(s, i, j - 1); // return at here as we have traveled the string in the // invocation of isPalindrome. return right || left; } } return true; } private: bool isPalindrome(string \u0026amp; s, int i, int j) { for (; i \u0026lt; j; i++,j--) { if (s[i] != s[j]) { return false; } } return true; } }; ","permalink":"https://notes.0081800.xyz/notes/20220402143729-leetcode101_680_valid_palindrome_ii/","summary":"tags: String,Two Pointers,LeetCode101 Two pointers move inwards, when we meet two different characters:\nRemove left character to see if the remains string still satisfied a valid palindrome. Remove right character to see if the remains string still satisfied a valid palindrome. Returns true if either one above two is true.\nclass Solution { public: bool validPalindrome(string s) { for (int i = 0, j = s.size() -1; i \u0026lt; j; i++,j--) { if (s[i] !","title":"LeetCode101: 680. Valid Palindrome II"},{"content":" tags: In-place WikiPedia: https://en.wikipedia.org/wiki/In-place%5Falgorithm Let see two examples before we go further:\nAs above we can see, to reverse a array in-place, we just need swap each two elements in the array from both side to middle.\nThe pseudo code from WikiPedia:\nfunction reverse_in_place(a[0..n-1]) for i from 0 to floor((n-2)/2) tmp := a[i] a[i] := a[n − 1 − i] a[n − 1 − i] := tmp The loop travels the array to the middle and swap each other in the list, two points we must be noticed:\nWe stop the element at(not before): floor((n - 2) / 2), It\u0026rsquo;s both 1 of the two above figures. We swap current element with n - 1 - i. ","permalink":"https://notes.0081800.xyz/notes/20220401104307-in_place_reverse/","summary":"tags: In-place WikiPedia: https://en.wikipedia.org/wiki/In-place%5Falgorithm Let see two examples before we go further:\nAs above we can see, to reverse a array in-place, we just need swap each two elements in the array from both side to middle.\nThe pseudo code from WikiPedia:\nfunction reverse_in_place(a[0..n-1]) for i from 0 to floor((n-2)/2) tmp := a[i] a[i] := a[n − 1 − i] a[n − 1 − i] := tmp The loop travels the array to the middle and swap each other in the list, two points we must be noticed:","title":"In-place Reverse"},{"content":" tags: Algorithm ","permalink":"https://notes.0081800.xyz/notes/20220401104238-in_place/","summary":" tags: Algorithm ","title":"In-place"},{"content":" tags: In-place,LeetCode101,In-place Reverse class Solution { public: void reverseString(vector\u0026lt;char\u0026gt;\u0026amp; s) { if (s.size() == 1) { return; } for (int i = 0; i \u0026lt;= (s.size() - 2) / 2; ++i) { swap(s[s.size() - 1 - i], s[i]); } } }; ","permalink":"https://notes.0081800.xyz/notes/20220401104229-leetcode101_344_reverse_string/","summary":" tags: In-place,LeetCode101,In-place Reverse class Solution { public: void reverseString(vector\u0026lt;char\u0026gt;\u0026amp; s) { if (s.size() == 1) { return; } for (int i = 0; i \u0026lt;= (s.size() - 2) / 2; ++i) { swap(s[s.size() - 1 - i], s[i]); } } }; ","title":"LeetCode101: 344. Reverse String"},{"content":" tags: Binary Search,LeetCode101 There is three corner cases must be handled if we don\u0026rsquo;t find target in nums:\nReturn r + 1 if target is greater than right. Or return mid + 1 if target is greater than mid. Otherwise return mid. class Solution { public: int searchInsert(vector\u0026lt;int\u0026gt;\u0026amp; nums, int target) { int l = 0, r = nums.size() - 1; int mid = r / 2; while (l != r) { mid = l + (r - l) / 2; if (target == nums[mid]) { return mid; } if (target \u0026lt; nums[mid]) { r = mid; } else { l = mid + 1; } } if (target \u0026gt; nums[r]) { return r + 1; } if (target \u0026gt; nums[mid]) { return mid + 1; } return mid; } }; ","permalink":"https://notes.0081800.xyz/notes/20220330165507-leetcode101_35_search_insert_position/","summary":"tags: Binary Search,LeetCode101 There is three corner cases must be handled if we don\u0026rsquo;t find target in nums:\nReturn r + 1 if target is greater than right. Or return mid + 1 if target is greater than mid. Otherwise return mid. class Solution { public: int searchInsert(vector\u0026lt;int\u0026gt;\u0026amp; nums, int target) { int l = 0, r = nums.size() - 1; int mid = r / 2; while (l !","title":"LeetCode101: 35. Search Insert Position"},{"content":" tags: Divide-and-Conquer,LeetCode101,Binary Search class Solution { public: bool searchMatrix(vector\u0026lt;vector\u0026lt;int\u0026gt; \u0026gt; \u0026amp;matrix, int target) { int n = matrix.size(); int m = matrix[0].size(); int l = 0, r = m * n - 1; while (l != r){ int mid = l + (r - l) / 2; if (matrix[mid / m][mid % m] \u0026lt; target) l = mid + 1; else r = mid; } return matrix[r / m][r % m] == target; } }; ","permalink":"https://notes.0081800.xyz/notes/20220330160157-leetcode101_74_search_a_2d_matrix/","summary":" tags: Divide-and-Conquer,LeetCode101,Binary Search class Solution { public: bool searchMatrix(vector\u0026lt;vector\u0026lt;int\u0026gt; \u0026gt; \u0026amp;matrix, int target) { int n = matrix.size(); int m = matrix[0].size(); int l = 0, r = m * n - 1; while (l != r){ int mid = l + (r - l) / 2; if (matrix[mid / m][mid % m] \u0026lt; target) l = mid + 1; else r = mid; } return matrix[r / m][r % m] == target; } }; ","title":"LeetCode101: 74. Search a 2D Matrix"},{"content":" tags: Algorithm WIKIEPEDIA: https://en.wikipedia.org/wiki/Divide-and-conquer%5Falgorithm The points should been noted:\nThe middle position is not (right - left) / 2, it must be left + ((right - left) / 2). ","permalink":"https://notes.0081800.xyz/notes/20220330155829-divide_and_conquer/","summary":" tags: Algorithm WIKIEPEDIA: https://en.wikipedia.org/wiki/Divide-and-conquer%5Falgorithm The points should been noted:\nThe middle position is not (right - left) / 2, it must be left + ((right - left) / 2). ","title":"Divide-and-Conquer"},{"content":" tags: Bit Manipulation,Bitwise Operator: XOR According to bitwise operator XOR:\nx ^ x = 0 y ^ 0 = y We apply the XOR operator to all the nums, all the same numbers will apply x ^ x = 0, and then y ^ 0 = y will result the single number.\nclass Solution { public: int singleNumber(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int xorN = 0; for (auto iter = nums.begin(); iter != nums.end(); ++iter) { xorN ^= *iter; } return xorN; } }; ","permalink":"https://notes.0081800.xyz/notes/20220330070916-leetcode101_136_single_number/","summary":"tags: Bit Manipulation,Bitwise Operator: XOR According to bitwise operator XOR:\nx ^ x = 0 y ^ 0 = y We apply the XOR operator to all the nums, all the same numbers will apply x ^ x = 0, and then y ^ 0 = y will result the single number.\nclass Solution { public: int singleNumber(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int xorN = 0; for (auto iter = nums.begin(); iter !","title":"LeetCode101: 136. Single Number"},{"content":" tags: Algorithm ","permalink":"https://notes.0081800.xyz/notes/20220330070500-bit_manipulation/","summary":" tags: Algorithm ","title":"Bit Manipulation"},{"content":" tags: Bitwise Operators 0101 (decimal 5) XOR 0011 (decimal 3) = 0110 (decimal 6)\n0010 (decimal 2) XOR 1010 (decimal 10) = 1000 (decimal 8)\nUseful features:\n1 ^ 1 = 0 2 ^ 0 = 2 ","permalink":"https://notes.0081800.xyz/notes/20220330070545-bitwise_operator_xor/","summary":" tags: Bitwise Operators 0101 (decimal 5) XOR 0011 (decimal 3) = 0110 (decimal 6)\n0010 (decimal 2) XOR 1010 (decimal 10) = 1000 (decimal 8)\nUseful features:\n1 ^ 1 = 0 2 ^ 0 = 2 ","title":"Bitwise Operator: XOR"},{"content":" tags: Cycle detection,Fast \u0026amp; Slow Pointers,LeetCode101 Treat as A Linked List with circle According to the length of nums is n + 1, and integer range is [1, n], so we can treat each element as a index that point to some next value. For example:\n[1,3,4,2,2] It can be treated as(format is element(index)):\n1(0) -\u0026gt; 3(1) -\u0026gt; 2(3) -\u0026gt; 4(3) -\u0026gt; 2(4) -\u0026gt; 4(3)\nWe can see there is a circle in it, so:\nclass Solution { public: int findDuplicate(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int slow = nums[nums[0]]; // 1 step int fast = nums[slow]; // 2 steps while (slow != fast) { slow = nums[slow]; // 1 step fast = nums[nums[fast]]; // move 2 steps } slow = nums[0]; // put tortoise back to beginning. while (slow != fast) { slow = nums[slow]; fast = nums[fast]; } return slow; } }; ","permalink":"https://notes.0081800.xyz/notes/20220329181423-leetcode101_287_find_the_duplicate_number/","summary":"tags: Cycle detection,Fast \u0026amp; Slow Pointers,LeetCode101 Treat as A Linked List with circle According to the length of nums is n + 1, and integer range is [1, n], so we can treat each element as a index that point to some next value. For example:\n[1,3,4,2,2] It can be treated as(format is element(index)):\n1(0) -\u0026gt; 3(1) -\u0026gt; 2(3) -\u0026gt; 4(3) -\u0026gt; 2(4) -\u0026gt; 4(3)\nWe can see there is a circle in it, so:","title":"LeetCode101: 287. Find the Duplicate Number"},{"content":" tags: Cycle detection,Fast \u0026amp; Slow Pointers,LeetCode101 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) {} * }; */ class Solution { public: ListNode *detectCycle(ListNode *head) { if (head == nullptr || head-\u0026gt;next == nullptr) { return nullptr; } // tortoise move 1 step auto slow = head-\u0026gt;next; // hare move 2 steps auto fast = head-\u0026gt;next-\u0026gt;next; while (slow != fast) { if (slow == nullptr || fast == nullptr || fast-\u0026gt;next == nullptr) { return nullptr; } slow = slow-\u0026gt;next; fast = fast-\u0026gt;next-\u0026gt;next; } slow = head; while (slow != fast) { slow = slow-\u0026gt;next; fast = fast-\u0026gt;next; } return slow; } }; ","permalink":"https://notes.0081800.xyz/notes/20220329180222-leetcode101_142_linked_list_cycle_ii/","summary":"tags: Cycle detection,Fast \u0026amp; Slow Pointers,LeetCode101 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) {} * }; */ class Solution { public: ListNode *detectCycle(ListNode *head) { if (head == nullptr || head-\u0026gt;next == nullptr) { return nullptr; } // tortoise move 1 step auto slow = head-\u0026gt;next; // hare move 2 steps auto fast = head-\u0026gt;next-\u0026gt;next; while (slow !","title":"LeetCode101: 142. Linked List Cycle II"},{"content":" tags: Algorithm,Two Pointers ","permalink":"https://notes.0081800.xyz/notes/20220329171337-fast_slow_pointers/","summary":" tags: Algorithm,Two Pointers ","title":"Fast \u0026 Slow Pointers"},{"content":" tags: Algorithm,Linked List,Fast \u0026amp; Slow Pointers source: https://en.wikipedia.org/wiki/Cycle%5Fdetection Floyd\u0026rsquo;s tortoise and hare With two pointers:\ntortoise move slow: move 1 step in each loop. hare move fast: move 2 steps in each loop. If there is a circle existed, tortoise and hare will meet eventually in the circle. Now both tortoise and hare are in the circle, how to figure out the beginning of the circle?\nWe put tortoise back to the beginning they both started. Such as, the first element of the linked list. Then we move both tortoise and hare step by step, they will meet in the beginning of the circle. ","permalink":"https://notes.0081800.xyz/notes/20220329171237-cycle_detection/","summary":"tags: Algorithm,Linked List,Fast \u0026amp; Slow Pointers source: https://en.wikipedia.org/wiki/Cycle%5Fdetection Floyd\u0026rsquo;s tortoise and hare With two pointers:\ntortoise move slow: move 1 step in each loop. hare move fast: move 2 steps in each loop. If there is a circle existed, tortoise and hare will meet eventually in the circle. Now both tortoise and hare are in the circle, how to figure out the beginning of the circle?\nWe put tortoise back to the beginning they both started.","title":"Cycle detection"},{"content":" tags: Data Structures ","permalink":"https://notes.0081800.xyz/notes/20220329160804-tree/","summary":" tags: Data Structures ","title":"Tree"},{"content":" tags: Tree ","permalink":"https://notes.0081800.xyz/notes/20220329160754-binary_tree/","summary":" tags: Tree ","title":"Binary Tree"},{"content":" tags: Binary Tree,Tree A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible.\n","permalink":"https://notes.0081800.xyz/notes/20220329160738-complete_binary_tree/","summary":"tags: Binary Tree,Tree A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible.","title":"Complete Binary Tree"},{"content":" tags: Heap (data structure),Data Structures,Complete Binary Tree,Tree source: https://en.wikipedia.org/wiki/Binary%5Fheap Binary tree with two additional constraints:\nShape property: complete binary tree. Heap property: the key stored in each node is greater or equal(max-heaps) to or less than or equal to(min-heaps) the keys in the node\u0026rsquo;s children, according to some total order. Heap operations Insert Steps to add an element to a heap:\nAdd element to the bottom level of the heap at the leftmost open space. Compare to its parent, if they are in the correct the order, stop. If not, swap element with its parent and return to the previous step. Extract: Delete the root from heap Replace the root of heap with the last element on the bottom level. Compare the new root with its children; if they are in the correct order, stop. If not, swap the element with one of its children and return to the previous step. Search Delete Decrease or increase key Heap implementation with array each element a at index i has\nchildren at indices 2i + 1 and 2i + 2. Its parent at index floor((i - 1) / 2). ","permalink":"https://notes.0081800.xyz/notes/20220329160438-binary_heap/","summary":"tags: Heap (data structure),Data Structures,Complete Binary Tree,Tree source: https://en.wikipedia.org/wiki/Binary%5Fheap Binary tree with two additional constraints:\nShape property: complete binary tree. Heap property: the key stored in each node is greater or equal(max-heaps) to or less than or equal to(min-heaps) the keys in the node\u0026rsquo;s children, according to some total order. Heap operations Insert Steps to add an element to a heap:\nAdd element to the bottom level of the heap at the leftmost open space.","title":"Binary heap"},{"content":" tags: Priority Queue,LeetCode101 Max heap priority queue class Solution { public: int findKthLargest(vector\u0026lt;int\u0026gt;\u0026amp; nums, int k) { // max heap priority_queue\u0026lt;int\u0026gt; pq; for (auto iter = nums.begin(); iter != nums.end(); ++iter) { pq.push(*iter); } // The Kth largest element should let k \u0026gt; 1 not k \u0026gt; 0 for (; k \u0026gt; 1; --k) { pq.pop(); } return pq.top(); } }; ","permalink":"https://notes.0081800.xyz/notes/20220329072317-leetcode101_215_kth_largest_element_in_an_array/","summary":" tags: Priority Queue,LeetCode101 Max heap priority queue class Solution { public: int findKthLargest(vector\u0026lt;int\u0026gt;\u0026amp; nums, int k) { // max heap priority_queue\u0026lt;int\u0026gt; pq; for (auto iter = nums.begin(); iter != nums.end(); ++iter) { pq.push(*iter); } // The Kth largest element should let k \u0026gt; 1 not k \u0026gt; 0 for (; k \u0026gt; 1; --k) { pq.pop(); } return pq.top(); } }; ","title":"LeetCode101: 215. Kth Largest Element in an Array"},{"content":" tags: Priority Queue,LeetCode101 The key ideas:\nUse a std::pair to hold {count, index}, so it can compare count first then the index. Use a min heap priority queue to get the K weakest rows. class Solution { public: vector\u0026lt;int\u0026gt; kWeakestRows(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; mat, int k) { // min heap priority_queue\u0026lt; std::pair\u0026lt;int, int\u0026gt;, vector\u0026lt;std::pair\u0026lt;int, int\u0026gt; \u0026gt;, std::greater\u0026lt;std::pair\u0026lt;int, int\u0026gt; \u0026gt; \u0026gt; pq; for (auto iter = mat.begin(); iter != mat.end(); ++iter) { int c = count((*iter).begin(), (*iter).end(), 1); pq.push({c, iter - mat.begin()}); } vector\u0026lt;int\u0026gt; ret; for (; k \u0026gt; 0; --k) { ret.push_back(pq.top().second); pq.pop(); } return ret; } }; ","permalink":"https://notes.0081800.xyz/notes/20220329071403-leetcode101_1337_the_k_weakest_rows_in_a_matrix/","summary":"tags: Priority Queue,LeetCode101 The key ideas:\nUse a std::pair to hold {count, index}, so it can compare count first then the index. Use a min heap priority queue to get the K weakest rows. class Solution { public: vector\u0026lt;int\u0026gt; kWeakestRows(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; mat, int k) { // min heap priority_queue\u0026lt; std::pair\u0026lt;int, int\u0026gt;, vector\u0026lt;std::pair\u0026lt;int, int\u0026gt; \u0026gt;, std::greater\u0026lt;std::pair\u0026lt;int, int\u0026gt; \u0026gt; \u0026gt; pq; for (auto iter = mat.begin(); iter != mat.end(); ++iter) { int c = count((*iter).","title":"LeetCode101: 1337. The K Weakest Rows in a Matrix"},{"content":" tags: Data Structures,Heap (data structure) The priority queue is solved:\nThe K smallest/largest/weakest X. ","permalink":"https://notes.0081800.xyz/notes/20220329070523-priority_queue/","summary":" tags: Data Structures,Heap (data structure) The priority queue is solved:\nThe K smallest/largest/weakest X. ","title":"Priority Queue"},{"content":" tags: Learning English,读书笔记 source: Joseph Devlin. How to Speak and Write Correctly, 2007. http://archive.org/details/how_to_speak_and_write_correctly_librivox. I found this book in my Kindle on the subway to work this morning. And remembered that I downloaded it free from the Kindle store years ago. For some reasons, maybe my English was not good enough to read it, I haven\u0026rsquo;t read it yet. After read a little, I think it\u0026rsquo;s prefect for me for now.\nThe reasons is:\nWith Kindle, it provides some tooltips over the new words, so I can read it without a barrier. Also it provided me some new words to remember, as I don\u0026rsquo;t like to remember new words one by one from some apps, which I will never use them and then forget them. I found some audios from archive.org, so I can listen to it how to pronounce the new words. The steps I read this book should be:\nRead it on my Kindle, mark some words to remember. Listen to the audios, and read again. Take notes with my own words. CHAPTER I: REQUIREMENTS OF SPEECH Only about 2,000 Words Are Required The key of master English is knowing where to place them, that also let us master how to speak and write correctly. Use simple words as possible as you can, because great scholars and writers and polite do so. Simple words made your speech or the things you write easy to understand. Nine Great Classes of Words Article - Only two: a or an and the. Noun - Proper and Common. The most important. Nouns are varied by:\nPerson - First(I), Second(You), Third(She,He,It) Number - Singular(单数) and Plural(复数) Gender - two sexes, but four genders masculine（男性） - male kind feminine（女性）- female kind neuter（无性） - inanimate things or whatever is without life common（中性） - indeterminable, such as fish, mouse, bird, etc. Case Nominative - I,You,He,She Possessive - My,Your,His,Her Objective - Me,You,Him,Her Adjective - A word which qualifies a noun. Pronoun（代词） Three kinds of pronouns:\npersonal I,Thou,He,She,It(We, You, They) relative adjective Verb - signifies action or the doing of something. Adverb (Adjust Verb) - modifies a verb, an adjective and sometimes another adverb. Preposition - connect words and to show the relation between the objects. Conjunction - join words, phrases, clauses and sentences together. Interjection（感叹词）- expresses surprise or some sudden emotion of the mind. THREE ESSENTIALS Purity（纯正） - precludes the use of: all slang(俚语) words vulgar(粗鲁) phrases obsolete terms foreign idioms ambiguous expressions or any ungrammatical(不合语法) language. Perspicuity（清晰）- clearest expression. Precision（精准）- concise(精准) and exact expression. Neither too long nor too short. ","permalink":"https://notes.0081800.xyz/notes/20220328110642-how_to_speak_and_write_correctly/","summary":"tags: Learning English,读书笔记 source: Joseph Devlin. How to Speak and Write Correctly, 2007. http://archive.org/details/how_to_speak_and_write_correctly_librivox. I found this book in my Kindle on the subway to work this morning. And remembered that I downloaded it free from the Kindle store years ago. For some reasons, maybe my English was not good enough to read it, I haven\u0026rsquo;t read it yet. After read a little, I think it\u0026rsquo;s prefect for me for now.","title":"How to Speak and Write Correctly"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20220328074013-heapsort/","summary":"","title":"Heapsort"},{"content":" tags: Data Structures,Tree WHAT is a heap? Tree-based data structure which is essentially an almost complete tree that statifies the heap property.\nMax heap For any given node C, if P is a parent node of C, then the key(the value) of P is greater than or equal to the key of C.\nMin heap The P is less than or equal to the key C.\nWhen to use a heap? Priority queue. Heapsort. ","permalink":"https://notes.0081800.xyz/notes/20220328073805-heap_data_structure/","summary":"tags: Data Structures,Tree WHAT is a heap? Tree-based data structure which is essentially an almost complete tree that statifies the heap property.\nMax heap For any given node C, if P is a parent node of C, then the key(the value) of P is greater than or equal to the key of C.\nMin heap The P is less than or equal to the key C.\nWhen to use a heap?","title":"Heap (data structure)"},{"content":" tags: Algorithm ","permalink":"https://notes.0081800.xyz/notes/20220324120212-sorting/","summary":" tags: Algorithm ","title":"Sorting"},{"content":" tags: Hash Table,LeetCode101,Sorting,Two Pointers Intuition with HashMap class Solution { public: int numRescueBoats(vector\u0026lt;int\u0026gt;\u0026amp; people, int limit) { unordered_map\u0026lt;int, int\u0026gt; cntOfWeights; for (auto iter = people.begin(); iter != people.end(); ++iter) { cntOfWeights[*iter]++; } int r = 0; for (int i = 0; i \u0026lt; people.size(); i++) { if (cntOfWeights[people[i]] == 0) { continue; } cntOfWeights[people[i]]--; for (int j = (limit - people[i]); j \u0026gt; 0; --j) { if (cntOfWeights.find(j) != cntOfWeights.end() \u0026amp;\u0026amp; cntOfWeights[j] \u0026gt; 0) { cntOfWeights[j]--; break; } } r++; } return r; } }; Sorting and Two Pointers class Solution { public: int numRescueBoats(vector\u0026lt;int\u0026gt;\u0026amp; people, int limit) { int i = 0; int j = people.size() - 1; // heaviest go first sort(people.rbegin(), people.rend()); for (; i \u0026lt;= j; i++) { if (people[i] + people[j] \u0026lt;= limit) j--; } return i; } }; ","permalink":"https://notes.0081800.xyz/notes/20220324114305-881_boats_to_save_people/","summary":"tags: Hash Table,LeetCode101,Sorting,Two Pointers Intuition with HashMap class Solution { public: int numRescueBoats(vector\u0026lt;int\u0026gt;\u0026amp; people, int limit) { unordered_map\u0026lt;int, int\u0026gt; cntOfWeights; for (auto iter = people.begin(); iter != people.end(); ++iter) { cntOfWeights[*iter]++; } int r = 0; for (int i = 0; i \u0026lt; people.size(); i++) { if (cntOfWeights[people[i]] == 0) { continue; } cntOfWeights[people[i]]--; for (int j = (limit - people[i]); j \u0026gt; 0; --j) { if (cntOfWeights.find(j) != cntOfWeights.","title":"LeetCode101: 881. Boats to Save People"},{"content":" tags: Math,backtracking,LeetCode101 Backtracking and stack overflow Intuition:\nWe can abstract all the operations to a Tree, then apply DFS on it.\nFor example: startValue=2, target=3, the tree looks like:\n/* 2 /\\ / \\ / \\ 1(-1) 4(x2) /\\ /\\--+ / \\ / \\ 0(-1) 2(x2) 3(-1) 8(x2) */ class Solution { public: int brokenCalc(int startValue, int target) { unordered_set\u0026lt;int\u0026gt; visited; return backtracking(0, startValue, target, visited); } int backtracking(int count, int val, int target, unordered_set\u0026lt;int\u0026gt; \u0026amp; visited) { if (val == target) { return count; } if (visited.find(val) != visited.end()) { return -1; } int left = -1, right = -1; count++; visited.insert(val); if (val \u0026gt; 0) { left = backtracking(count, val - 1, target, visited); } if (val \u0026lt;= target * 2) { right = backtracking(count, val * 2, target, visited); } visited.erase(val); if (left != -1 \u0026amp;\u0026amp; right != -1) { return min(left, right); } else if (left != -1) { return left; } return right; } }; Change target to startValue class Solution { public: int brokenCalc(int startValue, int target) { int r = 0; while (target \u0026gt; startValue) { target = target % 2 \u0026gt; 0 ? target + 1 : target / 2; r++; } return r + startValue - target; } }; ","permalink":"https://notes.0081800.xyz/notes/20220323175835-leetcode101_991_broken_calculator/","summary":"tags: Math,backtracking,LeetCode101 Backtracking and stack overflow Intuition:\nWe can abstract all the operations to a Tree, then apply DFS on it.\nFor example: startValue=2, target=3, the tree looks like:\n/* 2 /\\ / \\ / \\ 1(-1) 4(x2) /\\ /\\--+ / \\ / \\ 0(-1) 2(x2) 3(-1) 8(x2) */ class Solution { public: int brokenCalc(int startValue, int target) { unordered_set\u0026lt;int\u0026gt; visited; return backtracking(0, startValue, target, visited); } int backtracking(int count, int val, int target, unordered_set\u0026lt;int\u0026gt; \u0026amp; visited) { if (val == target) { return count; } if (visited.","title":"LeetCode101: 991. Broken Calculator"},{"content":" tags: String,LeetCode101,Tricky Initialize a string that fills 'a' in it. Then we turn it to the expected string from end to start.\nThe maximal value of each position in the string is 26. If we start from all elements is 'a' in the string. Then the represent value of the string is n. If it\u0026rsquo;s not equal to k. Then we need turn the last character of string to r = k - n. Two cases must be handled:\nFill z and continue, if r is greater than 25(25 as there is already a 'a' character there). Fill the corresponding character and done, if r is less than or equal 25. class Solution { public: string getSmallestString(int n, int k) { string r(n, \u0026#39;a\u0026#39;); int j = n - 1; k -= r.size(); while (k \u0026gt; 0) { if (k \u0026gt; 25) { k -= 25; r[j--] = \u0026#39;z\u0026#39;; } else { r[j] = \u0026#39;a\u0026#39; + k; k = 0; } } return r; } }; ","permalink":"https://notes.0081800.xyz/notes/20220322162250-leetcode101_1663_smallest_string_with_a_given_numeric_value/","summary":"tags: String,LeetCode101,Tricky Initialize a string that fills 'a' in it. Then we turn it to the expected string from end to start.\nThe maximal value of each position in the string is 26. If we start from all elements is 'a' in the string. Then the represent value of the string is n. If it\u0026rsquo;s not equal to k. Then we need turn the last character of string to r = k - n.","title":"LeetCode101: 1663. Smallest String With A Given Numeric Value"},{"content":" tags: Math,Hash Table,LeetCode101 class Solution { public: string intToRoman(int num) { vector\u0026lt;string\u0026gt; roman {\u0026#34;M\u0026#34;, \u0026#34;CM\u0026#34;, \u0026#34;D\u0026#34;, \u0026#34;CD\u0026#34;, \u0026#34;C\u0026#34;, \u0026#34;XC\u0026#34;, \u0026#34;L\u0026#34;, \u0026#34;XL\u0026#34;, \u0026#34;X\u0026#34;, \u0026#34;IX\u0026#34;, \u0026#34;V\u0026#34;, \u0026#34;IV\u0026#34;, \u0026#34;I\u0026#34;}; vector\u0026lt;int\u0026gt; integers {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 }; string r; int times = 0; for (int i = 0; i \u0026lt; integers.size(); ++i) { if (num \u0026gt;= integers[i]) { times = num / integers[i]; num -= times * integers[i]; for (int j = times; j \u0026gt; 0; --j) { r.append(roman[i]); } } } return r; } }; ","permalink":"https://notes.0081800.xyz/notes/20220322155933-leetcode101_12_integer_to_roman/","summary":"tags: Math,Hash Table,LeetCode101 class Solution { public: string intToRoman(int num) { vector\u0026lt;string\u0026gt; roman {\u0026#34;M\u0026#34;, \u0026#34;CM\u0026#34;, \u0026#34;D\u0026#34;, \u0026#34;CD\u0026#34;, \u0026#34;C\u0026#34;, \u0026#34;XC\u0026#34;, \u0026#34;L\u0026#34;, \u0026#34;XL\u0026#34;, \u0026#34;X\u0026#34;, \u0026#34;IX\u0026#34;, \u0026#34;V\u0026#34;, \u0026#34;IV\u0026#34;, \u0026#34;I\u0026#34;}; vector\u0026lt;int\u0026gt; integers {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 }; string r; int times = 0; for (int i = 0; i \u0026lt; integers.size(); ++i) { if (num \u0026gt;= integers[i]) { times = num / integers[i]; num -= times * integers[i]; for (int j = times; j \u0026gt; 0; --j) { r.","title":"LeetCode101: 12. Integer to Roman"},{"content":" tags: Two Pointers,Tricky,LeetCode101 The key ideas are:\nWe start from two edges and move to the middle with two pointers. Move the pointer to the middle which side is smaller. class Solution { public: int maxArea(vector\u0026lt;int\u0026gt;\u0026amp; height) { int i = 0, j = height.size() - 1; int water = 0; while (i \u0026lt; j) { water = max(water, (j - i) * min(height[i], height[j])); if (height[i] \u0026gt; height[j]) { --j; } else { ++i; } } return water; } }; ","permalink":"https://notes.0081800.xyz/notes/20220321183809-leetcode_11_container_with_most_water/","summary":" tags: Two Pointers,Tricky,LeetCode101 The key ideas are:\nWe start from two edges and move to the middle with two pointers. Move the pointer to the middle which side is smaller. class Solution { public: int maxArea(vector\u0026lt;int\u0026gt;\u0026amp; height) { int i = 0, j = height.size() - 1; int water = 0; while (i \u0026lt; j) { water = max(water, (j - i) * min(height[i], height[j])); if (height[i] \u0026gt; height[j]) { --j; } else { ++i; } } return water; } }; ","title":"LeetCode101: 11. Container With Most Water"},{"content":" tags: String,LeetCode101,Stack,Hash Table,Hash Set I have solved this problem years before, LeetCode: 316.Remove Duplicate Letters, but still stuck on it.\nThe key idea is not only about stack, but also required a map to record how many same letters behind current one. Which helps us to decide if drop current letter or not, when the new letter is less than the top of stack, which means smaller in lexicographical order.\nclass Solution { public: string removeDuplicateLetters(string s) { vector\u0026lt;int\u0026gt; countOfLetters(26, 0); vector\u0026lt;bool\u0026gt; pickedLetters(26, false); stack\u0026lt;char\u0026gt; st; for (auto iter = s.begin(); iter != s.end(); ++iter) { countOfLetters[*iter - \u0026#39;a\u0026#39;]++; } for (int i = 0; i \u0026lt; s.size(); ++i) { countOfLetters[s[i] - \u0026#39;a\u0026#39;]--; if (pickedLetters[s[i] - \u0026#39;a\u0026#39;]) { continue; } while (!st.empty() \u0026amp;\u0026amp; s[i] \u0026lt; st.top() \u0026amp;\u0026amp; countOfLetters[st.top() - \u0026#39;a\u0026#39;] \u0026gt; 0) { pickedLetters[st.top() - \u0026#39;a\u0026#39;] = false; st.pop(); } st.push(s[i]); pickedLetters[s[i] - \u0026#39;a\u0026#39;] = true; } string r; while (!st.empty()) { r.push_back(st.top()); st.pop(); } reverse(r.begin(), r.end()); return r; } }; ","permalink":"https://notes.0081800.xyz/notes/20220321174725-leetcode101_316_remove_duplicate_letters/","summary":"tags: String,LeetCode101,Stack,Hash Table,Hash Set I have solved this problem years before, LeetCode: 316.Remove Duplicate Letters, but still stuck on it.\nThe key idea is not only about stack, but also required a map to record how many same letters behind current one. Which helps us to decide if drop current letter or not, when the new letter is less than the top of stack, which means smaller in lexicographical order.","title":"LeetCode101: 316. Remove Duplicate Letters"},{"content":" tags: String,LeetCode101,Hash Set,Hash Table,Stack The key idea is similar to LeetCode101: 316. Remove Duplicate Letters, we use a HashMap to track how many letters which is same in the string. Then we use a HashSet to store appeared letters. When there is no more letters appeared in the HashSet, it\u0026rsquo;s time to partition.\nclass Solution { public: vector\u0026lt;int\u0026gt; partitionLabels(string s) { unordered_map\u0026lt;char, int\u0026gt; cntOfLetters; unordered_set\u0026lt;char\u0026gt; appearedLetters; vector\u0026lt;int\u0026gt; r; int count = 0; for (auto iter = s.begin(); iter != s.end(); ++iter) { cntOfLetters[*iter]++; } for (auto iter = s.begin(); iter != s.end(); ++iter) { appearedLetters.insert(*iter); cntOfLetters[*iter]--; count++; // Append current count to result if there is no appeared letters // behind. bool behind = false; for (auto si = appearedLetters.begin(); si != appearedLetters.end(); ++si) { if (cntOfLetters[*si]){ behind = true; break; } } if (!behind) { r.push_back(count); count = 0; } } if (count \u0026gt; 1) { r.push_back(count); } return r; } }; ","permalink":"https://notes.0081800.xyz/notes/20220321174504-leetcode101_763_partition_labels/","summary":"tags: String,LeetCode101,Hash Set,Hash Table,Stack The key idea is similar to LeetCode101: 316. Remove Duplicate Letters, we use a HashMap to track how many letters which is same in the string. Then we use a HashSet to store appeared letters. When there is no more letters appeared in the HashSet, it\u0026rsquo;s time to partition.\nclass Solution { public: vector\u0026lt;int\u0026gt; partitionLabels(string s) { unordered_map\u0026lt;char, int\u0026gt; cntOfLetters; unordered_set\u0026lt;char\u0026gt; appearedLetters; vector\u0026lt;int\u0026gt; r; int count = 0; for (auto iter = s.","title":"LeetCode101: 763. Partition Labels"},{"content":" tags: Algorithm ","permalink":"https://notes.0081800.xyz/notes/20220321174510-string/","summary":" tags: Algorithm ","title":"String"},{"content":" tags: LeetCode101,Math The key idea is:\nTo use \\(log10(10^n) = n\\) to get how many digits in the number. Then we need iterate \\(n + 1\\) times to compare each side. The digit in the left is \\(\\frac{x}{10^{n-i}} \\mod 10\\). The digit in the right is \\(\\frac{x}{10^i} \\mod 10\\). class Solution { public: bool isPalindrome(int x) { if (x \u0026lt; 0) { return false; } // failed at here if (x \u0026lt; 10) { return true; } int n = log10(x); int ld = pow(10, n); // left div int rd = 1; // right div for (int i = 0; i \u0026lt; (n + 1) / 2; i++) { // left right if (x / ld % 10 != x / rd % 10) { return false; } ld /= 10; rd *= 10; } return true; } }; ","permalink":"https://notes.0081800.xyz/notes/20220318084438-leetcode101_9_palindrome_number/","summary":"tags: LeetCode101,Math The key idea is:\nTo use \\(log10(10^n) = n\\) to get how many digits in the number. Then we need iterate \\(n + 1\\) times to compare each side. The digit in the left is \\(\\frac{x}{10^{n-i}} \\mod 10\\). The digit in the right is \\(\\frac{x}{10^i} \\mod 10\\). class Solution { public: bool isPalindrome(int x) { if (x \u0026lt; 0) { return false; } // failed at here if (x \u0026lt; 10) { return true; } int n = log10(x); int ld = pow(10, n); // left div int rd = 1; // right div for (int i = 0; i \u0026lt; (n + 1) / 2; i++) { // left right if (x / ld % 10 !","title":"LeetCode101: 9. Palindrome Number"},{"content":" tags: Algorithm ","permalink":"https://notes.0081800.xyz/notes/20220318084456-math/","summary":" tags: Algorithm ","title":"Math"},{"content":" tags: C/C++ In some problems, we need to detect is our result overflow in a 32-bit integer. The key ideas is check our value before it becomes bigger.\nFor example:\n// INT_MAX 2147483647 // INT_MIN -2147483648 // INT_MAX\u0026#39;s suffix is 7 if (res \u0026gt; INT_MAX / 10 || (res == INT_MAX / 10 \u0026amp;\u0026amp; pop \u0026gt; 7)) { return 0; } // INT_MIN\u0026#39;s suffix is -8 if (res \u0026lt; INT_MIN / 10 || (res == INT_MIN / 10 \u0026amp;\u0026amp; pop \u0026lt; -8)) { return 0; } res = res * 10 + pop; Our final result need a 10 times current value and plus a value, then we check:\nIf our result greater than INT_MAX / 10, which means overflow. Then if our result equals to INT_MAX / 10, we continue compare the plus value to the suffix of INT_MAX. ","permalink":"https://notes.0081800.xyz/notes/20220318072424-integer_overflow/","summary":"tags: C/C++ In some problems, we need to detect is our result overflow in a 32-bit integer. The key ideas is check our value before it becomes bigger.\nFor example:\n// INT_MAX 2147483647 // INT_MIN -2147483648 // INT_MAX\u0026#39;s suffix is 7 if (res \u0026gt; INT_MAX / 10 || (res == INT_MAX / 10 \u0026amp;\u0026amp; pop \u0026gt; 7)) { return 0; } // INT_MIN\u0026#39;s suffix is -8 if (res \u0026lt; INT_MIN / 10 || (res == INT_MIN / 10 \u0026amp;\u0026amp; pop \u0026lt; -8)) { return 0; } res = res * 10 + pop; Our final result need a 10 times current value and plus a value, then we check:","title":"Integer Overflow"},{"content":" tags: Tricky,LeetCode101,Integer Overflow The key idea is how to detect integer overflow, it\u0026rsquo;s same to: LeetCode101: 7. Reverse Integer.\nclass Solution { public: int myAtoi(string s) { auto iter = s.begin(); int base = 1, r = 0, p = 0; // Skip whitespace for (; iter != s.end() \u0026amp;\u0026amp; *iter == \u0026#39; \u0026#39;; ++iter) { } // negative or positive if (*iter == \u0026#39;-\u0026#39; || *iter == \u0026#39;+\u0026#39;) { if (*iter == \u0026#39;-\u0026#39;) { base = -1; } ++iter; } for (; iter != s.end(); ++iter) { // failed at here: the logic between conditions is OR not AND if (*iter \u0026gt; \u0026#39;9\u0026#39; || *iter \u0026lt; \u0026#39;0\u0026#39;) { break; } p = (*iter - \u0026#39;0\u0026#39;) * base; // 7 is the INX_MAX\u0026#39;s suffix, remember? if (r \u0026gt; INT_MAX / 10 || (r == INT_MAX / 10 \u0026amp;\u0026amp; p \u0026gt; 7)) { return INT_MAX; } // 8 is the INT_MIN\u0026#39;s suffix, too. if (r \u0026lt; INT_MIN / 10 || (r == INT_MIN / 10 \u0026amp;\u0026amp; p \u0026lt; -8)) { return INT_MIN; } r = r * 10 + p; } return r; } }; ","permalink":"https://notes.0081800.xyz/notes/20220318072345-leetcode101_8_string_to_integer_atoi/","summary":"tags: Tricky,LeetCode101,Integer Overflow The key idea is how to detect integer overflow, it\u0026rsquo;s same to: LeetCode101: 7. Reverse Integer.\nclass Solution { public: int myAtoi(string s) { auto iter = s.begin(); int base = 1, r = 0, p = 0; // Skip whitespace for (; iter != s.end() \u0026amp;\u0026amp; *iter == \u0026#39; \u0026#39;; ++iter) { } // negative or positive if (*iter == \u0026#39;-\u0026#39; || *iter == \u0026#39;+\u0026#39;) { if (*iter == \u0026#39;-\u0026#39;) { base = -1; } ++iter; } for (; iter !","title":"LeetCode101: 8. String to Integer (atoi)"},{"content":" tags: Tricky,LeetCode101 Make\nR = total required rows d = R - 2 2 is contains head line and tail line that not need insert a character between two columns. r = current row offset, which starts from 0. c = current column offset, which starts from 0. We can use a formula to make columns, which is \\(c(R+d)+r\\).\nFor example, \u0026quot;PAYPALISHIRING\u0026quot;, numRows=3:\nP A H N A P L S I I G Y I R The columns only the head and tail rows is correct should be:\nR=3,d=1\nc=0 c=1 c=2 c=3 c=4 r=0 0 = 0(3+1)+0 4 = 1(3+1)+0 8 = 2(3+1)+0 12 = 3(3+1)+0 start new row r=1 1 = 0(3+1)+1 5 = 1(3+1)+1 9 = 2(3+1)+1 13 = 3(3+1)+1 start new row r=2 2 = 0(3+1)+2 6 = 1(3+1)+2 10 = 2(3+1)+2 end Now we need consider how to insert a character between tow columns in the middle rows.\nWe can see, the r is larger, the insert character is more near by left. For example, \u0026quot;PAYPALISHIRING\u0026quot;, numRows=4:\nP I N A L S I G Y A H R P I c=0 c=1 c=2 r=0 0 6 12 r=1 1 5 7 11 13 r=2 2 4 8 10 r=3 3 9 Assume we insert a character to left, the current index is i. Then the inserted character is: \\(i - 2r\\)\nclass Solution { public: string convert(string s, int numRows) { // The another corner case we should noticed if (numRows == 1) { return s; } int c = 0; int r = 0; int i = 0, j = 0; int d = numRows - 2; string res; while (true) { i = c * (numRows + d) + r; // neither head nor tail if (r \u0026gt; 0 \u0026amp;\u0026amp; r \u0026lt; numRows - 1) { j = i - (2 * r); if (j \u0026gt; 0 \u0026amp;\u0026amp; j \u0026lt; s.size()) { res.push_back(s[j]); } } if (i \u0026lt; s.size()) { res.push_back(s[i]); c++; } else { r++; if (r \u0026gt;= numRows) { break; } c = 0; } } return res; } }; ","permalink":"https://notes.0081800.xyz/notes/20220317073333-leetcode101_6_zigzag_conversion/","summary":"tags: Tricky,LeetCode101 Make\nR = total required rows d = R - 2 2 is contains head line and tail line that not need insert a character between two columns. r = current row offset, which starts from 0. c = current column offset, which starts from 0. We can use a formula to make columns, which is \\(c(R+d)+r\\).\nFor example, \u0026quot;PAYPALISHIRING\u0026quot;, numRows=3:\nP A H N A P L S I I G Y I R The columns only the head and tail rows is correct should be:","title":"LeetCode101: 6. Zigzag Conversion"},{"content":" tags: Tricky,Stack,LeetCode101,Integer Overflow The key is how to detect integer overflow without store to a larger size integer.\nFor this purpose, we could detect integer overflow before carry:\nThe maximal of INT_MAX before carry is \\(\\frac{INT\\_MAX}{10}\\). We continue compare pop with the suffix of INT_MAX, 7, if maximal before carry is equal to \\(\\frac{INT\\_MAX}{10}\\).\nThe minimal of INT_MIN before carry is \\(\\frac{INT\\_MIN}{10}\\) too. We continue compare pop with the suffix of INT_MIN, -8, if minimal before carry is equal to \\(\\frac{INT\\_MIN}{10}\\).\nclass Solution { public: int reverse(int x) { // INT_MAX 2147483647 // INT_MIN -2147483648 int res = 0, pop = 0; while (abs(x) \u0026gt; 0) { pop = x % 10; x /= 10; // INT_MAX\u0026#39;s suffix is 7 if (res \u0026gt; INT_MAX / 10 || (res == INT_MAX / 10 \u0026amp;\u0026amp; pop \u0026gt; 7)) { return 0; } // INT_MIN\u0026#39;s suffix is -8 if (res \u0026lt; INT_MIN / 10 || (res == INT_MIN / 10 \u0026amp;\u0026amp; pop \u0026lt; -8)) { return 0; } res = res * 10 + pop; } return res; } }; ","permalink":"https://notes.0081800.xyz/notes/20220316215304-leetcode101_7_reverse_integer/","summary":"tags: Tricky,Stack,LeetCode101,Integer Overflow The key is how to detect integer overflow without store to a larger size integer.\nFor this purpose, we could detect integer overflow before carry:\nThe maximal of INT_MAX before carry is \\(\\frac{INT\\_MAX}{10}\\). We continue compare pop with the suffix of INT_MAX, 7, if maximal before carry is equal to \\(\\frac{INT\\_MAX}{10}\\).\nThe minimal of INT_MIN before carry is \\(\\frac{INT\\_MIN}{10}\\) too. We continue compare pop with the suffix of INT_MIN, -8, if minimal before carry is equal to \\(\\frac{INT\\_MIN}{10}\\).","title":"LeetCode101: 7. Reverse Integer"},{"content":" tags: Stack Intuition for (int i = 0; i \u0026lt; pushed.size(); i++) { if (pushed[i] != popped[pushed.size() - 1 - i]) { return false; } } But the pop/push operations can happend in any sequence.\nStack Using a stack. Returns false, IF the next value neither the popped nor pushed.\nIn each sequence we must do a operation: push or pop. When to push:\nstack is empty, or top of stack is not current popped value When to pop:\ntop of stack is current popped value If no operation could do, returns false.\nclass Solution { public: bool validateStackSequences(vector\u0026lt;int\u0026gt;\u0026amp; pushed, vector\u0026lt;int\u0026gt;\u0026amp; popped) { stack\u0026lt;int\u0026gt; st; int i = 0, j = 0; while (i \u0026lt; pushed.size() || j \u0026lt; popped.size()) { // we end push, but still not meet the popped value. if (i == pushed.size() \u0026amp;\u0026amp; (st.empty() || st.top() != popped[j])) { return false; } if (st.empty()) { st.push(pushed[i++]); } if (st.top() != popped[j]) { st.push(pushed[i++]); } else { st.pop(); j++; } } return true; } }; ","permalink":"https://notes.0081800.xyz/notes/20220316085247-leetcode101_946_validate_stack_sequences/","summary":"tags: Stack Intuition for (int i = 0; i \u0026lt; pushed.size(); i++) { if (pushed[i] != popped[pushed.size() - 1 - i]) { return false; } } But the pop/push operations can happend in any sequence.\nStack Using a stack. Returns false, IF the next value neither the popped nor pushed.\nIn each sequence we must do a operation: push or pop. When to push:\nstack is empty, or top of stack is not current popped value When to pop:","title":"LeetCode101: 946. Validate Stack Sequences"},{"content":" tags: Stack,LeetCode101 Stack class Solution { public: string minRemoveToMakeValid(string s) { stack\u0026lt;char\u0026gt; st; char open = \u0026#39;(\u0026#39;, close = \u0026#39;)\u0026#39;; int open_count = 0; string res; // forward to remove unnecessary close parentheses for (auto iter = s.begin(); iter != s.end(); ++iter) { if (*iter == open) { open_count++; } if (open_count == 0 \u0026amp;\u0026amp; *iter == close) { continue; } if (*iter == close) { open_count--; } st.push(*iter); } int close_count = 0; // backward to remove unnecessary open parentheses while (!st.empty()) { if (st.top() == close) { close_count++; } if (st.top() == open) { if (close_count == 0 ) { st.pop(); continue; } close_count--; } res.push_back(st.top()); st.pop(); } reverse(res.begin(), res.end()); return res; } }; ","permalink":"https://notes.0081800.xyz/notes/20220316080026-leetcode101_1249_minimum_remove_to_make_valid_parentheses/","summary":"tags: Stack,LeetCode101 Stack class Solution { public: string minRemoveToMakeValid(string s) { stack\u0026lt;char\u0026gt; st; char open = \u0026#39;(\u0026#39;, close = \u0026#39;)\u0026#39;; int open_count = 0; string res; // forward to remove unnecessary close parentheses for (auto iter = s.begin(); iter != s.end(); ++iter) { if (*iter == open) { open_count++; } if (open_count == 0 \u0026amp;\u0026amp; *iter == close) { continue; } if (*iter == close) { open_count--; } st.push(*iter); } int close_count = 0; // backward to remove unnecessary open parentheses while (!","title":"LeetCode101: 1249. Minimum Remove to Make Valid Parentheses"},{"content":" tags: Tricky,LeetCode101 original: 0, 2, 1, 4, 3, 5, 7, 6 max: 0, 2, 2, 4, 4, 5, 7, 7 sorted: 0, 1, 2, 3, 4, 5, 6, 7 index: 0, 1, 2, 3, 4, 5, 6, 7\nAs shown above, the position of break point is same to the position of max value of chunks. So here:\nWe track chunks\u0026rsquo;s max value. Break at the position of max value lives in sorted array, which means the index in this case. class Solution { public: int maxChunksToSorted(vector\u0026lt;int\u0026gt;\u0026amp; arr) { int count = 0, m = 0; for (int i = 0; i \u0026lt; arr.size(); i++) { m = max(arr[i], m); if (m == i) { count++; } } return count; } }; ","permalink":"https://notes.0081800.xyz/notes/20220315152142-leetcode101_769_max_chunks_to_make_sorted/","summary":"tags: Tricky,LeetCode101 original: 0, 2, 1, 4, 3, 5, 7, 6 max: 0, 2, 2, 4, 4, 5, 7, 7 sorted: 0, 1, 2, 3, 4, 5, 6, 7 index: 0, 1, 2, 3, 4, 5, 6, 7\nAs shown above, the position of break point is same to the position of max value of chunks. So here:\nWe track chunks\u0026rsquo;s max value. Break at the position of max value lives in sorted array, which means the index in this case.","title":"LeetCode101: 769. Max Chunks To Make Sorted"},{"content":" tags: Algorithm ","permalink":"https://notes.0081800.xyz/notes/20220315152159-tricky/","summary":" tags: Algorithm ","title":"Tricky"},{"content":" tags: Monotonic Stack,LeetCode101,LeetCode101: 496. Next Greater Element I Mono-descreasing stack class Solution { public: vector\u0026lt;int\u0026gt; dailyTemperatures(vector\u0026lt;int\u0026gt;\u0026amp; temperatures) { vector\u0026lt;int\u0026gt; res(temperatures.size(), 0); stack\u0026lt;int\u0026gt; st; for (int i = 0; i \u0026lt; temperatures.size(); i++) { while (!st.empty() \u0026amp;\u0026amp; temperatures[st.top()] \u0026lt; temperatures[i]) { res[st.top()] = i - st.top(); st.pop(); } st.push(i); } return res; } }; [73,74,75,71,69,72,76,73]\n","permalink":"https://notes.0081800.xyz/notes/20220315112303-leetcode101_739_daily_temperatures/","summary":"tags: Monotonic Stack,LeetCode101,LeetCode101: 496. Next Greater Element I Mono-descreasing stack class Solution { public: vector\u0026lt;int\u0026gt; dailyTemperatures(vector\u0026lt;int\u0026gt;\u0026amp; temperatures) { vector\u0026lt;int\u0026gt; res(temperatures.size(), 0); stack\u0026lt;int\u0026gt; st; for (int i = 0; i \u0026lt; temperatures.size(); i++) { while (!st.empty() \u0026amp;\u0026amp; temperatures[st.top()] \u0026lt; temperatures[i]) { res[st.top()] = i - st.top(); st.pop(); } st.push(i); } return res; } }; [73,74,75,71,69,72,76,73]","title":"LeetCode101: 739. Daily Temperatures"},{"content":" tags: Monotonic Stack,LeetCode101,Binary Search Tree Mono-descreasing stack Key:\nThe largest number is the root, that we can observe in by iteration. We must clear the stack to fill the right side of BST after loop. The last popped element is the left of current node. From top to bottom, the top element is the right side of the element that under the top. class Solution { public: TreeNode* constructMaximumBinaryTree(vector\u0026lt;int\u0026gt;\u0026amp; nums) { vector\u0026lt;TreeNode*\u0026gt; res(nums.size(), nullptr); stack\u0026lt;int\u0026gt; st; // mono-descreasing stack, remove smaller elements before pushing. TreeNode* root = nullptr; for (int i = 0;i \u0026lt; nums.size(); i++) { res[i] = new TreeNode(nums[i]); while (!st.empty() \u0026amp;\u0026amp; nums[st.top()] \u0026lt; nums[i]) { int j = st.top(); st.pop(); if (!st.empty() \u0026amp;\u0026amp; nums[st.top()] \u0026lt; nums[i]) { res[st.top()]-\u0026gt;right = res[j]; } else { res[i]-\u0026gt;left = res[j]; } } if (root == nullptr || res[i]-\u0026gt;val \u0026gt; root-\u0026gt;val) { root = res[i]; } st.push(i); } while (st.size() \u0026gt; 1) { int j = st.top(); st.pop(); res[st.top()]-\u0026gt;right = res[j]; } return root; } }; ","permalink":"https://notes.0081800.xyz/notes/20220315105116-leetcode101_654_maximum_binary_tree/","summary":"tags: Monotonic Stack,LeetCode101,Binary Search Tree Mono-descreasing stack Key:\nThe largest number is the root, that we can observe in by iteration. We must clear the stack to fill the right side of BST after loop. The last popped element is the left of current node. From top to bottom, the top element is the right side of the element that under the top. class Solution { public: TreeNode* constructMaximumBinaryTree(vector\u0026lt;int\u0026gt;\u0026amp; nums) { vector\u0026lt;TreeNode*\u0026gt; res(nums.","title":"LeetCode101: 654. Maximum Binary Tree"},{"content":" tags: Monotonic Stack,LeetCode101 Mono-increasing stack Key:\nSome case should move backward as the new value we meeted is larger than it. When we meet 2 in the stack, and here we need move backward. Some case we need move forward, as the following values are the mono-increaing stack: [1, 2, 5, 3, 4] class Solution { public: int findUnsortedSubarray(vector\u0026lt;int\u0026gt;\u0026amp; nums) { stack\u0026lt;int\u0026gt; st; // mono-increasing int left = -1, right = -2; for (int i = 0; i \u0026lt; nums.size(); i++) { while (!st.empty() \u0026amp;\u0026amp; nums[st.top()] \u0026gt; nums[i]) { // move backward if (left == -1 || st.top() \u0026lt; left) { left = st.top(); // left should be the previous index } // move forward for (int j = i; j \u0026lt; nums.size() \u0026amp;\u0026amp; nums[j] \u0026lt; nums[st.top()]; j++) { if (j \u0026gt; right) { right = j; } } st.pop(); } st.push(i); } return (right - left) + 1; } }; Failed test cases [2,6,4,8,10,9,15] [1, 2, 3, 4] [1] [2,1] [1,3,2,2,2] [1,2,3,3,3] [2,3,3,2,4] [1,2,5,3,4] [1,3,5,2,4] ","permalink":"https://notes.0081800.xyz/notes/20220315071351-leetcode101_581_shortest_unsorted_continuous_subarray/","summary":"tags: Monotonic Stack,LeetCode101 Mono-increasing stack Key:\nSome case should move backward as the new value we meeted is larger than it. When we meet 2 in the stack, and here we need move backward. Some case we need move forward, as the following values are the mono-increaing stack: [1, 2, 5, 3, 4] class Solution { public: int findUnsortedSubarray(vector\u0026lt;int\u0026gt;\u0026amp; nums) { stack\u0026lt;int\u0026gt; st; // mono-increasing int left = -1, right = -2; for (int i = 0; i \u0026lt; nums.","title":"LeetCode101: 581. Shortest Unsorted Continuous Subarray"},{"content":" tags: Monotonic Stack,LeetCode101 related: LeetCode101: 496. Next Greater Element I Mono-descreasing stack / normal order loop twice Loop twice to solve circular interger array Mono-descreasing stack to store index, avoid HashMap in Next Greater Element I, as there is a cicular array. class Solution { public: vector\u0026lt;int\u0026gt; nextGreaterElements(vector\u0026lt;int\u0026gt;\u0026amp; nums) { vector\u0026lt;int\u0026gt; res(nums.size(), -1); stack\u0026lt;int\u0026gt; st; for (int j = 0, i = 0; j \u0026lt; nums.size() * 2; ++j) { i = j \u0026gt;= nums.size() ? j - nums.size() : j; while (!st.empty() \u0026amp;\u0026amp; nums[st.top()] \u0026lt; nums[i]) { res[st.top()] = nums[i]; st.pop(); } st.push(i); } return res; } }; ","permalink":"https://notes.0081800.xyz/notes/20220315063008-leetcode101_503_next_greater_element_ii/","summary":"tags: Monotonic Stack,LeetCode101 related: LeetCode101: 496. Next Greater Element I Mono-descreasing stack / normal order loop twice Loop twice to solve circular interger array Mono-descreasing stack to store index, avoid HashMap in Next Greater Element I, as there is a cicular array. class Solution { public: vector\u0026lt;int\u0026gt; nextGreaterElements(vector\u0026lt;int\u0026gt;\u0026amp; nums) { vector\u0026lt;int\u0026gt; res(nums.size(), -1); stack\u0026lt;int\u0026gt; st; for (int j = 0, i = 0; j \u0026lt; nums.size() * 2; ++j) { i = j \u0026gt;= nums.","title":"LeetCode101: 503. Next Greater Element II"},{"content":" tags: Monotonic Stack,Hash Table,LeetCode101 Mono-descreasing and reverse order travel class Solution { public: vector\u0026lt;int\u0026gt; nextGreaterElement(vector\u0026lt;int\u0026gt;\u0026amp; nums1, vector\u0026lt;int\u0026gt;\u0026amp; nums2) { // Mono-descreasing and reverse order travel. // The next greater of the popped value is the top of the stack, if it has any. // // For example: [1,3,4,2] // the stack goes: // [2] // [4] -\u0026gt; 2 // [4, 3, 1] stack\u0026lt;int\u0026gt; st; vector\u0026lt;int\u0026gt; res; unordered_map\u0026lt;int, int\u0026gt; m; for (int i = nums2.size() - 1; i \u0026gt;= 0; i--) { while (!st.empty() \u0026amp;\u0026amp; st.top() \u0026lt; nums2[i]) { int c = st.top(); st.pop(); if (!st.empty()) { m[c] = st.top(); } } st.push(nums2[i]); } while (st.size() \u0026gt; 1) { int c = st.top(); st.pop(); m[c] = st.top(); } for (int i = 0; i \u0026lt; nums1.size(); i++) { if (m.find(nums1[i]) != m.end()) { res.push_back(m[nums1[i]]); } else { res.push_back(-1); } } return res; } }; /* [1,3,5,2,4] [6,5,4,3,2,1,7] The stack goes: [7, 1] [7, 2] -\u0026gt; 1 and 1 is next greater is the top of the stack */ ","permalink":"https://notes.0081800.xyz/notes/20220314085847-leetcode101_496_next_greater_element_i/","summary":"tags: Monotonic Stack,Hash Table,LeetCode101 Mono-descreasing and reverse order travel class Solution { public: vector\u0026lt;int\u0026gt; nextGreaterElement(vector\u0026lt;int\u0026gt;\u0026amp; nums1, vector\u0026lt;int\u0026gt;\u0026amp; nums2) { // Mono-descreasing and reverse order travel. // The next greater of the popped value is the top of the stack, if it has any. // // For example: [1,3,4,2] // the stack goes: // [2] // [4] -\u0026gt; 2 // [4, 3, 1] stack\u0026lt;int\u0026gt; st; vector\u0026lt;int\u0026gt; res; unordered_map\u0026lt;int, int\u0026gt; m; for (int i = nums2.","title":"LeetCode101: 496. Next Greater Element I"},{"content":" tags: Monotonic Stack,LeetCode101 Mono-increasing stack and reverse order travel (Not Work) Notes:\nWe attempt to remove the most large numbers in the left, first, we use the right n numbers to meet the requirements, which is num.length - k and then, using a monotonic increasing stack to keep the result as samller as we can. (A monotonic increasing stack will remove larger elements before pushing.)\nAlso note that: the result\u0026rsquo;s length is not actually equal num.length - k, it\u0026rsquo;s less than or equal num.length - k, like num = \u0026ldquo;10200\u0026rdquo;, k = 1. Which means the result in stack could be longer than the required or leading \u0026lsquo;0\u0026rsquo;.\nWe failed at:\nThe result is an empty string, that the \u0026ldquo;0\u0026rdquo; should be returned. num = \u0026ldquo;10\u0026rdquo;, k = 2 num = \u0026ldquo;112\u0026rdquo;, k = 1 class Solution { public: string removeKdigits(string num, int k) { if (num.size() \u0026lt;= k) { return \u0026#34;0\u0026#34;; } // A monotonic increasing stack will remove larger elements before pushing. stack\u0026lt;char\u0026gt; mst; int n = num.size() - k; string r; for (int i = num.size() - 1; i \u0026gt;= 0; i--) { while (mst.size() \u0026gt;= n \u0026amp;\u0026amp; mst.top() \u0026gt; num[i]) { mst.pop(); } mst.push(num[i]); } // Pop surplus and the leading \u0026#39;0\u0026#39; while (mst.size() \u0026gt; n || (!mst.empty() \u0026amp;\u0026amp; mst.top() == \u0026#39;0\u0026#39;)) { mst.pop(); } while (!mst.empty()) { r.push_back(mst.top()); mst.pop(); } return r.size() \u0026gt; 0 ? r : \u0026#34;0\u0026#34;; } }; Mono-increasing stack and normal order travel We are not focus on keep n - k numbers from right to left, but focus on remove k numbers from left to right.\nA more detail explanation to see: https://leetcode.com/problems/remove-k-digits/discuss/1779458/C%2B%2B-oror-Easy-To-Understand-oror-Stack-oror-Short-and-Simple\nclass Solution { public: string removeKdigits(string num, int k) { if (num.size() \u0026lt;= k) { return \u0026#34;0\u0026#34;; } // A monotonic increasing stack will remove bigger elements before pushing. stack\u0026lt;char\u0026gt; mst; int n = num.size() - k; string r; mst.push(num[0]); for (int i = 1; i \u0026lt; num.size(); i++) { while (k \u0026amp;\u0026amp; !mst.empty() \u0026amp;\u0026amp; mst.top() \u0026gt; num[i]) { mst.pop(); k--; } // the leading zero if (mst.size() == 1 \u0026amp;\u0026amp; mst.top() == \u0026#39;0\u0026#39;) { mst.pop(); } mst.push(num[i]); } while (k \u0026amp;\u0026amp; !mst.empty()) { k--; mst.pop(); } while (!mst.empty()) { r.push_back(mst.top()); mst.pop(); } reverse(r.begin(), r.end()); return r.size() \u0026gt; 0 ? r : \u0026#34;0\u0026#34;; } }; ","permalink":"https://notes.0081800.xyz/notes/20220314074324-leetcode101_402_remove_k_digits/","summary":"tags: Monotonic Stack,LeetCode101 Mono-increasing stack and reverse order travel (Not Work) Notes:\nWe attempt to remove the most large numbers in the left, first, we use the right n numbers to meet the requirements, which is num.length - k and then, using a monotonic increasing stack to keep the result as samller as we can. (A monotonic increasing stack will remove larger elements before pushing.)\nAlso note that: the result\u0026rsquo;s length is not actually equal num.","title":"LeetCode101: 402. Remove K Digits"},{"content":" tags: Monotonic Stack,LeetCode101,Tricky We travel the numbers in the reverse order:\nUse a mono-increasing stack to find the largest number(3 in the 132 pattern), the value popped from stack is the second large number(2 in the 132 pattern), if any value less than the second large number, returns true. // Note: // // - subsequence is not contiguous, is i \u0026lt; j \u0026lt; k, not i + 1 = j, j + 1 = k // class Solution { public: bool find132pattern(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int K = INT_MIN; stack\u0026lt;int\u0026gt; mst; // mono-increasing stack for (int i = nums.size() - 1; i \u0026gt;= 0; i--) { if (nums[i] \u0026lt; K) { return true; } while (!mst.empty() \u0026amp;\u0026amp; mst.top() \u0026lt; nums[i]) { K = mst.top(); mst.pop(); } mst.push(nums[i]); } return false; } }; ","permalink":"https://notes.0081800.xyz/notes/20220313153222-456_132_pattern/","summary":"tags: Monotonic Stack,LeetCode101,Tricky We travel the numbers in the reverse order:\nUse a mono-increasing stack to find the largest number(3 in the 132 pattern), the value popped from stack is the second large number(2 in the 132 pattern), if any value less than the second large number, returns true. // Note: // // - subsequence is not contiguous, is i \u0026lt; j \u0026lt; k, not i + 1 = j, j + 1 = k // class Solution { public: bool find132pattern(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int K = INT_MIN; stack\u0026lt;int\u0026gt; mst; // mono-increasing stack for (int i = nums.","title":"LeetCode101: 456. 132 Pattern"},{"content":" tags: Data Structures,Stack source: “Monotonic Stack.” Accessed March 13, 2022. https://liuzhenglaichn.gitbook.io/algorithm/monotonic-stack. A monotonic stack is a stack whose elements are monotonically increasing or descreasing.\nIt\u0026rsquo;s not only about the order in the stack, it\u0026rsquo;s also about remove larger/smaller elements before pushing.\nMonotonically descreasing we need to pop smaller elements from the stack before pushing a new element:\nvector\u0026lt;int\u0026gt; nums; // fill nums stack\u0026lt;int\u0026gt; st; for (auto i = nums.size() - 1; i \u0026gt;= 0; i--) { while (!st.empty() \u0026amp;\u0026amp; st.top() \u0026gt; nums[i]) { st.pop(); } st.push(nums[i]) } To push 3 to [5, 4, 2, 1], we need pop 2, 1 out first. Then the stack become [5, 4, 3] Monotonically increasing vice versa.\nvector\u0026lt;int\u0026gt; nums; // fill nums stack\u0026lt;int\u0026gt; st; for (auto i = nums.size() - 1; i \u0026gt;= 0; i--) { while (!st.empty() \u0026amp;\u0026amp; st.top() \u0026lt; nums[i]) { st.pop(); } st.push(nums[i]); } Increasing vs Decreasing Mono-increasing attempt to keep the result as greater as possible. Vice versa. ","permalink":"https://notes.0081800.xyz/notes/20220313145125-monotonic_stack/","summary":"tags: Data Structures,Stack source: “Monotonic Stack.” Accessed March 13, 2022. https://liuzhenglaichn.gitbook.io/algorithm/monotonic-stack. A monotonic stack is a stack whose elements are monotonically increasing or descreasing.\nIt\u0026rsquo;s not only about the order in the stack, it\u0026rsquo;s also about remove larger/smaller elements before pushing.\nMonotonically descreasing we need to pop smaller elements from the stack before pushing a new element:\nvector\u0026lt;int\u0026gt; nums; // fill nums stack\u0026lt;int\u0026gt; st; for (auto i = nums.size() - 1; i \u0026gt;= 0; i--) { while (!","title":"Monotonic Stack"},{"content":" tags: Binary Search Tree,Binary Tree,Tree ","permalink":"https://notes.0081800.xyz/notes/20220312215308-avl_tree/","summary":" tags: Binary Search Tree,Binary Tree,Tree ","title":"AVL Tree"},{"content":" tags: Data Structures,Binary Tree,Tree ","permalink":"https://notes.0081800.xyz/notes/20220312215158-binary_search_tree/","summary":" tags: Data Structures,Binary Tree,Tree ","title":"Binary Search Tree"},{"content":" tags: Binary Search Tree, AVL Tree,Tree ","permalink":"https://notes.0081800.xyz/notes/20220312215140-red_black_tree/","summary":" tags: Binary Search Tree, AVL Tree,Tree ","title":"Red-Black Tree"},{"content":" tags: C/C++ source: GeeksforGeeks. “Set vs Unordered_set in C++ STL,” May 28, 2018. https://www.geeksforgeeks.org/set-vs-unordered_set-c-stl/. set Ordered set that implemented by a \u0026ldquo;Self balancing BST\u0026rdquo; like Red-Black Tree.\nExtra find operations equal_range returns range of elements matching a specific key lower_bound returns an iterator to the first element not less than the given key upper_bound returns an iterator to the first element greater than the given key #include \u0026lt;iostream\u0026gt; #include \u0026lt;set\u0026gt; #include \u0026lt;assert.h\u0026gt; using namespace std; int main(void) { set\u0026lt;int\u0026gt; hset; hset.insert(5); hset.insert(8); hset.insert(13); { // Lower bound equal or greater than auto iter = hset.lower_bound(5); assert(*iter == 5); // 5\u0026#39;s lower bound is 5 itself in the set } { // Upper bound greater than 5 auto iter = hset.upper_bound(5); assert(*iter == 8); // 5\u0026#39;s upper bound is the first value greater than itself } } unordered_set Set that implemented by Hash Table.\n","permalink":"https://notes.0081800.xyz/notes/20220312215003-set_vs_unordered_set_in_c_stl/","summary":"tags: C/C++ source: GeeksforGeeks. “Set vs Unordered_set in C++ STL,” May 28, 2018. https://www.geeksforgeeks.org/set-vs-unordered_set-c-stl/. set Ordered set that implemented by a \u0026ldquo;Self balancing BST\u0026rdquo; like Red-Black Tree.\nExtra find operations equal_range returns range of elements matching a specific key lower_bound returns an iterator to the first element not less than the given key upper_bound returns an iterator to the first element greater than the given key #include \u0026lt;iostream\u0026gt; #include \u0026lt;set\u0026gt; #include \u0026lt;assert.","title":"set vs unordered_set in C++ STL"},{"content":" tags: C/C++,Java,Data Structures In C++ the set container is an ordered or sorted set, unordered_set is the normal set in C++. Differences between them please check set vs unordered_set in C++ STL.\nIn Java there is an java.util.SortedSet interface.\n","permalink":"https://notes.0081800.xyz/notes/20220312213701-orderedset/","summary":"tags: C/C++,Java,Data Structures In C++ the set container is an ordered or sorted set, unordered_set is the normal set in C++. Differences between them please check set vs unordered_set in C++ STL.\nIn Java there is an java.util.SortedSet interface.","title":"OrderedSet"},{"content":" tags: Sliding Window,OrderedSet Use HashSet to attempt to meet the requirements in the window class Solution { public: bool containsNearbyAlmostDuplicate(vector\u0026lt;int\u0026gt;\u0026amp; nums, int k, int t) { auto left = 0; auto K = 0; set\u0026lt;long\u0026gt; hset; // set in cpp is an sorted set for (auto right = 0; right \u0026lt; nums.size(); right++) { K = right - left; if (K \u0026gt; k) { hset.erase(nums[left]); left++; } hset.insert(nums[right]); // some numbers are the same. if (hset.size() \u0026lt; (right - left + 1)) { return true; } // abs less than or equal t auto prev = hset.begin(); for (auto iter = hset.begin(); iter != hset.end(); iter++) { if (iter != prev \u0026amp;\u0026amp; abs(*prev - *iter) \u0026lt;= t) { return true; } prev = iter; } } return false; } }; // 1. find previous value that meet the requirement, which is abs(nums[i] - nums[j]) \u0026lt;= t // 2. See if also meet the requirement, which is abs(i - j) \u0026lt;= k, otherwise slide left // // Use a fixed window, which size is ~k~. And maintain a set of numbers in the window. // To check if there numbers meet the requirement. It\u0026rsquo;s too slow and got \u0026ldquo;Time Limit Exceeded\u0026rdquo;: https://leetcode.com/submissions/detail/658425251/testcase/. In this case the t is 0, so we can avoid the embed for loop with a if condition:\nif (t != 0 ) { // abs less than or equal t auto prev = hset.begin(); for (auto iter = hset.begin(); iter != hset.end(); iter++) { if (iter != prev \u0026amp;\u0026amp; abs(*prev - *iter) \u0026lt;= t) { return true; } prev = iter; } } But then we got: https://leetcode.com/submissions/detail/658426815/testcase/.\nUse SortedSet lower_bound/uppoer_bound to meet the requirements of abs(nums[i] - nums[j]) \u0026lt; t After a search of OrderedSet. As we known nums[j] and t, we need find which range of nums[i] is meeting the requirement. Then we can find it in the OrderedSet.\nclass Solution { public: bool containsNearbyAlmostDuplicate(vector\u0026lt;int\u0026gt;\u0026amp; nums, int k, int t) { auto left = 0; auto K = 0; set\u0026lt;long\u0026gt; hset; // set in cpp is an sorted set for (auto right = 0; right \u0026lt; nums.size(); right++) { long n = nums[right]; if ((right - left) \u0026gt; k) { hset.erase(nums[left++]); } // Find a value that equal or greater than required. // According to abs(nums[i] - nums[j]) \u0026lt;= t, the differ between // nums[i] and nums[j] less than t. // Which means nums[i] - nums[j] \u0026lt;= t and nums[j] - nums[i] \u0026lt;= t. // So here, we find back /t/ based on current value, as we are using // sorted set, so a bigger value could be found too. // For example, now the value is 5, t is 2. Then we found the value // greater than or equal to 3, the possible values may found: 3, 4, 5, 6, 7. // Any of them is meeting the requirements. auto iter = hset.lower_bound(n - t); if (iter != hset.end() and (*iter - n) \u0026lt;= t) { return true; } hset.insert(nums[right]); } return false; } }; ","permalink":"https://notes.0081800.xyz/notes/20220312212227-leetcode101_220_contains_duplicate_iii/","summary":"tags: Sliding Window,OrderedSet Use HashSet to attempt to meet the requirements in the window class Solution { public: bool containsNearbyAlmostDuplicate(vector\u0026lt;int\u0026gt;\u0026amp; nums, int k, int t) { auto left = 0; auto K = 0; set\u0026lt;long\u0026gt; hset; // set in cpp is an sorted set for (auto right = 0; right \u0026lt; nums.size(); right++) { K = right - left; if (K \u0026gt; k) { hset.erase(nums[left]); left++; } hset.insert(nums[right]); // some numbers are the same.","title":"LeetCode101: 220. Contains Duplicate III"},{"content":" tags: Sliding Window,Hash Table,LeetCode101 This is an \u0026ldquo;near by\u0026rdquo; problem that can be solved by Sliding Window. The k in the problem is somehow means contiguous.\nAnd using a HashTable to indicate that two values in the different position are equal.\nThe steps is following:\nFind two values at each side of window are equal. Return true if the offset between their indices is less than or equal k. Otherwise set left to the new position and continue. class Solution { public: bool containsNearbyDuplicate(vector\u0026lt;int\u0026gt;\u0026amp; nums, int k) { int left = 0; unordered_map\u0026lt;int, int\u0026gt; indices; for (auto right = 0; right \u0026lt; nums.size(); right++) { auto iter = indices.find(nums[right]); if (iter != indices.end()) { if (abs(right - iter-\u0026gt;second) \u0026lt;= k) { return true; } left = iter-\u0026gt;second + 1; } indices[nums[right]] = right; } return false; } }; ","permalink":"https://notes.0081800.xyz/notes/20220312073726-219_contains_duplicate_ii/","summary":"tags: Sliding Window,Hash Table,LeetCode101 This is an \u0026ldquo;near by\u0026rdquo; problem that can be solved by Sliding Window. The k in the problem is somehow means contiguous.\nAnd using a HashTable to indicate that two values in the different position are equal.\nThe steps is following:\nFind two values at each side of window are equal. Return true if the offset between their indices is less than or equal k. Otherwise set left to the new position and continue.","title":"LeetCode101: 219. Contains Duplicate II"},{"content":" tags: Data Structures ","permalink":"https://notes.0081800.xyz/notes/20220311221617-hash_table/","summary":" tags: Data Structures ","title":"Hash Table"},{"content":" tags: Sliding Window,LeetCode101 Key:\nsum is greater than or equal to target Compute minimal must above slide left window, as decrease may cause sum less than target. See also 1695. Maximum Erasure Value class Solution { public: int minSubArrayLen(int target, vector\u0026lt;int\u0026gt;\u0026amp; nums) { int left = 0; int sum = 0; int minimal = INT_MAX; for (auto right = 0; right \u0026lt; nums.size(); right++) { sum += nums[right]; while (sum \u0026gt;= target) { minimal = min(minimal, right - left + 1); sum -= nums[left++]; } } return minimal == INT_MAX ? 0 : minimal; } }; ","permalink":"https://notes.0081800.xyz/notes/20220311220839-209_minimum_size_subarray_sum/","summary":"tags: Sliding Window,LeetCode101 Key:\nsum is greater than or equal to target Compute minimal must above slide left window, as decrease may cause sum less than target. See also 1695. Maximum Erasure Value class Solution { public: int minSubArrayLen(int target, vector\u0026lt;int\u0026gt;\u0026amp; nums) { int left = 0; int sum = 0; int minimal = INT_MAX; for (auto right = 0; right \u0026lt; nums.size(); right++) { sum += nums[right]; while (sum \u0026gt;= target) { minimal = min(minimal, right - left + 1); sum -= nums[left++]; } } return minimal == INT_MAX ?","title":"LeetCode101: 209. Minimum Size Subarray Sum"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20220311213000-187_repeated_dna_sequences/","summary":"","title":"187. Repeated DNA Sequences"},{"content":" tags: Sliding Window,LeetCode101,Hash Set Key:\nFixed size window, right should start from 9 class Solution { public: vector\u0026lt;string\u0026gt; findRepeatedDnaSequences(string s) { int left = 0; unordered_set\u0026lt;string\u0026gt; results; unordered_set\u0026lt;string\u0026gt; hset; for (auto right = 9; right \u0026lt; s.size(); right++) { string sub(s, left, 10); if (hset.find(sub) != hset.end()) { results.insert(sub); } hset.insert(sub); left++; } return vector\u0026lt;string\u0026gt;(results.begin(), results.end()); } }; ","permalink":"https://notes.0081800.xyz/notes/20220311213045-187_repeated_dna_sequences/","summary":" tags: Sliding Window,LeetCode101,Hash Set Key:\nFixed size window, right should start from 9 class Solution { public: vector\u0026lt;string\u0026gt; findRepeatedDnaSequences(string s) { int left = 0; unordered_set\u0026lt;string\u0026gt; results; unordered_set\u0026lt;string\u0026gt; hset; for (auto right = 9; right \u0026lt; s.size(); right++) { string sub(s, left, 10); if (hset.find(sub) != hset.end()) { results.insert(sub); } hset.insert(sub); left++; } return vector\u0026lt;string\u0026gt;(results.begin(), results.end()); } }; ","title":"LeetCode101: 187. Repeated DNA Sequences"},{"content":" tags: Data Structures ","permalink":"https://notes.0081800.xyz/notes/20220311183913-hash_set/","summary":" tags: Data Structures ","title":"Hash Set"},{"content":" tags: Sliding Window,LeetCode101,Hash Set Use HashMap to store indices See also: 3. Longest Substring Without Repeating Characters\nclass Solution { public: int maximumUniqueSubarray(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int maximum = 0; int left = 0, right = 0; unordered_map\u0026lt;int, int\u0026gt; indices; for (; right \u0026lt; nums.size(); right++) { int n = nums[right]; if (indices.find(n) != indices.end() \u0026amp;\u0026amp; indices[n] + 1 \u0026gt; left) { left = indices[n] + 1; } maximum = max(maximum, std::accumulate(nums.begin() + left, nums.begin() + right + 1, 0)); indices[n] = right; } return maximum; } }; It is too slow, as there is a \\(O(n^2)\\) time complexity(std::accmulate is the embed \\(O(n)\\) ).\nSlide left window step by step and use HashSet to store numbers The keys we should noted:\nWe must decrease all the numbers that behind the new left position(a while loop is used here). class Solution { public: int maximumUniqueSubarray(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int maximum = 0; int left = 0, right = 0, sum = 0; unordered_set\u0026lt;int\u0026gt; hset; for (; right \u0026lt; nums.size(); right++) { int n = nums[right]; while (hset.find(n) != hset.end()) { hset.erase(nums[left]); sum -= nums[left]; left++; } sum += n; maximum = max(maximum, sum); hset.insert(n); } return maximum; } }; ","permalink":"https://notes.0081800.xyz/notes/20220311183843-1695_maximum_erasure_value/","summary":"tags: Sliding Window,LeetCode101,Hash Set Use HashMap to store indices See also: 3. Longest Substring Without Repeating Characters\nclass Solution { public: int maximumUniqueSubarray(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int maximum = 0; int left = 0, right = 0; unordered_map\u0026lt;int, int\u0026gt; indices; for (; right \u0026lt; nums.size(); right++) { int n = nums[right]; if (indices.find(n) != indices.end() \u0026amp;\u0026amp; indices[n] + 1 \u0026gt; left) { left = indices[n] + 1; } maximum = max(maximum, std::accumulate(nums.","title":"LeetCode101: 1695. Maximum Erasure Value"},{"content":" tags: Sliding Window source: Moore, Jordan. “An Introduction to Sliding Window Algorithms.” Medium, July 26, 2020. https://levelup.gitconnected.com/an-introduction-to-sliding-window-algorithms-5533c4fe1cc7. Efficientive algorithm:\nPerfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. \u0026ndash; Antoine de Saint-Exupéry\nThe following return values can use a sliding window:\nMinimum value Maximum value Longest value Shortest value K-sized value And contiguous is one of the biggest clues.\nCommon data structures are strings, arrays and even linked lists.\nFramework:\nSlide right window to move forward Slide left window to meet the requirements. Compare to result. ","permalink":"https://notes.0081800.xyz/notes/20220311083843-an_introduction_to_sliding_window_algorithms/","summary":"tags: Sliding Window source: Moore, Jordan. “An Introduction to Sliding Window Algorithms.” Medium, July 26, 2020. https://levelup.gitconnected.com/an-introduction-to-sliding-window-algorithms-5533c4fe1cc7. Efficientive algorithm:\nPerfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. \u0026ndash; Antoine de Saint-Exupéry\nThe following return values can use a sliding window:\nMinimum value Maximum value Longest value Shortest value K-sized value And contiguous is one of the biggest clues.","title":"An Introduction to Sliding Window Algorithms"},{"content":" tags: Sliding Window,Brute Force Approach source: GeeksforGeeks. “Window Sliding Technique,” April 16, 2017. https://www.geeksforgeeks.org/window-sliding-technique/. Use a Sliding Window to instead Brute Force Approach, improve time complexity big O from \\(O(n^2)\\) to \\(O(n)\\).\n","permalink":"https://notes.0081800.xyz/notes/20220311081613-window_sliding_technique/","summary":"tags: Sliding Window,Brute Force Approach source: GeeksforGeeks. “Window Sliding Technique,” April 16, 2017. https://www.geeksforgeeks.org/window-sliding-technique/. Use a Sliding Window to instead Brute Force Approach, improve time complexity big O from \\(O(n^2)\\) to \\(O(n)\\).","title":"Window Sliding Technique"},{"content":" tags: Algorithm ","permalink":"https://notes.0081800.xyz/notes/20220311081528-brute_force_approach/","summary":" tags: Algorithm ","title":"Brute Force Approach"},{"content":" tags: Algorithm ","permalink":"https://notes.0081800.xyz/notes/20220311075423-two_pointer/","summary":" tags: Algorithm ","title":"Two Pointers"},{"content":" tags: Sliding Window,Two Pointers source: 力扣 LeetCode. “题解：借这个问题科普一下「滑动窗口」和「双指针」的区别 - 力扣（LeetCode）.” Accessed March 11, 2022. https://leetcode-cn.com/problems/get-equal-substrings-within-budget/solution/jie-zhe-ge-wen-ti-ke-pu-yi-xia-hua-dong-6128z/. https://stackoverflow.com/a/64078338 Two Pointer to slove the problem of two elements that two pointes pointed.\nSliding Window to slove the problem of all elements that in the window.\n","permalink":"https://notes.0081800.xyz/notes/20220311075357-differences_between_sliding_window_and_two_pointer/","summary":"tags: Sliding Window,Two Pointers source: 力扣 LeetCode. “题解：借这个问题科普一下「滑动窗口」和「双指针」的区别 - 力扣（LeetCode）.” Accessed March 11, 2022. https://leetcode-cn.com/problems/get-equal-substrings-within-budget/solution/jie-zhe-ge-wen-ti-ke-pu-yi-xia-hua-dong-6128z/. https://stackoverflow.com/a/64078338 Two Pointer to slove the problem of two elements that two pointes pointed.\nSliding Window to slove the problem of all elements that in the window.","title":"Differences between Sliding Window and Two Pointers"},{"content":" tags: Sliding Window,LeetCode101,Hash Table Use HashMap to store counts of letters Two points we should be noticed:\nThe length of substring should be (right - left) + 1, as one side must be counted.\nWe must decrese the number in the counts first, and then slide the left window, or we must decrese the wrong one, please compare between Wrong and Correct.\nWrong\nleft++; counts[s[left]]--; Correct\ncounts[s[left]]--; left++; The full code see:\nclass Solution { public: int lengthOfLongestSubstring(string s) { int left = 0; int longest = 0; char c; map\u0026lt;char, int\u0026gt; counts; // for loop to slide the right side of window. for (int right = 0; right \u0026lt; s.size(); right++) { c = s[right]; if (counts.find(c) == counts.end()) { counts[c] = 0; } counts[c]++; // slide the left side of window to meet the requirements, // here is \u0026#34;Without Repeating Characters\u0026#34;. for (auto iter = counts.begin(); iter != counts.end(); ++iter) { if (iter-\u0026gt;second \u0026gt; 1) { counts[s[left]]--; left++; break; } } // compare to result. longest = max(longest, right - left + 1); } return longest; } }; See also: An Introduction to Sliding Window Algorithms\nUse HashMap to store index of letters Points that should be noticed:\nThe whole string without repeating, that will not meet the condition: letter is indexed already.\n\u0026quot; \u0026quot; \u0026quot;au\u0026quot; // no duplicated if (indices.find(l) != indices.end()) { left = indices[l] + 1; longest = max(longest, right - left + 1); } In those cases longest will be 0, if this is the only one block to compute the longest.\nMove compute the longest out of the if block, the problem should be sloved.\n// no duplicated if (indices.find(l) != indices.end()) { left = indices[l] + 1; } longest = max(longest, right - left + 1); The left may go backward from a HashTable, and that must be avoid.\n\u0026ldquo;abba\u0026rdquo; if (indices.find(l) != indices.end() \u0026amp;\u0026amp; indices[l] + 1 \u0026gt; left) { left = indices[l] + 1; } longest = max(longest, right - left + 1); And notice that +1 must exists in the condition, the WRONG edition:\nif (indices.find(l) != indices.end() \u0026amp;\u0026amp; indices[l] \u0026gt; left) { left = indices[l] + 1; } longest = max(longest, right - left + 1); Finally code:\nclass Solution { public: int lengthOfLongestSubstring(string s) { int left = 0; int longest = 0; map\u0026lt;char, int\u0026gt; indices; for (auto right = 0; right \u0026lt; s.size(); right++) { char l = s[right]; if (indices.find(l) != indices.end() \u0026amp;\u0026amp; indices[l] + 1 \u0026gt; left) { left = indices[l] + 1; } longest = max(longest, right - left + 1); indices[l] = right; } return longest; } }; Full with failed:\nclass Solution { public: int lengthOfLongestSubstring(string s) { int left = 0; int longest = 0; map\u0026lt;char, int\u0026gt; indices; for (auto right = 0; right \u0026lt; s.size(); right++) { char l = s[right]; /* // failed on string without repeating: \u0026#34; \u0026#34; \u0026#34;au\u0026#34; if (indices.find(l) != indices.end()) { left = indices[l] + 1; longest = max(longest, right - left + 1); } */ /* // failed on left go backward: \u0026#34;abba\u0026#34; if (indices.find(l) != indices.end()) { left = indices[l] + 1; } longest = max(longest, right - left + 1); */ if (indices.find(l) != indices.end() \u0026amp;\u0026amp; indices[l] + 1 \u0026gt; left) { left = indices[l] + 1; } longest = max(longest, right - left + 1); indices[l] = right; } return longest; } }; Optimization: use the unordered_map to instead map.\nclass Solution { public: int lengthOfLongestSubstring(string s) { int left = 0; int longest = 0; unordered_map\u0026lt;char, int\u0026gt; indices; for (auto right = 0; right \u0026lt; s.size(); right++) { char l = s[right]; if (indices.find(l) != indices.end() \u0026amp;\u0026amp; indices[l] + 1 \u0026gt; left) { left = indices[l] + 1; } longest = max(longest, right - left + 1); indices[l] = right; } return longest; } }; ","permalink":"https://notes.0081800.xyz/notes/20220311074801-3_longest_substring_without_repeating_characters/","summary":"tags: Sliding Window,LeetCode101,Hash Table Use HashMap to store counts of letters Two points we should be noticed:\nThe length of substring should be (right - left) + 1, as one side must be counted.\nWe must decrese the number in the counts first, and then slide the left window, or we must decrese the wrong one, please compare between Wrong and Correct.\nWrong\nleft++; counts[s[left]]--; Correct\ncounts[s[left]]--; left++; The full code see:","title":"LeetCode101: 3. Longest Substring Without Repeating Characters"},{"content":" tags: Algorithm Slide right to move forward to find the solution. Slide left to keep the solution, and collect to the results. Must avoid left go to backward. ","permalink":"https://notes.0081800.xyz/notes/20220311074820-sliding_window/","summary":" tags: Algorithm Slide right to move forward to find the solution. Slide left to keep the solution, and collect to the results. Must avoid left go to backward. ","title":"Sliding Window"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20220311073803-445_add_two_numbers_ii/","summary":"","title":"445. Add Two Numbers II"},{"content":" tags: Computer Systems ","permalink":"https://notes.0081800.xyz/projects/20220311073856-data_structures/","summary":" tags: Computer Systems ","title":"Data Structures"},{"content":" tags: Linked List,Stack, LeetCode101,2. Add Two Numbers 两数之和的进阶版，位高的数字在链表的头部，常规解法是通过「栈」进行反转链表，然后回退到2. Add Two Numbers的解法。\n","permalink":"https://notes.0081800.xyz/notes/20220311073810-445_add_two_numbers_ii/","summary":"tags: Linked List,Stack, LeetCode101,2. Add Two Numbers 两数之和的进阶版，位高的数字在链表的头部，常规解法是通过「栈」进行反转链表，然后回退到2. Add Two Numbers的解法。","title":"LeetCode101: 445. Add Two Numbers II"},{"content":" tags: Data Structures ","permalink":"https://notes.0081800.xyz/notes/20220311073821-stack/","summary":" tags: Data Structures ","title":"Stack"},{"content":" tags: Data Structures ","permalink":"https://notes.0081800.xyz/notes/20220311070813-linked_list/","summary":" tags: Data Structures ","title":"Linked List"},{"content":" tags: Linked List, LeetCode101 正常的「链表」遍历操作，需要注意的就是不要在末尾忘记处理进位，如果 carry 大于 0 需要追加到结果链表末尾。\n","permalink":"https://notes.0081800.xyz/notes/20220311070727-2_add_two_numbers/","summary":"tags: Linked List, LeetCode101 正常的「链表」遍历操作，需要注意的就是不要在末尾忘记处理进位，如果 carry 大于 0 需要追加到结果链表末尾。","title":"LeetCode101: 2. Add Two Numbers"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20220311070749-linked_list/","summary":"","title":"Linked List"},{"content":" tags: Algorithm,Data Structures 又要开始找工作了，刷题、刷题、刷题！步骤：\n按顺序找到题目 解题/学习 总结考察的点（树、双指针、回溯、DP、模拟现实、递归） 刷相同解法框架的题 一些模糊的感觉：\n尝试不同的遍历顺序可能是解题关键，正序遍历不行试一下反序遍历，反之亦然！ 以上到达一定量之后在 LeetCode 创建一个新的 session 重新刷起。\n","permalink":"https://notes.0081800.xyz/notes/20220311065137-leetcode101/","summary":"tags: Algorithm,Data Structures 又要开始找工作了，刷题、刷题、刷题！步骤：\n按顺序找到题目 解题/学习 总结考察的点（树、双指针、回溯、DP、模拟现实、递归） 刷相同解法框架的题 一些模糊的感觉：\n尝试不同的遍历顺序可能是解题关键，正序遍历不行试一下反序遍历，反之亦然！ 以上到达一定量之后在 LeetCode 创建一个新的 session 重新刷起。","title":"LeetCode101"},{"content":" tags: Computer Systems,Linux source: 262588213843476. “Fork() Is Evil; Vfork() Is Goodness; Afork() Would Be Better; Clone() Is Stupid.” Gist. Accessed March 2, 2022. https://gist.github.com/nicowilliams/a8a07b0fc75df05f684c23c18d7db234. ","permalink":"https://notes.0081800.xyz/notes/20220302114010-fork_is_evil_vfork_is_goodness_afork_would_be_better_clone_is_stupid/","summary":" tags: Computer Systems,Linux source: 262588213843476. “Fork() Is Evil; Vfork() Is Goodness; Afork() Would Be Better; Clone() Is Stupid.” Gist. Accessed March 2, 2022. https://gist.github.com/nicowilliams/a8a07b0fc75df05f684c23c18d7db234. ","title":"fork() is evil; vfork() is goodness; afork() would be better; clone() is stupid"},{"content":" tags: English Listening Practice source: https://www.youtube.com/channel/UCSHZKyawb77ixDdsGog4iWA ","permalink":"https://notes.0081800.xyz/notes/20220228105442-podcast_youtube_lex_fridman/","summary":" tags: English Listening Practice source: https://www.youtube.com/channel/UCSHZKyawb77ixDdsGog4iWA ","title":"Podcast/YouTube: Lex Fridman"},{"content":" tags: Learning English ","permalink":"https://notes.0081800.xyz/notes/20220228104819-english_listening_practice/","summary":" tags: Learning English ","title":"English Listening Practice"},{"content":" 物前白 动前土 行动后面双人来 ","permalink":"https://notes.0081800.xyz/notes/20220226070756-%E7%9A%84%E5%9C%B0%E5%BE%97/","summary":" 物前白 动前土 行动后面双人来 ","title":"的地得"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20220221084730-wealth/","summary":"","title":"Wealth"},{"content":" tags: Financial Management,Wealth,English Listening Practice source: Naval. “How to Get Rich,” December 28, 2019. https://nav.al/rich. YouTube: https://www.youtube.com/watch?v=1-TZqOsVCNM ","permalink":"https://notes.0081800.xyz/notes/20220221083059-how_to_get_rich_without_getting_lucky/","summary":" tags: Financial Management,Wealth,English Listening Practice source: Naval. “How to Get Rich,” December 28, 2019. https://nav.al/rich. YouTube: https://www.youtube.com/watch?v=1-TZqOsVCNM ","title":"How To Get Rich (without getting lucky)"},{"content":" tags: Design ","permalink":"https://notes.0081800.xyz/notes/20220212074018-material_design/","summary":" tags: Design ","title":"Material Design"},{"content":" tags: Online Tools,Material Design,Design source: https://material.io/design/color/the-color-system.html#tools-for-picking-colors full: https://material.io/resources/color/#!/?view.left=0\u0026amp;view.right=0\u0026amp;primary.color=b3e4ff ","permalink":"https://notes.0081800.xyz/notes/20220212074044-material_design_tools_for_picking_colors/","summary":" tags: Online Tools,Material Design,Design source: https://material.io/design/color/the-color-system.html#tools-for-picking-colors full: https://material.io/resources/color/#!/?view.left=0\u0026amp;view.right=0\u0026amp;primary.color=b3e4ff ","title":"Material Design:  Tools for picking colors"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20220212073844-design/","summary":"","title":"Design"},{"content":" tags: Design,Material Design: Tools for picking colorsMaterial Design source: Material Design. “Material Design.” Accessed February 12, 2022. https://material.io/design/color/the-color-system.html#color-usage-and-palettes. Principles Hierarchical\nColor indicates which elements are interactive, how they relate to other elements, and their level of prominence. Important elements should stand out the most.\nLegible\nText and import elements, like icons, should meet legibility standards when appearing on colored backgrounds.\nExpressive\nShow brand colors at memorable moments that reinforce your brand\u0026rsquo;s style.\nColors we need Primary colors\nscreens and components Variants of primary colors\nDark and light primary variants Secondary colors\nFloating action buttons Selection controls, like sliders and switches Highlighting selected text Progress bars Links and headlines Variants of secondary colors (optional)\nAdditional UI colors, such as colors for backgrounds, surfaces, errors, typography, and iconography.\nSurface colors affect surfaces of components, such as cards, sheets, and menus. The background color appears behind scrollable content. The baseline background and surface color is #FFFFFF. Error color indicates errors in components, such as invalid text in a text field. The baseline error color is #B00020. ","permalink":"https://notes.0081800.xyz/notes/20220212073824-material_design_the_color_system/","summary":"tags: Design,Material Design: Tools for picking colorsMaterial Design source: Material Design. “Material Design.” Accessed February 12, 2022. https://material.io/design/color/the-color-system.html#color-usage-and-palettes. Principles Hierarchical\nColor indicates which elements are interactive, how they relate to other elements, and their level of prominence. Important elements should stand out the most.\nLegible\nText and import elements, like icons, should meet legibility standards when appearing on colored backgrounds.\nExpressive\nShow brand colors at memorable moments that reinforce your brand\u0026rsquo;s style.","title":"Material Design: The color system"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20220209130912-gtk/","summary":"","title":"GTK"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20220209130903-gui/","summary":"","title":"GUI"},{"content":" tags: GUI,GTK source: “Text Widget Overview.” Accessed February 9, 2022. https://docs.huihoo.com/gtk/3.0.3/TextWidget.html. GtkTextBuffer for the text to edit. GtkTextIter to manipulate text, can\u0026rsquo;t be used to preserve positions across buffer modifications GtkTextMark can be used to preserve a position. GtkTextView to show GtkTextBuffer. GtkTextTagTable to control the appearence of text, like bold/color/etc. ","permalink":"https://notes.0081800.xyz/notes/20220209130852-gtk_3_text_widget_overview/","summary":" tags: GUI,GTK source: “Text Widget Overview.” Accessed February 9, 2022. https://docs.huihoo.com/gtk/3.0.3/TextWidget.html. GtkTextBuffer for the text to edit. GtkTextIter to manipulate text, can\u0026rsquo;t be used to preserve positions across buffer modifications GtkTextMark can be used to preserve a position. GtkTextView to show GtkTextBuffer. GtkTextTagTable to control the appearence of text, like bold/color/etc. ","title":"GTK+ 3 Text Widget Overview"},{"content":" tags: Rust GUI,Elm,GTK ","permalink":"https://notes.0081800.xyz/notes/20220208150754-github_antoyo_relm_idiomatic_gtk_based_gui_library_inspired_by_elm_written_in_rust/","summary":" tags: Rust GUI,Elm,GTK ","title":"GitHub: antoyo/relm  – Idiomatic, GTK+-based, GUI library, inspired by Elm, written in Rust"},{"content":" source: https://elm-lang.org/ A delightful language for reliable web applications.\n","permalink":"https://notes.0081800.xyz/notes/20220208150622-elm/","summary":"source: https://elm-lang.org/ A delightful language for reliable web applications.","title":"Elm"},{"content":" tags: Rust GUI,Elm The most popular GUI library for Rust.\n","permalink":"https://notes.0081800.xyz/notes/20220208150550-github_iced_rs_iced_a_cross_platform_gui_library_for_rust_inspired_by_elm/","summary":"tags: Rust GUI,Elm The most popular GUI library for Rust.","title":"GitHub: iced-rs/iced – A cross-platform GUI library for Rust, inspired by Elm"},{"content":" tags: Rust GUI source: “Are We GUI Yet?” Accessed February 8, 2022. https://www.areweguiyet.com/. The answer is no, it seems the most popular GUI libraries are beta and not production ready.\nGitHub: antoyo/relm \u0026ndash; Idiomatic, GTK+-based, GUI library, inspired by Elm, written in Rust GitHub: iced-rs/iced \u0026ndash; A cross-platform GUI library for Rust, inspired by Elm GitHub: linebender/druid \u0026ndash; A data-first Rust-native UI design toolkit. GitHub: redox-os/orbtk \u0026ndash; The Rust UI-Toolkit. ","permalink":"https://notes.0081800.xyz/notes/20220208150415-are_we_gui_yet/","summary":"tags: Rust GUI source: “Are We GUI Yet?” Accessed February 8, 2022. https://www.areweguiyet.com/. The answer is no, it seems the most popular GUI libraries are beta and not production ready.\nGitHub: antoyo/relm \u0026ndash; Idiomatic, GTK+-based, GUI library, inspired by Elm, written in Rust GitHub: iced-rs/iced \u0026ndash; A cross-platform GUI library for Rust, inspired by Elm GitHub: linebender/druid \u0026ndash; A data-first Rust-native UI design toolkit. GitHub: redox-os/orbtk \u0026ndash; The Rust UI-Toolkit.","title":"Are we GUI Yet?"},{"content":" tags: Rust,Rust GUI Overview Platform Documentation Community Activity Most Activity Period Native UI Cross platform Leak 5.7k stars Yes 2019-2021 No Conclusion Use the the platform-native widgets or mimic them. (Relm, SixtyFPS) Embed easily into custom render pipelines. (Conrod) Adhere to a specific architectural style such as Elm. (Iced, Relm) Support rendering to HTML when targeting the web. (Iced, Moxie) ","permalink":"https://notes.0081800.xyz/notes/20220208133213-github_linebender_druid_a_data_first_rust_native_ui_design_toolkit/","summary":" tags: Rust,Rust GUI Overview Platform Documentation Community Activity Most Activity Period Native UI Cross platform Leak 5.7k stars Yes 2019-2021 No Conclusion Use the the platform-native widgets or mimic them. (Relm, SixtyFPS) Embed easily into custom render pipelines. (Conrod) Adhere to a specific architectural style such as Elm. (Iced, Relm) Support rendering to HTML when targeting the web. (Iced, Moxie) ","title":"GitHub: linebender/druid – A data-first Rust-native UI design toolkit."},{"content":" tags: Rust,Rust GUI Overview Platform Documentation Community Activity Most Activity Period Native UI Cross platform Leak 3.5k stars Kind of 2020 No Conclusion Highlights \u0026ndash; Cross platform Downsides \u0026ndash; Documentation leak and not in activity development. ","permalink":"https://notes.0081800.xyz/notes/20220208121018-github_redox_os_orbtk_the_rust_ui_toolkit/","summary":" tags: Rust,Rust GUI Overview Platform Documentation Community Activity Most Activity Period Native UI Cross platform Leak 3.5k stars Kind of 2020 No Conclusion Highlights \u0026ndash; Cross platform Downsides \u0026ndash; Documentation leak and not in activity development. ","title":"GitHub: redox-os/orbtk –  The Rust UI-Toolkit."},{"content":" tags: Rust,GUI ","permalink":"https://notes.0081800.xyz/notes/20220208121029-rust_gui/","summary":" tags: Rust,GUI ","title":"Rust GUI"},{"content":" tags: Smart contracts source: Business Tech Guides. “The Dark Side Of Smart Contracts.” Accessed February 7, 2022. https://businesstechguides.co/smart-contracts. WHAT are Smart Contracts? Blockchain-based programmes that execute agreements once certain criteria are fulfilled by all parties involved.\nA self-executing piece of code. When it\u0026rsquo;s deployed on blockchain, meaning nobody controls it.\nAnalog a contract in the real world, for example, the contract you are signed with your landloard to lease an apartment. More like a vending machine: insert coins and receive a drink.\nWHY are Smart Contracts Popular? Operate on the blockchain. Immutable. Simple and fast. What are the Problems With Smart Contracts? Reliance on External Data Sources\nNot all data stored in the blockchain, and blockchain cannot communicate with the outside world. Oracles are needed, but how can we trust the oracles?\nFor example, I was received some tokens from The Open Source Software DAO, the oracle it relayed on is GitHub account.\nRigidity - The other side of immutable.\nConfidentiality of Information - everybody can access the information on the blockchain.\nLegal Status\nSecurity Flaws - Bugs \u0026amp; Immutable.\nSimplistic Operation - Too simple can\u0026rsquo;t carry too much functionality.\n","permalink":"https://notes.0081800.xyz/notes/20220208070254-the_dark_side_of_smart_contracts/","summary":"tags: Smart contracts source: Business Tech Guides. “The Dark Side Of Smart Contracts.” Accessed February 7, 2022. https://businesstechguides.co/smart-contracts. WHAT are Smart Contracts? Blockchain-based programmes that execute agreements once certain criteria are fulfilled by all parties involved.\nA self-executing piece of code. When it\u0026rsquo;s deployed on blockchain, meaning nobody controls it.\nAnalog a contract in the real world, for example, the contract you are signed with your landloard to lease an apartment.","title":"The Dark Side Of Smart Contracts"},{"content":" tags: slip-box,PKM source: David Kadavy. 250. My Zettelkasten: An Author’s Digital Slip-Box Method Example (Using Plain-Text Software), 2021. https://www.youtube.com/watch?v=Ji96vbaCT-s. Using a GTD pattern to collect notes:\nAn Inbox to collect Fleeting Notes.\nReview the Inbox periodically.\na. If it\u0026rsquo;s still interesting, then move it to the Permanent Notes. b. Otherwise move it to \u0026ldquo;Some day\u0026rdquo;\n","permalink":"https://notes.0081800.xyz/notes/20220123081120-youtube_250_my_zettelkasten_an_author_s_digital_slip_box_method_example_using_plain_text_software/","summary":"tags: slip-box,PKM source: David Kadavy. 250. My Zettelkasten: An Author’s Digital Slip-Box Method Example (Using Plain-Text Software), 2021. https://www.youtube.com/watch?v=Ji96vbaCT-s. Using a GTD pattern to collect notes:\nAn Inbox to collect Fleeting Notes.\nReview the Inbox periodically.\na. If it\u0026rsquo;s still interesting, then move it to the Permanent Notes. b. Otherwise move it to \u0026ldquo;Some day\u0026rdquo;","title":"YouTube: 250. My Zettelkasten: An Author’s Digital Slip-Box Method Example (Using Plain-Text Software)"},{"content":" tags: slip-box,How to Take Smart Notes,PKM 参考：YouTube: 250. My Zettelkasten: An Author’s Digital Slip-Box Method Example (Using Plain-Text Software) 我身边有很多人包括我自己都很喜欢收藏文章、课程和教学视频等学习类资源，当然还包括给 GitHub 上的项目添加星星。一些更努力的人会在收藏后进行阅读并记录笔记，我们的学习焦虑被得到了满足。 然后呢？你会去看收藏的学习资源吗？会定期查看自己的笔记吗？我觉得这更像是一种自我欺骗或者麻痹，一种「我学会了」的假象被制造出来。\n定期回顾总结可以避免这种假象，这是我最近实践 Luhmann 的 Zettelkasten 所学习到的。 先通过 Overaching workflow 记下所有我们需要关注的主题到 Inbox 中，然后通过回顾的方式来总结转化成自己的知识，记录到 PKM 中去。 也就是依然可以去“收藏”，但是要定期的去查看自己的收藏，最好不要太久以免忘记自己为什么收藏。 如果收藏了很多大部分已经没有兴趣了，可以参考 GTD 将内容整理到 Some day 中去，避免 Inbox 过大让我们产生畏惧感从而导致我们放弃。\n","permalink":"https://notes.0081800.xyz/notes/20220123080003-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%AE%9A%E6%9C%9F%E5%9B%9E%E9%A1%BE_%E9%81%BF%E5%85%8D_%E6%88%91%E5%AD%A6%E4%BC%9A%E4%BA%86_%E7%9A%84%E5%81%87%E8%B1%A1/","summary":"tags: slip-box,How to Take Smart Notes,PKM 参考：YouTube: 250. My Zettelkasten: An Author’s Digital Slip-Box Method Example (Using Plain-Text Software) 我身边有很多人包括我自己都很喜欢收藏文章、课程和教学视频等学习类资源，当然还包括给 GitHub 上的项目添加星星。一些更努力的人会在收藏后进行阅读并记录笔记，我们的学习焦虑被得到了满足。 然后呢？你会去看收藏的学习资源吗？会定期查看自己的笔记吗？我觉得这更像是一种自我欺骗或者麻痹，一种「我学会了」的假象被制造出来。\n定期回顾总结可以避免这种假象，这是我最近实践 Luhmann 的 Zettelkasten 所学习到的。 先通过 Overaching workflow 记下所有我们需要关注的主题到 Inbox 中，然后通过回顾的方式来总结转化成自己的知识，记录到 PKM 中去。 也就是依然可以去“收藏”，但是要定期的去查看自己的收藏，最好不要太久以免忘记自己为什么收藏。 如果收藏了很多大部分已经没有兴趣了，可以参考 GTD 将内容整理到 Some day 中去，避免 Inbox 过大让我们产生畏惧感从而导致我们放弃。","title":"为什么要定期回顾：避免「我学会了」的假象"},{"content":" tags: slip-box,How to Take Smart Notes source: 豆瓣. “记笔记就像编相声.” Accessed January 22, 2022. https://book.douban.com/review/12678970/. 通过「收集 -\u0026gt; 整理 -\u0026gt; 回顾 -\u0026gt; 输出」将听到的段子转化成自己的故事。所以说书中所说的 “Writing” 不能只局限于写作，应该扩展为输出更好。\n比如我作为一个程序员，很多研究都是为了落地成为具体的产品或者技术方案，这个时候我就是在输出（Writing），而且有更加明显的反馈。 通过所学的知识能不能搭建具体的技术方案，实现具体的产品需求。\n「输出」或者按照 “How to Take Smart Notes” 中说的 “Writing”。输出给了你一个明确的目标，让你在看到、听到、读到的时候有一个明确的目标， 驱动你用自己的语言将知识进行转化，并在其之上进行思考。\n","permalink":"https://notes.0081800.xyz/notes/20220123075328-%E8%AE%B0%E7%AC%94%E8%AE%B0%E5%B0%B1%E5%83%8F%E7%BC%96%E7%9B%B8%E5%A3%B0/","summary":"tags: slip-box,How to Take Smart Notes source: 豆瓣. “记笔记就像编相声.” Accessed January 22, 2022. https://book.douban.com/review/12678970/. 通过「收集 -\u0026gt; 整理 -\u0026gt; 回顾 -\u0026gt; 输出」将听到的段子转化成自己的故事。所以说书中所说的 “Writing” 不能只局限于写作，应该扩展为输出更好。\n比如我作为一个程序员，很多研究都是为了落地成为具体的产品或者技术方案，这个时候我就是在输出（Writing），而且有更加明显的反馈。 通过所学的知识能不能搭建具体的技术方案，实现具体的产品需求。\n「输出」或者按照 “How to Take Smart Notes” 中说的 “Writing”。输出给了你一个明确的目标，让你在看到、听到、读到的时候有一个明确的目标， 驱动你用自己的语言将知识进行转化，并在其之上进行思考。","title":"记笔记就像编相声"},{"content":" tags: How to Take Smart Notes,slip-box,PKM source: Part 2: \u0026ldquo;THE FOUR UNDERLYING PRINCIPLES\u0026rdquo; from Ahrens, Sönke. How to Take Smart Notes: One Simple Technique to Boost Writing, Learning and Thinking: For Students, Academics and Nonfiction Book Writers. North Charleston, SC: CreateSpace, 2017. Writing Is the Only Thing That Matters Don\u0026rsquo;t be afraid to writing ideas down and push them public, as there is no private knowledge in the academia area, and there is no such thing as a history of unwritten ideas. Writing to answer question, in a specific angle on a problem.\nWith this purpose, reading will be the main source of material for writing, and lectures or seminars will provide the ideas to write about and questions worth answering. So writing doesn\u0026rsquo;t mean to stop doing everything less well.\nWriting changes the way you read and learn:\nFor finding ideas, questions worth answering, feedbacks and what you should learn: you will have a clear, tangible purpose when you attend a lecture, discussion or seminar. For writing it down: you will be more focused on the most relevant aspects of reading and learning. For using your own words: you will be more engaged way to read and learning. For turning it into something new: you will think beyond the things you read. Simplicity Is Paramount Change the way of organising notes, don\u0026rsquo;t store notes under topics, instead to ask youself \u0026ldquo;In which context will I want to stumble upon it again?\u0026rdquo;.\nA simple idea can shape the world. The slip-box is the shipping container1 that helps to organise notes and achieve a critical mass. To do so, there are three types of notes to avoid lose its value when notes are added to it indiscriminately:\nFleeting notes, which to remind, need to review within a day or two, then move to trash.\nWhich is the best you can do without interruputing what you are in the middle of doing. And they are only useful if you review them within a day or two to turn them into proper notes you can use later.\nPermanent notes, which will never be thrown away and contain the necessary information in themselves in a permanently understandable way.\nAlways stored in the same way in the same place. Which are written in a way that can still be understood even when you have forgotten the context they are taken from.\nProject notes, which only relevant to on particular project. Kept within a project-specific folder.\nWhich can be:\ncomments in the manuscript collections of projecte-related literature outlines sinppets of drafts reminders to-do lists and of course the draft itself. And there some typical mistakes we should avoid:\nTreat all notes as permanent notes, for example, a journal that kept everything. Only take notes related to specific projects: That means that everything you found, thought or encountered during the time of a project will be lost. Treat all notes as fleetings notes, never review or understand the fleeting notes and convert them to permanent notes. Nobody Ever Starts From Scratch Let the Work Carry You Forward Malcom McLean and Containerisation | Maersk Line\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://notes.0081800.xyz/notes/20220123075024-the_four_underlying_priciples/","summary":"tags: How to Take Smart Notes,slip-box,PKM source: Part 2: \u0026ldquo;THE FOUR UNDERLYING PRINCIPLES\u0026rdquo; from Ahrens, Sönke. How to Take Smart Notes: One Simple Technique to Boost Writing, Learning and Thinking: For Students, Academics and Nonfiction Book Writers. North Charleston, SC: CreateSpace, 2017. Writing Is the Only Thing That Matters Don\u0026rsquo;t be afraid to writing ideas down and push them public, as there is no private knowledge in the academia area, and there is no such thing as a history of unwritten ideas.","title":"The Four Underlying Principles of Taking Smart Notes"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20220122071820-personal_knowledge_management/","summary":"","title":"Personal Knowledge Management"},{"content":" tags: Zettelkasten,Note-Taking,How to Take Smart Notes source: 朱騏. “Zettelkasten卡片盒筆記法，建立知識連結網路來活用筆記.” PM的生產力工具箱 (blog), October 16, 2021. https://medium.com/pm%E7%9A%84%E7%94%9F%E7%94%A2%E5%8A%9B%E5%B7%A5%E5%85%B7%E7%AE%B1/zettelkasten%E5%8D%A1%E7%89%87%E7%9B%92%E7%AD%86%E8%A8%98%E6%B3%95-%E5%BB%BA%E7%AB%8B%E7%9F%A5%E8%AD%98%E9%80%A3%E7%B5%90%E7%B6%B2%E8%B7%AF%E4%BE%86%E6%B4%BB%E7%94%A8%E7%AD%86%E8%A8%98-f85a91729521. 文章中附上了一则视频更好的展现 Luhmann 如何管理文件笔记，同时建立了我对 Slip-box 的中文理解。完善了我脑中的一部分图像。\nSee also: https://youtu.be/mCFP5i_0ibE\n","permalink":"https://notes.0081800.xyz/notes/20220120084941-zettelkasten_%E5%8D%A1%E7%89%87%E7%9B%92%E7%AD%86%E8%A8%98%E6%B3%95_%E5%BB%BA%E7%AB%8B%E7%9F%A5%E8%AD%98%E9%80%A3%E7%B5%90%E7%B6%B2%E8%B7%AF%E4%BE%86%E6%B4%BB%E7%94%A8%E7%AD%86%E8%A8%98/","summary":"tags: Zettelkasten,Note-Taking,How to Take Smart Notes source: 朱騏. “Zettelkasten卡片盒筆記法，建立知識連結網路來活用筆記.” PM的生產力工具箱 (blog), October 16, 2021. https://medium.com/pm%E7%9A%84%E7%94%9F%E7%94%A2%E5%8A%9B%E5%B7%A5%E5%85%B7%E7%AE%B1/zettelkasten%E5%8D%A1%E7%89%87%E7%9B%92%E7%AD%86%E8%A8%98%E6%B3%95-%E5%BB%BA%E7%AB%8B%E7%9F%A5%E8%AD%98%E9%80%A3%E7%B5%90%E7%B6%B2%E8%B7%AF%E4%BE%86%E6%B4%BB%E7%94%A8%E7%AD%86%E8%A8%98-f85a91729521. 文章中附上了一则视频更好的展现 Luhmann 如何管理文件笔记，同时建立了我对 Slip-box 的中文理解。完善了我脑中的一部分图像。\nSee also: https://youtu.be/mCFP5i_0ibE","title":"Zettelkasten 卡片盒筆記法，建立知識連結網路來活用筆記"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20220120080936-gtd/","summary":"","title":"GTD"},{"content":" tags: How to Take Smart Notes,slip-box,GTD source: Part 1: \u0026ldquo;INTRODUCTION\u0026rdquo; from Ahrens, Sönke. How to Take Smart Notes: One Simple Technique to Boost Writing, Learning and Thinking: For Students, Academics and Nonfiction Book Writers. North Charleston, SC: CreateSpace, 2017. To Keep a Good Structure First, it\u0026rsquo;s about the flow, and a good structure enables the flow. The flow is:\nIt is the state in which you get so completely immersed in you work that you lose track of time and can just on going as the work becomes effortless.\nAnd how to be in a good structure? It\u0026rsquo;s must be a simple tool, because \u0026ldquo;The complexity is an issue\u0026rdquo;. Here we got, the slip box from Luhman and the overarching workflow from GTD:\nUse the slip box to take and organise notes.\nAnd the overarching workflow to take care of everything we need.\nEven the best tool will not improve your productivity considerably if you don\u0026rsquo;t change your daily routes the tool is embedded in, just as the fastest car won\u0026rsquo;t help you much if you don\u0026rsquo;t have proper roads to drive it on.\nSo how does the slip box work? Luhman taken notes with two slip boxes:\nbibliographic one: fleeting notes: thoughts and ideas from reading books,talks or something else. main slip-box: shortly after bibliographic notes were taked, review notes in bibliographic slip-box and write down some new. “I never force myself to do anything I don’t feel like. Whenever I am stuck, I do something else.” \u0026ndash; The son of a brewer, most productive and reverd social sientists of the 20^th century.\nSo with the above two well-known and proven ideas we can be in a good structure and enabling the flow.\nStep by Step Note-taking is not the main work, the main work is: Reading, Writing, Understanding and coming up with ideas. The notes are just the tangible outcome of it.\nWith the above steps you can write multiple papers/articles at a time.\nTools Pen and paper or keyboard and computer: to write with and to write on A reference management system: Zotero The slip-box: Daniel Lüdecke’s Zettelkasten The editor: Microsoft Word, OpenOffice,LibreOffice or NeoOffice Keep in Mind If we try to use a tool without putting any thought into the way we work with it, even the best tool would not be of much help.\nDon\u0026rsquo;t make the slip-box as a graveyard for thoughts.\n","permalink":"https://notes.0081800.xyz/notes/20220120080908-with_the_slip_box_and_overarching_workflow_to_keep_a_good_structure/","summary":"tags: How to Take Smart Notes,slip-box,GTD source: Part 1: \u0026ldquo;INTRODUCTION\u0026rdquo; from Ahrens, Sönke. How to Take Smart Notes: One Simple Technique to Boost Writing, Learning and Thinking: For Students, Academics and Nonfiction Book Writers. North Charleston, SC: CreateSpace, 2017. To Keep a Good Structure First, it\u0026rsquo;s about the flow, and a good structure enables the flow. The flow is:\nIt is the state in which you get so completely immersed in you work that you lose track of time and can just on going as the work becomes effortless.","title":"Introduction: The slip-box and Overarching workflow"},{"content":" tags: Note-Taking,Personal Knowledge Management ","permalink":"https://notes.0081800.xyz/notes/20220120080920-slip_box/","summary":" tags: Note-Taking,Personal Knowledge Management ","title":"slip-box"},{"content":" tags: Rust “Why Rust Strings Seem Hard | Brandon’s Website.” Accessed January 17, 2022. https://www.brandons.me/blog/why-rust-strings-seem-hard. ","permalink":"https://notes.0081800.xyz/notes/20220117170333-why_rust_strings_seem_hard/","summary":" tags: Rust “Why Rust Strings Seem Hard | Brandon’s Website.” Accessed January 17, 2022. https://www.brandons.me/blog/why-rust-strings-seem-hard. ","title":"Why Rust strings seem hard"},{"content":" tags: Computer Systems ","permalink":"https://notes.0081800.xyz/notes/20220117165224-thread_safety/","summary":" tags: Computer Systems ","title":"Thread Safety"},{"content":" tags: Rust,Thread Safety source: Hexi. “如何理解 Sync 和 Send?” 李晨曦的博客 | Hexi Blog, May 5, 2019. https://hexilee.me/2019/05/05/how-to-understand-sync-and-send-in-rust/. 语义：\n实现了 Send 的类型，可以安全地在线程间传递所有权。也就是说， 可以跨线程移动。 实现了 Sync 的类型， 可以安全地在线程间传递不可变借用。也就是说，可以跨线程共享。 ","permalink":"https://notes.0081800.xyz/notes/20220117165142-%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3_sync_%E5%92%8C_send/","summary":" tags: Rust,Thread Safety source: Hexi. “如何理解 Sync 和 Send?” 李晨曦的博客 | Hexi Blog, May 5, 2019. https://hexilee.me/2019/05/05/how-to-understand-sync-and-send-in-rust/. 语义：\n实现了 Send 的类型，可以安全地在线程间传递所有权。也就是说， 可以跨线程移动。 实现了 Sync 的类型， 可以安全地在线程间传递不可变借用。也就是说，可以跨线程共享。 ","title":"如何理解 Sync 和 Send?"},{"content":" tags: Rust,Rust Macro,Online Tutorial source: https://danielkeep.github.io/tlborm/book/index.html ","permalink":"https://notes.0081800.xyz/notes/20220117164736-the_little_book_of_rust_macros/","summary":" tags: Rust,Rust Macro,Online Tutorial source: https://danielkeep.github.io/tlborm/book/index.html ","title":"The Little Book of Rust Macros"},{"content":" tags: Rust,Online Tutorial source: fasterthanli.me. “A Half-Hour to Learn Rust.” Accessed January 17, 2022. https://fasterthanli.me/articles/a-half-hour-to-learn-rust. ","permalink":"https://notes.0081800.xyz/notes/20220117164630-a_half_hour_to_learn_rust/","summary":" tags: Rust,Online Tutorial source: fasterthanli.me. “A Half-Hour to Learn Rust.” Accessed January 17, 2022. https://fasterthanli.me/articles/a-half-hour-to-learn-rust. ","title":"A half-hour to learn Rust"},{"content":" tags: Rust ","permalink":"https://notes.0081800.xyz/notes/20220117164506-rust_macro/","summary":" tags: Rust ","title":"Rust Macro"},{"content":" tags: Rust,Rust Macro,Learning ","permalink":"https://notes.0081800.xyz/notes/20220117164450-github_dtolnay_proc_macro_workshop_learn_to_write_rust_procedural_macros/","summary":" tags: Rust,Rust Macro,Learning ","title":"GitHub: dtolnay/proc-macro-workshop - Learn to write Rust procedural macros"},{"content":" tags: Rust,Distributed Systems,Online Tutorial,Learning source: https://github.com/pingcap/talent-plan ","permalink":"https://notes.0081800.xyz/notes/20220117164352-github_pingcap_talent_plan_open_source_training_courses_about_distributed_database_and_distributed_systemes/","summary":" tags: Rust,Distributed Systems,Online Tutorial,Learning source: https://github.com/pingcap/talent-plan ","title":"GitHub: pingcap/talent-plan - open source training courses about distributed database and distributed systemes"},{"content":" tags: Rust,Online Tutorial,Learning source: https://github.com/rust-lang/rustlings ","permalink":"https://notes.0081800.xyz/notes/20220117164303-github_rust_lang_rustlings_small_exercises_to_get_you_used_to_reading_and_writing_rust_code/","summary":" tags: Rust,Online Tutorial,Learning source: https://github.com/rust-lang/rustlings ","title":"GitHub: rust-lang/rustlings – Small exercises to get you used to reading and writing Rust code!"},{"content":" tags: Blockchain,Web3 source: White, Molly. “It’s Not Still the Early Days.” Molly White, January 14, 2022. https://blog.mollywhite.net/its-not-still-the-early-days/. For blockchains, some thoughts are false, like:\n\u0026ldquo;It\u0026rsquo;s the early days.\u0026rdquo; \u0026ldquo;Give it a chance.\u0026rdquo; The reason is long time have passed, but no bright changes happened, the long time means Bitcoin began to be used in 2009, and Ethereum lanched in 2015.\nTo compare:\nSmartphones from 2009 to 2015: Nokia -\u0026gt; iPhone/Android. Blogs: Google Reader -\u0026gt; Twitter. Fully-electric cars: Tesla. CPU: i3/i5 -\u0026gt; i9/M1 GPU Operating System. a lot has changed in the technology world in the past six to twelve years.\n","permalink":"https://notes.0081800.xyz/notes/20220117110536-blockchain_it_s_not_still_the_early_days/","summary":"tags: Blockchain,Web3 source: White, Molly. “It’s Not Still the Early Days.” Molly White, January 14, 2022. https://blog.mollywhite.net/its-not-still-the-early-days/. For blockchains, some thoughts are false, like:\n\u0026ldquo;It\u0026rsquo;s the early days.\u0026rdquo; \u0026ldquo;Give it a chance.\u0026rdquo; The reason is long time have passed, but no bright changes happened, the long time means Bitcoin began to be used in 2009, and Ethereum lanched in 2015.\nTo compare:\nSmartphones from 2009 to 2015: Nokia -\u0026gt; iPhone/Android.","title":"Blockchain: It's not still the early days"},{"content":" tags: Network,Message Queue ","permalink":"https://notes.0081800.xyz/notes/20220114071913-aqm/","summary":" tags: Network,Message Queue ","title":"AQM"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20220114071952-message_queue/","summary":"","title":"Message Queue"},{"content":" tags: Network,Bufferbloat source: “Bufferbloat - Dark Buffers in the Internet,” 2011, 36. ","permalink":"https://notes.0081800.xyz/notes/20220114070627-bufferbloat_dark_buffers_in_the_internet/","summary":" tags: Network,Bufferbloat source: “Bufferbloat - Dark Buffers in the Internet,” 2011, 36. ","title":"Bufferbloat Dark Buffers in the Internet"},{"content":" tags: Network ","permalink":"https://notes.0081800.xyz/notes/20220114070451-bufferbloat/","summary":" tags: Network ","title":"Bufferbloat"},{"content":" tags: Learning Ask 6 questions to familiar a new thing:\nWhy What Where When Who How ","permalink":"https://notes.0081800.xyz/notes/20220112070827-5w1h/","summary":" tags: Learning Ask 6 questions to familiar a new thing:\nWhy What Where When Who How ","title":"5W1H"},{"content":" tags: TCP,Network,5W1H TCP Fast Open(TFO):\nWHY TFO is proposed?\nTCP Three-Way Handshake for every new TCP connection is too expensive.\nWHAT is the TFO?\nTCP Fast Open (TFO) is a mechanism that aims to reduce the latency penalty imposed on new TCP connections.\nHOW the TFO reduce the latency on new TCP connections?\nTFO allows data transfer within the SYN packet.\nWHEN the TFO is avaiable.\nTFO support is now avaiable in Linux 3.7+ kernels, and should be enabled by a viable option in both client and server side.\nWHAT limitations does TFO have?\nMaximum size limited. ","permalink":"https://notes.0081800.xyz/notes/20220112070151-tcp_fast_open/","summary":"tags: TCP,Network,5W1H TCP Fast Open(TFO):\nWHY TFO is proposed?\nTCP Three-Way Handshake for every new TCP connection is too expensive.\nWHAT is the TFO?\nTCP Fast Open (TFO) is a mechanism that aims to reduce the latency penalty imposed on new TCP connections.\nHOW the TFO reduce the latency on new TCP connections?\nTFO allows data transfer within the SYN packet.\nWHEN the TFO is avaiable.\nTFO support is now avaiable in Linux 3.","title":"TCP Fast Open"},{"content":" tags: CoDel,Network source: “Controlling Queue Delay - ACM Queue.” Accessed January 11, 2022. https://queue.acm.org/detail.cfm?id=2209336. Bufferbloat What is the bufferbloat? In the internet, large buffer is used everywhere:\nPC Router/Swtich/ISP Server The large may cause delay.\nWhy the bufferbloat still with us and made increaingly critical by two trends?\nCheap memory. Complicate network paths. How to sloves the problem? AQM(active queue management) is the known solution, but it\u0026rsquo;s difficult to implement, so even it has been known two decades but still not been widely deployed.\n","permalink":"https://notes.0081800.xyz/notes/20220111081756-controlling_queue_delay/","summary":"tags: CoDel,Network source: “Controlling Queue Delay - ACM Queue.” Accessed January 11, 2022. https://queue.acm.org/detail.cfm?id=2209336. Bufferbloat What is the bufferbloat? In the internet, large buffer is used everywhere:\nPC Router/Swtich/ISP Server The large may cause delay.\nWhy the bufferbloat still with us and made increaingly critical by two trends?\nCheap memory. Complicate network paths. How to sloves the problem? AQM(active queue management) is the known solution, but it\u0026rsquo;s difficult to implement, so even it has been known two decades but still not been widely deployed.","title":"Controlling Queue Delay"},{"content":" tags: Network,Bufferbloat,AQM ","permalink":"https://notes.0081800.xyz/notes/20220111081657-codel/","summary":" tags: Network,Bufferbloat,AQM ","title":"CoDel"},{"content":" tags: Fun Story ","permalink":"https://notes.0081800.xyz/notes/20220111072413-fun_bugs/","summary":" tags: Fun Story ","title":"Fun Bugs"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20220111072424-fun_story/","summary":"","title":"Fun Story"},{"content":" tags: Networking 101: Primer on Latency and Bandwidth,Fun Bugs source: https://web.mit.edu/jemorris/humor/500-miles I remember this story when I\u0026rsquo;m reading the section \u0026ldquo;Speed of Light and Propagation Latency\u0026rdquo; in High Performance Browser Networking. It\u0026rsquo;s funny to record it.\n","permalink":"https://notes.0081800.xyz/notes/20220111072354-speed_of_light_we_can_t_send_mail_more_than_500_miles/","summary":"tags: Networking 101: Primer on Latency and Bandwidth,Fun Bugs source: https://web.mit.edu/jemorris/humor/500-miles I remember this story when I\u0026rsquo;m reading the section \u0026ldquo;Speed of Light and Propagation Latency\u0026rdquo; in High Performance Browser Networking. It\u0026rsquo;s funny to record it.","title":"Speed of Light: We can't send mail more than 500 miles"},{"content":" tags: High Performance Browser Networking,Network Defination:\nLatency - Time cost between sending and receiving, lower is better. Bandwitdh - throughtput, higher is better. Things affect to Latency:\nDistance of fiber, Speed of Light, that could be optimized by CDN. Bufferbloat of router, large buffer make queue delay, addressed by CoDel. ISP gateway. ","permalink":"https://notes.0081800.xyz/notes/20220111071605-networking_101_primer_on_latency_and_bandwidth/","summary":" tags: High Performance Browser Networking,Network Defination:\nLatency - Time cost between sending and receiving, lower is better. Bandwitdh - throughtput, higher is better. Things affect to Latency:\nDistance of fiber, Speed of Light, that could be optimized by CDN. Bufferbloat of router, large buffer make queue delay, addressed by CoDel. ISP gateway. ","title":"Networking 101: Primer on Latency and Bandwidth"},{"content":" tags: Org Mode,How to Write source: https://github.com/vikasrawal/orgpaper ","permalink":"https://notes.0081800.xyz/notes/20220110121108-reproducible_research_papers_using_org_mode_and_r_a_guide/","summary":" tags: Org Mode,How to Write source: https://github.com/vikasrawal/orgpaper ","title":"Reproducible Research Papers using Org-mode and R: A Guide"},{"content":" tags: Computer Systems ","permalink":"https://notes.0081800.xyz/projects/20220110112848-high_performance/","summary":" tags: Computer Systems ","title":"High Performance"},{"content":" tags: Note-Taking,How to Write,Zettelkasten,读书笔记 source: Ahrens, Sönke. How to Take Smart Notes: One Simple Technique to Boost Writing, Learning and Thinking: For Students, Academics and Nonfiction Book Writers. North Charleston, SC: CreateSpace, 2017. ","permalink":"https://notes.0081800.xyz/notes/20220110110642-how_to_take_smart_notes/","summary":" tags: Note-Taking,How to Write,Zettelkasten,读书笔记 source: Ahrens, Sönke. How to Take Smart Notes: One Simple Technique to Boost Writing, Learning and Thinking: For Students, Academics and Nonfiction Book Writers. North Charleston, SC: CreateSpace, 2017. ","title":"How to Take Smart Notes"},{"content":" tags: Distributed Systems source: https://martinfowler.com/articles/patterns-of-distributed-systems/ ","permalink":"https://notes.0081800.xyz/projects/20220110110515-patterns_of_distributed_systems/","summary":" tags: Distributed Systems source: https://martinfowler.com/articles/patterns-of-distributed-systems/ ","title":"Patterns of Distributed Systems"},{"content":" tags: TCP ","permalink":"https://notes.0081800.xyz/notes/20220110082953-http/","summary":" tags: TCP ","title":"HTTP"},{"content":" tags: Title Case,Emacs source: https://github.com/duckwork/titlecase.el ","permalink":"https://notes.0081800.xyz/notes/20220110071604-github_duckwork_titlecase_el_titlecase_things_in_emacs/","summary":" tags: Title Case,Emacs source: https://github.com/duckwork/titlecase.el ","title":"GitHub: duckwork/titlecase.el -  Titlecase things in Emacs"},{"content":"","permalink":"https://notes.0081800.xyz/projects/20220110071453-writing/","summary":"","title":"How to Write"},{"content":" tags: Learning English,Online: Title Case source: The Chicago Manual of Style. Seventeenth edition. Chicago: The University of Chicago Press, 2017. ","permalink":"https://notes.0081800.xyz/notes/20220110071319-chicago_manual_of_style_chaper_8_names_terms_and_titles_of_works/","summary":" tags: Learning English,Online: Title Case source: The Chicago Manual of Style. Seventeenth edition. Chicago: The University of Chicago Press, 2017. ","title":"Chicago Manual of Style: Chapter 8 Names, Terms, and Titles of Works"},{"content":" tags: Online Tools,Title Case source: https://titlecase.com/ ","permalink":"https://notes.0081800.xyz/notes/20220110070643-online_title_case/","summary":" tags: Online Tools,Title Case source: https://titlecase.com/ ","title":"Online: Title Case"},{"content":" tags: Learning English,Writing ","permalink":"https://notes.0081800.xyz/notes/20220110070124-title_case/","summary":" tags: Learning English,Writing ","title":"Title Case"},{"content":" tags: Learning English,Title Case source: “The Programmer’s Way to Write in Title Case Using Emacs Lisp.” Accessed January 10, 2022. https://hungyi.net/posts/programmers-way-to-title-case. Genernal correct title cased phrase:\nUppercase the first letter of most words\ne.g. \u0026ldquo;There Is No Spoon\u0026rdquo;\nNot capitalize \u0026lsquo;small\u0026rsquo; and \u0026lsquo;unimportant\u0026rsquo; words\ne.g. \u0026ldquo;Long Live the King\u0026rdquo;\nAlways capitalize the first and the last words, even if they\u0026rsquo;re small\ne.g. \u0026ldquo;The Land and Save We Live On\u0026rdquo;\nCapitalize sub-phrase as if they were their own title\ne.g. \u0026ldquo;The Lonely Reindeer: A Christmas Story\u0026rdquo;\n","permalink":"https://notes.0081800.xyz/notes/20220110070044-the_programmer_s_way_to_write_in_title_case_using_emacs_lisp/","summary":"tags: Learning English,Title Case source: “The Programmer’s Way to Write in Title Case Using Emacs Lisp.” Accessed January 10, 2022. https://hungyi.net/posts/programmers-way-to-title-case. Genernal correct title cased phrase:\nUppercase the first letter of most words\ne.g. \u0026ldquo;There Is No Spoon\u0026rdquo;\nNot capitalize \u0026lsquo;small\u0026rsquo; and \u0026lsquo;unimportant\u0026rsquo; words\ne.g. \u0026ldquo;Long Live the King\u0026rdquo;\nAlways capitalize the first and the last words, even if they\u0026rsquo;re small\ne.g. \u0026ldquo;The Land and Save We Live On\u0026rdquo;","title":"The Programmer's Way to Write in Title Case Using Emacs Lisp"},{"content":" tags: quorum,一致性，Distributed Systems,Patterns of Distributed Systems,Paxos,Patterns of Distributed Systems: Paxos source: martinfowler.com. “Quorum.” Accessed January 7, 2022. https://martinfowler.com/articles/patterns-of-distributed-systems/quorum.html. ","permalink":"https://notes.0081800.xyz/notes/20220107113911-patterns_of_distributed_systems_quorum/","summary":" tags: quorum,一致性，Distributed Systems,Patterns of Distributed Systems,Paxos,Patterns of Distributed Systems: Paxos source: martinfowler.com. “Quorum.” Accessed January 7, 2022. https://martinfowler.com/articles/patterns-of-distributed-systems/quorum.html. ","title":"Patterns of Distributed Systems: Quorum"},{"content":" tags: Paxos,分布式,Patterns of Distributed Systems source: martinfowler.com. “Paxos.” Accessed January 7, 2022. https://martinfowler.com/articles/patterns-of-distributed-systems/paxos.html. ","permalink":"https://notes.0081800.xyz/notes/20220107113056-patterns_of_distributed_systems_paxos/","summary":" tags: Paxos,分布式,Patterns of Distributed Systems source: martinfowler.com. “Paxos.” Accessed January 7, 2022. https://martinfowler.com/articles/patterns-of-distributed-systems/paxos.html. ","title":"Patterns of Distributed Systems: Paxos"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20220107110909-career/","summary":"","title":"Career"},{"content":" tags: Career source: “How to Quit like a Boss.” Accessed January 7, 2022. https://jmsbrdy.com/blog/leaving-spring/. HN: https://news.ycombinator.com/item?id=29830296 From the article:\nAvoid communication failures: your manager should not be surprised by your leaving.\nDo have regular, clear, frank conversations about your career with your direct manager. Do tell your manager clearly if there’s something you’re looking for in your career which your current role isn’t providing. Don\u0026rsquo;t withhold concerns or aspirations from your manager. The worst you do above:\nBut how can I avoid afraid of leaving?\nMatch your notice period to the handover period\nHand over: key services and systems, knowledge, documentation, helping hire replacement,helping communicate your departure to the wider team. Avoid giving to much notice Team without you\nDon\u0026rsquo;t sabotage Help other people take on larger roles Fresh thiking ","permalink":"https://notes.0081800.xyz/notes/20220107110859-how_to_quit_like_a_boss/","summary":"tags: Career source: “How to Quit like a Boss.” Accessed January 7, 2022. https://jmsbrdy.com/blog/leaving-spring/. HN: https://news.ycombinator.com/item?id=29830296 From the article:\nAvoid communication failures: your manager should not be surprised by your leaving.\nDo have regular, clear, frank conversations about your career with your direct manager. Do tell your manager clearly if there’s something you’re looking for in your career which your current role isn’t providing. Don\u0026rsquo;t withhold concerns or aspirations from your manager.","title":"How to quit like a boss"},{"content":" tags: Blockchain,Smart contracts,Web3 source: “Crypto: The Good, the Bad and the Ugly.” Accessed January 7, 2022. https://seldo.com/posts/crypto-the-good-the-bad-and-the-ugly. The good:\nSmart contracts allows anybody to execute arbitrary code in the network. And use money to avoid abuse, as every action in the smart contract cost money(computing resource). Finaacial engineering: new money. Entertainment: NFT, a big dream(culture) for everybody who loves crypto. True cloud computing: Smart contracts again. Web3 The bad:\nEnvironmental impact: the grievously wateful nature of PoW. But it\u0026rsquo;s changing. Interactions at boundaries: private(isolate) network. DAOs have a major boundary problem: not a legally binding contract, without goverment support. Governace GAS fee limit scale Incentives for participation: how money come in to this system? Web3: is a currency a practical model for general computing? The ugly: NFTs, ICOS.\n","permalink":"https://notes.0081800.xyz/notes/20220107103820-crypto_the_good_the_bad_and_the_ugly/","summary":"tags: Blockchain,Smart contracts,Web3 source: “Crypto: The Good, the Bad and the Ugly.” Accessed January 7, 2022. https://seldo.com/posts/crypto-the-good-the-bad-and-the-ugly. The good:\nSmart contracts allows anybody to execute arbitrary code in the network. And use money to avoid abuse, as every action in the smart contract cost money(computing resource). Finaacial engineering: new money. Entertainment: NFT, a big dream(culture) for everybody who loves crypto. True cloud computing: Smart contracts again. Web3 The bad:","title":"Crypto: the good, the bad and the ugly"},{"content":" tags: Ethereum ","permalink":"https://notes.0081800.xyz/notes/20220107072021-ethereum_development/","summary":" tags: Ethereum ","title":"Ethereum development"},{"content":" tags: Smart contracts,Ethereum,Ethereum development source: ethereum.org. “Ethereum Local Development Setup.” Accessed January 7, 2022. https://ethereum.org. Local development node:\nUse Hardhat to build the ethereum development environment.\nAnd also there are some tools that based on Hardhat:\nscaffold-eth: forkable Ethereum dev stack focused on fast product iterations Ganache: A tool for creating a local blockchain for fast Ethereum development.\nTools that based on Ganache:\nPython based: brownie Testing tools:\nWaffle: ethers.js Truffle: Web3.js ","permalink":"https://notes.0081800.xyz/notes/20220107070826-set_up_your_local_development_environment/","summary":"tags: Smart contracts,Ethereum,Ethereum development source: ethereum.org. “Ethereum Local Development Setup.” Accessed January 7, 2022. https://ethereum.org. Local development node:\nUse Hardhat to build the ethereum development environment.\nAnd also there are some tools that based on Hardhat:\nscaffold-eth: forkable Ethereum dev stack focused on fast product iterations Ganache: A tool for creating a local blockchain for fast Ethereum development.\nTools that based on Ganache:\nPython based: brownie Testing tools:\nWaffle: ethers.","title":"Set up your local development environment"},{"content":" tags: Smart contracts,Ethereum,Ethereum development source: ethereum.org. “Deploying Your First Smart Contract.” Accessed January 7, 2022. https://ethereum.org. ","permalink":"https://notes.0081800.xyz/notes/20220107070103-ethereum_deploying_your_first_smart_contract/","summary":" tags: Smart contracts,Ethereum,Ethereum development source: ethereum.org. “Deploying Your First Smart Contract.” Accessed January 7, 2022. https://ethereum.org. ","title":"Ethereum: Deploying your first smart contract"},{"content":" tags: Blockchain Proof,Ethereum ","permalink":"https://notes.0081800.xyz/notes/20220107065931-poa/","summary":" tags: Blockchain Proof,Ethereum ","title":"PoA"},{"content":" tags: PoA source: https://en.wikipedia.org/wiki/Proof%5Fof%5Fauthority ","permalink":"https://notes.0081800.xyz/notes/20220107065917-wikipedia_proof_of_authority/","summary":" tags: PoA source: https://en.wikipedia.org/wiki/Proof%5Fof%5Fauthority ","title":"Wikipedia: Proof of authority"},{"content":" tags: IRT,CTT,Educational Measurement source: Hambleton, Ronald K, and Russell W Jones. “Comparison of Classical Test Theory and Item Response Theory and Their Applications to Test Development,” 1993, 11. ","permalink":"https://notes.0081800.xyz/notes/20220106173433-comparison_of_classical_test_theory_and_item_response_theory_and_their_applications_to_test_development/","summary":" tags: IRT,CTT,Educational Measurement source: Hambleton, Ronald K, and Russell W Jones. “Comparison of Classical Test Theory and Item Response Theory and Their Applications to Test Development,” 1993, 11. ","title":"Comparison of Classical Test Theory and Item Response Theory and Their Applications to Test Development"},{"content":" tags: Educational Measurement ","permalink":"https://notes.0081800.xyz/notes/20220106173441-ctt/","summary":" tags: Educational Measurement ","title":"CTT"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20220106173353-educational/","summary":"","title":"Educational"},{"content":" tags: Educational ","permalink":"https://notes.0081800.xyz/notes/20220106173334-educational_measurement/","summary":" tags: Educational ","title":"Educational Measurement"},{"content":" tags: IRT,读书笔记 source: Yu, Chong Ho. “A Simple Guide to the Item Response Theory ( IRT ) and Rasch Modeling.” Accessed January 6, 2022. https://www.semanticscholar.org/paper/A-Simple-Guide-to-the-Item-Response-Theory-(-IRT-)-Yu/f42efb1bcf38f6650a8b16650e2811e8803cd4ec. IRT is about fitness or simplicity for test. There are two versions of IRT:\nIRT - three parameters. Rasch modeling - one parameter only. Three parameters:\nA - discrimination, how effectively this item can discriminate students\u0026rsquo;s proficient between highly and less. B - difficulty, or the threshold, tells us how easy or how difficult an item is. G or C - guessing, indicates the item correct by guess. One parameter: keep the A parameter constant and ignoring the G parameter.\nNew words tentatively fc position ease box interval due front 2.5 0 0 2022-01-06T08:56:49Z Back Adverb ˈtɛntətɪvli\nsubject to further confirmation; not definitely Examples:\nthe project is tentatively scheduled for next year unions tentatively agreed to a three-year contract proficiency fc position ease box interval due front 2.5 0 0 2022-01-06T09:06:43Z Back Noun prəˈfɪʃnsi\na high degree of skill; expertise\nSynonyms: skill/skilfulness/expertise/experience/ability/capability/capacity/competence/competency/adeptness/adroitness/excellence/mastery/prowess/professionalism/aptitude/deftness/dexterity/finesse/facility/effectiveness/accomplishment/aptness/expertness/talent\nExamples:\nhe demonstrated his proficiency in Chinese characteristic fc position ease box interval due front 2.5 0 0 2022-01-06T09:07:38Z Back Adjective ˌkarɪktəˈrɪstɪk\ntypical of a particular person, place, or thing\nSynonyms: typical/usual/normal/predictable/habitual/in character\nExamples:\nhe began with a characteristic attack on extremism Noun ˌkarɪktəˈrɪstɪk\na feature or quality belonging typically to a person, place, or thing and serving to identify them\nSynonyms: attribute/feature\nExamples:\ncertain defining characteristics of the school emerge from the study the whole number or integral part of a logarithm, which gives the order of magnitude of the original number.\ncurve fc position ease box interval due front 2.5 0 0 2022-01-06T09:08:21Z Back Noun kəːv\na line or outline which gradually deviates from being straight for some or all of its length\nSynonyms: curve/bend/bow/arch\nExamples:\nthe parapet wall sweeps down in a bold curve Verb kəːv\nform or cause to form a curve\nSynonyms: bend/turn/loop/wind/meander/undulate/snake/spiral/twist/coil/curl/bent/arched/bowed/crescent/curving/recurved/wavy/twisted/twisty/sinuous/serpentine/meandering/undulating/curvilinear/curvy\nExamples:\nher mouth curved in a smile starting with arms outstretched, curve the body sideways discrimination fc position ease box interval due front 2.5 0 0 2022-01-06T09:13:29Z Back Noun dɪˌskrɪmɪˈneɪʃn\nthe unjust or prejudicial treatment of different categories of people, especially on the grounds of ethnicity, age, sex, or disability\nSynonyms: prejudice/bias/bigotry/intolerance/narrow-mindedness/unfairness/inequity/favouritism/one-sidedness/partisanship\nExamples:\nvictims of racial discrimination there is widespread discrimination against women recognition and understanding of the difference between one thing and another\nSynonyms: differentiation/distinction/telling the difference\nExamples:\ndiscrimination between right and wrong young children have difficulties in making fine discriminations the selection of a signal having a required characteristic, such as frequency or amplitude, by means of a discriminator.\n","permalink":"https://notes.0081800.xyz/notes/20220106164610-a_simple_guide_to_the_item_response_theory_irt/","summary":"tags: IRT,读书笔记 source: Yu, Chong Ho. “A Simple Guide to the Item Response Theory ( IRT ) and Rasch Modeling.” Accessed January 6, 2022. https://www.semanticscholar.org/paper/A-Simple-Guide-to-the-Item-Response-Theory-(-IRT-)-Yu/f42efb1bcf38f6650a8b16650e2811e8803cd4ec. IRT is about fitness or simplicity for test. There are two versions of IRT:\nIRT - three parameters. Rasch modeling - one parameter only. Three parameters:\nA - discrimination, how effectively this item can discriminate students\u0026rsquo;s proficient between highly and less. B - difficulty, or the threshold, tells us how easy or how difficult an item is.","title":"A Simple Guide to the Item Response Theory (IRT)"},{"content":" tags: Algorithm,Bigdata,Educational Measurement ","permalink":"https://notes.0081800.xyz/notes/20220106164620-irt/","summary":" tags: Algorithm,Bigdata,Educational Measurement ","title":"IRT"},{"content":" tags: Freelance source: “How I Took My SaaS from Idea to Sold in 14 Months | Masilotti.Com.” Accessed January 6, 2022. https://masilotti.com/idea-to-sold-in-14-months/. Building in public: teased new designs and features, documented decisions, UX with polls.\n","permalink":"https://notes.0081800.xyz/notes/20220106121912-how_i_took_my_saas_from_idea_to_sold_in_14_months/","summary":"tags: Freelance source: “How I Took My SaaS from Idea to Sold in 14 Months | Masilotti.Com.” Accessed January 6, 2022. https://masilotti.com/idea-to-sold-in-14-months/. Building in public: teased new designs and features, documented decisions, UX with polls.","title":"How I took my SaaS from idea to sold in 14 months"},{"content":" tags: Python source: “init_subclass.” Accessed January 6, 2022. https://til.simonwillison.net/til/til/python_init-subclass.md. ","permalink":"https://notes.0081800.xyz/notes/20220106121656-problems_once_solved_by_a_metaclass_can_be_solved_by_init_subclass/","summary":" tags: Python source: “init_subclass.” Accessed January 6, 2022. https://til.simonwillison.net/til/til/python_init-subclass.md. ","title":"Problems once solved by a metaclass can be solved by init_subclass"},{"content":" tags: Rust,Online Tutorial source: https://cheats.rs/ ","permalink":"https://notes.0081800.xyz/notes/20220105190301-rust_language_cheat_sheet/","summary":" tags: Rust,Online Tutorial source: https://cheats.rs/ ","title":"Rust Language Cheat Sheet"},{"content":" tags: Bigdata ","permalink":"https://notes.0081800.xyz/notes/20220105165615-streaming/","summary":" tags: Bigdata ","title":"Streaming"},{"content":" tags: Bigdata,Streaming,Stateful Stream Processing source: Kreps, Jay. “Why Local State Is a Fundamental Primitive in Stream Processing - O’Reilly Radar.” Accessed January 5, 2022. http://radar.oreilly.com/2014/07/why-local-state-is-a-fundamental-primitive-in-stream-processing.html. Why\nlocal state is much faster than a distribut database. local state can easily restore by some middleware like Kafka: by writing changes to a Kafka topic. ","permalink":"https://notes.0081800.xyz/notes/20220105165604-why_local_state_is_a_fundamental_primitive_in_stream_processing/","summary":" tags: Bigdata,Streaming,Stateful Stream Processing source: Kreps, Jay. “Why Local State Is a Fundamental Primitive in Stream Processing - O’Reilly Radar.” Accessed January 5, 2022. http://radar.oreilly.com/2014/07/why-local-state-is-a-fundamental-primitive-in-stream-processing.html. Why\nlocal state is much faster than a distribut database. local state can easily restore by some middleware like Kafka: by writing changes to a Kafka topic. ","title":"Why local state is a fundamental primitive in stream processing"},{"content":" tags: Bigdata,Flink,Dataflow Model,Streaming source: “Streaming 102: The World beyond Batch – O’Reilly.” Accessed January 5, 2022. https://www.oreilly.com/radar/the-world-beyond-batch-streaming-102/. Three more concepts:\nWatermarks: Useful for event time windowing. All input data with event times less than watermark have been observed. Triggers: Signal for a window to produce output. Accumulation: The way to handle multiple results that are observed for the same window. Streaming 101 Redux What: Transformations Where: windowing Make a temporal boundary for a unbounded data source.\nFixed window Sliding window Session window Streaming 102 When: watermarks Watermarks is a function: \\(F(P) -\u0026gt; E\\)\nP - processing time E - event time, all inputs with event time less than E have been observed. The guarantee of watermarks:\nPerfect watermarks: no late data, all inputs with event time less than watermarks have been observed. Heuristic watermarks: may have late data, as accurate as possible. The data may late if the gap between processing time and event time is too large. When: windows are materialized? The watermark passes the end of the window.\nShortcomings of watermarks:\nToo slow: will be very slow to konwn unprocessed data. Too fast: window may miss data that cause late data. When: triggers Triggers complete watermarks that answered: When in processing time are results materialized?\nTriggers:\nWatermark progress: implicit version that will be trigger when the watermark passed the end of the window. Processing time progress Element counts: Triggering when some finite number of elements have been observed in a window. Punctuations: data-dependent triggers Composite triggers:\nRepetitions Conjunctions (logical AND) Disjunctions (logical OR) Sequences How: accumulation Do refinements of results relate when multiple panes are produced by triggers in a single window.\nThree different modes of accumulation:\nDiscarding Accumulating Accumulatin \u0026amp; retracting Where: session windows Captures a period of activity, terminated by a gap of inactivity.\nIntermezzo What results are calculated? Answered via transformations. Where in event time are results calculated? Answered via windowing. When in processing time are results materialized? Answered via watermarks and triggers. How do refinements of results relate? Answered via accumulation modes. ","permalink":"https://notes.0081800.xyz/notes/20220105164146-streaming_102_the_world_beyond_batch/","summary":"tags: Bigdata,Flink,Dataflow Model,Streaming source: “Streaming 102: The World beyond Batch – O’Reilly.” Accessed January 5, 2022. https://www.oreilly.com/radar/the-world-beyond-batch-streaming-102/. Three more concepts:\nWatermarks: Useful for event time windowing. All input data with event times less than watermark have been observed. Triggers: Signal for a window to produce output. Accumulation: The way to handle multiple results that are observed for the same window. Streaming 101 Redux What: Transformations Where: windowing Make a temporal boundary for a unbounded data source.","title":"Streaming 102: The world beyond batch"},{"content":" tags: Bigdata,Streaming source: Akidau, Tyler, Robert Bradshaw, Craig Chambers, Slava Chernyak, Rafael J. Fernández-Moctezuma, Reuven Lax, Sam McVeety, et al. “The Dataflow Model: A Practical Approach to Balancing Correctness, Latency, and Cost in Massive-Scale, Unbounded, out-of-Order Data Processing.” Proceedings of the VLDB Endowment 8, no. 12 (August 2015): 1792–1803. https://doi.org/10.14778/2824032.2824076. ","permalink":"https://notes.0081800.xyz/notes/20220105163640-dataflow_model/","summary":" tags: Bigdata,Streaming source: Akidau, Tyler, Robert Bradshaw, Craig Chambers, Slava Chernyak, Rafael J. Fernández-Moctezuma, Reuven Lax, Sam McVeety, et al. “The Dataflow Model: A Practical Approach to Balancing Correctness, Latency, and Cost in Massive-Scale, Unbounded, out-of-Order Data Processing.” Proceedings of the VLDB Endowment 8, no. 12 (August 2015): 1792–1803. https://doi.org/10.14778/2824032.2824076. ","title":"Dataflow Model"},{"content":" tags: Bigdata,Flink,Streaming source: Akidau, Tyler. “Streaming 101: The World beyond Batch.” O’Reilly Media, August 5, 2015. https://www.oreilly.com/radar/the-world-beyond-batch-streaming-101/. Streaming: a type of data processing engine that is designed with infinite data sets in mind. Other common uses of \u0026ldquo;streaming\u0026rdquo; that will be avoid in the rest of the post:\nUnbounded data: A type of ever-growing, essentially infinite data set. Unbounded data processing: An ongoing mode of data processing, applied to the aforementioned type of unbounded data. Low-latency, approximate, and/or speculative results: These types of results are most often associated with streaming engines. Limitations of streaming To beat batch at its own game, you really only need two things:\nCorrectness: exactly-once requires strongly consistent state. Tools for reasoning about time - This gets you beyond batch.Good tools for reasoning about time are essential for dealing with unbounded, unordered data of varying event-time skew. Event time vs. processing time Within any data processing system, there are typically two domains of time we care about:\nEvent time, which is the time at which events actually occurred. Processing time, which is the time at which events are abserved in the system. Skew always exists between Event time and Processing time.\nIf you care about event times, you cannot analyzer your data solely within the contxt of when they are abserved in your pipeline.\nIf you care about correctness and are interested in analyzing your data in the context of their event times, you cannot define those temporal boundaries using processing time.\nData processing patterns Bounded data Unbounded data — batch Fixed windows Sessions Sessions are typically defined as periods of activity (e.g., for a specific user) terminated by a gap of inactivity.\nUnbounded data — streaming Four groups of dealing data Time-agnostic Filtering Just look at each record as it arrived, and drop the records that we are not interested. We don\u0026rsquo;t care about the time.\nInner-joins When joining two unbounded data sources, if you only care about the results of a join when an element from both sources arrive, there’s no temporal element to the logic.\nApproximation algorithms Windowing by processing time Windowing by event time ","permalink":"https://notes.0081800.xyz/notes/20220105163321-streaming_101_the_world_beyond_batch/","summary":"tags: Bigdata,Flink,Streaming source: Akidau, Tyler. “Streaming 101: The World beyond Batch.” O’Reilly Media, August 5, 2015. https://www.oreilly.com/radar/the-world-beyond-batch-streaming-101/. Streaming: a type of data processing engine that is designed with infinite data sets in mind. Other common uses of \u0026ldquo;streaming\u0026rdquo; that will be avoid in the rest of the post:\nUnbounded data: A type of ever-growing, essentially infinite data set. Unbounded data processing: An ongoing mode of data processing, applied to the aforementioned type of unbounded data.","title":"Streaming 101: The world beyond batch"},{"content":" tags: DAO,Web3 source: Foundation, Ethereum. “DAOs, DACs, DAs and More: An Incomplete Terminology Guide.” Accessed January 5, 2022. https://blog.ethereum.org/2014/05/06/daos-dacs-das-and-more-an-incomplete-terminology-guide/. ","permalink":"https://notes.0081800.xyz/notes/20220105145433-daos_dacs_das_and_more_an_incomplete_terminology_guide/","summary":" tags: DAO,Web3 source: Foundation, Ethereum. “DAOs, DACs, DAs and More: An Incomplete Terminology Guide.” Accessed January 5, 2022. https://blog.ethereum.org/2014/05/06/daos-dacs-das-and-more-an-incomplete-terminology-guide/. ","title":"DAOs, DACs, DAs and More: An Incomplete Terminology Guide"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20220105144742-online_tutorial/","summary":"","title":"Online Tutorial"},{"content":" tags: DAO,Online Tutorial source: https://aragon.org/dao ","permalink":"https://notes.0081800.xyz/notes/20220105144616-level_up_your_knowledge_of_daos/","summary":" tags: DAO,Online Tutorial source: https://aragon.org/dao ","title":"DAO  Education: Level Up Your Knowledge of DAOs"},{"content":" tags: Freelance source: Dan. “My Writing Finances, 2021 | Dan Moren.” Accessed January 5, 2022. https://dmoren.com/2022/01/03/my-writing-finances-2021/. ","permalink":"https://notes.0081800.xyz/notes/20220105135009-my_writing_finances_2021/","summary":" tags: Freelance source: Dan. “My Writing Finances, 2021 | Dan Moren.” Accessed January 5, 2022. https://dmoren.com/2022/01/03/my-writing-finances-2021/. ","title":"My writing finances, 2021"},{"content":" tags: Freelance source: “I Make $3K/Mo from a Browser Extension! (+ December 2021 Updates).” Accessed January 5, 2022. http://newsletter.tonydinh.com/issues/i-make-3k-mo-from-a-browser-extension-december-2021-updates-966892. HN: https://news.ycombinator.com/item?id=29803817 ","permalink":"https://notes.0081800.xyz/notes/20220105134652-hn_i_make_3k_mo_from_a_browser_extension/","summary":" tags: Freelance source: “I Make $3K/Mo from a Browser Extension! (+ December 2021 Updates).” Accessed January 5, 2022. http://newsletter.tonydinh.com/issues/i-make-3k-mo-from-a-browser-extension-december-2021-updates-966892. HN: https://news.ycombinator.com/item?id=29803817 ","title":"HN: I make $3K/mo from a browser extension!"},{"content":" tags: Web3 source: Continuations by Albert Wenger. “Web3/Crypto: Why Bother?” Accessed January 5, 2022. https://continuations.com/post/671863718643105792/web3crypto-why-bother. ","permalink":"https://notes.0081800.xyz/notes/20220105134324-web3_crypto_why_bother/","summary":" tags: Web3 source: Continuations by Albert Wenger. “Web3/Crypto: Why Bother?” Accessed January 5, 2022. https://continuations.com/post/671863718643105792/web3crypto-why-bother. ","title":"Web3/Crypto: Why Bother?"},{"content":" tags: Ethereum,MetaMask,Online Tools source: https://www.skiff.org/updates/skiff-ens ","permalink":"https://notes.0081800.xyz/notes/20220105120811-skiff_x_ethereum_naming_service/","summary":" tags: Ethereum,MetaMask,Online Tools source: https://www.skiff.org/updates/skiff-ens ","title":"Skiff x Ethereum Naming Service"},{"content":" tags: Web3,Online Tools,Real Problems That Web3 Solves, Part 1 source: https://metamask.io/ MetaMask has implemented private key login via a Chrome extension and now has 21 million users. In theory, something like this could have existed a long time ago. In practice, the existence of blockchains and the need for better UX for cryptocurrency incentivized much more investmenets in these tools.\n","permalink":"https://notes.0081800.xyz/notes/20220105120401-metamask/","summary":"tags: Web3,Online Tools,Real Problems That Web3 Solves, Part 1 source: https://metamask.io/ MetaMask has implemented private key login via a Chrome extension and now has 21 million users. In theory, something like this could have existed a long time ago. In practice, the existence of blockchains and the need for better UX for cryptocurrency incentivized much more investmenets in these tools.","title":"MetaMask"},{"content":" tags: Web3,Smart contracts source: Bill Prin’s Personal Page. “Real Problems That Web3 Solves, Part 1,” January 3, 2022. https://billprin.com/2022/01/03/real-problems-web3-solves.html. What exactly is the difference between Web3, blockchain, and cryptocurrency You can think of blockchain and cryptocurrency as technological implementation details, and Web3 as the communities, businesses, and social relationships that form on top of that technology. A similar analogy would be the original World Wide Web, which could have been construed as a rebrand of the underlying technologies of HTML over HTTP over TCP/IP. Those protocols have served as the foundation for virtually all web content for the last 30 years, but it’d certainly be unfair to describe “the Web” as merely a rebranding of HTML/HTTP/TCP/IP since what happens on top of those protocols is much bigger than just the protocols themselves.\nUsing blockchain as a database to store personal data in account?\nAuthentication Before Web3 Username and password OAuth protocols(namely OAuth2) Web3 Wallets that use asymmetric cryptographic algorithm(public key and private key). Smart contracts enables advances features, like recovery your lost key. MetaMask. ","permalink":"https://notes.0081800.xyz/notes/20220105114740-real_problems_that_web3_solves_part_1/","summary":"tags: Web3,Smart contracts source: Bill Prin’s Personal Page. “Real Problems That Web3 Solves, Part 1,” January 3, 2022. https://billprin.com/2022/01/03/real-problems-web3-solves.html. What exactly is the difference between Web3, blockchain, and cryptocurrency You can think of blockchain and cryptocurrency as technological implementation details, and Web3 as the communities, businesses, and social relationships that form on top of that technology. A similar analogy would be the original World Wide Web, which could have been construed as a rebrand of the underlying technologies of HTML over HTTP over TCP/IP.","title":"Real Problems That Web3 Solves, Part 1"},{"content":" tags: Blockchain,Ethereum source: https://ethereum.org/en/developers/docs/smart-contracts/ A type of Ethereum account. Some code deployed and running in some VM, like Ethereum Virtual Machine.\n","permalink":"https://notes.0081800.xyz/notes/20220105113810-smart_contracts/","summary":"tags: Blockchain,Ethereum source: https://ethereum.org/en/developers/docs/smart-contracts/ A type of Ethereum account. Some code deployed and running in some VM, like Ethereum Virtual Machine.","title":"Smart contracts"},{"content":" tags: Ethereum,Smart contracts,Blockchain,Web3 source: https://ethereum.org/en/dao/ Based on smart contracts and use tokens for voting. Tokens can be exchanged in the market.\n","permalink":"https://notes.0081800.xyz/notes/20220105112648-decentralized_autonomous_organizations_daos/","summary":"tags: Ethereum,Smart contracts,Blockchain,Web3 source: https://ethereum.org/en/dao/ Based on smart contracts and use tokens for voting. Tokens can be exchanged in the market.","title":"Decentralized autonomous organizations (DAOs)"},{"content":" tags: AI,Deep Learning source: “Neural Network From Scratch.” Accessed January 5, 2022. https://sirupsen.com/napkin/neural-net. ","permalink":"https://notes.0081800.xyz/notes/20220105105024-neural_network_from_scratch/","summary":" tags: AI,Deep Learning source: “Neural Network From Scratch.” Accessed January 5, 2022. https://sirupsen.com/napkin/neural-net. ","title":"Neural Network From Scratch"},{"content":" tags: Taking Notes,RoamResearch source: “My Personal Note Taking Journey.” Accessed January 5, 2022. https://phonetonote.com/blog/my-personal-note-taking-journey/. ","permalink":"https://notes.0081800.xyz/notes/20220105104616-my_personal_note_taking_journey/","summary":" tags: Taking Notes,RoamResearch source: “My Personal Note Taking Journey.” Accessed January 5, 2022. https://phonetonote.com/blog/my-personal-note-taking-journey/. ","title":"my personal note taking journey"},{"content":" tags: Zotero,Emacs I got an error when I\u0026rsquo;m inserting Zotero ref to Emacs by M-x org-zotxt-insert-reference-link RET\n[error] request--callback: peculiar error: 500 I got the error of zotxt by follow the instruction Debug Output Logging:\n(5)(+0000003): HTTP/1.0 500 Internal Server Error X-Zotero-Version: 5.0.96.3 X-Zotero-Connector-API-Version: 2 Content-Type: text/plain; charset=UTF-8 csl is nullTypeError: csl is null buildBibliographyResponse/responseData\u0026lt;@resource://gre/modules/addons/XPIProvider.jsm -\u0026gt; jar:file:///Users/wanghui/Library/Application%20Support/Zotero/Profiles/34hkbjfm.default/extensions/zotxt@e6h.org.xpi!/bootstrap.js:220:9 buildBibliographyResponse@resource://gre/modules/addons/XPIProvider.jsm -\u0026gt; jar:file:///Users/wanghui/Library/Application%20Support/Zotero/Profiles/34hkbjfm.default/extensions/zotxt@e6h.org.xpi!/bootstrap.js:219:24 buildResponse/\u0026lt;@resource://gre/modules/addons/XPIProvider.jsm -\u0026gt; jar:file:///Users/wanghui/Library/Application%20Support/Zotero/Profiles/34hkbjfm.default/extensions/zotxt@e6h.org.xpi!/bootstrap.js:156:20 tryCatcher@resource://zotero/loader.jsm -\u0026gt; resource://zotero/bluebird/util.js:16:16 module.exports/Promise.prototype._settlePromiseFromHandler@resource://zotero/loader.jsm -\u0026gt; resource://zotero/bluebird/promise.js:547:13 module.exports/Promise.prototype._settlePromise@resource://zotero/loader.jsm -\u0026gt; resource://zotero/bluebird/promise.js:604:13 module.exports/Promise.prototype._settlePromise0@resource://zotero/loader.jsm -\u0026gt; resource://zotero/bluebird/promise.js:649:5 module.exports/Promise.prototype._settlePromises@resource://zotero/loader.jsm -\u0026gt; resource://zotero/bluebird/promise.js:729:13 module.exports/Promise.prototype._fulfill@resource://zotero/loader.jsm -\u0026gt; resource://zotero/bluebird/promise.js:673:13 module.exports/PromiseArray.prototype._resolve@resource://zotero/loader.jsm -\u0026gt; resource://zotero/bluebird/promise_array.js:127:5 module.exports/MappingPromiseArray.prototype._promiseFulfilled@resource://zotero/loader.jsm -\u0026gt; resource://zotero/bluebird/map.js:108:13 module.exports/Promise.prototype._settlePromise@resource://zotero/loader.jsm -\u0026gt; resource://zotero/bluebird/promise.js:609:17 module.exports/Promise… (3613 chars) And I found this issue: zotxt api does not work for non-latin references. By looking at the reply, I think it\u0026rsquo;s the same issue I\u0026rsquo;m got: I did\u0026rsquo;nt install the style which I setted in my Emacs config:\n(use-package org-zotxt :straight (:host github :repo \u0026#34;egh/zotxt-emacs\u0026#34;) :bind (:map org-mode-map (\u0026#34;C-c z i\u0026#34; . org-zotxt-insert-reference-link) (\u0026#34;C-c z a\u0026#34; . org-zotxt-open-attachment)) :custom (zotxt-default-bibliography-style \u0026#34;mkbehr-short\u0026#34;) :hook (org-mode . org-zotxt-mode)) By removing the :custom, issue resolved:\n(use-package org-zotxt :straight (:host github :repo \u0026#34;egh/zotxt-emacs\u0026#34;) :bind (:map org-mode-map (\u0026#34;C-c z i\u0026#34; . org-zotxt-insert-reference-link) (\u0026#34;C-c z a\u0026#34; . org-zotxt-open-attachment)) :hook (org-mode . org-zotxt-mode)) ","permalink":"https://notes.0081800.xyz/notes/20220105090334-zotero_zotxt_500/","summary":"tags: Zotero,Emacs I got an error when I\u0026rsquo;m inserting Zotero ref to Emacs by M-x org-zotxt-insert-reference-link RET\n[error] request--callback: peculiar error: 500 I got the error of zotxt by follow the instruction Debug Output Logging:\n(5)(+0000003): HTTP/1.0 500 Internal Server Error X-Zotero-Version: 5.0.96.3 X-Zotero-Connector-API-Version: 2 Content-Type: text/plain; charset=UTF-8 csl is nullTypeError: csl is null buildBibliographyResponse/responseData\u0026lt;@resource://gre/modules/addons/XPIProvider.jsm -\u0026gt; jar:file:///Users/wanghui/Library/Application%20Support/Zotero/Profiles/34hkbjfm.default/extensions/zotxt@e6h.org.xpi!/bootstrap.js:220:9 buildBibliographyResponse@resource://gre/modules/addons/XPIProvider.jsm -\u0026gt; jar:file:///Users/wanghui/Library/Application%20Support/Zotero/Profiles/34hkbjfm.default/extensions/zotxt@e6h.org.xpi!/bootstrap.js:219:24 buildResponse/\u0026lt;@resource://gre/modules/addons/XPIProvider.jsm -\u0026gt; jar:file:///Users/wanghui/Library/Application%20Support/Zotero/Profiles/34hkbjfm.default/extensions/zotxt@e6h.org.xpi!/bootstrap.js:156:20 tryCatcher@resource://zotero/loader.jsm -\u0026gt; resource://zotero/bluebird/util.js:16:16 module.exports/Promise.prototype._settlePromiseFromHandler@resource://zotero/loader.jsm -\u0026gt; resource://zotero/bluebird/promise.js:547:13 module.","title":"Zotero zotxt's api 500 as the specify style is not installed"},{"content":" tags: Org Mode,Taking Notes,Zotero,Research,Emacs source: “Scientific Writing with Zotero and Org Mode | Irreal.” Accessed January 5, 2022. https://irreal.org/blog/?p=5771. ","permalink":"https://notes.0081800.xyz/notes/20220105080634-scientific_writing_with_zotero_and_org_mode/","summary":" tags: Org Mode,Taking Notes,Zotero,Research,Emacs source: “Scientific Writing with Zotero and Org Mode | Irreal.” Accessed January 5, 2022. https://irreal.org/blog/?p=5771. ","title":"Scientific Writing with Zotero and Org Mode"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20220105065739-research/","summary":"","title":"Research"},{"content":" tags: Org Mode,Taking Notes,Zotero,Research,Emacs source: “A Research Workflow with Zotero and Org Mode | Mkbehr.Com.” Accessed January 5, 2022. http://www.mkbehr.com/posts/a-research-workflow-with-zotero-and-org-mode/. Gluing zotero and Org mode together with zotxt(zotxt-emacs).\nWorkflow:\nStore papers into zotero by its browser plugin, that may also download the PDF. Create a page in Emacs and link to zotero via zotxt-emacs C-c \u0026quot; \u0026quot;. When I want to read the paper. Go to the page in Emacs and type C-c \u0026quot; a. When I\u0026rsquo;m reading a paper and see a citation that might be useful, I look it up on the internet and repeat this process to store a note linking to it. ","permalink":"https://notes.0081800.xyz/notes/20220105065621-a_research_workflow_with_zotero_and_org_mode/","summary":"tags: Org Mode,Taking Notes,Zotero,Research,Emacs source: “A Research Workflow with Zotero and Org Mode | Mkbehr.Com.” Accessed January 5, 2022. http://www.mkbehr.com/posts/a-research-workflow-with-zotero-and-org-mode/. Gluing zotero and Org mode together with zotxt(zotxt-emacs).\nWorkflow:\nStore papers into zotero by its browser plugin, that may also download the PDF. Create a page in Emacs and link to zotero via zotxt-emacs C-c \u0026quot; \u0026quot;. When I want to read the paper. Go to the page in Emacs and type C-c \u0026quot; a.","title":"A research workflow with Zotero and Org mode"},{"content":" tags: Tools,Learning,Taking Notes ","permalink":"https://notes.0081800.xyz/notes/20220105065640-zotero/","summary":" tags: Tools,Learning,Taking Notes ","title":"Zotero"},{"content":" tags: Rust,优化,High Performance source: https://blog.datalust.co/deserializing-json-really-fast/ ","permalink":"https://notes.0081800.xyz/notes/20220104184242-deserializing_json_really_fast/","summary":" tags: Rust,优化,High Performance source: https://blog.datalust.co/deserializing-json-really-fast/ ","title":"Deserializing JSON really fast"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20220104184051-database/","summary":"","title":"Database"},{"content":" tags: TCP source: https://arthurchiao.art/blog/rfc1180-a-tcp-ip-tutorial-zh/ ","permalink":"https://notes.0081800.xyz/notes/20220104183852-%E8%AF%91_rfc_1180_%E6%9C%B4%E7%B4%A0_tcp_ip_%E6%95%99%E7%A8%8B_1991/","summary":" tags: TCP source: https://arthurchiao.art/blog/rfc1180-a-tcp-ip-tutorial-zh/ ","title":"[译] RFC 1180：朴素 TCP/IP 教程（1991）"},{"content":" tags: Assembly,NASM Assembly Language Tutorials source: https://ratfactor.com/assembly-nights ","permalink":"https://notes.0081800.xyz/notes/20220104183330-assembly_nights/","summary":" tags: Assembly,NASM Assembly Language Tutorials source: https://ratfactor.com/assembly-nights ","title":"Assembly Nights"},{"content":" tags: Web3 source: https://blog.wesleyac.com/posts/web3-centralized ","permalink":"https://notes.0081800.xyz/notes/20220104183132-web3_is_centralized/","summary":" tags: Web3 source: https://blog.wesleyac.com/posts/web3-centralized ","title":"web3 is Centralized"},{"content":" tags: Algorithm source: https://malisper.me/an-algorithm-for-passing-programming-interviews/ ","permalink":"https://notes.0081800.xyz/notes/20220104182458-an_algorithm_for_passing_programming_interviews/","summary":" tags: Algorithm source: https://malisper.me/an-algorithm-for-passing-programming-interviews/ ","title":"An Algorithm for Passing Programming Interviews"},{"content":" tags: Computer Systems ","permalink":"https://notes.0081800.xyz/projects/20220104182327-algorithm/","summary":" tags: Computer Systems ","title":"Algorithm"},{"content":" tags: Blockchain,Web3 source: https://www.kooslooijesteijn.net/blog/web3 ","permalink":"https://notes.0081800.xyz/notes/20220104181901-a_not_so_gentle_intro_to_web3/","summary":" tags: Blockchain,Web3 source: https://www.kooslooijesteijn.net/blog/web3 ","title":"A not so gentle intro to web3"},{"content":" tags: Blockchain ","permalink":"https://notes.0081800.xyz/notes/20220104181911-web3/","summary":" tags: Blockchain ","title":"Web3"},{"content":" tags: Go source: https://tip.golang.org/doc/fuzz/ ","permalink":"https://notes.0081800.xyz/notes/20220104181647-go_fuzzing/","summary":" tags: Go source: https://tip.golang.org/doc/fuzz/ ","title":"Go Fuzzing"},{"content":" tags: Freelance source: https://www.hellobonsai.com/ HN: https://news.ycombinator.com/item?id=29782097 ","permalink":"https://notes.0081800.xyz/notes/20220104181343-bonsai_offers_freelance_contracts_proposals_invoices/","summary":" tags: Freelance source: https://www.hellobonsai.com/ HN: https://news.ycombinator.com/item?id=29782097 ","title":"Bonsai offers freelance contracts, proposals, invoices"},{"content":" tags: Computer Systems ","permalink":"https://notes.0081800.xyz/notes/20220104180603-assembly/","summary":" tags: Computer Systems ","title":"Assembly"},{"content":" tags: Computer Systems,Assembly,Linux,Online Tutorial source: “NASM Assembly Language Tutorials - Asmtutor.Com.” Accessed January 5, 2022. https://asmtutor.com/. ","permalink":"https://notes.0081800.xyz/notes/20220104180539-nasm_assembly_language_tutorials/","summary":" tags: Computer Systems,Assembly,Linux,Online Tutorial source: “NASM Assembly Language Tutorials - Asmtutor.Com.” Accessed January 5, 2022. https://asmtutor.com/. ","title":"NASM Assembly Language Tutorials"},{"content":" tags: Freelance ","permalink":"https://notes.0081800.xyz/notes/20220104175722-microstartup/","summary":" tags: Freelance ","title":"Microstartup"},{"content":"","permalink":"https://notes.0081800.xyz/projects/20220104175356-freelance/","summary":"","title":"Freelance"},{"content":" tags: Freelance,Microstartup source: https://news.ycombinator.com/item?id=29790964 Comments:\nRelated:\n\u0026ldquo;Tell HN: My Microstartups make $500/day while I\u0026rsquo;m sleeping\u0026rdquo; (this): https://news.ycombinator.com/item?id=29790964\n\u0026ldquo;AMA: I make $100K+ ARR from my microstartups\u0026rdquo; (3 months ago): https://news.ycombinator.com/item?id=28561132\n\u0026ldquo;Show HN: I passed up an opportunity to make $200K from my microstartup\u0026rdquo; (2020): https://twitter.com/1HaKr/status/1301142901510995969\n\u0026ldquo;Show HN: My Indie Hacker goal - Earn $100 a day to keep your desk job away\u0026rdquo; (2020): https://news.ycombinator.com/item?id=24304674\n\u0026ldquo;Show HN: I made $9000 posting on Hacker News about my microstartup\u0026rdquo; (2020): https://news.ycombinator.com/submitted?id=1hakr\nAnd so on: https://news.ycombinator.com/submitted?id=1hakr\nTo answer the question \u0026ldquo;how do you advertise your products?\u0026rdquo;, clearly it is to spam Hacker News until you get lucky.\nHow to validate ideas?\nNot OP, but validating ideas is (relatively) easy. First, you figure out who will use your product. Then, you get a few of those people to use or discuss your product. You only need a few people, and they can be close acquaintances. After showing the product to a few people you imagine to use your product, you come to a determination of whether or not they liked your product. This part is a little subtle. You don\u0026rsquo;t ask them \u0026ldquo;did you like my product?\u0026rdquo; Instead, you try to figure out if your product seems like something they were excited about, would continue to use, and, most importantly, tell others about.\nThink about it like this. If you show the product to a handful of people that you imagine to be ideal users, and NONE of those people are excited enough about your business to share it with others, then what chance of success do you really have?\nTo give you a concrete example. I made an app that was a pretty revolutionary take on reading short stories. I had a few friends try it out, all of whom were passionate readers. They said they liked it, but I could see that none of them opened it again after their initial test. To me, that was all the signal I needed to pivot to something else.\n","permalink":"https://notes.0081800.xyz/notes/20220104175332-hn_my_microstartups_make_500_day_while_i_m_sleeping/","summary":"tags: Freelance,Microstartup source: https://news.ycombinator.com/item?id=29790964 Comments:\nRelated:\n\u0026ldquo;Tell HN: My Microstartups make $500/day while I\u0026rsquo;m sleeping\u0026rdquo; (this): https://news.ycombinator.com/item?id=29790964\n\u0026ldquo;AMA: I make $100K+ ARR from my microstartups\u0026rdquo; (3 months ago): https://news.ycombinator.com/item?id=28561132\n\u0026ldquo;Show HN: I passed up an opportunity to make $200K from my microstartup\u0026rdquo; (2020): https://twitter.com/1HaKr/status/1301142901510995969\n\u0026ldquo;Show HN: My Indie Hacker goal - Earn $100 a day to keep your desk job away\u0026rdquo; (2020): https://news.ycombinator.com/item?id=24304674\n\u0026ldquo;Show HN: I made $9000 posting on Hacker News about my microstartup\u0026rdquo; (2020): https://news.","title":"HN: My Microstartups make $500/day while I'm sleeping"},{"content":" tags: Blockchain ","permalink":"https://notes.0081800.xyz/notes/20220104174944-ledger_the_first_peer_reviewed_journal_dedicated_to_the_study_of_blockchains_and_cryptocurrencies/","summary":" tags: Blockchain ","title":"Ledger, the first peer-reviewed journal dedicated to the study of blockchains and cryptocurrencies!"},{"content":" tags: Privoxy,Over the Wall source: https://wiki.archlinux.org/title/Privoxy%5F(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E8%BD%AC%E5%8F%91%E5%8D%8F%E8%AE%AE ","permalink":"https://notes.0081800.xyz/notes/20220104163050-privoxy_socks5_to_http/","summary":" tags: Privoxy,Over the Wall source: https://wiki.archlinux.org/title/Privoxy%5F(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E8%BD%AC%E5%8F%91%E5%8D%8F%E8%AE%AE ","title":"Privoxy socks5 to HTTP"},{"content":" tags: Tools,Unix home: https://www.privoxy.org/ ","permalink":"https://notes.0081800.xyz/notes/20220104162722-privoxy/","summary":" tags: Tools,Unix home: https://www.privoxy.org/ ","title":"Privoxy"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20220104162549-tools/","summary":"","title":"Tools"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20220104162448-https/","summary":"","title":"HTTPs"},{"content":" tags: Bigdata source: https://beam.apache.org/ ","permalink":"https://notes.0081800.xyz/notes/20220104150531-beam/","summary":" tags: Bigdata source: https://beam.apache.org/ ","title":"Beam"},{"content":" tags: Flink State Snapshots source: https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/concepts/stateful-stream-processing/#keyed-state Keyed state is maintained in what can be thought of as an embedded key/value store.\n","permalink":"https://notes.0081800.xyz/notes/20220104120927-flink_keyed_state/","summary":"tags: Flink State Snapshots source: https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/concepts/stateful-stream-processing/#keyed-state Keyed state is maintained in what can be thought of as an embedded key/value store.","title":"Flink: Keyed State"},{"content":" tags: Flink State Snapshots,Fault Tolerance via State Snapshots source: https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/learn-flink/fault%5Ftolerance/#exactly-once-guarantees Depending on the choices you make, Flink possiable outcomes:\nFlink makes no effort to recover from failures (at most once) Nothing is lost, but you may experience duplicated results (at least once) Nothing is lost or duplicated (exactly once) Given that Flink recovers from faults by rewinding and replaying the source data streams, when the ideal situation is described as exactly once this does not mean that every event will be processed exactly once. Instead, it means that every event will affect the state being managed by Flink exactly once.\nExactly Once End-to-end To achieve exactly once end-to-end, so that every event from the sources affects the sinks exactly once, the following must be true:\nyour sources must be replayable, and your sinks must be transactional (or idempotent) ","permalink":"https://notes.0081800.xyz/notes/20220104113644-flink_exactly_once_guarantees/","summary":"tags: Flink State Snapshots,Fault Tolerance via State Snapshots source: https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/learn-flink/fault%5Ftolerance/#exactly-once-guarantees Depending on the choices you make, Flink possiable outcomes:\nFlink makes no effort to recover from failures (at most once) Nothing is lost, but you may experience duplicated results (at least once) Nothing is lost or duplicated (exactly once) Given that Flink recovers from faults by rewinding and replaying the source data streams, when the ideal situation is described as exactly once this does not mean that every event will be processed exactly once.","title":"Flink: Exactly Once Guarantees"},{"content":" tags: 分布式 source: https://en.wikipedia.org/wiki/Chandy%E2%80%93Lamport%5Falgorithm ","permalink":"https://notes.0081800.xyz/notes/20220104112626-wikipedia_chandy_lamport_algorithm/","summary":" tags: 分布式 source: https://en.wikipedia.org/wiki/Chandy%E2%80%93Lamport%5Falgorithm ","title":"Wikipedia: Chandy–Lamport algorithm"},{"content":" tags: Fault Tolerance via State Snapshots,Flink State Snapshots,Wikipedia: Chandy–Lamport algorithm source: https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/learn-flink/fault%5Ftolerance/#how-does-state-snapshotting-work Workflow:\nCheckpoint coordinator (part of the job manager) instructs a task manager to begin a checkpoint.\nInsert numbered checkpoint barriers into their streams of all the sources record their offsets.\ncheckpoint barriers flow through the job graph, indicating the part of the stream before and after each checkpoint.\nCheckpoint n will contain the state of each operator that resulted from having consumed every event before checkpoint barrier n, and none of the events after it.\nAs each operator in the job graph receives one of these barriers, it records its state.\nOperators with two input streams (such as a CoProcessFunction) perform barrier alignment so that the snapshot will reflect the state resulting from consuming events from both input streams up to (but not past) both barriers.\nAsynchronously snapshot Flink’s state backends use a copy-on-write mechanism to allow stream processing to continue unimpeded while older versions of the state are being asynchronously snapshotted. Only when the snapshots have been durably persisted will these older versions of the state be garbage collected.\n","permalink":"https://notes.0081800.xyz/notes/20220104112527-flink_how_does_state_snapshotting_work/","summary":"tags: Fault Tolerance via State Snapshots,Flink State Snapshots,Wikipedia: Chandy–Lamport algorithm source: https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/learn-flink/fault%5Ftolerance/#how-does-state-snapshotting-work Workflow:\nCheckpoint coordinator (part of the job manager) instructs a task manager to begin a checkpoint.\nInsert numbered checkpoint barriers into their streams of all the sources record their offsets.\ncheckpoint barriers flow through the job graph, indicating the part of the stream before and after each checkpoint.\nCheckpoint n will contain the state of each operator that resulted from having consumed every event before checkpoint barrier n, and none of the events after it.","title":"Flink: How does State Snapshotting Work?"},{"content":" tags: Flink State Snapshots,Fault Tolerance via State Snapshots a snapshot taken automatically by Flink for the purpose of being able to recover from faults. Checkpoints can be incremental, and are optimized for being restored quickly.\n","permalink":"https://notes.0081800.xyz/notes/20220104112356-flink_checkpoint/","summary":"tags: Flink State Snapshots,Fault Tolerance via State Snapshots a snapshot taken automatically by Flink for the purpose of being able to recover from faults. Checkpoints can be incremental, and are optimized for being restored quickly.","title":"Flink Checkpoint"},{"content":" tags: Flink State Snapshots a snapshot triggered manually by a user (or an API call) for some operational purpose, such as a stateful redeploy/upgrade/rescaling operation. Savepoints are always complete, and are optimized for operational flexibility.\n","permalink":"https://notes.0081800.xyz/notes/20220104112301-flink_savepoint/","summary":"tags: Flink State Snapshots a snapshot triggered manually by a user (or an API call) for some operational purpose, such as a stateful redeploy/upgrade/rescaling operation. Savepoints are always complete, and are optimized for operational flexibility.","title":"Flink Savepoint"},{"content":" tags: Flink State Snapshots,Fault Tolerance via State Snapshots,Flink Checkpoint source: https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/learn-flink/fault%5Ftolerance/#checkpoint-storage Flink periodically takes persistent snapshots of all the state in every operator and copies these snapshots somewhere more durable, such as a distributed file system. In the event of the failure, Flink can restore the complete state of your application and resume processing as though nothing had gone wrong.\nTwo implementations:\nA distributed file system. JobManager’s heap. ","permalink":"https://notes.0081800.xyz/notes/20220104111922-flink_checkpoint_storage/","summary":" tags: Flink State Snapshots,Fault Tolerance via State Snapshots,Flink Checkpoint source: https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/learn-flink/fault%5Ftolerance/#checkpoint-storage Flink periodically takes persistent snapshots of all the state in every operator and copies these snapshots somewhere more durable, such as a distributed file system. In the event of the failure, Flink can restore the complete state of your application and resume processing as though nothing had gone wrong.\nTwo implementations:\nA distributed file system. JobManager’s heap. ","title":"Flink Checkpoint Storage"},{"content":" tags: Flink State Snapshots,Fault Tolerance via State Snapshots,Stateful Stream Processing Two implementations of state backends are available:\nRocksDB An embedded key/value store keeps its working state on disk.\nOverhead Accesses and updates involve serialization and deserialization.\nJava heap-based state backend Keeps its working state in memory, on the Java heap.\nRisk Large amount state will cause OOM.\nConclusion Both of these state backends are able to do asynchronous snapshotting, meaning that they can take a snapshot without impeding the ongoing stream processing.\n","permalink":"https://notes.0081800.xyz/notes/20220104111432-state_backends/","summary":"tags: Flink State Snapshots,Fault Tolerance via State Snapshots,Stateful Stream Processing Two implementations of state backends are available:\nRocksDB An embedded key/value store keeps its working state on disk.\nOverhead Accesses and updates involve serialization and deserialization.\nJava heap-based state backend Keeps its working state in memory, on the Java heap.\nRisk Large amount state will cause OOM.\nConclusion Both of these state backends are able to do asynchronous snapshotting, meaning that they can take a snapshot without impeding the ongoing stream processing.","title":"State Backends"},{"content":" tags: Flink State Snapshots,Stateful Stream Processing source: https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/learn-flink/fault%5Ftolerance/ ","permalink":"https://notes.0081800.xyz/notes/20220104111325-fault_tolerance_via_state_snapshots/","summary":" tags: Flink State Snapshots,Stateful Stream Processing source: https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/learn-flink/fault%5Ftolerance/ ","title":"Fault Tolerance via State Snapshots"},{"content":" tags: Stateful Stream Processing ","permalink":"https://notes.0081800.xyz/notes/20220104111119-flink_state_snapshots/","summary":" tags: Stateful Stream Processing ","title":"Flink State Snapshots"},{"content":" tags: Stream processing,Flink source: https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/learn-flink/overview/#stateful-stream-processing https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/concepts/stateful-stream-processing/ This means that how one event is handled can depend on the accumulated effect of all the events that came before it.\nHow the stateful streaming processing works on a distributed cluster? The set of parallel instances of a stateful operator is effectively a sharded key-value store. Each parallel instance is responsible for handling events for a specific group of keys, and the state for those keys is kept locally.\nState are stored and accessed locally by sharded key-value store, A fully-connected network shuffle will be occurring between all the instances, All of the events that will be processed together. State is always accessed locally, which helps Flink applications achieve high throughput and low-latency. You can choose to keep state on the JVM heap, or if it is too large, in efficiently organized on-disk data structures.\nSome examples of stateful operations When an application searches for certain event patterns, the state will store the sequence of events encountered so far. When aggregating events per minute/hour/day, the state holds the pending aggregates. When training a machine learning model over a stream of data points, the state holds the current version of the model parameters. When historic data needs to be managed, the state allows efficient access to events that occurred in the past. ","permalink":"https://notes.0081800.xyz/notes/20220104105853-stateful_stream_processing/","summary":"tags: Stream processing,Flink source: https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/learn-flink/overview/#stateful-stream-processing https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/concepts/stateful-stream-processing/ This means that how one event is handled can depend on the accumulated effect of all the events that came before it.\nHow the stateful streaming processing works on a distributed cluster? The set of parallel instances of a stateful operator is effectively a sharded key-value store. Each parallel instance is responsible for handling events for a specific group of keys, and the state for those keys is kept locally.","title":"Stateful Stream Processing"},{"content":" tags: Stream processing,Flink source: https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/learn-flink/overview/#timely-stream-processing Flink timely stream processing support by using event timestamps that are recorded in data stream, rather than using the clocks of the machines processing the data.\n","permalink":"https://notes.0081800.xyz/notes/20220104105829-timely_stream_processing/","summary":"tags: Stream processing,Flink source: https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/learn-flink/overview/#timely-stream-processing Flink timely stream processing support by using event timestamps that are recorded in data stream, rather than using the clocks of the machines processing the data.","title":"Timely Stream Processing"},{"content":" tags: Flink Parallel Dataflows Redistributing streams (as between map() and keyBy/window above, as well as between keyBy/window and Sink) change the partitioning of streams. Each operator subtask sends data to different target subtasks, depending on the selected transformation. Examples are keyBy() (which re-partitions by hashing the key), broadcast(), or rebalance() (which re-partitions randomly). In a redistributing exchange the ordering among the elements is only preserved within each pair of sending and receiving subtasks (for example, subtask[1] of map() and subtask[2] of keyBy/window). So, for example, the redistribution between the keyBy/window and the Sink operators shown above introduces non-determinism regarding the order in which the aggregated results for different keys arrive at the Sink.\n","permalink":"https://notes.0081800.xyz/notes/20220104105758-flink_redistributing/","summary":"tags: Flink Parallel Dataflows Redistributing streams (as between map() and keyBy/window above, as well as between keyBy/window and Sink) change the partitioning of streams. Each operator subtask sends data to different target subtasks, depending on the selected transformation. Examples are keyBy() (which re-partitions by hashing the key), broadcast(), or rebalance() (which re-partitions randomly). In a redistributing exchange the ordering among the elements is only preserved within each pair of sending and receiving subtasks (for example, subtask[1] of map() and subtask[2] of keyBy/window).","title":"Flink Redistributing"},{"content":" tags: Flink Parallel Dataflows One-to-one streams (for example between the Source and the map() operators in the figure above) preserve the partitioning and ordering of the elements. That means that subtask[1] of the map() operator will see the same elements in the same order as they were produced by subtask[1] of the Source operator.\n","permalink":"https://notes.0081800.xyz/notes/20220104105704-one_to_one/","summary":"tags: Flink Parallel Dataflows One-to-one streams (for example between the Source and the map() operators in the figure above) preserve the partitioning and ordering of the elements. That means that subtask[1] of the map() operator will see the same elements in the same order as they were produced by subtask[1] of the Source operator.","title":"One-to-one"},{"content":" tags: Flink Streams can transport data between two operators in a one-to-one (or forwarding) pattern, or in a redistributing pattern:\n","permalink":"https://notes.0081800.xyz/notes/20220104105628-flink_parallel_dataflows/","summary":"tags: Flink Streams can transport data between two operators in a one-to-one (or forwarding) pattern, or in a redistributing pattern:","title":"Flink Parallel Dataflows"},{"content":" tags: Flink Stream processing, on the other hand, involves unbounded data streams. Conceptually, at least, the input may never end, and so you are forced to continuously process the data as it arrives.\n","permalink":"https://notes.0081800.xyz/notes/20220104105119-stream_processing/","summary":"tags: Flink Stream processing, on the other hand, involves unbounded data streams. Conceptually, at least, the input may never end, and so you are forced to continuously process the data as it arrives.","title":"Stream processing"},{"content":" tags: Spark Batch processing is the paradigm at work when you process a bounded data stream. In this mode of operation you can choose to ingest the entire dataset before producing any results, which means that it is possible, for example, to sort the data, compute global statistics, or produce a final report that summarizes all of the input.\n","permalink":"https://notes.0081800.xyz/notes/20220104105030-batch_processing/","summary":"tags: Spark Batch processing is the paradigm at work when you process a bounded data stream. In this mode of operation you can choose to ingest the entire dataset before producing any results, which means that it is possible, for example, to sort the data, compute global statistics, or produce a final report that summarizes all of the input.","title":"Batch processing"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20220104104436-flink%E5%AE%9E%E6%97%B6%E8%AE%A1%E7%AE%97_%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3_checkpoint%E5%92%8Csavepoint/","summary":"","title":"Flink实时计算-深入理解 Checkpoint和Savepoint"},{"content":" tags: Flink,Flink State Snapshots,Flink Checkpoint,Flink Savepoint source: https://zhuanlan.zhihu.com/p/79526638 ","permalink":"https://notes.0081800.xyz/notes/20220104104450-%E7%9F%A5%E4%B9%8E_flink%E5%AE%9E%E6%97%B6%E8%AE%A1%E7%AE%97_%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3_checkpoint%E5%92%8Csavepoint/","summary":" tags: Flink,Flink State Snapshots,Flink Checkpoint,Flink Savepoint source: https://zhuanlan.zhihu.com/p/79526638 ","title":"知乎：Flink实时计算-深入理解 Checkpoint和Savepoint"},{"content":" tags: Linux source: https://github.com/sunym1993/flash-linux0.11-talk ","permalink":"https://notes.0081800.xyz/notes/20220104104331-github_%E5%83%8F%E5%B0%8F%E8%AF%B4%E4%B8%80%E6%A0%B7%E5%93%81%E8%AF%BB_linux_0_11_%E6%A0%B8%E5%BF%83%E4%BB%A3%E7%A0%81/","summary":" tags: Linux source: https://github.com/sunym1993/flash-linux0.11-talk ","title":"GitHub: 像小说一样品读 Linux 0.11 核心代码"},{"content":" tags: Linux source: https://archive.org/details/199405-decusnew-orleans/1994050DECUSNewOrleansLinuxImplementationIssuesInLinux.ogg ","permalink":"https://notes.0081800.xyz/notes/20220104104134-audio_the_lost_talks_from_linus_torvalds_at_decus_94/","summary":" tags: Linux source: https://archive.org/details/199405-decusnew-orleans/1994050DECUSNewOrleansLinuxImplementationIssuesInLinux.ogg ","title":"Audio: The lost talks from Linus Torvalds at DECUS'94"},{"content":" tags: Operating system ","permalink":"https://notes.0081800.xyz/notes/20220104103936-linux/","summary":" tags: Operating system ","title":"Linux"},{"content":" tags: Ethereum,Proof-of-stake source: https://ethereum.org/en/eth2/shard-chains/ Sharding is the process of splitting a database horizontally to spread the load – it’s a common concept in computer science. In an Ethereum context, sharding will reduce network congestion and increase transactions per second by creating new chains, known as “shards”.\nThis is important for reasons other than scalability.\n","permalink":"https://notes.0081800.xyz/notes/20220104083051-ethereum_shard_chains/","summary":"tags: Ethereum,Proof-of-stake source: https://ethereum.org/en/eth2/shard-chains/ Sharding is the process of splitting a database horizontally to spread the load – it’s a common concept in computer science. In an Ethereum context, sharding will reduce network congestion and increase transactions per second by creating new chains, known as “shards”.\nThis is important for reasons other than scalability.","title":"Ethereum: Shard chains"},{"content":" tags: Ethereum,Proof-of-stake source: https://ethereum.org/en/eth2/beacon-chain/ Extra coordination for the Ethereum: Shard chains.\nThe beacon chain receives state information from shards and makes it available for other shards, allowing the network to stay in sync. The beacon chain will also manage the validators from registering their stake deposits to issuing their rewards and penalties.\n","permalink":"https://notes.0081800.xyz/notes/20220104082350-ethereum_the_beacon_chain/","summary":"tags: Ethereum,Proof-of-stake source: https://ethereum.org/en/eth2/beacon-chain/ Extra coordination for the Ethereum: Shard chains.\nThe beacon chain receives state information from shards and makes it available for other shards, allowing the network to stay in sync. The beacon chain will also manage the validators from registering their stake deposits to issuing their rewards and penalties.","title":"Ethereum: The Beacon Chain"},{"content":" tags: Ethereum,Proof-of-stake source: https://ethereum.org/en/developers/docs/consensus-mechanisms/pos/#how-does-pos-work When you submit a transaction on a shard, a validator will be responsible for adding your transaction to a shard block. Validators are algorithmically chosen by Ethereum: The Beacon Chain to propose new blocks.\nAttestation\nIf a validator isn\u0026rsquo;t chosen to propose a new shard block, they\u0026rsquo;ll have to attest to another validator\u0026rsquo;s proposal and confirm that everything looks as it should. It\u0026rsquo;s the attestation that is recorded in the beacon chain rather than the transaction itself.\nAt least 128 validators are required to attest to each shard block – this is known as a \u0026ldquo;committee.\u0026rdquo; The committee has a time-frame in which to propose and validate a shard block. This is known as a \u0026ldquo;slot.\u0026rdquo; Only one valid block is created per slot, and there are 32 slots in an \u0026ldquo;epoch.\u0026rdquo; After each epoch, the committee is disbanded and reformed with different, random participants. This helps keep shards safe from committees of bad actors.\nCrosslinks\nOnce a new shard block proposal has enough attestations, a \u0026ldquo;crosslink\u0026rdquo; is created which confirms the inclusion of the block and your transaction in the beacon chain.\nOnce there\u0026rsquo;s a crosslink, the validator who proposed the block gets their reward.\nFinality\nIn distributed networks, a transaction has \u0026ldquo;finality\u0026rdquo; when it\u0026rsquo;s part of a block that can\u0026rsquo;t change.\nTo do this in proof-of-stake, Casper, a finality protocol, gets validators to agree on the state of a block at certain checkpoints. So long as 2/3 of the validators agree, the block is finalised. Validators will lose their entire stake if they try and revert this later on via a 51% attack.\n","permalink":"https://notes.0081800.xyz/notes/20220104082123-how_does_ehtereum_s_proof_of_stake_work/","summary":"tags: Ethereum,Proof-of-stake source: https://ethereum.org/en/developers/docs/consensus-mechanisms/pos/#how-does-pos-work When you submit a transaction on a shard, a validator will be responsible for adding your transaction to a shard block. Validators are algorithmically chosen by Ethereum: The Beacon Chain to propose new blocks.\nAttestation\nIf a validator isn\u0026rsquo;t chosen to propose a new shard block, they\u0026rsquo;ll have to attest to another validator\u0026rsquo;s proposal and confirm that everything looks as it should. It\u0026rsquo;s the attestation that is recorded in the beacon chain rather than the transaction itself.","title":"How does Ethereum's proof-of-stake work?"},{"content":" tags: Ethereum ","permalink":"https://notes.0081800.xyz/notes/20220104081524-eth/","summary":" tags: Ethereum ","title":"ETH"},{"content":" tags: Blockchain Proof,Solana,Proof-of-stake Solana is a Proof of Stake network. This short phrase - \u0026ldquo;Proof of Stake\u0026rdquo; - represents a much larger concept with considerable complexity behind it, and even more so for Solana, which adds the unique properties of Proof of History to the mix to enable fast, low-latency transactions while still maintaining censorship resistance.\n","permalink":"https://notes.0081800.xyz/notes/20220104081314-proof_of_history/","summary":"tags: Blockchain Proof,Solana,Proof-of-stake Solana is a Proof of Stake network. This short phrase - \u0026ldquo;Proof of Stake\u0026rdquo; - represents a much larger concept with considerable complexity behind it, and even more so for Solana, which adds the unique properties of Proof of History to the mix to enable fast, low-latency transactions while still maintaining censorship resistance.","title":"Proof-of-history"},{"content":" tags: Blockchain,Blockchain Proof,Ethereum,Solana source: https://ethereum.org/en/developers/docs/consensus-mechanisms/pos/ Proof workflow:\nUsers stake money(ETH) to become a validator.\nValidators are chosen at random to create blocks and are responsible for checking and confirming blocks they don\u0026rsquo;t create.\nuser\u0026rsquo;s stake is also used as a way to incentivise good validator behavior. For example, a user can lose a portion of their stake for things like going offline (failing to validate) or their entire stake for deliberate collusion.\nIf you attest to malicious blocks, you lose your stake.\n","permalink":"https://notes.0081800.xyz/notes/20220104071052-proof_of_stake/","summary":"tags: Blockchain,Blockchain Proof,Ethereum,Solana source: https://ethereum.org/en/developers/docs/consensus-mechanisms/pos/ Proof workflow:\nUsers stake money(ETH) to become a validator.\nValidators are chosen at random to create blocks and are responsible for checking and confirming blocks they don\u0026rsquo;t create.\nuser\u0026rsquo;s stake is also used as a way to incentivise good validator behavior. For example, a user can lose a portion of their stake for things like going offline (failing to validate) or their entire stake for deliberate collusion.","title":"Proof-of-stake"},{"content":" tags: Blockchain ","permalink":"https://notes.0081800.xyz/projects/20220104070947-ethereum/","summary":" tags: Blockchain ","title":"Ethereum"},{"content":" tags: Blockchain Proof,Blockchain,Ethereum source: https://ethereum.org/en/developers/docs/consensus-mechanisms/pow/ Wikipedia: https://en.wikipedia.org/wiki/Proof%5Fof%5Fwork A key feature of proof-of-work schemes is their asymmetry: the work – the computation – must be moderately hard (yet feasible) on the prover or requester side but easy to check for the verifier or service provider.\nWith a hash function, let\u0026rsquo;s say SHA-1. For example, to do PoW, we need to generate a SHA-1 hash of the given data that must begins 52 binary zeros, that is 13 hexadecimal zeros:\n0000000000000756af69e2ffbdb930261873cd71 How? By using a random or increasing nounce number can do that:\nimport hashlib difficulty = 13 given_data = b\u0026#39;transactions in the block\u0026#39; for nounce in range(int(1e100)): work = hashlib.sha1(bytes(nounce) + given_data).hexdigest() if work[:difficulty] == b\u0026#39;0\u0026#39; * difficulty: print(\u0026#39;We have proof the work, nounce: {}, hash: {}\u0026#39;, nounce, work) Now we can use the nounce to show our proof, anyone else can use the nounce to check our proof on the given data, and also it\u0026rsquo;s easy to check.\n","permalink":"https://notes.0081800.xyz/notes/20220104070857-proof_of_work/","summary":"tags: Blockchain Proof,Blockchain,Ethereum source: https://ethereum.org/en/developers/docs/consensus-mechanisms/pow/ Wikipedia: https://en.wikipedia.org/wiki/Proof%5Fof%5Fwork A key feature of proof-of-work schemes is their asymmetry: the work – the computation – must be moderately hard (yet feasible) on the prover or requester side but easy to check for the verifier or service provider.\nWith a hash function, let\u0026rsquo;s say SHA-1. For example, to do PoW, we need to generate a SHA-1 hash of the given data that must begins 52 binary zeros, that is 13 hexadecimal zeros:","title":"Proof-of-work"},{"content":" tags: Blockchain ","permalink":"https://notes.0081800.xyz/notes/20220104070749-blockchain_proof/","summary":" tags: Blockchain ","title":"Blockchain Proof"},{"content":" tags: Blockchain,Solana,Proof-of-stake,Proof-of-history source: “Shinobi Systems’ Solana Proof of Stake + Proof of History Primer.” Accessed January 5, 2022. https://www.shinobi-systems.com/primer.html. ","permalink":"https://notes.0081800.xyz/notes/20220104070408-shinobi_systems_solana_proof_of_stake_proof_of_history_primer/","summary":" tags: Blockchain,Solana,Proof-of-stake,Proof-of-history source: “Shinobi Systems’ Solana Proof of Stake + Proof of History Primer.” Accessed January 5, 2022. https://www.shinobi-systems.com/primer.html. ","title":"Shinobi Systems' Solana Proof of Stake + Proof of History Primer"},{"content":" tags: 区块链 ","permalink":"https://notes.0081800.xyz/projects/20220104070432-solana/","summary":" tags: 区块链 ","title":"Solana"},{"content":" tags: Video: Blockchain 101 - A Visual Demo，区块链, Online Tools source: https://andersbrownworth.com/blockchain/hash ","permalink":"https://notes.0081800.xyz/notes/20220103082057-blockchain_demo/","summary":" tags: Video: Blockchain 101 - A Visual Demo，区块链, Online Tools source: https://andersbrownworth.com/blockchain/hash ","title":"Blockchain Demo"},{"content":" tags: 区块链 source: https://youtu.be/%5F160oMzblY8 It\u0026rsquo;s like Git but not support merge. The progress of changing blocks like git rebase.\n","permalink":"https://notes.0081800.xyz/notes/20220103081929-video_blockchain_101_a_visual_demo/","summary":"tags: 区块链 source: https://youtu.be/%5F160oMzblY8 It\u0026rsquo;s like Git but not support merge. The progress of changing blocks like git rebase.","title":"Video: Blockchain 101 - A Visual Demo"},{"content":" tags: C/C++ 只能通过抽象类的指针或引用调用动态解析子类函数，虚函数表示需要动态解析，纯虚函数必须被子类覆盖，否则无法实例化。\n","permalink":"https://notes.0081800.xyz/notes/20220102074500-c_c_%E5%A4%9A%E6%80%81/","summary":"tags: C/C++ 只能通过抽象类的指针或引用调用动态解析子类函数，虚函数表示需要动态解析，纯虚函数必须被子类覆盖，否则无法实例化。","title":"C/C++ 多态"},{"content":" tags: Tools ","permalink":"https://notes.0081800.xyz/topics/20220102074329-programming_tools/","summary":" tags: Tools ","title":"Programming Tools"},{"content":"","permalink":"https://notes.0081800.xyz/topics/20220102074112-operating_system/","summary":"","title":"Operating system"},{"content":" tags: Operating system ","permalink":"https://notes.0081800.xyz/topics/20220102074038-macos/","summary":" tags: Operating system ","title":"macOS"},{"content":" tags: Programming Language ","permalink":"https://notes.0081800.xyz/notes/20220102073737-javascript/","summary":" tags: Programming Language ","title":"JavaScript"},{"content":" tags: Programming Language ","permalink":"https://notes.0081800.xyz/notes/20220102073640-swift/","summary":" tags: Programming Language ","title":"Swift"},{"content":" tags: Computer Systems,读书笔记 ","permalink":"https://notes.0081800.xyz/notes/20220102072835-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/","summary":" tags: Computer Systems,读书笔记 ","title":"《深入理解计算机系统》读书笔记"},{"content":" tags: Computer Systems ","permalink":"https://notes.0081800.xyz/topics/20220102072550-memory_model/","summary":" tags: Computer Systems ","title":"Memory Model"},{"content":" tags: Rust source: https://stackoverflow.com/a/34745885/2873718 ","permalink":"https://notes.0081800.xyz/notes/20220101082142-so_what_is_the_difference_between_iter_and_into_iter/","summary":" tags: Rust source: https://stackoverflow.com/a/34745885/2873718 ","title":"SO: What is the difference between iter and into_iter?"},{"content":" tags: Rust Wrapper Types,Rust source: Rust Memory Container Cheat-sheet ","permalink":"https://notes.0081800.xyz/notes/20220101082045-github_rust_memory_container_cheat_sheet/","summary":" tags: Rust Wrapper Types,Rust source: Rust Memory Container Cheat-sheet ","title":"GitHub: Rust Memory Container Cheat-sheet"},{"content":" tags: Rust,Rust Wrapper Types source: https://manishearth.github.io/blog/2015/05/27/wrapper-types-in-rust-choosing-your-guarantees/ ","permalink":"https://notes.0081800.xyz/notes/20220101081950-wrapper_types_in_rust_choosing_your_guarantees/","summary":" tags: Rust,Rust Wrapper Types source: https://manishearth.github.io/blog/2015/05/27/wrapper-types-in-rust-choosing-your-guarantees/ ","title":"Wrapper Types in Rust: Choosing Your Guarantees"},{"content":" tags: Tokio source: https://github.com/tony612/tokio-internals ","permalink":"https://notes.0081800.xyz/notes/20220101081722-github_internal_details_of_tokio_from_code_to_designs/","summary":" tags: Tokio source: https://github.com/tony612/tokio-internals ","title":"GitHub: Internal details of Tokio from code to designs"},{"content":" tags: Raft source: https://web.stanford.edu/~ouster/cgi-bin/papers/OngaroPhD.pdf ","permalink":"https://notes.0081800.xyz/notes/20220101080713-paper_raft/","summary":" tags: Raft source: https://web.stanford.edu/~ouster/cgi-bin/papers/OngaroPhD.pdf ","title":"PAPER: Raft"},{"content":" tags: 分布式,一致性 source: https://lamport.azurewebsites.net/pubs/time-clocks.pdf The Big Problem The event order in a distributed system.\nThe defination of a distributed system: the order of its events occurred is unpredictable, sometimes it\u0026rsquo;s impossiable to say a event occurred before another.\nHow this paper try to solve this problem: use a \u0026ldquo;happened before\u0026rdquo; relation to define a partial ordering and distributed algorithm.\nBackground ","permalink":"https://notes.0081800.xyz/notes/20220101080622-paper_time_clocks_and_the_ordering_of_events_in_a_distributed_system/","summary":" tags: 分布式,一致性 source: https://lamport.azurewebsites.net/pubs/time-clocks.pdf The Big Problem The event order in a distributed system.\nThe defination of a distributed system: the order of its events occurred is unpredictable, sometimes it\u0026rsquo;s impossiable to say a event occurred before another.\nHow this paper try to solve this problem: use a \u0026ldquo;happened before\u0026rdquo; relation to define a partial ordering and distributed algorithm.\nBackground ","title":"PAPER: Time, Clocks, and the Ordering of Events in a Distributed System"},{"content":" tags: Paxos source: https://blog.csdn.net/qq%5F35440678/article/details/78080431 ","permalink":"https://notes.0081800.xyz/notes/20220101080340-csdn_%E7%90%86%E8%A7%A3%E8%BF%99%E4%B8%A4%E7%82%B9_%E4%B9%9F%E5%B0%B1%E7%90%86%E8%A7%A3%E4%BA%86paxos%E5%8D%8F%E8%AE%AE%E7%9A%84%E7%B2%BE%E9%AB%93/","summary":" tags: Paxos source: https://blog.csdn.net/qq%5F35440678/article/details/78080431 ","title":"CSDN:  理解这两点，也就理解了paxos协议的精髓"},{"content":" tags: Rust,Raft source: https://github.com/tikv/raft-rs ","permalink":"https://notes.0081800.xyz/notes/20220101080223-github_raft_rs/","summary":" tags: Rust,Raft source: https://github.com/tikv/raft-rs ","title":"GitHub: raft-rs"},{"content":" tags: Raft,分布式，分布式共识，Online Tools source: http://thesecretlivesofdata.com/raft/ ","permalink":"https://notes.0081800.xyz/notes/20220101080054-raft_understandable_distributed_consensus/","summary":" tags: Raft,分布式，分布式共识，Online Tools source: http://thesecretlivesofdata.com/raft/ ","title":"Raft Understandable Distributed Consensus"},{"content":" tags: 分布式共识,Online Tools,区块链 source: https://web3scout.github.io/forcecons-sim/ ","permalink":"https://notes.0081800.xyz/notes/20220101075156-distributed_consensus_blockchain_simulation_and_visualization/","summary":" tags: 分布式共识,Online Tools,区块链 source: https://web3scout.github.io/forcecons-sim/ ","title":"Distributed consensus (blockchain) simulation and visualization"},{"content":" tags: 分布式 ","permalink":"https://notes.0081800.xyz/topics/20220101074955-%E4%B8%80%E8%87%B4%E6%80%A7/","summary":" tags: 分布式 ","title":"一致性"},{"content":"","permalink":"https://notes.0081800.xyz/topics/20211231172037-incomplete/","summary":"","title":"Incomplete"},{"content":"","permalink":"https://notes.0081800.xyz/topics/20211231171333-%E8%AE%A1%E5%88%92%E8%AF%BB%E7%9A%84%E4%B9%A6/","summary":"","title":"计划读的书"},{"content":" tags: Emacs,Programming Tools source: https://emacs-lsp.github.io/lsp-mode/ ","permalink":"https://notes.0081800.xyz/topics/20211231165951-lsp/","summary":" tags: Emacs,Programming Tools source: https://emacs-lsp.github.io/lsp-mode/ ","title":"LSP"},{"content":" tags: Org Mode ","permalink":"https://notes.0081800.xyz/topics/20211231142654-org_roam/","summary":" tags: Org Mode ","title":"org-roam"},{"content":" tags: org-roam, Org Mode source: https://seds.nl/notes/org%5Froam%5Fexport%5Fbacklinks%5Fon%5Fhugo/ https://seds.nl/notes/export%5Forg%5Froam%5Fbacklinks%5Fwith%5Fgohugo/ 利用 hugo 的 partial template layouts/partials/backlinks.html\n{{ $re := $.File.BaseFileName }} {{ $backlinks := slice }} {{ range .Site.AllPages }} {{ if and (findRE $re .RawContent) (not (eq $re .File.BaseFileName)) }} {{ $backlinks = $backlinks | append . }} {{ end }} {{ end }} \u0026lt;hr\u0026gt; {{ if gt (len $backlinks) 0 }} \u0026lt;div class=\u0026#34;bl-section\u0026#34;\u0026gt; \u0026lt;h4\u0026gt;Links to this note\u0026lt;/h4\u0026gt; \u0026lt;div class=\u0026#34;backlinks\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; {{ range $backlinks }} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{ else }} \u0026lt;div class=\u0026#34;bl-section\u0026#34;\u0026gt; \u0026lt;h4\u0026gt;No notes link to this note\u0026lt;/h4\u0026gt; \u0026lt;/div\u0026gt; {{ end }} 然后插入到的 single.html 就行\n{{ partial \u0026#34;backlinks.html\u0026#34; . }} hugo-theme-terminal 放在项目的 layouts/partials/comments.html 中避免污染模版。\n","permalink":"https://notes.0081800.xyz/notes/20211231142642-org_roam_export_backlinks_on_hugo/","summary":"tags: org-roam, Org Mode source: https://seds.nl/notes/org%5Froam%5Fexport%5Fbacklinks%5Fon%5Fhugo/ https://seds.nl/notes/export%5Forg%5Froam%5Fbacklinks%5Fwith%5Fgohugo/ 利用 hugo 的 partial template layouts/partials/backlinks.html\n{{ $re := $.File.BaseFileName }} {{ $backlinks := slice }} {{ range .Site.AllPages }} {{ if and (findRE $re .RawContent) (not (eq $re .File.BaseFileName)) }} {{ $backlinks = $backlinks | append . }} {{ end }} {{ end }} \u0026lt;hr\u0026gt; {{ if gt (len $backlinks) 0 }} \u0026lt;div class=\u0026#34;bl-section\u0026#34;\u0026gt; \u0026lt;h4\u0026gt;Links to this note\u0026lt;/h4\u0026gt; \u0026lt;div class=\u0026#34;backlinks\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; {{ range $backlinks }} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ .","title":"Org-roam export backlinks on Hugo"},{"content":" tags: Tools ","permalink":"https://notes.0081800.xyz/notes/20211231123329-online_tools/","summary":" tags: Tools ","title":"Online Tools"},{"content":" tags: Taking Notes,Online Tools ","permalink":"https://notes.0081800.xyz/notes/20211231123253-roamresearch/","summary":" tags: Taking Notes,Online Tools ","title":"RoamResearch"},{"content":" tags: Learning,Taking Notes source: https://www.nateliason.com/blog/roam ","permalink":"https://notes.0081800.xyz/notes/20211231122919-roam_why_i_love_it_and_how_i_use_it/","summary":" tags: Learning,Taking Notes source: https://www.nateliason.com/blog/roam ","title":"Roam: Why I Love It and How I Use It"},{"content":" tags: Learning,Taking Notes,RoamResearch source: https://fortelabs.co/blog/how-to-take-smart-notes/ Luhmann’s slip-box: build second brain context \u0026ndash; its network of associations, relationships, and connections to other information.\nBut Luhmann often remarked that he never forced himself to do anything he didn’t feel like doing: “I only do what is easy. I only write when I immediately know how to do it. If I falter for a moment, I put the matter aside and do something else” (Luhmann et al., 1987, 154f).\n10 principles Writing is not the outcome of thinking; it is the medium in which thinking takes place Do your work as if writing is the only thing that matters Nobody ever starts from scratch Our tools and techniques are only as valuable as the workflow Standardization enables creativity Our work only gets better when exposed to high-quality feedback Work on multiple, simultaneous projects Organize your notes by context, not by topic Always follow the most interesting path Save contradictory ideas The 8 Steps of Taking Smart Notes Make fleeting notes Make literature notes Make permanent notes Now add your new permanent notes to the slip-box Develop your topics, questions and research projects bottom up from within the slip-box Decide on a topic to write about from within the slip-box Turn your notes into a rough draft Edit and proofread your manuscript Context Principle #8: Organize your notes by context, not by topic\nSpecifically, the context in which it will be used. The primary question when deciding where to put something becomes “In which context will I want to stumble upon this again?”\nThoughts I always thought I have not much good ideas. But from now on, I think I will not have much good ideas, if I don\u0026rsquo;t do much research. Or I have not done the research in the correct way. So let me build my second brain.\n","permalink":"https://notes.0081800.xyz/notes/20211231122658-how_to_take_smart_notes_10_principles_to_revolutionize_your_note_taking_and_writing/","summary":"tags: Learning,Taking Notes,RoamResearch source: https://fortelabs.co/blog/how-to-take-smart-notes/ Luhmann’s slip-box: build second brain context \u0026ndash; its network of associations, relationships, and connections to other information.\nBut Luhmann often remarked that he never forced himself to do anything he didn’t feel like doing: “I only do what is easy. I only write when I immediately know how to do it. If I falter for a moment, I put the matter aside and do something else” (Luhmann et al.","title":"How To Take Smart Notes: 10 Principles to Revolutionize Your Note-Taking and Writing"},{"content":" tags: Learning,Taking Notes,org-roam,Org Mode source: https://blog.jethro.dev/posts/how%5Fto%5Ftake%5Fsmart%5Fnotes%5Forg/ Notes aren’t a record of my thinking process. They are my thinking process. – Richard Feynman\nThe primary purpose of note-taking should not be for storing ideas, but for developing them. When we take notes, we should ask: “In what context do I want to see this note again?”\nNote-taking for writing:\nFind topic/research question Research/find literature Read and take notes Draw conclusions / outline text Write Two types of notes:\nFleeting notes by org-journal. Project notes are basically everything else: a talk a book a paper any topic or thought I\u0026rsquo;ve refined from fleeting notes. Workflow with Org-roam:\nM-x org-roam-node-find RET create new node from anywhere. Link to or create the context nodes as the tag, the context node can be empty. Taking notes in one buffer. Thereafter if we want to see the accociated notes in a context, we can see the Backlinks in the context node: M-x org-roam-buffer-toggle RET. ","permalink":"https://notes.0081800.xyz/notes/20211231122318-how_to_take_smart_notes_with_org_mode/","summary":"tags: Learning,Taking Notes,org-roam,Org Mode source: https://blog.jethro.dev/posts/how%5Fto%5Ftake%5Fsmart%5Fnotes%5Forg/ Notes aren’t a record of my thinking process. They are my thinking process. – Richard Feynman\nThe primary purpose of note-taking should not be for storing ideas, but for developing them. When we take notes, we should ask: “In what context do I want to see this note again?”\nNote-taking for writing:\nFind topic/research question Research/find literature Read and take notes Draw conclusions / outline text Write Two types of notes:","title":"How To Take Smart Notes With Org-mode"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20211231122121-learning/","summary":"","title":"Learning"},{"content":" tags: Learning,How to Write ","permalink":"https://notes.0081800.xyz/projects/20211231122047-taking_notes/","summary":" tags: Learning,How to Write ","title":"Taking Notes"},{"content":" tags: Rust 背景 今天看了一下 actix-web 发现该框架支持基于参数的 Extractor，可以非常方便地解析参数（包括 URI、Query、JSON 和 FormData）。\n先来看一个在项目 README.md 中的例子：\nuse actix_web::{get, web, App, HttpServer, Responder}; #[get(\u0026#34;/{id}/{name}/index.html\u0026#34;)] async fn index(web::Path((id, name)): web::Path\u0026lt;(u32, String)\u0026gt;) -\u0026gt; impl Responder { format!(\u0026#34;Hello {}! id:{}\u0026#34;, name, id) } #[actix_web::main] async fn main() -\u0026gt; std::io::Result\u0026lt;()\u0026gt; { HttpServer::new(|| App::new().service(index)) .bind(\u0026#34;127.0.0.1:8080\u0026#34;)? .run() .await } 初看之下觉得很神奇，但细想通过宏实现应该不是特别困难，然后发现其官网还有不是基于宏的运行时调用：\nuse actix_web::{web, App, HttpRequest, HttpServer, Responder}; async fn greet(req: HttpRequest) -\u0026gt; impl Responder { let name = req.match_info().get(\u0026#34;name\u0026#34;).unwrap_or(\u0026#34;World\u0026#34;); format!(\u0026#34;Hello {}!\u0026#34;, \u0026amp;name) } #[actix_web::main] async fn main() -\u0026gt; std::io::Result\u0026lt;()\u0026gt; { HttpServer::new(|| { App::new() .route(\u0026#34;/\u0026#34;, web::get().to(greet)) .route(\u0026#34;/{name}\u0026#34;, web::get().to(greet)) }) .bind((\u0026#34;127.0.0.1\u0026#34;, 8080))? .run() .await } 看下来方法 to 的签名，实现一个参数的提取也不困难：\npub fn to\u0026lt;F, T, R\u0026gt;(mut self, handler: F) -\u0026gt; Self where F: Handler\u0026lt;T, R\u0026gt;, T: FromRequest + \u0026#39;static, R: Future + \u0026#39;static, R::Output: Responder + \u0026#39;static, \u0026lt;R::Output as Responder\u0026gt;::Body: MessageBody, \u0026lt;\u0026lt;R::Output as Responder\u0026gt;::Body as MessageBody\u0026gt;::Error: Into\u0026lt;BoxError\u0026gt;, { self.service = handler_service(handler); self } 但是尝试之后发现 to 同样可以支持多个参数，基于宏实现对于多个参数的支持相对比较简单，但是对于不通过宏实现对多个参数的解析就很神奇了。\n原理探究 经过深入了解之后发现底层原理大体如下\ntrait Handler\u0026lt;T, R\u0026gt;: \u0026#39;static { fn call(\u0026amp;self, t: T) -\u0026gt; R; } trait FromRequest { fn from_request() -\u0026gt; Self; } // 支持空参数的函数当作 Handler 传递 impl\u0026lt;F, R\u0026gt; Handler\u0026lt;(), R\u0026gt; for F where F: Fn() -\u0026gt; R + \u0026#39;static, { fn call(\u0026amp;self, (): ()) -\u0026gt; R { (self)() } } // 支持一个参数的函数当作 Handler 传递 impl\u0026lt;F, A, R\u0026gt; Handler\u0026lt;(A,), R\u0026gt; for F where F: Fn(A) -\u0026gt; R + \u0026#39;static, { fn call(\u0026amp;self, (A,): (A,)) -\u0026gt; R { (self)(A) } } // 支持两个参数的函数作为 Handler 传递 impl\u0026lt;F, A, B, R\u0026gt; Handler\u0026lt;(A, B), R\u0026gt; for F where F: Fn(A, B) -\u0026gt; R + \u0026#39;static, { fn call(\u0026amp;self, (A, B): (A, B)) -\u0026gt; R { (self)(A, B) } } // 支持 0 参数变成 Tuple 后的 from_request 调用 impl FromRequest for () { fn from_request() -\u0026gt; () { () } } // 支持一个参数变成 Tuple 后的 from_request 调用 impl\u0026lt;A\u0026gt; FromRequest for (A, ) where A: FromRequest { fn from_request() -\u0026gt; (A,) { (A::from_request(), ) } } // 支持两个参数变成 Tuple 后的 from_request 调用 impl\u0026lt;A, B\u0026gt; FromRequest for (A, B) where A: FromRequest, B: FromRequest, { fn from_request() -\u0026gt; (A, B) { (A::from_request(), B::from_request()) } } // 委托调用函数，对被委托的函数参数进行解析后调用 fn handle\u0026lt;T, R, F\u0026gt;(handler: F) -\u0026gt; R where F: Handler\u0026lt;T, R\u0026gt;, T: FromRequest + \u0026#39;static, R: \u0026#39;static, { handler.call(T::from_request()) } // 对 i32 实现 FromRequest 支持参数提取 impl FromRequest for i32 { fn from_request() -\u0026gt; i32 { 3 } } fn test0() -\u0026gt; i32 { 0 } fn test1(v: i32) -\u0026gt; i32 { println!(\u0026#34;{}\u0026#34;, v); v } fn test2(v: i32, v2: i32) -\u0026gt; i32 { v + v } fn main() { handle(test0); handle(test1); handle(test2); } 基本思路就是：\n通过一个委托调用的函数，接收一个 trait Object Handler 来抹掉变长参数； 为不同长度的参数的函数类型全部实现 Handler，并将参数变成 Tuple单一参数（通过宏生成）； FromRequest 实现不同长度 Tuple（通过宏生成），这样可以保证不同长度的参数变成 Tuple 后 from_request 可正常调用。 源码参见 使用宏实现 FromRequest 支持多参数 使用宏实现 Handler 支持多参数 ","permalink":"https://notes.0081800.xyz/articles/20211221174651-actix_web_extractor/","summary":"tags: Rust 背景 今天看了一下 actix-web 发现该框架支持基于参数的 Extractor，可以非常方便地解析参数（包括 URI、Query、JSON 和 FormData）。\n先来看一个在项目 README.md 中的例子：\nuse actix_web::{get, web, App, HttpServer, Responder}; #[get(\u0026#34;/{id}/{name}/index.html\u0026#34;)] async fn index(web::Path((id, name)): web::Path\u0026lt;(u32, String)\u0026gt;) -\u0026gt; impl Responder { format!(\u0026#34;Hello {}! id:{}\u0026#34;, name, id) } #[actix_web::main] async fn main() -\u0026gt; std::io::Result\u0026lt;()\u0026gt; { HttpServer::new(|| App::new().service(index)) .bind(\u0026#34;127.0.0.1:8080\u0026#34;)? .run() .await } 初看之下觉得很神奇，但细想通过宏实现应该不是特别困难，然后发现其官网还有不是基于宏的运行时调用：\nuse actix_web::{web, App, HttpRequest, HttpServer, Responder}; async fn greet(req: HttpRequest) -\u0026gt; impl Responder { let name = req.match_info().get(\u0026#34;name\u0026#34;).unwrap_or(\u0026#34;World\u0026#34;); format!(\u0026#34;Hello {}!","title":"actix-web extractors 支持提取任意长度的参数"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20211210181234-%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A6/","summary":"","title":"读书笔记"},{"content":"Words of To Kill A Mockingbird hostess position ease box interval due front 2.5 0 0 2021-12-24T14:03:09Z Back Noun ˈhəʊstəs həʊˈstɛs\na woman who receives or entertains guests\nSynonyms: party-giver/entertainer/hostess\nExamples:\nthe perfect dinner-party hostess incurable position ease box interval due front 2.5 0 0 2021-12-24T14:02:18Z Back Adjective ɪnˈkjʊərəb(ə)l\n(of a sick person or a disease) not able to be cured\nSynonyms: untreatable/inoperable/irremediable/beyond cure\nExamples:\neven when the sick are incurable they are never untreatable incurable diseases Noun ɪnˈkjʊərəb(ə)l\na person who cannot be cured. squat position ease box interval due front 2.5 0 0 2021-12-24T14:01:50Z Back Verb skwɒt\ncrouch or sit with one\u0026rsquo;s knees bent and one\u0026rsquo;s heels close to or touching one\u0026rsquo;s buttocks or the back of one\u0026rsquo;s thighs\nSynonyms: crouch/crouch down/hunker/hunker down/sit on one\u0026rsquo;s haunches/sit on one\u0026rsquo;s heels/sit/bend down/bob down/duck down/hunch/cower/cringe\nExamples:\nI squatted down in front of him unlawfully occupy an uninhabited building or settle on a piece of land\nExamples:\neight families are squatting in the house Adjective skwɒt\nshort and thickset; disproportionately broad or wide\nSynonyms: stocky/dumpy/stubby/stumpy/short/thickset/heavily built/sturdy/sturdily built/heavyset/chunky/solid/low/stumpy/short/small/stocky/stunted\nExamples:\nhe was muscular and squat a squat grey house Noun skwɒt\na squatting position.\na building occupied by people living in it without the legal right to do so\nExamples:\na basement room in a North London squat Examples:\nI didn\u0026rsquo;t know squat about writing plays gossip position ease box interval due front 2.5 0 0 2021-12-24T14:01:30Z Back Noun ˈɡɒsɪp\ncasual or unconstrained conversation or reports about other people, typically involving details that are not confirmed as being true\nSynonyms: chat/talk/conversation/chatter/heart-to-heart/tête-à-tête/blether/blather\nExamples:\nhe became the subject of much local gossip Verb ˈɡɒsɪp\nengage in gossip\nSynonyms: spread rumours/spread gossip/circulate rumours/spread stories/tittle-tattle/tattle/talk/whisper/tell tales/muckrake/chat/talk/converse/speak to each other/discuss things/have a talk/have a chat/have a tête-à-tête/have a conversation/engage in conversation\nExamples:\nthey would start gossiping about her as soon as she left choir position ease box interval due front 2.5 0 0 2021-12-24T14:00:35Z Back Noun ˈkwʌɪə\nan organized group of singers, especially one that takes part in church services or performs in public\nSynonyms: singers/chorus/chorale\nExamples:\na church choir the choir of the University of Ulster royal position ease box interval due front 2.5 0 0 2021-12-24T14:00:19Z Back Adjective ˈrɔɪəl\nhaving the status of a king or queen or a member of their family\nSynonyms: royal/regal/monarchal/monarchial/monarchical/sovereign/kingly/queenly/princely/majestic\nExamples:\ncontributors included members of the royal family Noun ˈrɔɪəl\na member of the royal family\nSynonyms: monarch/sovereign/king/queen/emperor/empress/tsar/tsarina/prince/princess/potentate/head of state/leader/chief/ruler/lord/overlord\nExamples:\nthe royals are coming under the TV microscope a paper size, 636 × 480 mm.\na system of change-ringing using ten bells.\nassured position ease box interval due front 2.5 0 0 2021-12-24T14:00:12Z Back Adjective əˈʃɔːd əˈʃʊəd\nconfident\nSynonyms: self-confident/confident/self-assured/sure of oneself/positive/assertive/self-possessed/self-reliant/poised/filled with aplomb/phlegmatic/level-headed/cool-headed\nExamples:\nan extremely assured performance protected against discontinuance or change\nSynonyms: guaranteed/certain/sure/secure/reliable/dependable/solid/sound/established\nExamples:\nan assured tenancy territorial position ease box interval due front 2.5 0 0 2021-12-24T14:00:04Z Back Adjective ˌtɛrɪˈtɔːrɪəl\nrelating to the ownership of an area of land or sea\nSynonyms: geographical/topographical/zonal/territorial/topical\nExamples:\nterritorial disputes relating to a particular territory, district, or locality\nSynonyms: local/localized/devolved\nExamples:\na bizarre territorial rite Noun ˌtɛrɪˈtɔːrɪəl\n(in the UK) a member of the Territorial Army. prerogative position ease box interval due front 2.5 0 0 2021-12-24T13:59:28Z Back Noun prɪˈrɒɡətɪv\na right or privilege exclusive to a particular individual or class\nSynonyms: entitlement/right/privilege/advantage/due/birthright\nExamples:\nin some countries, higher education is predominantly the prerogative of the rich Adjective prɪˈrɒɡətɪv\narising from the prerogative of the Crown (usually delegated to the government or the judiciary) and based in common law rather than statutory law\nExamples:\nthe monarch retained the formal prerogative power to appoint the Prime Minister amused position ease box interval due front 2.5 0 0 2021-12-24T13:59:12Z Back Adjective əˈmjuːzd\nfinding something funny or entertaining\nExamples:\npeople looked on with amused curiosity heredity position ease box interval due front 2.5 0 0 2021-12-24T13:58:58Z Back Noun hɪˈrɛdɪti\nthe passing on of physical or mental characteristics genetically from one generation to another\nSynonyms: congenital characteristics/congenital traits/genetics/genetic make-up/genes\nExamples:\nthe relative influence of heredity and environment the inheritance of a title, office, or right\nExamples:\na second chamber whose membership is largely based on heredity myopic position ease box interval due front 2.5 0 0 2021-12-24T13:58:47Z Back Adjective mʌɪˈɒpɪk\nshort-sighted\nSynonyms: short-sighted\nExamples:\nmost myopic children can be fitted with glasses to correct their vision streak position ease box interval due front 2.5 0 0 2021-12-24T13:58:36Z Back Noun striːk\na long, thin line or mark of a different substance or colour from its surroundings\nSynonyms: band/line/strip/stripe/vein/slash/bar/mark/smear/smudge/stain/blotch\nExamples:\na streak of oil she could see white streaks in his beard an element of a specified kind in someone\u0026rsquo;s character\nSynonyms: element/vein/trace/touch/dash/strain\nExamples:\nthere\u0026rsquo;s a streak of insanity in the family Lucy had a ruthless streak an act of running naked in a public place so as to shock or amuse others\nExamples:\na streak for charity Verb striːk\ncover (a surface) with streaks\nSynonyms: stripe/band/bar/fleck/mark/daub/smear/smudge/stain\nExamples:\ntears streaking her face, Cynthia looked up his beard was streaked with grey move very fast in a specified direction\nSynonyms: race/dash/rush/run/sprint/bolt/dart/gallop/career/charge/shoot/hurtle/hare/bound/fly/speed/zoom/go hell for leather/plunge/dive/whisk/scurry/scuttle/scamper/scramble\nExamples:\nthe cat streaked across the street run naked in a public place so as to shock or amuse others\nExamples:\nthe singer admitted to streaking in his home town in the seventies incestuous position ease box interval due front 2.5 0 0 2021-12-24T13:58:18Z Back Adjective ɪnˈsɛstjʊəs\ninvolving or guilty of incest\nExamples:\nthe child of an incestuous relationship (of human relations) excessively close and resistant to outside influence\nExamples:\nthe incestuous nature of literary journalism utterly position ease box interval due front 2.5 0 0 2021-12-24T13:57:54Z Back Adverb ˈʌtəli\ncompletely and without qualification; absolutely\nExamples:\nhe looked utterly ridiculous kin position ease box interval due front 2.5 0 0 2021-12-24T13:57:38Z Back Noun kɪn\none\u0026rsquo;s family and relations\nSynonyms: relatives/relations/family/family members/kindred/connections/clan/tribe/kith and kin/one\u0026rsquo;s own flesh and blood/nearest and dearest\nExamples:\nmany elderly people have no kin to turn to for assistance Adjective kɪn\n(of a person) related\nSynonyms: related/akin/allied/close/connected with/cognate with\nExamples:\nhe was kin to the brothers preoccupation position ease box interval due front 2.5 0 0 2021-12-24T13:57:22Z Back Noun prɪˌɒkjʊˈpeɪʃn\nthe state or condition of being preoccupied or engrossed with something\nSynonyms: pensiveness/concentration/engrossment/absorption/self-absorption/musing/thinking/thinking of other things/deep thought/brown study/brooding\nExamples:\nhe began to overcome his preoccupation with germs moral position ease box interval due front 2.5 0 0 2021-12-24T13:56:54Z Back Adjective ˈmɒrəl\nconcerned with the principles of right and wrong behaviour\nSynonyms: virtuous/good/righteous/upright/upstanding/high-minded/right-minded/principled/proper/honourable/honest/just/noble/incorruptible/scrupulous/respectable/decent/irreproachable/truthful/law-abiding/clean-living/chaste/pure/blameless/sinless\nExamples:\nthe moral dimensions of medical intervention a moral judgement holding or manifesting high principles for proper conduct\nSynonyms: virtuous/good/righteous/upright/upstanding/high-minded/right-minded/principled/proper/honourable/honest/just/noble/incorruptible/scrupulous/respectable/decent/irreproachable/truthful/law-abiding/clean-living/chaste/pure/blameless/sinless\nExamples:\nhe prides himself on being a highly moral and ethical person he is a caring, moral man Noun ˈmɒrəl\na lesson that can be derived from a story or experience\nSynonyms: lesson/message/meaning/significance/signification/import/point/precept/teaching\nExamples:\nthe moral of this story was that one must see the beauty in what one has standards of behaviour; principles of right and wrong\nSynonyms: moral code/code of ethics/moral standards/moral values/principles/principles of right and wrong/rules of conduct/principles of behaviour/standards of behaviour/standards/morality/sense of morality/scruples/ideals\nExamples:\nthe corruption of public morals they believe addicts have no morals and cannot be trusted oblique position ease box interval due front 2.5 0 0 2021-12-24T13:56:45Z Back Adjective ə(ʊ)ˈbliːk\nneither parallel nor at right angles to a specified or implied line; slanting\nSynonyms: slanting/slanted/sloping/at an angle/angled/diagonal/aslant/slant/slantwise/sloped/inclined/inclining/tilted/tilting/atilt/skew/on the skew/askew\nExamples:\nwe sat on the settee oblique to the fireplace not expressed or done in a direct way\nSynonyms: indirect/inexplicit/roundabout/circuitous/circumlocutory/implicit/implied/elliptical/evasive/backhanded\nExamples:\nhe issued an oblique attack on the President denoting any case other than the nominative or vocative.\nNoun ə(ʊ)ˈbliːk\nSynonyms: slash/forward slash/solidus/oblique stroke/backslash/diagonal/virgule/slant\nan oblique muscle\nExamples:\nit is the obliques and abdominals which create the well-trained look glove position ease box interval due front 2.5 0 0 2021-12-24T13:56:34Z Back Noun ɡlʌv\na covering for the hand worn for protection against cold or dirt and typically having separate parts for each finger and the thumb\nSynonyms: mitten/mitt/gauntlet\nExamples:\nrubber gloves a pair of black leather gloves Verb ɡlʌv\n(of a wicketkeeper, baseball catcher, etc.) catch, deflect, or touch (the ball) with a gloved hand\nExamples:\nVaughan gloved it and got to his knees to throw revive position ease box interval due front 2.5 0 0 2021-12-24T13:56:20Z Back Verb rɪˈvʌɪv\nrestore to life or consciousness\nSynonyms: resuscitate/bring round/bring to life/bring back/bring someone to their senses/bring someone back to their senses/bring back to consciousness/bring back from the edge of death/regain consciousness/recover consciousness/come round/come to life/come to one\u0026rsquo;s senses/recover/awake/wake up\nExamples:\nboth men collapsed, but were revived soberly position ease box interval due front 2.5 0 0 2021-12-24T13:56:06Z Back Adverb ˈsəʊbəli\nin a serious, sensible, and solemn manner\nExamples:\nwe must soberly assess their actions you spoke very soberly and seriously in your statement with moderation or self-restraint; temperately\nExamples:\nthe citizens lived soberly and simply persevere position ease box interval due front 2.5 0 0 2021-12-24T13:55:58Z Back Verb ˌpəːsɪˈvɪə\ncontinue in a course of action even in the face of difficulty or with little or no indication of success\nSynonyms: persist/continue/carry on/go on/keep on/keep going/not give up/struggle on/hammer away/be persistent/be determined/follow something through/see something through/keep at it/show determination/press ahead/press on/stay with something/not take no for an answer/be tenacious/be pertinacious/be patient/stand one\u0026rsquo;s ground/stand fast/stand firm/hold on/hold out/go the distance/stay the course/plod on/plough on/grind away/stop at nothing/leave no stone unturned\nExamples:\nhis family persevered with his treatment tale position ease box interval due front 2.5 0 0 2021-12-24T13:55:39Z Back Noun teɪl\na fictitious or true narrative or story, especially one that is imaginatively recounted\nSynonyms: story/short story/narrative/anecdote/report/account/record/history/rumour/gossip/hearsay/slander/talk/allegation/tittle-tattle/libel/story\nExamples:\na delightful children\u0026rsquo;s tale tales of witches and warlocks she enjoyed hearing others tell their tales a number or total\nExamples:\nan exact tale of the dead bodies grin position ease box interval due front 2.5 0 0 2021-12-24T13:55:24Z Back Verb ɡrɪn\nsmile broadly\nSynonyms: smile/smile broadly/beam/grin from ear to ear/smile from ear to ear/grin like a Cheshire cat/smirk\nExamples:\nDennis appeared, grinning cheerfully Noun ɡrɪn\na broad smile\nSynonyms: smile/broad smile/smirk\nExamples:\na silly grin gallop position ease box interval due front 2.5 0 0 2021-12-24T13:54:51Z Back Noun ˈɡaləp\nthe fastest pace of a horse or other quadruped, with all the feet off the ground together in each stride\nExamples:\nthe horse broke into a furious gallop a mounted police charge at full gallop Verb ˈɡaləp\n(of a horse) go at the pace of a gallop\nExamples:\nwe galloped along the sand proceed at great speed\nExamples:\ndon\u0026rsquo;t gallop through your speech throaty position ease box interval due front 2.5 0 0 2021-12-24T13:54:23Z Back Adjective ˈθrəʊti\n(of a voice or other sound) deep and husky\nSynonyms: gravelly/husky/rough/guttural/deep/thick/gruff/growly/growling/hoarse/croaky/croaking\nExamples:\nrich, throaty laughter stun position ease box interval due front 2.5 0 0 2021-12-24T13:53:43Z Back Verb stʌn\nknock unconscious or into a dazed or semi-conscious state\nSynonyms: daze/stupefy/knock senseless/knock unconscious/knock out/lay out\nExamples:\nthe man was stunned by a blow to the head astonish or shock (someone) so that they are temporarily unable to react\nSynonyms: astound/amaze/astonish/startle/take someone\u0026rsquo;s breath away/dumbfound/stupefy/overwhelm/stagger/shock/confound/take aback/shake up\nExamples:\nthe community was stunned by the tragedy fidget position ease box interval due front 2.5 0 0 2021-12-24T13:52:55Z Back Verb ˈfɪdʒɪt\nmake small movements, especially of the hands and feet, through nervousness or impatience\nSynonyms: move restlessly/wriggle/squirm/twitch/jiggle/writhe/twist/shuffle/be jittery/be anxious/be agitated\nExamples:\nthe audience began to fidget and whisper Noun ˈfɪdʒɪt\na person who fidgets.\nSynonyms: restless person/bundle of nerves\ncurt position ease box interval due front 2.5 0 0 2021-12-24T13:52:40Z Back Adjective kəːt\nrudely brief\nSynonyms: terse/brusque/abrupt/clipped/blunt/short/monosyllabic/summary/snappy/snappish/sharp/crisp/tart\nExamples:\nhis reply was curt sip position ease box interval due front 2.5 0 0 2021-12-24T13:52:30Z Back Verb sɪp\ndrink (something) by taking small mouthfuls\nSynonyms: drink slowly/drink/taste/sample\nExamples:\nI sat sipping coffee she sipped at her tea Noun sɪp\na small mouthful of liquid\nSynonyms: mouthful/swallow/drink/drop/dram/nip\nExamples:\nshe took a sip of the red wine disgust position ease box interval due front 2.5 0 0 2021-12-24T13:52:15Z Back Noun dɪsˈɡʌst\na feeling of revulsion or strong disapproval aroused by something unpleasant or offensive\nSynonyms: revulsion/repugnance/aversion/distaste/abhorrence/loathing/detestation/odium/execration/horror\nExamples:\nthe sight filled her with disgust some of the audience walked out in disgust Verb dɪsˈɡʌst\ncause (someone) to feel revulsion or strong disapproval\nSynonyms: revolt/repel/repulse/sicken/nauseate/cause to feel nauseous/make shudder/turn someone\u0026rsquo;s stomach/make someone\u0026rsquo;s gorge rise/outrage/shock/horrify/appal/scandalize/offend/affront/dismay/displease/dissatisfy\nExamples:\nthey were disgusted by the violence sting position ease box interval due front 2.5 0 0 2021-12-24T13:51:57Z Back Noun stɪŋ\na small sharp-pointed organ at the end of the abdomen of bees, wasps, ants, and scorpions, capable of inflicting a painful or dangerous wound by injecting poison.\na carefully planned operation, typically one involving deception\nSynonyms: swindle/fraud/piece of deception/trickery/cheat/bit of sharp practice\nExamples:\nfive blackmailers were jailed last week after they were snared in a police sting Verb stɪŋ\nwound or pierce with a sting\nSynonyms: prick/wound/injure/hurt\nExamples:\nhe was stung by a jellyfish a nettle stings if you brush it lightly swindle or exorbitantly overcharge (someone)\nSynonyms: swindle/defraud/cheat/fleece/gull\nExamples:\nI had to buy some boxer shorts at the last minute and got stung for £42.50! convey position ease box interval due front 2.5 0 0 2021-12-24T13:51:34Z Back Verb kənˈveɪ\ntransport or carry to a place\nSynonyms: transport/carry/bring/take/fetch/bear/move/ferry/shuttle/shift/transfer\nExamples:\npipes were laid to convey water to the house transfer the title to (property)\nSynonyms: transfer/give the right of/give the title of/grant/cede/devolve/lease\nExamples:\nno application for registration is required when the property is conveyed following a court order comb position ease box interval due front 2.5 0 0 2021-12-24T13:51:00Z Back Noun kəʊm\na strip of plastic, metal, or wood with a row of narrow teeth, used for untangling or arranging the hair.\na device for separating and dressing textile fibres.\nthe red fleshy crest on the head of a domestic fowl, especially a cock\nExamples:\na grey-speckled hen with a red comb and wattles Verb kəʊm\nuntangle or arrange (the hair) by drawing a comb through it\nSynonyms: groom/untangle/disentangle/smooth out/straighten/arrange/neaten/tidy/dress/rake\nExamples:\nshe combed her hair and put some lipstick on prepare (wool, flax, or cotton) for manufacture with a comb\nSynonyms: separate/dress/card/tease/hackle/heckle/hatchel\nExamples:\nthe wool had been cleaned and combed search carefully and systematically\nSynonyms: search/scour/look around in/explore/sweep/probe/hunt through/look through/scrabble about in/scrabble around in/root about in/root around in/ferret in/ferret about in/ferret in/ferret around in/rummage about in/rummage round in/rummage around in/rummage in/rummage through/forage through/fish about in/fish around in/poke about in/poke around in/dig in/grub about in/grub around in/delve in/go through/sift through/rake/rifle through/ransack/turn over/go through with a fine-tooth comb\nExamples:\npolice combed the area for the murder weapon his mother combed through the cardboard boxes firm position ease box interval due front 2.5 0 0 2021-12-24T13:49:56Z Back Adjective fəːm\nhaving a solid, almost unyielding surface or structure\nSynonyms: hard/solid/unyielding/resistant\nExamples:\nthe bed should be reasonably firm, but not too hard strongly felt and unlikely to change\nExamples:\nhe retains a firm belief in the efficacy of prayer Verb fəːm\nmake more solid or resilient\nExamples:\nhow can I firm up a sagging bustline? Adverb fəːm\nin a resolute and determined manner\nExamples:\nthe Chancellor has held firm to tough economic policies she will stand firm against the proposal Noun fəːm\na business concern, especially one involving a partnership of two or more people\nSynonyms: company/business/concern/enterprise/venture/undertaking/house/establishment/organization/corporation/conglomerate/franchise/cooperative/office/bureau/service/agency/practice/partnership/consortium/syndicate\nExamples:\nstate support for small firms a law firm inflection position ease box interval due front 2.5 0 0 2021-12-24T13:49:48Z Back Noun ɪnˈflɛkʃn\na change in the form of a word (typically the ending) to express a grammatical function or attribute such as tense, mood, person, number, case, and gender\nSynonyms: conjugation/declension\nExamples:\na set of word forms differing only in respect of inflections the modulation of intonation or pitch in the voice\nSynonyms: stress/cadence/rhythm/accentuation/intonation/emphasis/modulation/metre/measure/rise and fall/swing/lilt/beat/change of pitch/change of tone/change of timbre\nExamples:\nshe spoke slowly and without inflection the variety of his vocal inflections a change of curvature from convex to concave at a particular point on a curve\nSynonyms: curving/curvature/bending/turning\nExamples:\nthe point of inflection of the bell-shaped curve elusive position ease box interval due front 2.5 0 0 2021-12-24T13:49:12Z Back Adjective ɪˈl(j)uːsɪv\ndifficult to find, catch, or achieve\nSynonyms: difficult to catch/difficult to find/difficult to track down\nExamples:\nsuccess will become ever more elusive isolation position ease box interval due front 2.5 0 0 2021-12-24T13:48:59Z Back Noun ʌɪsəˈleɪʃən\nthe process or fact of isolating or being isolated\nSynonyms: separation/segregation/setting apart/keeping apart/solitariness/loneliness/friendlessness/lack of contact/exile/sense of exile/aloneness/remoteness/seclusion/loneliness/inaccessibility\nExamples:\nisolation from family and friends may also contribute to anxiety neglect position ease box interval due front 2.5 0 0 2021-12-24T13:48:38Z Back Verb nɪˈɡlɛkt\nfail to care for properly\nSynonyms: uncared for/mistreated/abandoned/forsaken/run down/derelict/dilapidated/tumbledown/ramshackle/untended/unmaintained/fail to look after/fail to care for/fail to provide for/leave alone/abandon\nExamples:\nthe old churchyard has been sadly neglected Noun nɪˈɡlɛkt\nthe state of being uncared for\nSynonyms: disrepair/dilapidation/deterioration/shabbiness/disuse/abandonment\nExamples:\nthe place had a hopeless air of neglect breeding position ease box interval due front 2.5 0 0 2021-12-24T13:48:18Z Back Noun ˈbriːdɪŋ\nthe mating and production of offspring by animals\nSynonyms: reproduction/reproducing/procreation/multiplying/propagation/rearing/raising/nurturing\nExamples:\nthe flooding of the rivers is a trigger for breeding to start the good manners regarded as characteristic of the aristocracy and conferred by heredity\nSynonyms: upbringing/rearing/manners/good manners/gentility/refinement/cultivation/culture/polish/civility/urbanity\nExamples:\nthat\u0026rsquo;s the kind of modesty you get from good breeding slam position ease box interval due front 2.5 0 0 2021-12-24T13:48:05Z Back Verb slam\nshut (a door, window, or lid) forcefully and loudly\nSynonyms: bang/close with a bang/shut with a bang/close noisily/shut noisily/close with a crash/shut with a crash/close with force/shut with force/fling shut\nExamples:\nhe slams the door behind him as he leaves criticize severely\nSynonyms: criticize/find fault with/censure/denounce/condemn/arraign/attack/lambast/pillory/disapprove of/carp at/cavil at/rail against/inveigh against/cast aspersions on/pour scorn on/disparage/denigrate/deprecate/malign/vilify/besmirch/run down/give a bad press to\nExamples:\nthe new TV soap was slammed as being cynical and irresponsible (of a telephone company) take over the account of (a telephone customer) without their permission\nExamples:\nthey will provide compensation in cases where it can be shown that the customer had been slammed Noun slam\na loud bang caused by the forceful shutting of something such as a door\nExamples:\nthe door closed with a slam prison\nExamples:\nif he challenged the judge, he was definitely going to the slam a poetry contest in which competitors recite their entries and are judged by members of the audience, the winner being elected after several elimination rounds\nExamples:\na poetry slam slams will be spreading out to suburban poetry clubs a grand slam (all thirteen tricks) or small slam (twelve tricks), for which bonus points are scored if bid and made.\nvenue position ease box interval due front 2.5 0 0 2021-12-24T13:47:44Z Back Noun ˈvɛnjuː\nthe place where something happens, especially an organized event such as a concert, conference, or sports competition\nSynonyms: place/site/spot/area\nExamples:\nthe club is the city\u0026rsquo;s main venue for live music impress position ease box interval due front 2.5 0 0 2021-12-24T13:47:12Z Back Verb ɪmˈprɛs\nmake (someone) feel admiration and respect\nSynonyms: make an impression on/have an impact on/influence/affect/leave a mark on/move/stir/rouse/excite/inspire/galvanize\nExamples:\nthey immediately impressed the judges I was always impressed by the quality of the students he has to put on an act to impress make a mark or design on (an object) using a stamp or seal\nExamples:\nthe company should impress the cards with a stamp fix an idea in the mind of (someone)\nSynonyms: emphasize to/stress to/bring home to/establish in someone\u0026rsquo;s mind/fix deeply in someone\u0026rsquo;s mind/instil in/inculcate in/drum into/knock into/drive into/din into/ingrain in/leave in no doubt\nExamples:\nnobody impressed on me the need to save apply (an electric current or potential) from an external source.\nNoun ˈɪmprɛs\nan act of making an impression or mark\nExamples:\nbluish marks made by the impress of his fingers Verb ɪmˈprɛs\nforce (someone) to serve in an army or navy\nExamples:\na number of Poles, impressed into the German army venerable position ease box interval due front 2.5 0 0 2021-12-24T13:46:53Z Back Adjective ˈvɛn(ə)rəbl\naccorded a great deal of respect, especially because of age, wisdom, or character\nSynonyms: respected/venerated/revered/reverenced/worshipped/honoured/esteemed/hallowed/august/distinguished/acclaimed/celebrated/lionized\nExamples:\na venerable statesman inaudible position ease box interval due front 2.5 0 0 2021-12-24T13:46:41Z Back Adjective ɪnˈɔːdɪb(ə)l\nunable to be heard\nSynonyms: unheard/not heard/out of earshot\nExamples:\ninaudible pulses of high-frequency sound cord position ease box interval due front 2.5 0 0 2021-12-24T13:45:58Z Back Noun kɔːd\nthin, flexible string or rope made from several twisted strands\nSynonyms: string/thread/thong/lace/ribbon/strap/tape/tie/line/rope/cable/wire/ligature\nExamples:\nhang the picture from a rail on a length of cord my hands were tied with cord ribbed fabric, especially corduroy\nExamples:\nthe cloth for their suits was cord cord jackets a measure of cut wood (usually 128 cu. ft, 3.62 cubic metres).\nVerb kɔːd\nattach a cord to\nExamples:\nyou will need to cord the blind a corded curtain track facade position ease box interval due front 2.5 0 0 2021-12-24T13:45:40Z Back Noun fəˈsɑːd\nthe principal front of a building, that faces on to a street or open space\nSynonyms: front/frontage/face/aspect/elevation/exterior/outside\nExamples:\nthe house has a half-timbered facade a deceptive outward appearance\nSynonyms: show/front/appearance/false display/pretence/simulation/affectation/semblance/illusion/posture/pose/sham/fake/act/masquerade/charade/guise/mask/cloak/veil/veneer\nExamples:\nher flawless public facade masked private despair disgrace position ease box interval due front 2.5 0 0 2021-12-24T13:45:25Z Back Noun dɪsˈɡreɪs\nloss of reputation or respect as the result of a dishonourable action\nSynonyms: dishonour/shame/ignominy/discredit/degradation/disrepute/ill-repute/infamy/scandal/stigma/odium/opprobrium/obloquy/condemnation/vilification/contempt/disrespect/disapproval/disfavour/disapprobation/in disgrace/unpopular/in bad odour\nExamples:\nhe left the army in disgrace if he\u0026rsquo;d gone back it would have brought disgrace on the family Verb dɪsˈɡreɪs\nbring shame or discredit on\nSynonyms: bring shame on/shame/dishonour/discredit/bring into disrepute/degrade/debase/defame/stigmatize/taint/sully/tarnish/besmirch/stain/blacken/drag through the mire/drag through the mud/give a bad name to/put in a bad light/reflect badly on\nExamples:\nyou have disgraced the family name John stiffened his jaw so he wouldn\u0026rsquo;t disgrace himself by crying bulb position ease box interval due front 2.5 0 0 2021-12-24T13:45:07Z Back Noun bʌlb\na rounded underground storage organ present in some plants, notably those of the lily family, consisting of a short stem surrounded by fleshy scale leaves or leaf bases, lying dormant over winter.\nSynonyms: tuber/corm/rhizome\na light bulb.\nan expanded part of a glass tube such as that forming the reservoir of a thermometer.\noblivious position ease box interval due front 2.5 0 0 2021-12-24T13:44:39Z Back Adjective əˈblɪvɪəs\nnot aware of or concerned about what is happening around one\nSynonyms: unaware/unconscious/heedless/unmindful/insensible/unheeding/ignorant/blind/deaf/unsuspecting/unobservant/disregardful/unconcerned/impervious/unaffected/insensitive/indifferent/detached/removed\nExamples:\nshe became absorbed, oblivious to the passage of time reveal position ease box interval due front 2.5 0 0 2021-12-24T13:44:07Z Back Verb rɪˈviːl\nmake (previously unknown or secret information) known to others\nSynonyms: divulge/disclose/tell/let out/let slip/let drop/let fall/give away/give the game away/give the show away/blurt/blurt out/babble/give out/release/leak/betray/open up/unveil/bring out into the open\nExamples:\nBrenda was forced to reveal Robbie\u0026rsquo;s whereabouts he revealed that he had received death threats Noun rɪˈviːl\n(in a film or television programme) a final revelation of information that has previously been kept from the characters or viewers\nExamples:\nthe big reveal at the end of the movie answers all questions Noun rɪˈviːl\neither side surface of an aperture in a wall for a door or window\nExamples:\nthe gate can be easily fitted to the face or reveal of a window or door aperture the deep reveals of small square windows mysterious position ease box interval due front 2.5 0 0 2021-12-24T13:43:30Z Back Adjective mɪˈstɪərɪəs\ndifficult or impossible to understand, explain, or identify\nSynonyms: puzzling/strange/peculiar/curious/funny/queer/odd/weird/bizarre/mystifying/inexplicable/baffling/perplexing/bewildering/confusing/uncanny/dark/impenetrable/incomprehensible/unexplainable/unfathomable/Delphic/sibylline/unaccountable/insoluble/obscure\nExamples:\nhis colleague had vanished in mysterious circumstances a mysterious benefactor provided the money obedience position ease box interval due front 2.5 0 0 2021-12-24T13:42:49Z Back Noun ə(ʊ)ˈbiːdɪəns\ncompliance with an order, request, or law or submission to another\u0026rsquo;s authority\nSynonyms: compliance/acquiescence/tractability/tractableness/amenability\nExamples:\nchildren were taught to show their parents obedience obedience to moral standards sickening position ease box interval due front 2.5 0 0 2021-12-24T13:41:59Z Back Adjective ˈsɪk(ə)nɪŋ\ncausing or liable to cause a feeling of nausea or disgust\nSynonyms: nauseating/stomach-turning/stomach-churning/repulsive/revolting/disgusting/repellent/repugnant/appalling/abominable/hideous/horrible/awful/dreadful/terrible/obnoxious/nauseous/vile/nasty/foul/loathsome/offensive/objectionable/off-putting/distasteful/disagreeable/uninviting\nExamples:\na sickening stench of blood she hit the ground with a sickening thud definite position ease box interval due front 2.5 0 0 2021-12-24T13:41:30Z Back Adjective ˈdɛf(ɪ)nɪt\nclearly stated or decided; not vague or doubtful\nSynonyms: explicit/specific/express/precise/exact/defined/well defined/clear-cut/unmistakable/irrefutable/unequivocal/unambiguous/certain/undisputed/decided/marked/distinct/unquestioned/not in question/not in doubt\nExamples:\nwe had no definite plans comic position ease box interval due front 2.5 0 0 2021-12-24T13:40:50Z Back Adjective ˈkɒmɪk\ncausing or meant to cause laughter\nSynonyms: humorous/funny/droll/amusing/entertaining/diverting/absurd/ridiculous/comical/chucklesome/farcical/silly/slapstick/hilarious/uproarious/hysterical/hysterically funny/zany\nExamples:\na comic monologue Noun ˈkɒmɪk\na comedian\nSynonyms: comedian/comedienne/funny man/funny woman/comedy actor/comedy actress/humorist/wit/wag/quipster\nExamples:\nhe is training as a stand-up comic a periodical containing comic strips, intended chiefly for children\nSynonyms: cartoon paper/comic paper/funny magazine/comic book/graphic novel\nExamples:\nthe shop sold newspapers and children\u0026rsquo;s comics incapable position ease box interval due front 2.5 0 0 2021-12-24T13:40:06Z Back Adjective ɪnˈkeɪpəbl\nunable to do or achieve (something)\nSynonyms: unable to/not capable of/lacking the ability to/not equipped to/lacking the experience to\nExamples:\nWilson blushed and was incapable of speech unable to behave rationally or manage one\u0026rsquo;s affairs\nSynonyms: incapacitated/helpless/powerless/impotent\nExamples:\nthe pilot may become incapable from the lack of oxygen stale position ease box interval due front 2.5 0 0 2021-12-24T13:39:42Z Back Adjective steɪl\n(of food) no longer fresh and pleasant to eat; hard, musty, or dry\nSynonyms: dry/dried out/hard/hardened/old/past its best/past its sell-by date\nExamples:\nstale bread Verb steɪl\nmake or become stale\nExamples:\nshe would cut up yesterday\u0026rsquo;s leftover bread, staling now Verb steɪl\n(of an animal, especially a horse) urinate\nExamples:\nthe horse staled while he was riding pasture position ease box interval due front 2.5 0 0 2021-12-24T13:39:21Z Back Noun ˈpɑːstʃə\nland covered with grass and other low plants suitable for grazing animals, especially cattle or sheep\nSynonyms: grazing land/grazing/grassland/grass/pastureland/pasturage/range/ley/paddock/croft\nExamples:\nareas of rich meadow pasture many a horse was put out to pasture there grassy pastures a range of pasture grasses used to refer to a person\u0026rsquo;s situation in life\nExamples:\nshe left the office for pastures new Verb ˈpɑːstʃə\nput (animals) to graze in a pasture\nExamples:\nthey pastured their cows in the water meadow antagonize position ease box interval due front 2.5 0 0 2021-12-24T13:38:56Z Back Verb anˈtaɡənʌɪz\ncause (someone) to become hostile or angry\nSynonyms: arouse hostility in/alienate/set someone against someone else/estrange/disaffect\nExamples:\nhe antagonized fellow architects by criticizing traditional values she seemed reckless in the way she deliberately tried to antagonize her interviewers (of a substance) act as an antagonist of (a substance or its action)\nExamples:\ntwo other drugs antagonized the antidepressant-like effect pigsty position ease box interval due front 2.5 0 0 2021-12-24T13:38:23Z Back Noun ˈpɪɡstʌɪ\na pen or enclosure for a pig or pigs.\nSynonyms: complete mess/pigsty\npigpen position ease box interval due front 2.5 0 0 2021-12-24T13:38:09Z Back Noun ˈpɪɡpɛn\na pigsty.\nSynonyms: complete mess/pigsty\ntriumphant position ease box interval due front 2.5 0 0 2021-12-24T13:36:00Z Back Adjective trʌɪˈʌmf(ə)nt\nhaving won a battle or contest; victorious\nSynonyms: victorious/successful/winning/prize-winning/conquering\nExamples:\ntwo of their triumphant Cup team a comic fairy tale about innocence triumphant sleeve position ease box interval due front 2.5 0 0 2021-12-24T13:35:39Z Back Noun sliːv\nthe part of a garment that wholly or partly covers a person\u0026rsquo;s arm\nSynonyms: sleeve\nExamples:\na shirt with the sleeves rolled up a protective paper or cardboard cover for a record, CD, or DVD\nSynonyms: wrapping/wrapper/wrap/sleeve/sheath/sheathing/envelope/cover/covering\nExamples:\nan album sleeve a windsock.\ntoe position ease box interval due front 2.5 0 0 2021-12-24T13:35:26Z Back Noun təʊ\nany of the five digits at the end of the human foot\nSynonyms: bottom/base/toe/edge/end/lowest part/lowest point/lower limits\nExamples:\nhe cut his big toe on a sharp stone the lower end, tip, or point of something.\nVerb təʊ\npush, touch, or kick with one\u0026rsquo;s toe\nExamples:\nhe toed off his shoes and flexed his feet walk with the toes pointed in (or out)\nExamples:\nhe toes out when he walks crease position ease box interval due front 2.5 0 0 2021-12-24T13:35:00Z Back Noun kriːs\na line or ridge produced on paper or cloth by folding, pressing, or crushing\nSynonyms: fold/groove/ridge/furrow/line/ruck/pleat/tuck/corrugation\nExamples:\nkhaki trousers with knife-edge creases any of a number of lines marked on the pitch at specified places, especially one defining the position of a batter.\nan area around the goal in ice hockey or lacrosse which the players may not enter unless the puck or the ball has already done so\nExamples:\nhe was caught in the crease without the puck Verb kriːs\nmake a crease in (cloth or paper)\nSynonyms: crumple/wrinkle/crinkle/scrunch up/rumple/line/pucker/crimp/ruck up/gather/furrow/press/iron/put a crease in/fold\nExamples:\nhe sank into the chair, careful not to crease his dinner jacket burst out or cause to burst out laughing\nSynonyms: entertain/make laugh/delight/divert/gladden/cheer/cheer up/please/charm/tickle/convulse/beguile/enliven/regale\nExamples:\nJo could imitate anybody and always made him crease up hit or punch (someone) hard\nExamples:\nclap or I\u0026rsquo;ll crease you (of a bullet) graze (someone or something)\nExamples:\na bullet creased his thigh kerchief position ease box interval due front 2.5 0 0 2021-12-24T13:34:20Z Back Noun ˈkəːtʃɪf ˈkəːtʃiːf\na piece of fabric used to cover the head. appoint position ease box interval due front 2.5 0 0 2021-12-24T13:33:52Z Back Verb əˈpɔɪnt\nassign a job or role to (someone)\nSynonyms: nominate/name/designate/install as/commission/engage/adopt/co-opt\nExamples:\nshe has been appointed to the board they appointed her as personnel manager determine or decide on (a time or a place)\nSynonyms: specify/determine/assign/designate/allot/set/fix/arrange/choose/decide on/establish/settle/authorize/ordain/prescribe/decree\nExamples:\nthey appointed a day in May for the meeting decide the disposition of (property of which one is not the owner) under powers granted by the owner\nExamples:\ntrustees appoint the capital to the beneficiaries tremble position ease box interval due front 2.5 0 0 2021-12-24T13:33:15Z Back Verb ˈtrɛmbl\n(of a person or part of the body) shake involuntarily, typically as a result of anxiety, excitement, or frailty\nSynonyms: shake/shake like a leaf/quiver/twitch/palpitate\nExamples:\nIsobel was trembling with excitement Noun ˈtrɛmbl\na trembling feeling, movement, or sound\nSynonyms: tremor/shake/shakiness/trembling/quiver/twitch/twitchiness\nExamples:\nthere was a slight tremble in his voice a physical or emotional condition marked by trembling.\nviolently position ease box interval due front 2.5 0 0 2021-12-24T13:32:28Z Back Adverb ˈvʌɪələntli\nusing physical force intended to hurt, damage, or kill someone or something\nExamples:\nI was once violently assaulted on a bus in a very strong or vigorous manner\nExamples:\nhe coughed violently the aircraft began violently shaking fuss position ease box interval due front 2.5 0 0 2021-12-24T13:31:53Z Back Noun fʌs\na display of unnecessary or excessive excitement, activity, or interest\nSynonyms: ado/excitement/agitation/uproar/to-do/stir/commotion/confusion/disturbance/tumult/hubbub/rigmarole/folderol/brouhaha/furore/much ado about nothing\nExamples:\nI don\u0026rsquo;t know what all the fuss is about Verb fʌs\nshow unnecessary or excessive concern about something\nSynonyms: worry/fret/be agitated/be worried/take pains/make a big thing out of\nExamples:\nshe\u0026rsquo;s always fussing about her food accustom position ease box interval due front 2.5 0 0 2021-12-24T13:31:16Z Back Verb əˈkʌstəm\nmake someone or something accept (something) as normal or usual\nSynonyms: adapt/adjust/acclimatize/attune/habituate/accommodate/assimilate/acculturate/inure/harden/condition/reconcile/become resigned/resign\nExamples:\nI accustomed my eyes to the lenses sixth-form education is supposed to accustom pupils to think for themselves attitude position ease box interval due front 2.5 0 0 2021-12-24T13:30:02Z Back Noun ˈatɪtjuːd\na settled way of thinking or feeling about something\nSynonyms: point of view/view/viewpoint/vantage point/frame of mind/way of thinking/way of looking at things/school of thought/outlook/angle/slant/perspective/reaction/stance/standpoint/position/inclination/orientation/approach\nExamples:\nhe was questioned on his attitude to South Africa being competitive is an attitude of mind truculent or uncooperative behaviour\nExamples:\nI asked the waiter for a clean fork and all I got was attitude the orientation of an aircraft or spacecraft, relative to the direction of travel.\nshin position ease box interval due front 2.5 0 0 2021-12-24T13:29:46Z Back Noun ʃɪn\nthe front of the leg below the knee. Verb ʃɪn\nclimb quickly up or down by gripping with one\u0026rsquo;s arms and legs\nSynonyms: climb/climb down/climb up/clamber down/clamber up/scramble down/scramble up/scrabble down/scrabble up/swarm down/swarm up/shoot down/shoot up/go down/go up\nExamples:\nhe shinned up a tree morbid position ease box interval due front 2.5 0 0 2021-12-24T13:28:50Z Back Adjective ˈmɔːbɪd\ncharacterized by an unusual interest in disturbing and unpleasant subjects, especially death and disease\nSynonyms: ghoulish/macabre/unhealthy/gruesome/grisly/grotesque/ghastly/horrible/unwholesome/death-obsessed\nExamples:\nhe had a morbid fascination with the horrors of contemporary warfare I used to enjoy murder trials—not for any morbid curiosity, but for the drama unfolding of the nature of or indicative of disease\nSynonyms: diseased/pathological\nExamples:\nthe treatment of morbid obesity irritation position ease box interval due front 2.5 0 0 2021-12-24T13:28:35Z Back Noun ˌɪrɪˈteɪʃn\nthe state of feeling annoyed, impatient, or slightly angry\nSynonyms: annoyance/infuriation/exasperation/vexation/indignation/impatience/crossness/displeasure/resentment/gall/chagrin/pique\nExamples:\nmuch to my irritation, Chris fell asleep inflammation or other discomfort in a body part caused by reaction to an irritant substance\nExamples:\nsome chemicals cause a direct irritation to the skin leading to dermatitis irritable position ease box interval due front 2.5 0 0 2021-12-24T13:28:10Z Back Adjective ˈɪrɪtəbl\nhaving or showing a tendency to be easily annoyed\nSynonyms: bad-tempered/irascible/tetchy/testy/touchy/scratchy/grumpy/grouchy/moody/crotchety/in a mood/in a bad mood/cantankerous/curmudgeonly/ill-tempered/ill-natured/ill-humoured/peevish/having got out of bed on the wrong side/cross/fractious/disagreeable/pettish/crabbed/crabby/waspish/prickly/peppery/crusty/splenetic/shrewish/short-tempered/hot-tempered/quick-tempered/dyspeptic/choleric/bilious/liverish/cross-grained\nExamples:\nshe was tired and irritable (of a body part) abnormally sensitive.\nentail position ease box interval due front 2.5 0 0 2021-12-24T13:27:43Z Back Verb ɪnˈteɪl ɛnˈteɪl\ninvolve (something) as a necessary or inevitable part or consequence\nSynonyms: necessitate/make necessary/require/need/demand/call for\nExamples:\na situation which entails considerable risks limit the inheritance of (property) over a number of generations so that ownership remains within a particular family or group\nExamples:\nher father\u0026rsquo;s estate was entailed on a cousin Noun ɪnˈteɪl ɛnˈteɪl\na limitation of the inheritance of property to certain heirs over a number of generations\nExamples:\nthe damage being done in England by entails landed property was governed by primogeniture and entail subpoena position ease box interval due front 2.5 0 0 2021-12-24T13:26:55Z Back Noun səˈpiːnə\na writ ordering a person to attend a court\nSynonyms: order/command/directive/direction/decree/edict/injunction/mandate/dictate/commandment/diktat/demand/bidding/requirement/stipulation/charge/ruling/mandate/pronouncement\nExamples:\na subpoena may be issued to compel their attendance they were all under subpoena to appear Verb səˈpiːnə\nsummon (someone) with a subpoena\nSynonyms: summon/summons/serve with a summons/subpoena/serve with a writ/call\nExamples:\nthe Queen is above the law and cannot be subpoenaed jury position ease box interval due front 2.5 0 0 2021-12-24T13:26:36Z Back Noun ˈdʒʊəri\na body of people (typically twelve in number) sworn to give a verdict in a legal case on the basis of evidence submitted to them in court\nExamples:\nthe jury returned unanimous guilty verdicts Verb ˈdʒʊəri\njudge (an art or craft exhibition or exhibit)\nExamples:\nthe exhibition was juried by a nationally acclaimed artist he had a painting in the juried exhibition Adjective ˈdʒʊəri\n(of a mast or other fitting) improvised or temporary\nSynonyms: temporary/provisional/interim/pro tem/short-term/working/makeshift/improvised/emergency/impromptu/rough and ready\nExamples:\nwe need to get that jury rudder fixed strap position ease box interval due front 2.5 0 0 2021-12-24T13:26:05Z Back Noun strap\na strip of leather, cloth, or other flexible material, used to fasten, secure, or carry something or to hold on to something\nSynonyms: thong/tie/cord/band/belt/tape\nExamples:\nher bra strap the strap of his shoulder bag Verb strap\nfasten or secure in a specified place or position with a strap\nSynonyms: fasten/secure/tie/bind/make fast/lash\nExamples:\nI had to strap the bag to my bicycle the children were strapped into their car seats beat (someone) with a strip of leather\nSynonyms: beat/flog/whip/leather/belt/thrash/lash/horsewhip/birch/cane/strike/hit/clout\nExamples:\nI expected when my dad walked in that he\u0026rsquo;d strap him elucidate position ease box interval due front 2.5 0 0 2021-12-24T13:25:29Z Back Verb ɪˈl(j)uːsɪdeɪt\nmake (something) clear; explain\nSynonyms: explain/make clear/make plain/illuminate/shed light on/throw light on/clarify\nExamples:\nwork such as theirs will help to elucidate this matter in what follows I shall try to elucidate what I believe the problems to be circuit position ease box interval due front 2.5 0 0 2021-12-24T13:25:04Z Back Noun ˈsəːkɪt\na roughly circular line, route, or movement that starts and finishes at the same place\nSynonyms: lap/turn/tour/round/circle/orbit/revolution/loop\nExamples:\nI ran a circuit of the village an established itinerary of events or venues used for a particular activity, typically involving sport or public performance\nExamples:\nthe alternative cabaret circuit a complete and closed path around which a circulating electric current can flow\nExamples:\nthe maximum number of light fittings on a circuit is twelve Verb ˈsəːkɪt\nmove all the way around (a place or thing)\nExamples:\nthe trains will follow the Northern line, circuiting the capital mule position ease box interval due front 2.5 0 0 2021-12-24T13:23:32Z Back Noun mjuːl\nthe offspring of a donkey and a horse (strictly, a male donkey and a female horse), typically sterile and used as a beast of burden.\nSynonyms: ass\na hybrid plant or animal, especially a sterile one.\na kind of spinning machine producing yarn on spindles, invented by Samuel Crompton in 1779.\na small tractor or locomotive, typically one that is electrically powered.\na coin with the obverse and reverse of designs not originally intended to be used together.\nNoun mjuːl\na woman\u0026rsquo;s slipper or light shoe without a back.\nSynonyms: mule/moccasin/house shoe/pump/mule\nwitness position ease box interval due front 2.5 0 0 2021-12-24T13:23:09Z Back Noun ˈwɪtnɪs\na person who sees an event, typically a crime or accident, take place\nSynonyms: observer/onlooker/looker-on/eyewitness/spectator/viewer/watcher\nExamples:\npolice are appealing for witnesses to the accident I was witness to one of the most amazing comebacks in sprinting history evidence; proof\nSynonyms: evidence/indication/proof/testimony\nExamples:\nthe memorial service was witness to the wide circle of his interests a line or remnant of an original surface on a workpiece to show how much material has been removed or the shape of the original outline.\nVerb ˈwɪtnɪs\nsee (an event, typically a crime or accident) happen\nSynonyms: see/observe/watch/look on at/be a witness to/view/note/notice/spot\nExamples:\nstaff who witnessed the murder have knowledge of (a development) from observation or experience\nExamples:\nwhat we are witnessing is the birth of a new political entity openly profess one\u0026rsquo;s religious faith Examples:\none of the purposes of his coming was to nerve the disciples to witness to Jesus impassive position ease box interval due front 2.5 0 0 2021-12-24T13:19:27Z Back Adjective ɪmˈpasɪv\nnot feeling or showing emotion\nSynonyms: expressionless/unexpressive/inexpressive/inscrutable/blank/deadpan/poker-faced/straight-faced/dispassionate\nExamples:\nhis cold, impassive face casual position ease box interval due front 2.5 0 0 2021-12-24T13:18:58Z Back Adjective ˈkaʒʊ(ə)l\nrelaxed and unconcerned\nSynonyms: relaxed/friendly/natural/informal/unceremonious/unpretentious/easy-going/free and easy/uninhibited/open\nExamples:\na casual attitude to life not regular or permanent.\nSynonyms: temporary/part-time/impermanent/freelance- happening by chance; accidental\nSynonyms: chance/accidental/random/unintentional/unplanned/unintended/inadvertent/unexpected/unforeseen/unanticipated/unlooked-for/occurring by accident/occurring by chance/fortuitous/coincidental/fluky/serendipitous/adventitious/aleatory\nExamples:\nhe pretended it was a casual meeting without formality of style or manner, in particular (of clothing) suitable for everyday wear rather than formal occasions\nSynonyms: informal/not formal/relaxed/comfortable/sloppy/leisure/sportif/everyday\nExamples:\na casual short-sleeved shirt an ideal coat for casual occasions Noun ˈkaʒʊ(ə)l\na person who does something irregularly Examples:\na number of casuals became regular customers clothes or shoes suitable for everyday wear rather than formal occasions Examples:\nshe designs women\u0026rsquo;s casuals a youth belonging to a subculture characterized by the wearing of expensive casual clothing and frequently associated with football hooliganism. sack position ease box interval due front 2.50 1 0.01 2021-12-24T00:48:38Z Back Noun sak\na large bag made of a strong material such as hessian, thick paper, or plastic, used for storing and carrying goods.\nSynonyms: bag/pack/pouch/pocket- a woman\u0026rsquo;s short loose unwaisted dress, typically narrowing at the hem, popular especially in the 1950s.\ndismissal from employment\nSynonyms: dismissal/discharge/redundancy/termination of employment/one\u0026rsquo;s marching orders\nExamples:\nhe got the sack for swearing they were given the sack bed, especially as regarded as a place for sex.\nSynonyms: bed- a base.\nan act of tackling of a quarterback behind the line of scrimmage.\nVerb sak\ndismiss from employment\nSynonyms: dismiss/give someone their notice/throw out/get rid of/lay off/let go/discharge/cashier\nExamples:\nany official found to be involved would be sacked on the spot tackle (a quarterback) behind the line of scrimmage before they can throw a pass\nExamples:\nOregon intercepted five of his passes and sacked him five times put into a sack or sacks Examples:\na small part of his wheat had been sacked Verb sak\n(chiefly in historical contexts) plunder and destroy (a captured town or building)\nSynonyms: ravage/lay waste/devastate/ransack/strip/fleece/plunder/pillage/loot/rob/raid\nExamples:\nthe fort was rebuilt in AD 158 and was sacked again in AD 197 Noun sak\nthe pillaging of a town or city\nSynonyms: laying waste/ransacking/plunder/plundering/sacking/looting/ravaging/pillage/pillaging/devastation/depredation/stripping/robbery/robbing/raiding\nExamples:\nthe sack of Rome Noun sak\na dry white wine formerly imported into Britain from Spain and the Canaries Examples:\nthe Poet Laureate traditionally gets a ‘butt of sack’, equivalent to roughly 600 bottles of sherry standstill position ease box interval due front 2.50 1 0.01 2021-12-24T00:31:16Z Back Noun ˈstan(d)stɪl\na situation or condition in which there is no movement or activity at all\nSynonyms: halt/stop/dead stop/stand\nExamples:\nthe traffic came to a standstill skew position ease box interval due front 2.50 2 1.00 2021-12-25T00:13:47Z Back Adjective skjuː\nneither parallel nor at right angles to a specified or implied line; askew; crooked\nSynonyms: crooked/awry/askew/lopsided/uneven/asymmetrical/to one side/off-centre/skewed/skew/misaligned\nExamples:\nhis hat looked slightly skew a skew angle (of a pair of lines) neither parallel nor intersecting.\n(of a statistical distribution) not symmetrical.\nNoun skjuː\nan oblique angle; a slant.\nSynonyms: slope/incline/tilt/ramp/gradient/pitch/angle/rake/cant/camber/skew/leaning/inclination/shelving/listing- a bias towards one particular group or subject\nSynonyms: misrepresentation/perversion/twisting/falsification/misreporting/misstatement/manipulation\nExamples:\nthe paper had a working-class skew the state of not being symmetrical.\nVerb skjuː\nsuddenly change direction or position\nSynonyms: distort/misrepresent/change/alter/pervert/falsify/warp/skew/put the wrong slant on/misinterpret/misconstrue/misstate/misquote/quote out of context/take out of context/misreport\nExamples:\nthe car had skewed across the track make biased or distorted in a way that is regarded as inaccurate, unfair, or misleading\nSynonyms: biased/prejudiced/partisan/one-sided/slanted/skewed/coloured/interested/parti pris/discriminatory/preferential/jaundiced\nExamples:\nthe curriculum is skewed towards the practical subjects cause (a distribution) to be asymmetrical\nSynonyms: asymmetrical/unsymmetrical/uneven/unevenly balanced/unbalanced/off-balance/off-centre/unequal/askew/skew/skewed/squint/tilted/tilting/crooked/sloping/slanted/aslant/one-sided/out of true/out of line/to one side/awry\nExamples:\nthe distributions were skewed to the right oath position ease box interval due front 2.50 1 0.01 2021-12-24T00:53:20Z Back Noun əʊθ\na solemn promise, often invoking a divine witness, regarding one\u0026rsquo;s future action or behaviour\nSynonyms: vow/sworn statement/promise/pledge/avowal/affirmation/attestation/word of honour/word/bond/guarantee/guaranty\nExamples:\nthey took an oath of allegiance to the king a coarse or blasphemous word or phrase used to express anger or other strong emotion\nSynonyms: swear word/profanity/expletive/four-letter word/dirty word/obscenity/imprecation/curse/malediction/blasphemy\nExamples:\nhe exploded with a mouthful of oaths he was muttering foul oaths academic position ease box interval due front 2.50 2 1.00 2021-12-25T00:25:14Z Back Adjective ˌakəˈdɛmɪk\nrelating to education and scholarship\nSynonyms: educational/scholastic/instructional/pedagogical/scholarly/studious/literary/well read/intellectual/clever/erudite/learned/educated/cultured/bookish/highbrow/pedantic/donnish/cerebral/serious\nExamples:\nacademic achievement he had no academic qualifications not of practical relevance; of only theoretical interest\nSynonyms: theoretical/conceptual/notional/philosophical/unpragmatic/hypothetical/speculative/conjectural/conjectured/suppositional/putative\nExamples:\nthe debate has been largely academic Noun ˌakəˈdɛmɪk\na teacher or scholar in a university or other institute of higher education\nSynonyms: scholar/lecturer/don/teacher/educator/instructor/trainer/tutor/professor/fellow/man of letters/woman of letters/highbrow/thinker/bluestocking\nExamples:\nthe EU offers grants to academics for research on approved projects dramatic position ease box interval due front 2.50 1 0.01 2021-12-24T00:25:54Z Back Adjective drəˈmatɪk\nrelating to drama or the performance or study of drama Examples:\nthe dramatic arts a dramatic society (of an event or circumstance) sudden and striking\nSynonyms: considerable/substantial/sizeable/goodly/fair/reasonable/tidy/marked/pronounced\nExamples:\na dramatic increase in recorded crime trauma position ease box interval due front 2.50 2 1.00 2021-12-25T00:31:10Z Back Noun ˈtrɔːmə ˈtraʊmə\na deeply distressing or disturbing experience\nSynonyms: torment/agony/suffering/pain\nExamples:\na personal trauma like the death of a child many experience the trauma of divorce physical injury\nSynonyms: injury/damage/hurt/wound/wounding/sore/bruise/cut/laceration/lesion/abrasion/contusion\nExamples:\nrupture of the diaphragm caused by blunt trauma character position ease box interval due front 2.50 2 1.00 2021-12-25T00:26:15Z Back Noun ˈkarɪktə\nthe mental and moral qualities distinctive to an individual\nSynonyms: personality/nature/disposition/temperament/temper/mentality/turn of mind/psychology/psyche/constitution/make-up/make/stamp/mould/cast\nExamples:\nrunning away was not in keeping with her character a person in a novel, play, or film\nSynonyms: persona/person/role/part\nExamples:\nthe author\u0026rsquo;s compassionate identification with his characters a printed or written letter or symbol.\na characteristic, especially one that assists in the identification of a species.\nSynonyms: sort/variety/kind/style/type/category/order/breed/species/class/designation/specification/genre/genus/brand/make/character/ilk/kidney/grain/stamp/mould=Verb= ˈkarɪktə\ninscribe or write (something).\ndebate position ease box interval due front 2.50 1 0.01 2021-12-24T00:30:53Z Back Noun dɪˈbeɪt\na formal discussion on a particular matter in a public meeting or legislative assembly, in which opposing arguments are put forward and which usually ends with a vote\nSynonyms: discussion/exchange of views/discourse/parley\nExamples:\nlast night\u0026rsquo;s debate on the Education Bill Verb dɪˈbeɪt\nargue about (a subject), especially in a formal manner\nSynonyms: discuss/confer about/talk over/talk through/talk about/exchange views on/exchange views about/thrash out/argue/argue about/argue the pros and cons of/dispute/wrangle over/bandy words concerning/contend over/contest/controvert/moot\nExamples:\nMPs debated the issue in the Commons members of the society debated for five nights connivance position ease box interval due front 2.50 1 0.01 2021-12-24T00:42:29Z Back Noun kəˈnʌɪvns\nwillingness to allow or be secretly involved in an immoral or illegal act\nSynonyms: collusion/complicity/collaboration/involvement/assistance/abetting\nExamples:\nthis infringement of the law had taken place with the connivance of officials injury position ease box interval due front 2.50 2 1.00 2021-12-25T00:26:39Z Back Noun ˈɪn(d)ʒ(ə)ri\nan instance of being injured\nSynonyms: wound/bruise/cut/gash/tear/rent/slash/gouge/scratch/graze/laceration/abrasion/contusion/lesion/sore\nExamples:\nshe suffered an injury to her back an ankle injury head injuries damage to a person\u0026rsquo;s feelings\nSynonyms: offence/abuse\nExamples:\ncompensation for injury to feelings acrimonious position ease box interval due front 2.50 2 1.00 2021-12-25T00:37:43Z Back Adjective ˌakrɪˈməʊnɪəs\n(typically of speech or discussion) angry and bitter\nSynonyms: bitter/rancorous/caustic/acerbic/scathing/sarcastic/acid/harsh/sharp/razor-edged/cutting/astringent/trenchant/mordant/virulent\nExamples:\nan acrimonious dispute about wages indulge position ease box interval due front 2.50 2 1.00 2021-12-24T03:10:08Z Back Verb ɪnˈdʌldʒ\nallow oneself to enjoy the pleasure of\nSynonyms: wallow in/give oneself up to/give way to/yield to/abandon oneself to/give rein to/give free rein to\nExamples:\nwe indulged in a cream tea allow (someone) to enjoy something desired\nSynonyms: pamper/spoil/overindulge/coddle/mollycoddle/cosset/nanny/nursemaid/mother/baby/pet/spoon-feed/overparent\nExamples:\na luxury service used to indulge the chief executive gullet position ease box interval due front 2.50 1 0.01 2021-12-24T00:49:24Z Back Noun ˈɡʌlɪt\nthe passage by which food passes from the mouth to the stomach; the oesophagus.\nSynonyms: oesophagus/throat/pharynx\nstir position ease box interval due front 2.50 1 0.01 2021-12-24T00:55:11Z Back Verb stəː\nmove a spoon or other implement round in (a liquid or other substance) in order to mix it thoroughly\nSynonyms: mix/blend/agitate\nExamples:\nDesmond stirred his tea and ate a biscuit pour in the cream and stir well move or cause to move slightly\nSynonyms: move slightly/change one\u0026rsquo;s position/twitch/quiver/tremble/disturb/rustle/shake/move/flutter/agitate/swish\nExamples:\nnothing stirred except the wind a gentle breeze stirred the leaves arouse strong feeling in (someone); move or excite\nSynonyms: arouse/rouse/kindle/inspire/stimulate/excite/awaken/waken/quicken/animate/activate/galvanize/fire/electrify/whet\nExamples:\nthey will be stirred to action by what is written Noun stəː\na slight physical movement Examples:\nI stood, straining eyes and ears for the faintest stir a commotion\nSynonyms: commotion/disturbance/fuss/ado/excitement/flurry/uproar/ferment/brouhaha/furore/turmoil/sensation\nExamples:\nthe event caused quite a stir an act of stirring food or drink\nExamples:\nhe gives his Ovaltine a stir Noun stəː\nprison Examples:\nI\u0026rsquo;ve spent twenty-eight years in stir throat position ease box interval due front 2.50 1 0.01 2021-12-24T00:56:25Z Back Noun θrəʊt\nthe passage which leads from the back of the mouth of a person or animal\nSynonyms: gullet/oesophagus\nExamples:\nher throat was parched with thirst he\u0026rsquo;s pouring beer down his throat swivel position ease box interval due front 2.50 1 0.01 2021-12-24T00:33:24Z Back Noun ˈswɪvl\na coupling between two parts enabling one to revolve without turning the other.\nSynonyms: pivot/axle/spindle/hinge/axis/fulcrum/pin/hub/kingpin/gudgeon/trunnion=Verb= ˈswɪvl\nturn around a point or axis or on a swivel\nSynonyms: turn/spin/swing/rotate/revolve/pivot/twirl/whirl/wheel/gyrate/pirouette\nExamples:\nhe swivelled in the chair she swivelled her eyes round ordinary position ease box interval due front 2.50 1 0.01 2021-12-24T00:52:43Z Back Adjective ˈɔːdɪn(ə)ri\nwith no special or distinctive features; normal\nSynonyms: usual/normal/standard/typical/stock/common/customary/habitual/accustomed/expected/wonted/everyday/regular/routine/day-to-day/daily/established/settled/set/fixed/traditional/quotidian/prevailing\nExamples:\nhe sets out to depict ordinary people it was just an ordinary evening (especially of a judge or bishop) exercising authority by virtue of office and not by deputation.\nNoun ˈɔːdɪn(ə)ri\nwhat is commonplace or standard Examples:\ntheir clichés were vested with enough emotion to elevate them above the ordinary a judge who exercises authority by virtue of office and not by deputation.\na member of the clergy, such as an archbishop in a province or a bishop in a diocese, with immediate jurisdiction.\nthose parts of a Roman Catholic service, especially the Mass, which do not vary from day to day.\nany of the simplest principal charges used in coats of arms (especially chief, pale, bend, fess, bar, chevron, cross, saltire).\na meal provided at a fixed time and price at an inn.\na penny-farthing bicycle.\ndispute position ease box interval due front 2.50 1 0.01 2021-12-24T00:38:22Z Back Noun dɪˈspjuːt ˈdɪspjuːt\na disagreement or argument\nSynonyms: debate/discussion/discourse/disputation/argument/controversy/contention/disagreement/altercation/falling-out/quarrelling/variance/dissension/conflict/friction/strife/discord/antagonism/quarrel/argument/altercation/squabble/falling-out/shouting match/disagreement/difference of opinion/clash/wrangle/feud/fight/fracas/brawl\nExamples:\na territorial dispute between the two countries the Commission is in dispute with the government Verb dɪˈspjuːt\nargue about (something)\nSynonyms: debate/discuss/exchange views\nExamples:\nthe point has been much disputed he taught and disputed with local poets compete for; strive to win\nExamples:\nthe two drivers crashed while disputing the lead solicitor position ease box interval due front 2.50 1 0.01 2021-12-24T00:36:23Z Back Noun səˈlɪsɪtə\na member of the legal profession qualified to deal with conveyancing, the drawing up of wills, and other legal matters. A solicitor may also instruct barristers and represent clients in some courts.\nSynonyms: lawyer/legal representative/legal practitioner/legal executive/notary/notary public/advocate/attorney- a person who tries to obtain business orders, advertising, etc.; a canvasser\nExamples:\nshe had been a telephone solicitor for a Chicago newspaper audibly position ease box interval due front 2.50 2 1.00 2021-12-25T00:33:10Z Back Adverb ˈɔːdɪbli\nin a way that can be heard Examples:\nthe view of the snow-capped Alps caused everyone in the carriage to gasp audibly spectator position ease box interval due front 2.50 1 0.01 2021-12-24T00:24:50Z Back Noun spɛkˈteɪtə\na person who watches at a show, game, or other event\nSynonyms: onlooker/watcher/looker-on/fly on the wall/viewer/observer/witness/eyewitness/bystander/non-participant/sightseer\nExamples:\naround fifteen thousand spectators came to watch the thrills and spills concentrate position ease box interval due front 2.50 1 0.01 2021-12-24T00:32:44Z Back Verb ˈkɒnsntreɪt ˈkɒnsɛntreɪt\nfocus all one\u0026rsquo;s attention on a particular object or activity\nSynonyms: focus/direct/centre/centralize/bring to bear/focus one\u0026rsquo;s attention on/focus on/pay attention to/keep one\u0026rsquo;s mind on/apply oneself to/address oneself to/devote oneself to/get down to/put one\u0026rsquo;s mind to\nExamples:\nshe couldn\u0026rsquo;t concentrate on the film a threatened tax rise concentrates the mind wonderfully gather (people or things) together in a common location\nExamples:\nthe nation\u0026rsquo;s wealth was concentrated in the hands of the governing elite increase the strength or proportion of (a substance or solution) by removing or reducing the other diluting agent or by selective accumulation of atoms or molecules\nSynonyms: condense/boil down/reduce/distil/thicken/compress\nExamples:\nplants and microorganisms can concentrate metals from the environment Noun ˈkɒnsntreɪt ˈkɒnsɛntreɪt\na substance made by removing or reducing the diluting agent; a concentrated form of something\nSynonyms: distillation/essence/extract\nExamples:\napple juice concentrate twisted position ease box interval due front 2.50 1 0.01 2021-12-24T00:54:39Z Back Adjective ˈtwɪstɪd\nforced out of its natural or proper shape; crumpled\nSynonyms: perverted/warped/deviant/depraved/corrupt/abnormal/unhealthy/aberrant/distorted/corrupted/debauched/debased/degenerate/sadistic/evil/wicked\nExamples:\nthe crash left a trail of twisted metal across the carriageway (of a personality or a way of thinking) unpleasantly or unhealthily abnormal; warped\nSynonyms: unwholesome/undesirable/morbid/macabre/ghoulish/twisted/warped/depraved/abnormal/unnatural\nExamples:\na man with a twisted mind trademark position ease box interval due front 2.50 2 1.00 2021-12-25T00:11:45Z Back Noun ˈtreɪdmɑːk\na symbol, word, or words legally registered or established by use as representing a company or product.\nSynonyms: logo/emblem/sign/stamp/symbol/device/badge/crest/insignia/seal/coat of arms/shield/motif/hallmark/mark/figure/monogram/logotype/colophon\nExamples:\nVerb ˈtreɪdmɑːk\nmark with or register as a trademark\nSynonyms:\nExamples:\nshe filed a request with the government to trademark her company\u0026rsquo;s name hog position ease box interval due front 2.50 2 1.00 2021-12-25T00:24:37Z Back Noun hɒɡ\na domesticated pig, especially a castrated male reared for slaughter.\nSynonyms: pig/sow/swine/porker/piglet/boar\nExamples:\na large motorcycle, in particular a Harley Davidson.\nExamples:\na young sheep before the first shearing.\nVerb hɒɡ\ntake or use most or all of (something) in an unfair or selfish way\nSynonyms: monopolize/keep to oneself/dominate/take over/corner/control\nExamples:\nhe never hogged the limelight cause (a ship or its keel) to curve up in the centre and sag at the ends as a result of strain.\ntrial position ease box interval due front 2.50 2 1.00 2021-12-25T00:39:10Z Back Noun ˈtrʌɪəl\na formal examination of evidence by a judge, typically before a jury, in order to decide guilt in a case of criminal or civil proceedings Synonyms: court case/case/lawsuit/suit/hearing/inquiry/tribunal/litigation/judicial proceedings/legal proceedings/proceedings/legal action Examples: the newspaper accounts of the trial the editor was summoned to stand trial for libel a test of the performance, qualities, or suitability of someone or something Synonyms: test/try-out/experiment/pilot study Examples: clinical trials must establish whether the new hip replacements are working a person, experience, or situation that tests a person\u0026rsquo;s endurance or forbearance Synonyms: nuisance/pest/bother/irritant/source of annoyance/source of irritation/worry/problem/inconvenience/vexation/plague/source of aggravation/thorn in one\u0026rsquo;s flesh/the bane of one\u0026rsquo;s life/one\u0026rsquo;s cross to bear/trouble/worry/anxiety/burden/affliction/ordeal/tribulation/adversity/hardship/tragedy/trauma/reverse/setback/difficulty/problem/misfortune/bad luck/stroke of bad luck/ill fortune/mishap/misadventure Examples: this winter has been a trial for me, physically and emotionally Verb ˈtrʌɪəl\ntest (something, especially a new product) to assess its suitability or performance Synonyms: test/try out/carry out trials on/put to the test/put through its paces/experiment with Examples: teachers all over the UK are trialling the materials (of a horse, dog, or other animal) compete in trials Synonyms: Examples: the pup trialled on Saturday nephew position ease box interval due front 2.50 2 1.00 2021-12-25T00:41:37Z Back Noun ˈnɛvjuːˈnɛfjuː\na son of one\u0026rsquo;s brother or sister, or of one\u0026rsquo;s brother-in-law or sister-in-law\nSynonyms: relative/relation/blood relation/blood relative/family member/one\u0026rsquo;s own flesh and blood/next of kin\nExamples:\nhe held up his little nephew in his arms stick position ease box interval due front 2.50 1 0.01 2021-12-24T00:29:44Z Back Noun stɪk\na thin piece of wood that has fallen or been cut off a tree. Synonyms: piece of wood/twig/small branch/cane/pole/beanpole/post/stake/upright/rod Examples:\na long, thin piece of something\nExamples:\na stick of dynamite cinnamon sticks a threat of punishment or unwelcome measures (often contrasted with the offer of reward as a means of persuasion)\nExamples:\ntraining that relies more on the carrot than on the stick severe criticism or treatment\nSynonyms: criticism/flak/censure/reproach/reproof/condemnation/castigation/chastisement/blame/abuse\nExamples:\nI took a lot of stick from the press rural areas far from cities or civilization\nSynonyms: the country/the countryside/the provinces/rural districts/the backwoods/the back of beyond/the wilds/the hinterland/a backwater\nExamples:\nhe felt hard done by living out in the sticks a person of a specified kind\nExamples:\nJanet\u0026rsquo;s not such a bad old stick sometimes a large quantity of unsold stock, especially the proportion of shares which must be taken up by underwriters after an unsuccessful issue.\nVerb stɪk\npush a sharp or pointed object into or through (something)\nSynonyms: thrust/push/insert/jab/dig/plunge/ram/force\nExamples:\nhe stuck his fork into the sausage she stuck her finger in his eye insert, thrust, or push\nExamples:\na youth with a cigarette stuck behind one ear she stuck out her tongue at him adhere or cling to something\nSynonyms: adhere/cling/be fixed/be glued/remain/stay/linger/dwell/persist/continue/last/endure\nExamples:\nthe plastic seats stuck to my skin if you heat the noodles in the microwave, they tend to stick together be fixed in a particular position or unable to move or be moved\nExamples:\nSara tried to open the window but it was stuck we got stuck in a traffic jam the cat\u0026rsquo;s stuck up a tree accept or tolerate (an unpleasant or unwelcome person or situation)\nSynonyms: tolerate/put up with/take/stand/stand for/accept/stomach/swallow/endure/bear/support/brook/submit to/take something lying down\nExamples:\nI can\u0026rsquo;t stick Geoffrey—he\u0026rsquo;s a real old misery handful position ease box interval due front 2.50 1 0.01 2021-12-24T00:37:25Z Back Noun ˈhan(d)fʊl\na quantity that fills the hand\nSynonyms: a small number/a small amount/a small quantity/a sprinkling/a smattering/a scattering/a trickle\nExamples:\na small handful of fresh coriander a person or group that is very difficult to deal with or control\nSynonyms: nuisance/problem/bother/irritant/source of annoyance/thorn in someone\u0026rsquo;s flesh/thorn in someone\u0026rsquo;s side/bugbear\nExamples:\nthe kids could be such a handful speculation position ease box interval due front 2.50 1 0.01 2021-12-24T00:44:29Z Back Noun ˌspɛkjʊˈleɪʃn\nthe forming of a theory or conjecture without firm evidence\nSynonyms: conjecture/theorizing/hypothesizing/supposition/guesswork/gamble/venture/risk\nExamples:\nthere has been widespread speculation that he plans to quit this is pure speculation on my part these are only speculations investment in stocks, property, etc. in the hope of gain but with the risk of loss\nExamples:\nthe company\u0026rsquo;s move into property speculation he was a millionaire from speculations on the stock market advantage position ease box interval due front 2.50 2 1.00 2021-12-25T00:39:30Z Back Noun ədˈvɑːntɪdʒ\na condition or circumstance that puts one in a favourable or superior position\nSynonyms: upper hand/edge/lead/head/whip hand/trump card\nExamples:\ncompanies with a computerized database are at an advantage she had an advantage over her mother\u0026rsquo;s generation Verb ədˈvɑːntɪdʒ\nput in a favourable or superior position. delighted position ease box interval due front 2.50 2 1.00 2021-12-25T00:28:47Z Back Adjective dɪˈlʌɪtɪd\nfeeling or showing great pleasure Synonyms: very pleased/glad/happy/joyful/thrilled/overjoyed/ecstatic/euphoric/elated/blissful/enraptured/on cloud nine/on cloud seven/walking on air/in seventh heaven/in transports of delight/jumping for joy/beside oneself with happiness/excited Examples: a delighted smile we were delighted to see her delight position ease box interval due front 2.50 2 1.00 2021-12-25T00:21:02Z Back Verb dɪˈlʌɪt\nplease (someone) greatly Synonyms: please greatly/charm/enchant/captivate/entrance/bewitch/thrill/excite/take someone\u0026rsquo;s breath away Examples: an experience guaranteed to delight both young and old Noun dɪˈlʌɪt\ngreat pleasure Synonyms: pleasure/happiness/joy/joyfulness/glee/gladness/gratification/relish/excitement/amusement Examples: the little girls squealed with delight we broke into an impromptu dance, to the delight of the crowd she took great delight in telling your story bust position ease box interval due front 2.50 2 1.00 2021-12-25T00:27:05Z Back Noun bʌst\na sculpture of a person\u0026rsquo;s head, shoulders, and chest Synonyms: sculpture/carving/effigy/three-dimensional representation Examples: Epstein concentrated increasingly on bronze portrait busts he keeps a bust of Norris on his desk a woman\u0026rsquo;s chest as measured around her breasts Synonyms: chest/bosom/breasts Examples: a 36-inch bust Verb bʌst\nbreak, split, or burst Synonyms: break/crack/snap/fracture/shatter/smash/smash to smithereens/fragment/splinter Examples: they bust the tunnel wide open the film bust every box office record the colour control had bust (of the police) raid or search (premises where illegal activity is suspected) Synonyms: raid/search/make a search of/swoop on/make a raid on Examples: my flat got busted Noun bʌst\na period of economic difficulty or depression Synonyms: Examples: the boom was followed by the present bust a raid or arrest by the police Synonyms: Examples: a drug bust a worthless thing Synonyms: Examples: cynics remain convinced the political process is a bust a violent blow Synonyms: Examples: a bust on the snout Adjective bʌst\ndamaged or broken Synonyms: Examples: the vacuum cleaner\u0026rsquo;s bust bankrupt Synonyms: fail/collapse/crash/fold/fold up/go under/founder/be ruined/cave in Examples: six of their sponsors have gone bust reckon position ease box interval due front 2.50 2 1.00 2021-12-25T00:37:52Z Back Verb ˈrɛk(ə)n\nestablish by calculation Synonyms: calculate/compute/work out/put a figure on/figure/number/quantify Examples: his debts were reckoned at £300,000 the Byzantine year was reckoned from 1 September consider or regard in a specified way Synonyms: regard as/consider/judge/hold to be/view/think of as/look on as Examples: the event was reckoned a failure these prisoners are reckoned to be the most dangerous be of the opinion Synonyms: believe/think/be of the opinion/be of the view/be convinced/suspect/dare say/have an idea/have a feeling/imagine/fancy/guess/suppose/assume/surmise/conjecture/consider Examples: he reckons that the army should pull out entirely I reckon I can manage that despise position ease box interval due front 2.50 2 1.00 2021-12-25T00:28:36Z Back Verb dɪˈspʌɪz\nfeel contempt or a deep repugnance for\nSynonyms: detest/hate/loathe/abhor/abominate/execrate/regard with contempt/feel contempt for/shrink from/be repelled by/not be able to bear/not be able to stand/not be able to stomach/find intolerable/deplore/dislike\nExamples:\nhe despised himself for being selfish cellar position ease box interval due front 2.50 1 0.01 2021-12-24T00:36:54Z Back Noun ˈsɛlə\na room below ground level in a house, often used for storing wine or coal Synonyms: basement/vault/crypt/undercroft/underground room/catacomb Examples: the servants led us down into a cellar a wine cellar Verb ˈsɛlə\nstore (wine) in a cellar Synonyms: Examples: it is drinkable now but can be cellared for at least five years clown position ease box interval due front 2.50 1 0.01 2021-12-24T00:26:56Z Back Noun klaʊn\na comic entertainer, especially one in a circus, wearing a traditional costume and exaggerated make-up Synonyms: comic entertainer/Pierrot/comedian Examples: a circus clown an unsophisticated country person; a rustic. Synonyms: countryman/countrywoman/peasant/daughter of the soil/son of the soil/country bumpkin/bumpkin/yokel/country cousin Examples: Verb klaʊn\nbehave in a comical or playful way Synonyms: fool around/fool about/play the fool/act foolishly/act the clown/act the fool/act the goat/play about/play around/monkey about/monkey around/play tricks/indulge in horseplay/engage in high jinks Examples: Harvey clowned around pretending to be a dog spat position ease box interval due front 2.50 1 0.01 2021-12-24T00:35:08Z Back Noun spat\na short cloth gaiter covering the instep and ankle\nExamples:\nhe would stand outside in his bowler hat and spats an old fellow dressed in spats and dinner suit a cover for the upper part of an aircraft wheel\nExamples:\nnew wheel spats were constructed and the large tyres were replaced by much smaller units Noun spat\na quarrel about an unimportant matter\nSynonyms: disturbance/quarrel/scuffle/brawl/affray/tussle/melee/free-for-all/fight/clash/skirmish/brouhaha/riot/uproar/commotion\nExamples:\nwhen we had our little spats, he had only to smile to get back on the right side of me Verb spat\nquarrel about an unimportant matter\nSynonyms: quarrel/disagree/row/squabble/bicker/fight/wrangle/dispute/feud/have a row/bandy words/have words/cross swords/lock horns/be at each other\u0026rsquo;s throats\nExamples:\npeople expected him and his wife to spat continually Noun spat\nthe spawn or larvae of shellfish, especially oysters\nExamples:\noyster larvae attach themselves as spat to old shells furtive position ease box interval due front 2.50 2 1.00 2021-12-25T00:36:54Z Back Adjective ˈfəːtɪv\nattempting to avoid notice or attention, typically because of guilt or a belief that discovery would lead to trouble; secretive\nSynonyms: secretive/secret/surreptitious\nExamples:\nthey spent a furtive day together he stole a furtive glance at her hound position ease box interval due front 2.50 2 1.00 2021-12-25T00:40:20Z Back Noun haʊnd\na dog of a breed used for hunting, especially one able to track by scent Synonyms: dog/hunting dog/canine/mongrel/cur Examples: a hound came running through the trees, nose to the ground used in names of dogfishes, e.g. nurse hound, smooth hound. Synonyms: Examples: Verb haʊnd\nharass, persecute, or pursue relentlessly Synonyms: harass/persecute/harry/pester/bother/trouble/annoy/badger/torment/bedevil/keep after/force/drive/pressure/pressurize/propel/push/urge/coerce/impel/dragoon/strong-arm/pursue/chase/follow/shadow/give chase to/follow on the heels of/be hot on someone\u0026rsquo;s heels Examples: she was hounded by the Italian press his opponents used the allegations to hound him out of office chew position ease box interval due front 2.5 0 0 2021-12-22T03:08:12Z Back Verb tʃuː\nbite and work (food) in the mouth with the teeth, especially to make it easier to swallow Synonyms: masticate/munch/champ/chomp/crunch/bite/nibble/gnaw/grind Examples: he was chewing a mouthful of toast he chewed for a moment, then swallowed Noun tʃuː\na repeated biting or gnawing of something Synonyms: nip/snap/chew/munch/nibble/gnaw Examples: the dog was enjoying a quiet chew of his bone arrange position ease box interval due front 2.50 1 0.01 2021-12-24T00:47:14Z Back Verb əˈreɪn(d)ʒ\nput (things) in a neat, attractive, or required order\nSynonyms: put in order/order/set out/lay out/spread out/array/present/put out/display/exhibit/group/sort/organize/tidy/position/dispose\nExamples:\nshe had just finished arranging the flowers the columns are arranged in 12 rows organize or make plans for (a future event)\nSynonyms: organize/fix/plan/schedule/pencil in/devise/contrive\nExamples:\nthey hoped to arrange a meeting my aunt arranged for the furniture to be stored adapt (a musical composition) for performance with instruments or voices other than those originally specified\nSynonyms: adapt/set/score/orchestrate/instrument/harmonize\nExamples:\nsongs arranged for viola and piano settle (a dispute or claim)\nSynonyms: put in order/sort out/straighten out/tidy up/order/arrange/organize/adjust/clear up/set to rights/regulate/systematize\nExamples:\nthe quarrel, partly by the interference of the Crown Prince, was arranged pageant position ease box interval due front 2.50 1 0.01 2021-12-24T00:50:34Z Back Noun ˈpadʒ(ə)nt\na public entertainment consisting of a procession of people in elaborate, colourful costumes, or an outdoor performance of a historical scene\nSynonyms: parade/procession/cavalcade/scene/play/representation/tableau/tableau vivant\nExamples:\nthey brought the history books to life at the town\u0026rsquo;s pageant the pageant of public life a beauty contest.\nconduct position ease box interval due front 2.50 2 1.00 2021-12-25T00:09:42Z Back Noun ˈkɒndʌkt\nthe manner in which a person behaves, especially in a particular place or situation Synonyms: behaviour/way of behaving/performance/comportment/demeanour/bearing/deportment Examples: they were arrested for disorderly conduct a code of conduct for directors of listed companies the manner in which an organization or activity is managed or directed Synonyms: management/managing/running/direction/control/controlling/overseeing/supervision/regulation/leadership/masterminding/administration/organization/coordination/orchestration/handling/guidance/carrying out/carrying on Examples: the conduct of the elections Verb kənˈdʌkt\norganize and carry out Synonyms: manage/direct/run/be in control of/control/oversee/supervise/be in charge of/preside over/regulate/mastermind/administer/organize/coordinate/orchestrate/handle/guide/govern/lead/carry out/carry on Examples: in the second trial he conducted his own defence surveys conducted among students lead or guide (someone) to or around a particular place Synonyms: escort/guide/lead/usher/pilot/accompany/show/show someone the way Examples: he conducted us through his personal gallery of the Civil War transmit (a form of energy such as heat or electricity) by conduction Synonyms: transmit/convey/carry/transfer/pass on/hand on/communicate/impart/channel/bear/relay/dispatch/mediate Examples: heat is conducted to the surface direct the performance of (a piece of music or an orchestra, choir, etc.) Synonyms: Examples: the concert is to be conducted by Sir Simon Rattle behave in a specified way Synonyms: behave/perform/act/acquit oneself/bear oneself/carry oneself Examples: he conducted himself with the utmost propriety confident position ease box interval due front 2.50 2 1.00 2021-12-25T00:35:22Z Back Adjective ˈkɒnfɪd(ə)nt\nfeeling or showing confidence in oneself or one\u0026rsquo;s abilities or qualities\nSynonyms: self-assured/assured/sure of oneself/self-confident/positive\nExamples:\nwe require outgoing, confident people able to approach large groups people who are confident in their identity feeling or showing certainty about something\nSynonyms: optimistic/hopeful/sanguine\nExamples:\nthis time they\u0026rsquo;re confident of a happy ending I am not very confident about tonight\u0026rsquo;s game Noun ˈkɒnfɪd(ə)nt\na confidant. evidence position ease box interval due front 2.50 2 1.00 2021-12-25T00:17:19Z Back Noun ˈɛvɪd(ə)ns\nthe available body of facts or information indicating whether a belief or proposition is true or valid Synonyms: proof/confirmation/verification/substantiation/corroboration/affirmation/authentication/attestation/documentation Examples: the study finds little evidence of overt discrimination Verb ˈɛvɪd(ə)ns\nbe or show evidence of Synonyms: indicate/show/reveal/be evidence of/display/exhibit/manifest/denote/evince/signify Examples: the quality of the bracelet, as evidenced by the workmanship, is exceptional algebra position ease box interval due front 2.50 1 0.01 2021-12-24T00:46:14Z Back Noun ˈaldʒɪbrə\nthe part of mathematics in which letters and other general symbols are used to represent numbers and quantities in formulae and equations\nExamples:\ncourses in algebra, geometry, and Newtonian physics ","permalink":"https://notes.0081800.xyz/flashcards/to-kill-a-mockingbird-words/","summary":"Words of To Kill A Mockingbird hostess position ease box interval due front 2.5 0 0 2021-12-24T14:03:09Z Back Noun ˈhəʊstəs həʊˈstɛs\na woman who receives or entertains guests\nSynonyms: party-giver/entertainer/hostess\nExamples:\nthe perfect dinner-party hostess incurable position ease box interval due front 2.5 0 0 2021-12-24T14:02:18Z Back Adjective ɪnˈkjʊərəb(ə)l\n(of a sick person or a disease) not able to be cured\nSynonyms: untreatable/inoperable/irremediable/beyond cure\nExamples:\neven when the sick are incurable they are never untreatable incurable diseases Noun ɪnˈkjʊərəb(ə)l","title":"Words of To Kill A Mockingbird"},{"content":" tags: 技术 相关论文 [译] [论文] 可虚拟化第三代（计算机）架构的规范化条件（ACM, 1974） 容器化 Learning Containers From The Bottom Up ","permalink":"https://notes.0081800.xyz/topics/20211122114900-%E8%99%9A%E6%8B%9F%E5%8C%96/","summary":" tags: 技术 相关论文 [译] [论文] 可虚拟化第三代（计算机）架构的规范化条件（ACM, 1974） 容器化 Learning Containers From The Bottom Up ","title":"虚拟化"},{"content":"证书 [译] 写给工程师：关于证书（certificate）和公钥基础设施（PKI）的一切（SmallStep, 2018）\n","permalink":"https://notes.0081800.xyz/notes/20211009104957-%E5%8A%A0%E8%A7%A3%E5%AF%86/","summary":"证书 [译] 写给工程师：关于证书（certificate）和公钥基础设施（PKI）的一切（SmallStep, 2018）","title":"加解密"},{"content":" tags: Learning English 一般现在时第三人称单音形规则 一般过去时音形规则 ","permalink":"https://notes.0081800.xyz/notes/20210925202345-%E8%8B%B1%E8%AF%AD%E8%AF%BB%E9%9F%B3%E8%A7%84%E5%88%99/","summary":" tags: Learning English 一般现在时第三人称单音形规则 一般过去时音形规则 ","title":"英语读音规则"},{"content":" tags: Learning English 比较级 形容词/副词比较级 常规单音节词 -er fast -\u0026gt; faster small -\u0026gt; smaller nice -\u0026gt; nicer large -\u0026gt; larger（删除词尾不发音的 e） -y -\u0026gt; -ier busy -\u0026gt; busier pretty -\u0026gt; prettier 短元音 + 辅音：重写辅音 -er big -\u0026gt; bigger hot -\u0026gt; hotter 多音节： more + diffcult -\u0026gt; more difficult interesting -\u0026gt; more interesting careful /kɛəful/ -\u0026gt; more careful -y 二音节词（-ly副词除外）：常不加 more busy -\u0026gt; busier pretty -\u0026gt; prettier quickly -\u0026gt; more quickly 特殊 much/many -\u0026gt; more little -\u0026gt; less good/well -\u0026gt; better bad -\u0026gt; worse 代词比较级 more less 比较级修饰 a little/ a bit + 比较级 更\u0026hellip;一点 much / a lot / far + 比较级 更\u0026hellip;得多 英语常见词用法 open/close 静态和动态 open When do you open(v.)? 强调动态，时间点 We are open at 9 every day. When are you open(adj.)? 强调静态，时间段 We are open from 9 to 6 every day. close close v. 动态 closed adj. 静态 示例\nWhen do you close? We close at 12 am. When are you closed? We are closed from 10 pm to 10 am. each/every 都加单数 each 强调个体 every 强调整体都 都加单数\nstart/stop doing sth. 开始/停止做某事。\nDon\u0026rsquo;t stop learning! I\u0026rsquo;ll stop talking now. My nose won\u0026rsquo;t stop running.(I have a runny nose.) record 动词和名词读音不同 v. /riˈkɔːd/ 记录录制 cn. /ˈrekɔːd/ 记录 英语单词前后缀 -ed adj vs -ing adj. -ed adj.: sb. 感觉如何 -ing adj.: sth. 如何 interested / interesting Are you interested? excited / exciting The TV series is so exciting co- 前缀：联合、共同 co-writer co-worker ache /eik/ cn. 疼痛 -\u0026gt; 后缀: -ache have a headache /had/ have an earache /iə/ have a stomachache /ˈstʌmək/ have an ache in the nose /neuz/ -ness 名字后缀 sick adj. -\u0026gt; sickness n. ill adj. -\u0026gt; illness n. -er/-ress/-ist 表示职业的后缀 -er customer driver -ist receptionist -ress 通常表示女性 actor -\u0026gt; actress waiter -\u0026gt; waitress 单复数 a + 复数 a roast chicken wings an order of rost chicken wings a piece of chicken wings a box of chicken wings a portion of chicken wings staff 没有复数形式 We have a staff of 100. We have 100 staff. 超过一个即复数 one and a half hours 名字前面不加 the at the airport at JFK airport at the JFK airport 英语花费 take sb. + 时间 + to do sth. sb. 处于被动\nIt usually takes two hours to finish my homework. sb. spend + 时间 + on sth. sb. 处于主动\nYou\u0026rsquo;ll have to spend 20 more minutes on the trip. 花钱 I will spend a little more on it. It will cost me a little more. 英语支付 pay 付款 支付方式决定了介词的使用，现金使用 in ，支付方式使用 by/with，如果是信用卡则使用 by，特指某一张信用卡则用 with：\npay in cash pay by credit card pay with a credit card pay by Alipay/WeChat pay with Alipay/WithChat charge 记账 charge \u0026hellip; to \u0026hellip; 算到 \u0026hellip; 的账上 charge 要价 I\u0026rsquo;m going to charge you $20 for the cleaning.\n英语倍数 double triple times （至少 2 倍） increase by \u0026hellip; times 上涨\u0026hellip;倍 by up 随意口语 by 程度 ","permalink":"https://notes.0081800.xyz/notes/20210921092250-%E8%8B%B1%E8%AF%AD%E8%AF%8D%E6%B3%95/","summary":"tags: Learning English 比较级 形容词/副词比较级 常规单音节词 -er fast -\u0026gt; faster small -\u0026gt; smaller nice -\u0026gt; nicer large -\u0026gt; larger（删除词尾不发音的 e） -y -\u0026gt; -ier busy -\u0026gt; busier pretty -\u0026gt; prettier 短元音 + 辅音：重写辅音 -er big -\u0026gt; bigger hot -\u0026gt; hotter 多音节： more + diffcult -\u0026gt; more difficult interesting -\u0026gt; more interesting careful /kɛəful/ -\u0026gt; more careful -y 二音节词（-ly副词除外）：常不加 more busy -\u0026gt; busier pretty -\u0026gt; prettier quickly -\u0026gt; more quickly 特殊 much/many -\u0026gt; more little -\u0026gt; less good/well -\u0026gt; better bad -\u0026gt; worse 代词比较级 more less 比较级修饰 a little/ a bit + 比较级 更\u0026hellip;一点 much / a lot / far + 比较级 更\u0026hellip;得多 英语常见词用法 open/close 静态和动态 open When do you open(v.","title":"英语词法"},{"content":" tags: Learning English 连读 变音 /d/ + /j/ = /dʒj/ Woul~d y~ou like to try int on? /t/ + /j/ = /tʃj/ What abou~t you~? 词尾辅音 + 词首元音 I~t i~s A glas~s o~f water 还原 r RP\nhe~r i~deas Whe~re is i~t? 语块切割 Chunking 语块（Chunk） 能表达实际含义且语义不割裂的词串。\n语块切割（Chunking） 根据说话节奏将句子自然切割为若干语块。\n语块语连读 同一语块内能连则连。\n吞音 基本原则 同一语块内，音同则吞。\n示例 Excuse me, Coul~d you~ tell me how I can get to Pret A Monger?\nget to -\u0026gt; geto\n爆破音处于词尾 三组浊化音（学名：爆破音）\n/t/, /d/ /k/, /g/ /p/, /b/ 爆破音处于词尾，且该词处于语块末尾或者后连辅音。\ntwenty-eigh~th o~f June. Is that OKAY wi~th y~ou? 重音等时性 英语语句中，重读音节之间的时长基本相等。 音节等时：句中词语缩话的时间并非由音节数量的总数决定，而是由重读音节数量决定。 Video: 英语的节奏和\u0026quot;等时性\u0026quot;(这才是中式英语的罪魁祸首!)\n","permalink":"https://notes.0081800.xyz/notes/20210921091537-%E6%B5%81%E5%88%A9%E8%8B%B1%E8%AF%AD/","summary":"tags: Learning English 连读 变音 /d/ + /j/ = /dʒj/ Woul~d y~ou like to try int on? /t/ + /j/ = /tʃj/ What abou~t you~? 词尾辅音 + 词首元音 I~t i~s A glas~s o~f water 还原 r RP\nhe~r i~deas Whe~re is i~t? 语块切割 Chunking 语块（Chunk） 能表达实际含义且语义不割裂的词串。\n语块切割（Chunking） 根据说话节奏将句子自然切割为若干语块。\n语块语连读 同一语块内能连则连。\n吞音 基本原则 同一语块内，音同则吞。\n示例 Excuse me, Coul~d you~ tell me how I can get to Pret A Monger?\nget to -\u0026gt; geto","title":"流利英语"},{"content":" tags: Learning English Give me a hand come in 有 come in all/different colors/size come on 「随意」鼓动、鼓励、催促 come to 总计 Excuse me 抱歉/引起注意 by the way/BTW 顺便说一下 shame on sb.! sb. 可耻 make it 成功达成 do/try one\u0026rsquo;s best (to do sth.) 尽最大努力做某事 sure thing no problem.\n礼貌请求 礼貌程度 please \u0026gt; please 疑问句 \u0026gt; 肯定句 could \u0026gt; would \u0026gt; can 示例：\nShow me (please) Can you show me? Can you show me please? Would you show me (please)? Could you show me (please)? 适用场景\n随意聊天 1-2 服务场合 3-5 商务场合 4-5 Give me a hand 别愣着了 Give me a hand (please)! 正常请求 Can you give me a hand (please)! 客气请求 Would/Could you give me a hand (please)! would like 委婉表示想要 do sth. go with 【委婉】选择、采纳 I\u0026rsquo;ll definitely go with your idea. May I start with \u0026hellip; May I start with a roast chicken wings? be not a big fan: 委婉拒绝 I am not a big fan (of it), sorry. I am sorry but + 各式句型 I am sorry but I have to do it. I am sorry but can you wait a second I am sorry but what can I do. It/sb. + seem to do 弱化语气 It seems to be very popular\u0026hellip; I can\u0026rsquo;t seem to find\u0026hellip; It seems (that) It 虚主语 prefer to do sth. I prefer to pay now please. I would like to pay now please. would：will 之委婉客气版 That would be $64.58 That will be $64.58. 身体健康程度 find \u0026lt; good \u0026lt; great\n名字和人称顺序 Lisa and I I 置后 You and Lisa You 置前 时日顺序 通常从小到大 See you at 1pm this Sunday. 除非特别强调 See you this Sunday at 1pm. Thank you in advance 提前感谢您，不能说：Thank you early!\n日期表达 Jan. -\u0026gt; January /ˈdʒænjuəri/ Feb. -\u0026gt; February /ˈfebruəri/ Mar. -\u0026gt; March /mɑːtʃ/ Apr. -\u0026gt; April /ˈeiprəl/ May -\u0026gt; May /mei/ Jun. -\u0026gt; June /dʒuːn/ Jul. -\u0026gt; Junly /dʒˈlai/ Aug. -\u0026gt; August /ɔːɡəst/ Sep. -\u0026gt; September /səpˈtembə/ Oct. -\u0026gt; October /ɔkˈtəubə/ Nov. -\u0026gt; November /nəuˈvembə/ Dec. -\u0026gt; December /diˈsembə/ 年月日读写：英式（BrE） dd/MM/yyyy 31st Oct 2019 (the thirty-first of October twenty nineteen) 年月日读写：美式（AmE） MM/dd/yyyy Oct 31st 2019 (October the thrity-first twenty nineteen) 日期问答 What\u0026rsquo;s the date today? （日期） 1st May 2020 What day is it today?（星期） It\u0026rsquo;s Thursday (today). 星期 + 年月日 Thursday October 31st 2019 Thursday 31st Oct 2019 英语牛排 cooked 程度 well 熟的 medium /miːdjəm/ 中等等 rare /rɛə/ 生的 组合\nwell done 10 medium well 7 medium 5 medium rare 3 rare 1 take a rest 英语小数点读法 64.58\n正式：64 point 58 日常：64 point 58 You can\u0026rsquo;t miss it ","permalink":"https://notes.0081800.xyz/notes/20210920081734-%E8%8B%B1%E8%AF%AD%E4%B9%A0%E8%AF%AD/","summary":"tags: Learning English Give me a hand come in 有 come in all/different colors/size come on 「随意」鼓动、鼓励、催促 come to 总计 Excuse me 抱歉/引起注意 by the way/BTW 顺便说一下 shame on sb.! sb. 可耻 make it 成功达成 do/try one\u0026rsquo;s best (to do sth.) 尽最大努力做某事 sure thing no problem.\n礼貌请求 礼貌程度 please \u0026gt; please 疑问句 \u0026gt; 肯定句 could \u0026gt; would \u0026gt; can 示例：\nShow me (please) Can you show me? Can you show me please?","title":"英语习语"},{"content":" tags: Learning English 双宾语 例句：I want to buy a birthday gift for my sister. 结构：buy sth. for sb. 双宾语：by sb. sth. buy my sister a birthday gift. Can I buy a drink for you? Can I buy you a drink? 双宾语限制 第二个宾语必须为名词，不能是人称代词（pron.）。\n下面语句不能使用双宾语\nI want to buy you it.(X)\n双宾语动词 bring/give/tell/sell/ask/show Bring it to me Bring me a present. Give it to me Give me the pen. tell the story to me tell me the story email the photo to me email me the photo sell the handbag to her sell her the handbag ask sb. sth. show sb. sth. take the coffee to her: 不能使用 Give me the hand：习语不能使用 宾语从句 I think (that) \u0026hellip; 在「一句简单句有且只有一个谓语动词」的基础上实现复杂句。\nI think there is one on Green Street. 主句：I think\u0026hellip; 从句：there is\u0026hellip; 宾语从句：从句作为宾语。\nI think (that) there is\u0026hellip; that 作为引导标志可以省略 I am sure (that) \u0026hellip; 结构类似 I think (that)\nI remember (that)\u0026hellip; I remember (that) she walked in the rain for one and a half hours. 双宾语 + 宾语从句 Let me tell you (that) you can find butter over there. I can tell you (that) he is a good man 问题型宾语从句 结构：where + I can find buffer 特殊疑问词 + 陈述句语序。 示例：\nCould you tell me where I can find butter? Could you let me know What he does? Could you tell me What her job is? Could you ask him Where they are from? Could you teach us How we should use dumpling flour? 倒装 here 倒装： sb. 到了 Here we/you/they are. Here I am. Here he/she/it is. here is/are \u0026hellip; 给你 Here are my reservation number and my passport. so 特殊倒装表示 sb. 也是 be: So + be + sb. do: Do + do/does + sb. 反问 Aren\u0026rsquo;t they the same? 疑问句：Are they the same? Don\u0026rsquo;t you know that? 疑问句：Do you konw that? 反问回答 肯定yes/否定no 针对返回的回答这里和中文习惯不一样，英语回答的不是反问，而是回答问题。\n示例1:\nAren\u0026rsquo;t they the same? No, they are not. （不，他们不一样） Yes, there are.（是，他们一样） 示例2:\nDon\u0026rsquo;t you know that? 难道你不知道吗？ Yes, I do Yeah No, I don\u0026rsquo;t 祈使句 (You) Look there! (You) Please wait here. 祈使句 + and sb. will .. Just avoid the major streets and we will be there in 16 minutes. Take the first right and you\u0026rsquo;ll find Red Lobster is just across the street. 原因状语从句 as/because 引导的原因状语从句 There are a lot larger, as the room size nearly doubles.\n强调因果的程度上 as 小于 because。\n因果顺序任意 As the room size nearly doubles, they are a lot larger. so 引导的原因状语从句 The room size nearly doubles, so they are a lot larger.\nas/because 不能和 so 一起使用 So they are a lot larger, the room size nearly doubles As/because the room size nearly doubles, so they are a lot larger. 时态无限定 If it rains, I\u0026rsquo;ll stay home. As it is raining now. I\u0026rsquo;ll stay home. As it is raining now, I\u0026rsquo;m staying home. As it is going to rain, I\u0026rsquo;ll stay home. As it is going to rain, I\u0026rsquo;m straying home. ","permalink":"https://notes.0081800.xyz/notes/20210920081114-%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E7%BB%93%E6%9E%84/","summary":"tags: Learning English 双宾语 例句：I want to buy a birthday gift for my sister. 结构：buy sth. for sb. 双宾语：by sb. sth. buy my sister a birthday gift. Can I buy a drink for you? Can I buy you a drink? 双宾语限制 第二个宾语必须为名词，不能是人称代词（pron.）。\n下面语句不能使用双宾语\nI want to buy you it.(X)\n双宾语动词 bring/give/tell/sell/ask/show Bring it to me Bring me a present. Give it to me Give me the pen. tell the story to me tell me the story email the photo to me email me the photo sell the handbag to her sell her the handbag ask sb.","title":"英语语法结构"},{"content":" tags: Learning English seem 表示似乎 It seems to be very popular nowdays. 用作委婉 背景：the man in the photo。 对比以下两句\nHe is in good health He seems to be in good health(这句是错的 He seems in good health) 表示犹豫 That\u0026rsquo;s not right That doesn\u0026rsquo;t seem right That doesn\u0026rsquo;t seem to be right ","permalink":"https://notes.0081800.xyz/notes/20210920075833-%E8%8B%B1%E8%AF%AD%E5%B8%B8%E7%94%A8%E8%AF%8D/","summary":" tags: Learning English seem 表示似乎 It seems to be very popular nowdays. 用作委婉 背景：the man in the photo。 对比以下两句\nHe is in good health He seems to be in good health(这句是错的 He seems in good health) 表示犹豫 That\u0026rsquo;s not right That doesn\u0026rsquo;t seem right That doesn\u0026rsquo;t seem to be right ","title":"英语常用词"},{"content":" tags: Learning English shape ʃeip be in great/good shape stay/keep in (good) shape 英语表示次数范围 five times a month once two weeks 英语表示尺码 loose /luːs/ 松的 tight /tait/ 紧的 what/how about 提议 What/How about some coffee? What/How about you? 穿衣：try on/take off/put on n.: try on sth I\u0026rsquo;d like to try on the shoes. pron.: try sth. on I\u0026rsquo;d like to try them on. think of 认为 sth. 怎么样 What do you think of my new shirt? What does she think of me? would like 委婉表示想要 do sth. I\u0026rsquo;d like to see some casual shirts.\n\u0026rsquo;d = would\nI want to buy a birthday gift for my sister want to 直接，适合朋友之间对话。\n结构 would like + to do sth. Would you like to join us? I\u0026rsquo;d like to have some water When would you like to go to the moveis? would like + sb. to do sth. Would you like me to show you? What would you like me to do? I\u0026rsquo;d like you to make a reservation. would like + sth.(+ 介词短语) I\u0026rsquo;d like a table Would you like some water? I\u0026rsquo;d like a table in a non-smoking area. I\u0026rsquo;d like a table for him. I\u0026rsquo;d like some water for breakfast. I\u0026rsquo;d like the reservation for 1pm. I\u0026rsquo;d like to make a reservation for 1pm. chat with/to sb. about sth. use sth. do/for sth. 用 \u0026hellip; 来做 \u0026hellip; 英语指路 沿着路/直走 go along/down + 街道(street / road / avenue / Ave.)\ngo along Fourth Street go down this Queen Ave. go straight go + 距离 + down + 街道\ngo two blocks down the street go straight (on) 直走\ngo straight on past the police station 拐弯 turn turn left/right turn right onto Queen Avenue make/take a left/right turn make/take a left/right take a left at the second crossing in advance adv. 提前 Do I need to book early? I\u0026rsquo;ll go there in advance Thank you in advance get get sb. sth. to do May I get you anything to drink? May I get you a shirt to try on? get/become + 比较级 It\u0026rsquo;s getting worse. It\u0026rsquo;s getting hotter. either \u0026hellip; or 二选一/neither \u0026hellip; nor 二者皆否 take either the railroad train or Line A. You should take neither the railroad train nor Line A. ","permalink":"https://notes.0081800.xyz/notes/20210920075417-%E8%8B%B1%E8%AF%AD%E7%9F%AD%E8%AF%AD/","summary":"tags: Learning English shape ʃeip be in great/good shape stay/keep in (good) shape 英语表示次数范围 five times a month once two weeks 英语表示尺码 loose /luːs/ 松的 tight /tait/ 紧的 what/how about 提议 What/How about some coffee? What/How about you? 穿衣：try on/take off/put on n.: try on sth I\u0026rsquo;d like to try on the shoes. pron.: try sth. on I\u0026rsquo;d like to try them on. think of 认为 sth. 怎么样 What do you think of my new shirt?","title":"英语短语"},{"content":" tags: Learning English 副词 adv/adverb 是指在句子中表示行为或状态特征的词，用以修饰动词、形容词、其他副词或全句，表示时间、地点、程度、方式等概念。 副词可分为：时间副词、频率副词、地点副词、方式副词、程度副词、疑问副词、连接副词、关系副词、表顺序的副词以及表完成的副词。\n频率副词 always usually often sometimes about 表示大约大约修饰数量。\n形容词 adj 形容词后缀 -ful helpful useful thankful 形容词后缀 -ed interested excited 形容词后缀 -ing interesting exciting 动词 verb 情态动词 modal verb.\ncan(could)/may(might)/must/need/to/shall(should)/will(would).\n动名词 形式 v.-ing 动词的名词化。\n语法：名词 语意：动词\n形变规则 特殊 1 -e：去 e 加 ing live -\u0026gt; living give -\u0026gt; giving 特殊 2 短元音 + 一辅音：重复最后一个字母加 ing jog -\u0026gt; jogging swim -\u0026gt; swimming 常规：直接加 ing do -\u0026gt; doing study -\u0026gt; studying 词性 I usually go swimming.\n动词含义：抽象 动名词: ucn.\n固定词组：\nWhat do you do for a living? How do you make a liveing? 常规用法 特殊动词 + 动名词 start start doing sth. start to do sth. go + doing 表示去做某事。 go jogging go swimming go shopping 直接使用 名词用法 I lkie swimming. Swimming is my favorite. 系动词 系动词，也称连系动词（Linking verb），是用来辅助主语的动词。它本身有词义，但不能单独用作谓语，其后必须跟表语，构成系表结构说明主语的状况、性质、特征等情况。 在英语中，系动词的功能主要是把表语（名词、形容词、某些副词、非谓词、介词短语、从句）和它的主语联系在一起，说明主语的性质、特征、品性或状态。它有自己的但不完全的词义，不能在句中独立作谓语，必须和后面的表语一起构成句子的谓语。它虽是虚词，但是其用法很复杂，而且不可忽视。\nHe is quick. He is quickly He walks quickly. He walks quick. 结构 v + adj. vs adv.\nHe is quick (v. + adj.) adj. -\u0026gt; sb./sth. 形容词修饰人或物。 be quick 他 \u0026lt;- 是快的，他 \u0026lt;- 很快。 He walks quickly (v. + adv.) adv. -\u0026gt; v. 副词修饰动作 走 \u0026lt;- 得快，快步 -\u0026gt; 走 v + adj: 系动词 S. + v. + adj.\nv. + adj. -\u0026gt; S.\nv + adv: 实意动词 系动词/实意动词 + n. My name is Jake. Can I have your name? That sounds fun(ucn. 乐趣) That sounds funny(adj. 滑稽的) 介词 prep/preposition 表示名词、代词等与句中其它词的关系，在句中不能单独作句子成分。介词后面一般有名词、代词或相当于名词的其他词类、短语或从句作它的宾语，表示与其他成分的关系。\n介词 + street AmE(American English) on the street/road 指地点在在 XXX 马路上 in the street/road 在马路中间 BE(British English) in the street/road 通常情况下表示「在街上」 on the street/road 有些时候用 on 表示「在街上」 AmE \u0026amp; BE 具体到门牌号时用 at\nIt is at No.10 Downing Street.\n介词 in/on 穿衣 on: 衣服在人身上 I think it looks prefect on you! in: 人穿着衣服（在衣服里面） He is in the blue shirt. 介词 + 时间 介词 in/on 时间点 on: 具体落实到天 on Sunday on Sunday afternoon in: in the afternoon 介词 at 时刻 at 1pm/1 o\u0026rsquo;clock 固定搭配 at night/noon 介词 in 时间段 刻意模糊，可以同时表达：\n在 \u0026hellip; 之内 在 \u0026hellip; 之后 介词 at/on 周末 at/on weekends at/on the weekend 无介词 every/all What are busy at weekends. What are busy every weekend. What are busy all weekends. this/that/these/those See you on Sunday. See you this Sunday. next/last I\u0026rsquo;ll not be free that morning. I\u0026rsquo;ll not be free next morning. 介词 within 时间段 无歧义的表达「在 \u0026hellip; 之内」。\n介词 for 时间段表示持续 How long would you like to stay in our hotel I\u0026rsquo;d like to stay for there nights. How far is the hotel? It will not be for long. 介词 at the bar 在吧台 at/in the bar 在酒吧。\n介词 for prep. 为了 thanks for the/your help 介词 as 比较级 as 如同: Thanks, please go as fast as possible.\n介词 past You can go/walk past the street. You can pass the street. 不能说：You can past the street 介词 across It is across the street. You can go/walk across the street. 不能说：You can across the street. 介词 per 按每个 介词 at/in front at the front dest/reception at the front dest in front of: 方位 before Hero is in front of the hotel. Hero is standing in front of hotel. 介词 of VS for sb. It is + adj. + of sb. + 不定式 That\u0026rsquo;s very generous of you to give me the free upgrade. adj. 修饰 sb. ：You are very generous。 It is + adj. + for sb. + 不定式 It is very important for us to learn English. adj. 修饰 不定式：To learn English is very important(不是 We are important) 介词 in bed He is in bed. 卧床（生病、睡觉、休息） He is in the bed. 在床上 介词 besides adv./prep. 除此之外 Besides, you need to drink a lot of water. Besides that, you need to drink a lot of water. 介词 util prep. + 时间：直到 \u0026hellip; 时间 You\u0026rsquo;ll have to stay in bed until next Monday. 介词 like prep. You look like hime. You sound like hime. You are like him. What does he look/sound like? What is he like? 反身代词 pron. 你我他 + self（单数）/selves（复数）\n第一、二人称 所有格 + self/selves our -\u0026gt; ourselves my -\u0026gt; myself your -\u0026gt; yourself your -\u0026gt; youselves 第三人称 宾格 + self/selves himself herself themselves itself 状语 conj. 条件状语 if 如果 主从颠倒，一般假设：主将从现。\n从现\nIf you take\u0026hellip;, it will take you\u0026hellip; if（条件）状语主句 it: 主句 If it rains, I\u0026rsquo;ll stay home. If you come, I will be very happy. She won\u0026rsquo;t see you if you are late. if 如果就会\n祈使句 and sb. will\nIf you exercise four times a week, You will be in great shape. util conj. + 句子 You\u0026rsquo;ll have to stay in bed util it gets better. 主将从现，类 if 原因状语 as because so ","permalink":"https://notes.0081800.xyz/notes/20210920073442-%E8%8B%B1%E8%AF%AD%E8%AF%8D%E6%80%A7/","summary":"tags: Learning English 副词 adv/adverb 是指在句子中表示行为或状态特征的词，用以修饰动词、形容词、其他副词或全句，表示时间、地点、程度、方式等概念。 副词可分为：时间副词、频率副词、地点副词、方式副词、程度副词、疑问副词、连接副词、关系副词、表顺序的副词以及表完成的副词。\n频率副词 always usually often sometimes about 表示大约大约修饰数量。\n形容词 adj 形容词后缀 -ful helpful useful thankful 形容词后缀 -ed interested excited 形容词后缀 -ing interesting exciting 动词 verb 情态动词 modal verb.\ncan(could)/may(might)/must/need/to/shall(should)/will(would).\n动名词 形式 v.-ing 动词的名词化。\n语法：名词 语意：动词\n形变规则 特殊 1 -e：去 e 加 ing live -\u0026gt; living give -\u0026gt; giving 特殊 2 短元音 + 一辅音：重复最后一个字母加 ing jog -\u0026gt; jogging swim -\u0026gt; swimming 常规：直接加 ing do -\u0026gt; doing study -\u0026gt; studying 词性 I usually go swimming.","title":"英语词性"},{"content":" tags: Learning English 通过动词变化来区分时间 通过动词变化来区分时间。\nI am walking in the rain. 正在 I will walk in the rain. 将要 I walk in the rain sometings. 一般状态、重复、常态 一般现在时 表示：\n当前的一般状态\n重复或习惯动作\nam/is/are（be 动词）：是，处于某状态\ndo/does（实意动词）：具体动作\n(X): am/is/are + do/des 一般现在时不能 am/is/are 跟动词实意动词\n一般现在时第三人称单音形规则 tags: 英语读音规则 一般现在时第三人称单数动词需要变形，需要注意变形后的读音\n清对清 /s/ works helps 非清则浊 /z/ lives sees goes does /dʌz/ 组合 /dz/ /ts/ meets needs 近似音 -es /iz/ introduces fishes 现在进行时 当前正在发生的事情或动作，表示当前正在发生或者近将来。\nI\u0026rsquo;m looking for a shirt. I\u0026rsquo;m not taking it off. Everyone is wearing the same shirt on the street! 结构 am/is/are doing\ndoing 形态 常规 a. look -\u0026gt; looking b. wear -\u0026gt; wearing c. do -\u0026gt; doing 词尾 e 不发音 a. take -\u0026gt; taking b. give -\u0026gt; giving c. exercise -\u0026gt; exercising 短元音 + 辅音 a. fit -\u0026gt; fitting b. sit -\u0026gt; sitting c. get -\u0026gt; getting 进行时含义 现在进行时 I\u0026rsquo;m looking for a shirt 近将来 I\u0026rsquo;m not taking it off! 临时的一种状态 I am working at the middle school. （暗示接下来可能不在中学工作） 稳定 VS 变化 一般状态：稳定、长期 现在进行：变化、临时\nDo you like hime? Are you liking him? I live in Shanghai I am living in Shanghai 稳定含义动词 稳定含义的动词一般不用现在进行时。\n常规稳定含义：work,live,like,love be We are office workers. 感官 see/look/hear/feel I see a guy sitting at the bar. 观点 think/believe 近将来：现在进行时 != 动作正在进行 At this time, Camila is arriving at the restaurant. 表示正要到达 He is coming 正要到达 He is finishing the homework. 就要做完了 一般将来时 未来的事件或动作。\n例句：\nI think I\u0026rsquo;ll work on Saturday. Lisa and I are going to have a picnic on the beach. 结构 will 引导(will not won\u0026rsquo;t /wəunt/) \u0026rsquo;ll = will /wil/ 将要 类情态动词 will + 动词原形 will 无人称变化 am/is/are going to 正在去做某事 -\u0026gt; 要去做某事 实质含义决定时态，时间状语非必要。\n非一般将来时的将来 情态动词 Can you be my hero? May I come in? You must study hard. 自带将来含义的词 plan cn. What a good pan! v. He never plans anything for tormorrow. 一般过去时 动作发生于过去。\nI walked in the rain yesterday. They started yesterday. 一般过去时动词形变 规则变形：-ed walked /t/ started /id/ seemed /d/ 不规则形变 have/has -\u0026gt; had be am/is -\u0026gt; was /wɔz/ are -\u0026gt; were /wʒː/ find -\u0026gt; found /faund/ bring -\u0026gt; brought /brɔːt/ do -\u0026gt; did /did/ come -\u0026gt; came take -\u0026gt; took give -\u0026gt; gave 一般过去时音形规则 清对清 /t/ walked helped missed stopped 非清则浊 /d/ seemed turned believed studied /t/ /d/ 结尾特殊 /id/ started wanted needed recoreded 过去时间 before ago \u0026hellip; 之前 时态：实质时间 可以不借助时间通过动词变形来表示时间。\n一般过去之否定 be + not wasn\u0026rsquo;t/weren\u0026rsquo;t\nIt is not in my pocket. It was not in my pocket. did + not don\u0026rsquo;t/doesn\u0026rsquo;t -\u0026gt; didn\u0026rsquo;t do/did not do\n一般过去之疑问 疑问原理同否定。\nWhen did you start to have the signs? Were you lost?? Did you have the signs of illness? 情态与时态 情态动词加动词原型，语境决定时间含义：\ncan may must should shall You can/may/must/should/shall come.\nhave to 现在 Sorry, I have to leave now. had to 过去 Sorry, I had to leave at that time. will have to 将来 Sorry, I will have to leave soon. ","permalink":"https://notes.0081800.xyz/notes/20210920073034-%E8%8B%B1%E8%AF%AD%E6%97%B6%E6%80%81/","summary":"tags: Learning English 通过动词变化来区分时间 通过动词变化来区分时间。\nI am walking in the rain. 正在 I will walk in the rain. 将要 I walk in the rain sometings. 一般状态、重复、常态 一般现在时 表示：\n当前的一般状态\n重复或习惯动作\nam/is/are（be 动词）：是，处于某状态\ndo/does（实意动词）：具体动作\n(X): am/is/are + do/des 一般现在时不能 am/is/are 跟动词实意动词\n一般现在时第三人称单音形规则 tags: 英语读音规则 一般现在时第三人称单数动词需要变形，需要注意变形后的读音\n清对清 /s/ works helps 非清则浊 /z/ lives sees goes does /dʌz/ 组合 /dz/ /ts/ meets needs 近似音 -es /iz/ introduces fishes 现在进行时 当前正在发生的事情或动作，表示当前正在发生或者近将来。\nI\u0026rsquo;m looking for a shirt.","title":"英语时态"},{"content":" tags: Linux Linux I/O Linux I/O 演进 阻塞式：read()/write() 非阻塞式：select()/poll()/epoll()，不支持文件 I/O Thread Pool Direct I/O（数据软件）：绕过 page cache 异步 IO（Linux AIO）：早起进支持文件 I/O，近期支持了 epoll 支持非文件 I/O Linux io_uring [译] Linux 异步 I/O 框架 io_uring：基本原理、程序示例与性能压测 对比 Linux AIO：\n重新设计实现真正的是不。 支持任何类型的 I/O：cached files、direct-access files 甚至 blocking sockets。 灵活、可扩展：基于 io_uring 能够重写 Linux 的每个系统调用。 原理及核心数据结构：SQ/CQ/SQE/CQE 每个 io_uring 实例都有两个环形队列，在内核和应用程序之间共享：\n提交队列：submission queue（SQ） 完成队列：completion queue（CQ） 这两个队列：\n都是单生产者、单消费者，size 是 2 的幂次； 提供无锁接口（lock-less access interface），内部使用内存屏障做同步（coordinated with memory barrers）。 使用方式：\n请求 应用创建 SQ entries（SQE），更新 SQ tail； 内核消费 SQE，更新 SQ head 完成 内核为完成一个或多个请求创建 CQ enries（CQE），更新 CQ tail； 应用消费 CQE，更新 CQ head 完成事件（completion events）可能以任意顺序到达，到总是与特定的 SQE 相关联的。 消费 CQE 过程无需切换到内核态 带来的好处 支持批处理 支持文件 I/O 系统调用：read、write、send、recv、accept、opentat、stat、专用的一些系统调用，如 fallocate 不再局限于数据库应用 应对现在硬件架构：将硬件架构本身作为一个网络（多核多 CPU 是一个基础网络、CPU 之间是一个网络、CPU 和磁盘 I/O 之间又是一个网络） 三种工作模式 中断驱动模式（interrupt driven）：默认模式。可通过 io_uring_enter() 提交 I/O 请求，然后直接检查 CQ 状态判断是否完成。\n轮询模式（polled）\n需要文件系统和块设备支持轮询功能。对比中断驱动方式，这种方式延迟更低，但可能会小号更多的 CPU 资源。\n只有指定了 O_DIRECT 标识位的的文件描述符才能使用这种模式。但一个读或写请求提交给轮询上下文（polled context）之后， 应用必须调用 io_uring_enter() 来轮询 CQ 队列，判断请求是否已经完成。\n同一个 io_uring 不支持混合使用轮询和非轮询模式。\n内核轮询模式（kernel polled）\n创建一个内核线程（kernel thread）来执行 SQ 的轮询工作。应用无需切换到内核态牛结果出发 I/O 操作。通过 SQ 来提交 SQE，以及监控 CQ 的完成状态，应用无需任何系统调用，就能提交和收割 I/O（submit and reap I/Os）。\n如果内核线程的空闲时间超过了用户的配置值，它会通知应用，然后进入 idle 状态。 这种情况下，应用必须调用 io_uring_enter() 来唤醒内核线程。如果 I/O 一直很繁忙，内核线性是不会 sleep 的。\n高级特性 File registration Buffer registration Poll ring Linked operations 用户空间库 liburing Linux Virtual Memory Management ","permalink":"https://notes.0081800.xyz/notes/20210907142848-linux_kernel/","summary":"tags: Linux Linux I/O Linux I/O 演进 阻塞式：read()/write() 非阻塞式：select()/poll()/epoll()，不支持文件 I/O Thread Pool Direct I/O（数据软件）：绕过 page cache 异步 IO（Linux AIO）：早起进支持文件 I/O，近期支持了 epoll 支持非文件 I/O Linux io_uring [译] Linux 异步 I/O 框架 io_uring：基本原理、程序示例与性能压测 对比 Linux AIO：\n重新设计实现真正的是不。 支持任何类型的 I/O：cached files、direct-access files 甚至 blocking sockets。 灵活、可扩展：基于 io_uring 能够重写 Linux 的每个系统调用。 原理及核心数据结构：SQ/CQ/SQE/CQE 每个 io_uring 实例都有两个环形队列，在内核和应用程序之间共享：\n提交队列：submission queue（SQ） 完成队列：completion queue（CQ） 这两个队列：\n都是单生产者、单消费者，size 是 2 的幂次； 提供无锁接口（lock-less access interface），内部使用内存屏障做同步（coordinated with memory barrers）。 使用方式：\n请求 应用创建 SQ entries（SQE），更新 SQ tail； 内核消费 SQE，更新 SQ head 完成 内核为完成一个或多个请求创建 CQ enries（CQE），更新 CQ tail； 应用消费 CQE，更新 CQ head 完成事件（completion events）可能以任意顺序到达，到总是与特定的 SQE 相关联的。 消费 CQE 过程无需切换到内核态 带来的好处 支持批处理 支持文件 I/O 系统调用：read、write、send、recv、accept、opentat、stat、专用的一些系统调用，如 fallocate 不再局限于数据库应用 应对现在硬件架构：将硬件架构本身作为一个网络（多核多 CPU 是一个基础网络、CPU 之间是一个网络、CPU 和磁盘 I/O 之间又是一个网络） 三种工作模式 中断驱动模式（interrupt driven）：默认模式。可通过 io_uring_enter() 提交 I/O 请求，然后直接检查 CQ 状态判断是否完成。","title":"Linux kernel"},{"content":" tags: Emacs,LSP 如果无法正常补全三方库，应该是 bloop 服务没有正常启动：\n创建 ~/Library/Caches/org.scalameta.metals/bsp.trace.json 开启跟踪 查看项目目录下 metals.log ","permalink":"https://notes.0081800.xyz/notes/20210906151915-scala_lsp_metals/","summary":" tags: Emacs,LSP 如果无法正常补全三方库，应该是 bloop 服务没有正常启动：\n创建 ~/Library/Caches/org.scalameta.metals/bsp.trace.json 开启跟踪 查看项目目录下 metals.log ","title":"Scala lsp-metals"},{"content":" tags: DDD,《领域驱动设计》读书笔记 领域基础模式 模式：UBIQUITOUS LANGUAGE 在同领域专家、开发人员和项目管理沟通的过程中建立并使用 UBIQUITOUS LANGUAGE，，并在模型实现时依然使用 UBIQUITOUS LANGUAGE 来让设计与沟通相一致（中文语境下稍显困难），UBIQUITOUS LANGUAGE 让知识消化后直接驱动变更模型。\n应用 UBIQUITOUS LANGUAGE 需要大声的建模。\n模式：MODEL-DRIVEN DESIGN 严格按照模型来编写代码，让模型与实际系统相结合。 不再分离「分析模型」和程序设计，而是寻求一种能够满足这两方面需求的单一模型。 工具：面向对象编程语言、UML等。 更好的支持 UBIQUITOUS LANGUAGE. 模式：HANDS-ON MODELER 开发设计和模型设计紧密合作，避免模型设计者不参与编写和程序设计者不参与模型设计。 每一个开发人员都必须不同程度的参与模型讨论并且与领域专家保持联系，模型设计者及时通过 UBIQUITOUS LANGUAGE 与接触代码的人及时交换关于模型的想法。 领域模式构造块 模式：LAYERED ARCHITECTURE 分层架构是实现 DDD 的基础，分层架构将不同的层次的实现分开，自上倒下应分为：\n用户界面层 应用层 领域层（模型的精髓） 基础设施层 核心在于要将领域层单独出来实现 MODEL-DRIVEN DESIGN，对业务进行建模封装业务规则。调用规则也只能自上而下的调用，不能反向调用。\n领域层（或模型层）分离出来之后使得模型足够丰富，结构足够清晰，可以捕捉到基本的业务知识，并有效的使用这些知识。\n模式：ENTITY 用于跟踪对象的状态，有唯一标识符，在系统中是可变的，两个对象是否一个通过唯一标识来判断，不是靠它们的属性定义。\n模式：VALUE OBJECT 区别与 ENTITY ，没有唯一标识，仅记录状态，一般设计为不可变用于共享 VALUE OBJECT，两个对象是否一个通过对象属性的值来判断。\n模式：SERVICE 没有状态，但又需要建模的对象，只包含动作。用于一些不适合建模为对象的领域概念。\n与领域概念相关的操作不是 ENTITY 或 VALUE OBJECT 的一个自然组成部署 接口是根据领域模型的其他元素定义的。 操作是无状态的 模式：MODULE（或 PACKAGE） 根据对象的意义划分领域模型，低耦合高内聚。按照模式或者对象生命周期或者其他方式划分都是错误的。\n模式：AGGREGATE 划分模型边界，统一对关联模型的创建、修改、复制和销毁。一般选定一个 ENTITY 对象作为 AGGREGATE 的「根」，同时对事务应用一组规则：\n根 ENTITY 具有全局标识，它最终负责检查固定规则。 边界内的 ENTITY 具有本地标识，这些标识只在 AGGREGATE 内部才是唯一的。 AGGREGATE 外部不的对象不能引入除根 ENTITY 之外的任何内部对象。根 ENTITY 可以把内部 ENTITY 引用传递出去做临时使用，但不能保持引用。 只有 AGGREGATE 的根能直接通过数据库查询获取。其他所有对象必须通过遍历关联来发现。 AGGREGATE 内部的对象可以保持对其他 AGGREGATE 根的引用。 删除操作必须一次删除 AGGREGATE 边界之内的所有对象。 当提交对 AGGREGATE 的更改时，整个 AGGREGATE 的所有固定规则都必须被满足。 模式：Factory 封装创建一个对象或者整个 AGGREGATE 的复杂创建工作，隐藏内部结构。实现的方式：\n简单的对象可以通过 FACTORY METHOD 实现在 AGGREGATE 的根 ENTITY 对象上。 复杂的对象应当转移给独立的 FACTORY。 ENTITY FACTORY 和 VALUE OBJECT FACTORY 两方面不同 VALUE OBJECT 不可变，所以其 FACTORY 生成的对象就是最终形式，因此 FACTORY 操作必须得到创建对象的完整形式。 ENTITY 需要在 FACTORY 生成对象时分配唯一标识。 模式：REPOSITORY 一个遍历 ENTITY 和 VALUE OBJECT 的起点对象（想象图书馆里的图书管理员）。\n只为那些确实需要直接访问的 AGGREGATE 根提供 REPOSITORY，让客户始终聚焦于模型，而将所有对象的存储和访问操作都交给 REPOSITORY 来完成。\nREPOSITORY 与 Factory 的关系 从创建对象角度\nREPOSITORY 负责基于查询的数据恢复已有对象，让客户感觉对象始终驻留内存。 FACTORY 负责创建新的对象。 同时 REPOSITORY 负责持久化相关工作，包括：\n存储对象 删除对象 领域高阶（？）模式 模式：SPECIFICATION 抽象谓词（返回真假的函数）。 为特殊目的创建谓词形式的显式的 VALUE OBJECT。 SPECIFICATION 就是一个谓词，可以用来测试任何对象以校验它们是否满足制定的标准。 规格（SPECIFICATION）中声明的是限制另一个对象状态的约束，被约束对象可以存在也可以不存在。\n领域反模式 模式：THE SMART UI 反模式 不分离用户界面和领域，在界面中实现所有业务逻辑。使用关系数据库作为共享的数据存储库。\n优点：\n效率高 人力成本低 快速响应需求更改 彼此独立，扩展容易 关系数据库提供数据整合 缺点：\n依赖数据库 没有行为重用 有扩展和迭代极限 无法适应复杂功能 ","permalink":"https://notes.0081800.xyz/notes/20210903080049-%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%BC%8F/","summary":"tags: DDD,《领域驱动设计》读书笔记 领域基础模式 模式：UBIQUITOUS LANGUAGE 在同领域专家、开发人员和项目管理沟通的过程中建立并使用 UBIQUITOUS LANGUAGE，，并在模型实现时依然使用 UBIQUITOUS LANGUAGE 来让设计与沟通相一致（中文语境下稍显困难），UBIQUITOUS LANGUAGE 让知识消化后直接驱动变更模型。\n应用 UBIQUITOUS LANGUAGE 需要大声的建模。\n模式：MODEL-DRIVEN DESIGN 严格按照模型来编写代码，让模型与实际系统相结合。 不再分离「分析模型」和程序设计，而是寻求一种能够满足这两方面需求的单一模型。 工具：面向对象编程语言、UML等。 更好的支持 UBIQUITOUS LANGUAGE. 模式：HANDS-ON MODELER 开发设计和模型设计紧密合作，避免模型设计者不参与编写和程序设计者不参与模型设计。 每一个开发人员都必须不同程度的参与模型讨论并且与领域专家保持联系，模型设计者及时通过 UBIQUITOUS LANGUAGE 与接触代码的人及时交换关于模型的想法。 领域模式构造块 模式：LAYERED ARCHITECTURE 分层架构是实现 DDD 的基础，分层架构将不同的层次的实现分开，自上倒下应分为：\n用户界面层 应用层 领域层（模型的精髓） 基础设施层 核心在于要将领域层单独出来实现 MODEL-DRIVEN DESIGN，对业务进行建模封装业务规则。调用规则也只能自上而下的调用，不能反向调用。\n领域层（或模型层）分离出来之后使得模型足够丰富，结构足够清晰，可以捕捉到基本的业务知识，并有效的使用这些知识。\n模式：ENTITY 用于跟踪对象的状态，有唯一标识符，在系统中是可变的，两个对象是否一个通过唯一标识来判断，不是靠它们的属性定义。\n模式：VALUE OBJECT 区别与 ENTITY ，没有唯一标识，仅记录状态，一般设计为不可变用于共享 VALUE OBJECT，两个对象是否一个通过对象属性的值来判断。\n模式：SERVICE 没有状态，但又需要建模的对象，只包含动作。用于一些不适合建模为对象的领域概念。\n与领域概念相关的操作不是 ENTITY 或 VALUE OBJECT 的一个自然组成部署 接口是根据领域模型的其他元素定义的。 操作是无状态的 模式：MODULE（或 PACKAGE） 根据对象的意义划分领域模型，低耦合高内聚。按照模式或者对象生命周期或者其他方式划分都是错误的。\n模式：AGGREGATE 划分模型边界，统一对关联模型的创建、修改、复制和销毁。一般选定一个 ENTITY 对象作为 AGGREGATE 的「根」，同时对事务应用一组规则：","title":"领域模式"},{"content":"案例 Airflow powers AI。\nAirflow SSO 接入 公司 SSO 系统不是基于开源标准，而是一套自定义的方式，目前网上没有成熟的解决方案，通过查看 Flask-AppBuilder 和 Airflow 的代码发现可以扩展 flask_appbuilder.security.views.AuthRemoteUserView 并通过自定义的 SecurityManager 指定 authremoteuserview 来实现，去掉具体 SSO 逻辑后的代码如下：\nfrom urllib.parse import urlencode from urllib.parse import urljoin import requests from flask import flash from flask import redirect from flask import request from flask_appbuilder.baseviews import expose from flask_appbuilder.security.views import AuthRemoteUserView try: from airflow.www.security import AirflowSecurityManager except ImportError: AirflowSecurityManager = None __version__ = \u0026#34;0.1.0\u0026#34; AUTHORIZE_URL = \u0026#34;https://example.com/sso/login\u0026#34; ACCESS_TOKEN_URL = \u0026#34;https://example.com/sso/check\u0026#34; class AuthComCasView(AuthRemoteUserView): def _get_redirect_uri(self): return urljoin(request.host_url, self.appbuilder.get_url_for_login) def get_authorize_params(self): return { \u0026#34;callback\u0026#34;: self._get_redirect_uri(), } @expose(\u0026#34;/login/\u0026#34;) def login(self): token = request.args.get(\u0026#34;token\u0026#34;) if not token: params = self.get_authorize_params() redirect_uri = u\u0026#34;{}?{}\u0026#34;.format( AUTHORIZE_URL, urlencode(params), ) return redirect(redirect_uri) data = self.exchange_token(token) if data[\u0026#34;status\u0026#34;] \u0026lt; 0: flash(\u0026#34;Invalid Token\u0026#34;, \u0026#34;info\u0026#34;) return \u0026#34;Invalid token\u0026#34; # Set REMOTE_USER to let user login request.environ[\u0026#34;REMOTE_USER\u0026#34;] = data[\u0026#34;username\u0026#34;] return super().login() @staticmethod def get_token_params(token): return { \u0026#34;token\u0026#34;: token, } def exchange_token(self, token): data = self.get_token_params(token) return requests.get(ACCESS_TOKEN_URL, params=data).json() if AirflowSecurityManager is not None: class ComCasAirflowSecurityManager(AirflowSecurityManager): authremoteuserview = AuthComCasView 然后在 Airflow 的 webserver_config.py 中应用就行:\nfrom flask_appbuilder.security.manager import AUTH_REMOTE_USER AUTH_TYPE = AUTH_REMOTE_USER FAB_SECURITY_MANAGER_CLASS = \u0026#39;fab_auth_com.ComCasAirflowSecurityManager\u0026#39; ","permalink":"https://notes.0081800.xyz/notes/20210902153221-airflow/","summary":"案例 Airflow powers AI。\nAirflow SSO 接入 公司 SSO 系统不是基于开源标准，而是一套自定义的方式，目前网上没有成熟的解决方案，通过查看 Flask-AppBuilder 和 Airflow 的代码发现可以扩展 flask_appbuilder.security.views.AuthRemoteUserView 并通过自定义的 SecurityManager 指定 authremoteuserview 来实现，去掉具体 SSO 逻辑后的代码如下：\nfrom urllib.parse import urlencode from urllib.parse import urljoin import requests from flask import flash from flask import redirect from flask import request from flask_appbuilder.baseviews import expose from flask_appbuilder.security.views import AuthRemoteUserView try: from airflow.www.security import AirflowSecurityManager except ImportError: AirflowSecurityManager = None __version__ = \u0026#34;0.1.0\u0026#34; AUTHORIZE_URL = \u0026#34;https://example.com/sso/login\u0026#34; ACCESS_TOKEN_URL = \u0026#34;https://example.","title":"Airflow"},{"content":" tags: Programming Language Java 生态工具 Maven/Ivy 依赖获取和解决工具 coursier SDKMAN Java 环境和 SDK 管理 SDKMAN 可以实现 Java 环境和一些常见 SDK 的管理，包括：JDK、Scala、sbt 和 Spark 等。\nJava 项目构建工具 Maven Graddle Ant JVM Java 内存模型 JVM 设置代理 Java Networking and Proxies\n","permalink":"https://notes.0081800.xyz/topics/20210901081938-java/","summary":"tags: Programming Language Java 生态工具 Maven/Ivy 依赖获取和解决工具 coursier SDKMAN Java 环境和 SDK 管理 SDKMAN 可以实现 Java 环境和一些常见 SDK 的管理，包括：JDK、Scala、sbt 和 Spark 等。\nJava 项目构建工具 Maven Graddle Ant JVM Java 内存模型 JVM 设置代理 Java Networking and Proxies","title":"Java"},{"content":" tags: Bigdata Spark 编程语言选择 毋庸置疑，Python 应该是最简单也是大部分的选择，但是如果有依赖那么将要付出额外的心智负担（Spark 管理 Python 依赖）。 JVM 语言的依赖组织方式则具有天然的优势，可以将依赖（排除 Spark 生态之后）都 bundle 进 Jar 包里。 其中 Scala 兼具简单和 JVM 的优势，但是它「不流行」。\nSpark Driver \u0026amp; Executor Driver 执行 spark-commit 客户端，创建 SparkContext 执行 main 函数。 Executor Spark Worker 上的线程 See also:\nUnderstanding the working of Spark Driver and Executor Cluster Mode Overview Spark 代码执行 我在配置 Spark 的时候就在好奇，从观察上看部分代码应该是执行在 Driver 上部分代码会执行在 Executer，这让我很好奇。 但是我通过学习 Spark RDD 学习到了一些知识。\n以下代码是在 Executor 上执行的：\nTransformations 和 Actions 是执行在 Spark 集群的。 传递给 Transformations 和 Actions 的闭包函数也是执行在 Spark 集群上的。 其他额外的代码都是执行在 Driver 上的，所以想要在 Driver 打印日志需要上使用 collect：\nrdd.collect().foreach(println) collect 可能会导致 Driver 内存爆掉，可以使用 take：\nrd.take(100).foreach(println) 所以在这就带来在闭包中共享变量的问题，参见 Spark 共享变量。\nSpark 编程抽象 RDD Programming Guide\nSpark RDD 集合并行化 val data = Array(1, 2, 3, 4, 5) val distData = sc.parallelize(data) 外部数据集 输入源支持支持 Hadoop 支持的任何存储源，包括：本地文件系统、HDFS、Cassandra、HBase、Amazaon S3 等 输入格式支持：文本文件、SequenceFiles 和任何其他 Hadoop InputFormat 如果是本地文件系统，则文件需要存在与所有 Worker 节点上。\nSpark Transformations vs Actions Spark 支持两种操作类型：\ntransformations：从现有数据集创建新的数据集，比如 map。 actions：在数据集上进行运算然后返回值给 driver，比如 reduce。 Spark Transformations 懒执行 所有的 Spark transformations 会记住应用的基础数据集，只要在需要将结果返回给 driver 的时候才进行计算。 比如，我们可以感知到一个数据集（dataset）通过 map 创建，将会被 reduce 使用并返回 reduce 的结果给 driver 而不是一个映射过（mapped）的大数据集。\nSpark transformations 重复计算 默认情况下，每一次在一个 RDD 上运行 action Spark 都可能会进行重新计算，这时候可以使用 persist 缓存一个 RDD 到内存中。 下一次查询将会被加速，同时 Spark 支持存储到磁盘或者跨多节点复制（replicated）。\nSpark 共享变量 Spark 支持两种共享变量的方式：\nBroadcast Variables Accumulators 设置 Spark Python 版本 export PYSPARK_DRIVER_PYTHON=python # Do not set in cluster modes. export PYSPARK_PYTHON=./environment/bin/python # Executor 上面 environment 是提交的时候需要在 --archives 缀上的:\nspark-submit --archives pyspark_conda_env.tar.gz#environment app.py Note that PYSPARK_DRIVER_PYTHON above should not be set for cluster modes in YARN or Kubernetes.\nSpark 管理 Python 依赖 YARN 支持 --archives 参数上传打包好的环境信息，主要三种方式：\nPySpark 原生特性， --py-files 支持 zip 和 egg 格式，但是不支持 whl Python vendor package See alos: Python Package Management\nStandalone cluster 可以借助上面的 Python 包管理机制，将打包好的环境在各个节点进行同步。假设将 conda-pack 解压到 /opt/conda-envs/test，可以通过在 Spark 任务脚本最上方通过 PYSPARK_PYTHON 指定解释器：\nimport os os.environ[\u0026#39;PYSPARK_PYTHON\u0026#39;] = \u0026#39;/opt/conda-envs/test\u0026#39; conf = {} sc = SparkContext(conf=conf) Spark Hive 表问题汇总 Spark 2.3 之后读取 Hive Orc 字段全是 null 或者无法过滤 主要是因为 Orc 文件在 Hive 中存储的时候是大小写敏感的 Schema。 通过如下配置关闭 2.3 之后启用的选项：\nspark.sql.hive.convertMetastoreOrc=false 但是启用这个会导致写 Hive Orc 表的时候报错：\n[2021-11-20 08:22:26,500] {spark_submit.py:523} INFO - : java.lang.NoSuchMethodException: org.apache.hadoop.hive.ql.metadata.Hive.loadPartition(org.apache.hadoop.fs.Path, java.lang.String, java.util.Map, boolean, boolean, boolean, boolean, boolean, boolean) 只能在读指定表的时候动态设置:\nspark.conf.set(\u0026#34;spark.sql.hive.convertMetastoreOrc\u0026#34;, False) 更多坑可以看 Upgrading Guide Upgrading Guide\nSpark 写入的 Hive Orc 表但是旧版 Hive 无法读取 # 解决写入 Orc 表但是 Hive 无法读取的问题 spark.sql.orc.impl=hive ","permalink":"https://notes.0081800.xyz/notes/20210827080540-spark/","summary":"tags: Bigdata Spark 编程语言选择 毋庸置疑，Python 应该是最简单也是大部分的选择，但是如果有依赖那么将要付出额外的心智负担（Spark 管理 Python 依赖）。 JVM 语言的依赖组织方式则具有天然的优势，可以将依赖（排除 Spark 生态之后）都 bundle 进 Jar 包里。 其中 Scala 兼具简单和 JVM 的优势，但是它「不流行」。\nSpark Driver \u0026amp; Executor Driver 执行 spark-commit 客户端，创建 SparkContext 执行 main 函数。 Executor Spark Worker 上的线程 See also:\nUnderstanding the working of Spark Driver and Executor Cluster Mode Overview Spark 代码执行 我在配置 Spark 的时候就在好奇，从观察上看部分代码应该是执行在 Driver 上部分代码会执行在 Executer，这让我很好奇。 但是我通过学习 Spark RDD 学习到了一些知识。\n以下代码是在 Executor 上执行的：\nTransformations 和 Actions 是执行在 Spark 集群的。 传递给 Transformations 和 Actions 的闭包函数也是执行在 Spark 集群上的。 其他额外的代码都是执行在 Driver 上的，所以想要在 Driver 打印日志需要上使用 collect：","title":"Spark"},{"content":" tags: Programming Language Scala 学习资源 Scala Book Scala 这么好的语言为什么不流行 HN：Scala 为什么不流行 Reddit：Scala 为什么不流行 结论：Java 人才更多且成本更低。\nScala 工具 sbt sbt new 无法处理替换过的 SSH 会导致 Auth fail，一个 workaround 就是手动 clone 项目然后：\nsbt new file:///path/to/template.g8 sbt 国内加速 ~/.sbt/repositories:\n[repositories] local nexus-aliyun:https://maven.aliyun.com/nexus/content/groups/public nexus-aliyun-ivy:https://maven.aliyun.com/nexus/content/groups/public/, [organization]/[module]/(scala_[scalaVersion]/)(sbt_[sbtVersion]/)[revision]/[type]s/[artifact](-[classifier]).[ext] typesafe: https://repo.typesafe.com/typesafe/ivy-releases/, [organization]/[module]/(scala_[scalaVersion]/)(sbt_[sbtVersion]/)[revision]/[type]s/[artifact](-[classifier]).[ext], bootOnly Unique Scala Rust from Scala Rust 和 Scala 有很多想通的地方，Rust 应该从 Scala 借鉴了很多：\n可变量和不可变量 模式匹配 Trait 内置类型 val b: Byte = 1 val x: Int = 1 val l: Long = 1 val s: Short = 1 val d: Double = 2.0 val f: Float = 3.0 字符串拼接 Python 也支持类似的 f-string 语法，在 Scala 中是 s-string 语法。\nval firstName = \u0026#34;John\u0026#34; val mi = \u0026#39;C\u0026#39; val lastName = \u0026#34;Doe\u0026#34; val name = firstName + \u0026#34; \u0026#34; + mi + \u0026#34; \u0026#34; + lastName val name = s\u0026#34;$firstName $mi $lastName\u0026#34; println(s\u0026#34;Name: $firstName $mi $lastName\u0026#34;) println(s\u0026#34;Name: ${firstName} ${mi} ${lastName}\u0026#34;) println(s\u0026#34;1+1 = ${1+1}\u0026#34;) 多行字符串 Multiline strings\nfor 循环 val nums = Seq(1,2,3) for (n \u0026lt;- nums) println(n) val people = List( \u0026#34;Bill\u0026#34;, \u0026#34;Candy\u0026#34;, \u0026#34;Karen\u0026#34;, \u0026#34;Leo\u0026#34;, \u0026#34;Regina\u0026#34; ) for (p \u0026lt;- people) println(p) // foreach people.foreach(println) // map foreach val ratings = Map( \u0026#34;Lady in the Water\u0026#34; -\u0026gt; 3.0, \u0026#34;Snakes on a Plane\u0026#34; -\u0026gt; 4.0, \u0026#34;You, Me and Dupree\u0026#34; -\u0026gt; 3.5 ) for ((name,rating) \u0026lt;- ratings) println(s\u0026#34;Movie: $name, Rating: $rating\u0026#34;) ratings.foreach { case(movie, rating) =\u0026gt; println(s\u0026#34;key: $movie, value: $rating\u0026#34;) } for 表达式 val nums = Seq(1,2,3) val doubledNums = for (n \u0026lt;- nums) yield n * 2 // \u0026lt;----- 注意 yield see also: yield\n模式匹配 Rust 和 Scala 很像，但是 Scala 依然有很多独特的地方：\n// 模式匹配作为方法体 def convertBooleanToStringMessage(bool: Boolean): String = bool match { case true =\u0026gt; \u0026#34;you said true\u0026#34; case false =\u0026gt; \u0026#34;you said false\u0026#34; } // alternate cases def isTrue(a: Any) = a match { case 0 | \u0026#34;\u0026#34; =\u0026gt; false case _ =\u0026gt; true } // 支持 if count match { case 1 =\u0026gt; println(\u0026#34;one, a lonely number\u0026#34;) case x if x == 2 || x == 3 =\u0026gt; println(\u0026#34;two\u0026#39;s company, three\u0026#39;s a crowd\u0026#34;) case x if x \u0026gt; 3 =\u0026gt; println(\u0026#34;4+, that\u0026#39;s a party\u0026#34;) case _ =\u0026gt; println(\u0026#34;i\u0026#39;m guessing your number is zero or less\u0026#34;) } 异常捕获 异常捕获结合了模式匹配：\nvar text = \u0026#34;\u0026#34; try { text = openAndReadAFile(filename) } catch { case e: FileNotFoundException =\u0026gt; println(\u0026#34;Couldn\u0026#39;t find that file.\u0026#34;) case e: IOException =\u0026gt; println(\u0026#34;Had an IOException trying to read that file\u0026#34;) } 方法定义 // 函数定义的基本语法 def sum(a: Int, b: Int): Int = a + b def concatenate(s1: String, s2: String): String = s1 + s2 // 返回参数可以省略 def sum(a: Int, b: Int) = a + b def concatenate(s1: String, s2: String) = s1 + s2 // 代码块用 {} 包围，但是 = 不能省略 def long(a: Int, b: Int) = { a + b } 类构造 class Person(var firstName: String, var lastName: String) val p = new Person(\u0026#34;Bill\u0026#34;, \u0026#34;Panner\u0026#34;) // val 只读 class Person(val firstName: String, val lastName: String) // 构造方法直接写在类体里 class Person(var firstName: String, var lastName: String) { println(\u0026#34;the constructor begins\u0026#34;) // \u0026#39;public\u0026#39; access by default var age = 0 // some class fields private val HOME = System.getProperty(\u0026#34;user.home\u0026#34;) // some methods override def toString(): String = s\u0026#34;$firstName $lastName is $age years old\u0026#34; def printHome(): Unit = println(s\u0026#34;HOME = $HOME\u0026#34;) def printFullName(): Unit = println(this) printHome() printFullName() println(\u0026#34;you\u0026#39;ve reached the end of the constructor\u0026#34;) } // 其他一些例子 class Pizza (var crustSize: Int, var crustType: String) // a stock, like AAPL or GOOG class Stock(var symbol: String, var price: BigDecimal) // a network socket class Socket(val timeout: Int, val linger: Int) { override def toString = s\u0026#34;timeout: $timeout, linger: $linger\u0026#34; } class Address ( var street1: String, var street2: String, var city: String, var state: String ) 构造方法重载 val DefaultCrustSize = 12 val DefaultCrustType = \u0026#34;THIN\u0026#34; // the primary constructor class Pizza (var crustSize: Int, var crustType: String) { // one-arg auxiliary constructor def this(crustSize: Int) = { this(crustSize, DefaultCrustType) } // one-arg auxiliary constructor def this(crustType: String) = { this(DefaultCrustSize, crustType) } // zero-arg auxiliary constructor def this() = { this(DefaultCrustSize, DefaultCrustType) } override def toString = s\u0026#34;A $crustSize inch pizza with a $crustType crust\u0026#34; } ","permalink":"https://notes.0081800.xyz/notes/20210827073626-scala/","summary":"tags: Programming Language Scala 学习资源 Scala Book Scala 这么好的语言为什么不流行 HN：Scala 为什么不流行 Reddit：Scala 为什么不流行 结论：Java 人才更多且成本更低。\nScala 工具 sbt sbt new 无法处理替换过的 SSH 会导致 Auth fail，一个 workaround 就是手动 clone 项目然后：\nsbt new file:///path/to/template.g8 sbt 国内加速 ~/.sbt/repositories:\n[repositories] local nexus-aliyun:https://maven.aliyun.com/nexus/content/groups/public nexus-aliyun-ivy:https://maven.aliyun.com/nexus/content/groups/public/, [organization]/[module]/(scala_[scalaVersion]/)(sbt_[sbtVersion]/)[revision]/[type]s/[artifact](-[classifier]).[ext] typesafe: https://repo.typesafe.com/typesafe/ivy-releases/, [organization]/[module]/(scala_[scalaVersion]/)(sbt_[sbtVersion]/)[revision]/[type]s/[artifact](-[classifier]).[ext], bootOnly Unique Scala Rust from Scala Rust 和 Scala 有很多想通的地方，Rust 应该从 Scala 借鉴了很多：\n可变量和不可变量 模式匹配 Trait 内置类型 val b: Byte = 1 val x: Int = 1 val l: Long = 1 val s: Short = 1 val d: Double = 2.","title":"Scala"},{"content":"背景介绍 最近接手了一个项目，经过需求调研决定尝试使用 Airflow 调度数据生产，过程涉及：\n从大数据 Hive 数据库整合数据宽表； 在 Spark 上运行 IRT 算法模型汇总 ADS 表。 从中学习了很多关于大数据的知识，同时也积累了如何通过 Airflow 提交 Spark 任务的经验，应当抽时间总结一下。\n冰山之下 如「冰山理论」所描述，我们所做的只是冰山露在水面的一角，隐藏在冰山之下更大的一部份是：\nAirflow + Celery Docker Hadoop(Hive) 集群 YARN 集群（Spark over YARN） 接下来我们将关注在「冰山水面上的一角」来阐述我们如何利用这些已有的技术连结了整个系统。\nMake DAG great again 之前部门里有位算法大佬用 DAG（大佬念做「戴格」）实现了一套非常牛逼的文本和识别处理算法，然后每次讨论方案必谈 DAG， 所以 DAG 成了部门里都知道的一个梗，虽然大佬走了之后很少再有人提起 DAG，但是接下来我们会进行文艺复兴，让 DAG 再次出现在我们的日常技术讨论中。\nMake DAG Great Again!\nAirflow 介绍 架构 概念 DAG Operator Connection Providers packages See also: Provider packages.\nSpark 介绍 架构 Spark 编程 Spark SQL Hive Table 示例 Airflow + Spark 平台化 Celery Worker as a Spark Driver Celery Worker running on specific platform Windows Bigdata Hive client DAGs 分发 提交 DAG Python 依赖解决 Spark Airflow 外部依赖？ 未来 承接更多的报告需求 对内承接分析任务 可编程、平台化的分析 ","permalink":"https://notes.0081800.xyz/articles/20210826074053-airflow_powers_ai/","summary":"背景介绍 最近接手了一个项目，经过需求调研决定尝试使用 Airflow 调度数据生产，过程涉及：\n从大数据 Hive 数据库整合数据宽表； 在 Spark 上运行 IRT 算法模型汇总 ADS 表。 从中学习了很多关于大数据的知识，同时也积累了如何通过 Airflow 提交 Spark 任务的经验，应当抽时间总结一下。\n冰山之下 如「冰山理论」所描述，我们所做的只是冰山露在水面的一角，隐藏在冰山之下更大的一部份是：\nAirflow + Celery Docker Hadoop(Hive) 集群 YARN 集群（Spark over YARN） 接下来我们将关注在「冰山水面上的一角」来阐述我们如何利用这些已有的技术连结了整个系统。\nMake DAG great again 之前部门里有位算法大佬用 DAG（大佬念做「戴格」）实现了一套非常牛逼的文本和识别处理算法，然后每次讨论方案必谈 DAG， 所以 DAG 成了部门里都知道的一个梗，虽然大佬走了之后很少再有人提起 DAG，但是接下来我们会进行文艺复兴，让 DAG 再次出现在我们的日常技术讨论中。\nMake DAG Great Again!\nAirflow 介绍 架构 概念 DAG Operator Connection Providers packages See also: Provider packages.\nSpark 介绍 架构 Spark 编程 Spark SQL Hive Table 示例 Airflow + Spark 平台化 Celery Worker as a Spark Driver Celery Worker running on specific platform Windows Bigdata Hive client DAGs 分发 提交 DAG Python 依赖解决 Spark Airflow 外部依赖？ 未来 承接更多的报告需求 对内承接分析任务 可编程、平台化的分析 ","title":"Airflow powers AI"},{"content":" https://inkscape.org/ ","permalink":"https://notes.0081800.xyz/notes/20210825081520-svg_%E7%BB%98%E5%88%B6%E5%B7%A5%E5%85%B7/","summary":" https://inkscape.org/ ","title":"SVG 绘制工具"},{"content":"SVG SVG 绘制工具\n","permalink":"https://notes.0081800.xyz/notes/20210825081459-%E8%AE%BE%E8%AE%A1/","summary":"SVG SVG 绘制工具","title":"设计"},{"content":"Graphviz 教程 https://www2.eecs.berkeley.edu/Pubs/TechRpts/2013/EECS-2013-176.pdf Graphviz Examples https://graphviz.org/gallery/ Graphviz 绘制思维导图 Graphviz Online Tools 一个手绘风格的在线绘图工具：https://sketchviz.com/new Gaphviz Playground：http://magjac.com/graphviz-visual-editor/ ","permalink":"https://notes.0081800.xyz/notes/20210824065326-graphviz/","summary":"Graphviz 教程 https://www2.eecs.berkeley.edu/Pubs/TechRpts/2013/EECS-2013-176.pdf Graphviz Examples https://graphviz.org/gallery/ Graphviz 绘制思维导图 Graphviz Online Tools 一个手绘风格的在线绘图工具：https://sketchviz.com/new Gaphviz Playground：http://magjac.com/graphviz-visual-editor/ ","title":"Graphviz"},{"content":" tags: 正在读的书,读书笔记 这是一本什么样书？ 忘记从哪里看到了这么一本书，很早之前就看到过相关推荐，但是第一次看还是因为在 2021 上半年 Kindle Unlimited 上有这本书的电子书， 因为可以免费阅读加上当时找不到相关书籍才开始阅读这本书。\n读第一遍是我在上班通勤的路上完成的，给我的感受就是这是一本关于旅行和旅行中的一些思考的书。书中「我」描写了很多旅行中的见闻， 并通过「我」的思维来探寻良质，探讨禅与科技、科技与艺术、古典（哲学）主义与浪漫主义。随着主题的深入「我」开始在两个思想中来回切换， 并且开始探讨形而上学的一些东西（古典主义和浪漫主义）这本书也变的越来越难读。总体给我的感觉就是很好的一本书，但是我好像没读太懂。\n基于上面我后面在 JD 买书的时候看到了重庆出版社重新出版的珍藏版《禅与摩托车维修艺术》，我被它的全黑的封面所吸引，毫不犹豫的下单买了这本书。\n随书附赠的一本小册子让我更好的了解这本书和作者罗伯特.M.波西格，其真人确实患过精神分裂症，并接受过电击疗法。这让我想起了书中的「我」和「裴德洛」。 作者也同时说明为什么要用第一人称「我」来叙述本书，因为「我」在讲述的时候是希望倾听的人能够喜欢我。我太喜欢这句话了，同时这也是为什么在笔记里把「我」都引了起来。\n这本小册子和第一遍留给我的困惑让我决定重读这本书，我现在一有空或者感到无聊，我就会捧起这本书来阅读。第二遍阅读我无法从第一部分跳出去，因为书中的内容太多引起了我的共鸣， 这是我在第一遍阅读所没有发现的。我总是反复的阅读，反复的去思考那些带给我共鸣的内容。同时我发现我在日常聊天的时候已经在不知不觉的引用书中的一些内容。 这也是这篇文章的来源，我觉得如果我不写点什么东西，我感觉我会永远“困”在这本书的第一部分。\n如何记录思考？ 这是一本能够让人思考的书，该如何记录这些思考？通过一些尝试，我决定在没读完一小节之后记录我的想法，然后再阅读一遍来修正我的想法。 或许后面的日子我会回来更新我的想法。\n第一部分 01 疏通思想的河道 首先我们应该慢来下，去更好的感受过程而非结果：旅行的意义不仅仅在于到达目的地，更多的是感受旅行的过程（沿途的风景、遇到的人和事）。 不要等到「真理已经再敲你的门，而你却说：“走开，我正在寻找真理”」。\n在全美思想交流更加快速的时代背景之下，原先的河流无法承载大量的思想造成了两岸的灾难，过多的「新鲜事」构成了河道中的污泥， 「最好的」把思想的河道挖凿的太深以至于无法改动。通过一次摩托车的旅行（Chautauqua）来疏通（并非拓宽）思想的河道。 探讨「我」和朋友之间对待摩托车维修（大部分指科技）不同的态度。\n虽然约翰夫妇同样喜欢骑摩托车旅行，但是对待应该多大程度自己维修摩托车方面有很大的不同：\n比如约翰启动不了摩托车，「我」不会主动去帮忙：「除非他真正的需要别人的帮忙，否则别人介入只会引起他的厌烦」。 其实这些不是对待维修摩托车的态度不同，而是对待科技（至少大部分）的态度。「我认为约翰他们的逃避和厌恶只是一种自欺的行为。」\n主题：「佛陀或者耶稣坐在电脑和变速器的齿轮旁修行，会像坐在山顶或者莲花座上修行一样自在。如果你认为不是如此，那无异与亵渎了佛陀 \u0026ndash; 也就是亵渎了你自己。」\n02 放慢脚步认真思考 从前的「我」就像现在的约翰一样，不关心摩托车维修，从修理我摩托车的「专业人士」身上看到了：\n「如果你不放慢脚步认真思考，往往会花费更多的时间得到更差的结果。」 「像旁观者一样对待自己的工作，看起来随和、友善和轻松自在，但并没有投入工作，对工作没有认同感。」 「当你做某件事，一旦想要求快，就表示你再也不关心它，只想去做别的事。」 03 鬼魂裴德洛 「上帝，他来过这里」：暴风雨的闪电和躲避它的摩托车的速度让“我”闪现出鬼魂裴德洛，“我”降低了摩托车的车速：时速从 95 英里降到 55 英里。 儿子克里斯确认为刚才很棒一点也不快，是不是也预示着克里斯喜欢鬼魂裴德洛？指点汽车旅馆也让约翰惊讶于“我”为什么知道，而“我”选择回避。\n思薇娅引出了鬼魂话题：「你好像见鬼了」。\n“我”开始谈论科学的鬼魂，但是这些论调好像属于“我”，而是属于鬼魂裴德洛。科学的鬼魂：只存在于人的心中，比如「万有引力定律」：\n牛顿发现它之前它存在吗？ 地球毁灭，人类消失了它还存在吗？ 它只存在于人的心中，所以是科学的鬼魂。人们之所以相信它是因为人们被催眠了，正统的说是受教育了。古代世界由鬼魂控制：神或人，牛顿是最好的一位。我们的常识由鬼魂的声音构成。\n在克里斯的追问下，“我”声称自己出发寻找鬼魂，并将鬼魂痛打了一顿，这个鬼魂就是：裴德洛。\n04 不要在你需要的情况下诅咒科技 在天气好的早晨中前进，寒风造成了生理上的不适，就像对科技的不满一样。 「他们一面需要科技，一面又要诅咒它。我相信他们很明白这一点，而这正是他们对整个环境不满的原因」。 这一部分更多的是对沿途美丽风景的描写，让人心向往之。 「我不想拥有这些草原，或是把他们拍下来，我也不想改变它们，甚至不想停下来或是继续走下去。」\n05 藝術與科學的視角決定了思考問題的方式 約翰對表象比較感興趣，但是對內涵則不然，通過用易拉罐作爲墊片修理摩托車反映了兩種態度。 那麼我們爲什麼會常常忽略這種差異呢？書中給出了答案「有些東西你忽略是因爲它們非常細微，但有些卻是因爲它們過於龐大」。 思考相同的事情，出發點不一樣就可能會導致完全不同的結論。約翰站在藝術的視角而非用邏輯去思考科學，所以四處碰壁。然後科學（摩托車）沒有按照約翰所想的那樣工作，所以約翰被激怒了，發動不了的摩托車彷彿在約翰看待問題的方式上鑿了一個洞。\n隨着「我」思考的深入，也越來越接近鬼魂裴德洛，越來越能感受到他的存在。\n故事开始 一些片段 p12 对周遭美好视而不见，你在寻找真理，但是真理敲你门的时候你却不认识真理，所以真理走开了。\np21 帮助一个不希望别人帮助的人只会遭来对方的厌烦：「除非他真的需要别人的帮助，否则别人的介入只会引起他的厌烦」\np23 忍受水滴滴答声。一点小毛病，萦绕在你心头，要不要解决它？如果仅仅是水龙头的滴答声，要不要修理？ 如果是和其他人的理念不同呢，每次谈话都是一阵沉默，然后各自缭绕心头，盘旋不去，要不要解决，怎么解决？\np59 如果有人不懂心存感激，而你当面告诉他，那么就等于是在骂他，这样你什么事都解决不了。\n一些想法 p23 「我」和约翰就像两个价值观（我在说什么！！）不同的两个同事（技术层面），对待技术有不同的看法。 「我」坚持做一些力所能及探索和学习，争取自己解决问题，而约翰则认为应该让专业的人（修车师傅）来处理问题， 「我」无法容忍一些很小但是总是萦绕心头的小问题，而约翰则认为那不会真正影响什么，而不去进行修理。\n当然，最大的分歧在于我们对新鲜事物（科技）的看法的不同，「我」会积极尝试和学习，约翰则报以敌意，认为新鲜事物（科技）是引起所有这些问题的根源。\np64 目前为止，这本书都可以当作一本关于骑车旅行的书愉快的去读，沿途有美丽的风景，在不同的地方休息，通过地图研究路线，这些都给人以无限的遐想。这时候我就在想，科技给了人便利，同时也让另外一些东西消失，比如研究地图。现在出门几乎旅行不用做任何研究：有成熟的旅游规划、GPS 导航、大众点评，只要跟着热度就行。便利的同时也在失去获得很多不一样的体验的机会。\n","permalink":"https://notes.0081800.xyz/projects/20210821095110-%E7%A6%85%E4%B8%8E%E6%91%A9%E6%89%98%E8%BD%A6%E7%BB%B4%E4%BF%AE%E8%89%BA%E6%9C%AF/","summary":"tags: 正在读的书,读书笔记 这是一本什么样书？ 忘记从哪里看到了这么一本书，很早之前就看到过相关推荐，但是第一次看还是因为在 2021 上半年 Kindle Unlimited 上有这本书的电子书， 因为可以免费阅读加上当时找不到相关书籍才开始阅读这本书。\n读第一遍是我在上班通勤的路上完成的，给我的感受就是这是一本关于旅行和旅行中的一些思考的书。书中「我」描写了很多旅行中的见闻， 并通过「我」的思维来探寻良质，探讨禅与科技、科技与艺术、古典（哲学）主义与浪漫主义。随着主题的深入「我」开始在两个思想中来回切换， 并且开始探讨形而上学的一些东西（古典主义和浪漫主义）这本书也变的越来越难读。总体给我的感觉就是很好的一本书，但是我好像没读太懂。\n基于上面我后面在 JD 买书的时候看到了重庆出版社重新出版的珍藏版《禅与摩托车维修艺术》，我被它的全黑的封面所吸引，毫不犹豫的下单买了这本书。\n随书附赠的一本小册子让我更好的了解这本书和作者罗伯特.M.波西格，其真人确实患过精神分裂症，并接受过电击疗法。这让我想起了书中的「我」和「裴德洛」。 作者也同时说明为什么要用第一人称「我」来叙述本书，因为「我」在讲述的时候是希望倾听的人能够喜欢我。我太喜欢这句话了，同时这也是为什么在笔记里把「我」都引了起来。\n这本小册子和第一遍留给我的困惑让我决定重读这本书，我现在一有空或者感到无聊，我就会捧起这本书来阅读。第二遍阅读我无法从第一部分跳出去，因为书中的内容太多引起了我的共鸣， 这是我在第一遍阅读所没有发现的。我总是反复的阅读，反复的去思考那些带给我共鸣的内容。同时我发现我在日常聊天的时候已经在不知不觉的引用书中的一些内容。 这也是这篇文章的来源，我觉得如果我不写点什么东西，我感觉我会永远“困”在这本书的第一部分。\n如何记录思考？ 这是一本能够让人思考的书，该如何记录这些思考？通过一些尝试，我决定在没读完一小节之后记录我的想法，然后再阅读一遍来修正我的想法。 或许后面的日子我会回来更新我的想法。\n第一部分 01 疏通思想的河道 首先我们应该慢来下，去更好的感受过程而非结果：旅行的意义不仅仅在于到达目的地，更多的是感受旅行的过程（沿途的风景、遇到的人和事）。 不要等到「真理已经再敲你的门，而你却说：“走开，我正在寻找真理”」。\n在全美思想交流更加快速的时代背景之下，原先的河流无法承载大量的思想造成了两岸的灾难，过多的「新鲜事」构成了河道中的污泥， 「最好的」把思想的河道挖凿的太深以至于无法改动。通过一次摩托车的旅行（Chautauqua）来疏通（并非拓宽）思想的河道。 探讨「我」和朋友之间对待摩托车维修（大部分指科技）不同的态度。\n虽然约翰夫妇同样喜欢骑摩托车旅行，但是对待应该多大程度自己维修摩托车方面有很大的不同：\n比如约翰启动不了摩托车，「我」不会主动去帮忙：「除非他真正的需要别人的帮忙，否则别人介入只会引起他的厌烦」。 其实这些不是对待维修摩托车的态度不同，而是对待科技（至少大部分）的态度。「我认为约翰他们的逃避和厌恶只是一种自欺的行为。」\n主题：「佛陀或者耶稣坐在电脑和变速器的齿轮旁修行，会像坐在山顶或者莲花座上修行一样自在。如果你认为不是如此，那无异与亵渎了佛陀 \u0026ndash; 也就是亵渎了你自己。」\n02 放慢脚步认真思考 从前的「我」就像现在的约翰一样，不关心摩托车维修，从修理我摩托车的「专业人士」身上看到了：\n「如果你不放慢脚步认真思考，往往会花费更多的时间得到更差的结果。」 「像旁观者一样对待自己的工作，看起来随和、友善和轻松自在，但并没有投入工作，对工作没有认同感。」 「当你做某件事，一旦想要求快，就表示你再也不关心它，只想去做别的事。」 03 鬼魂裴德洛 「上帝，他来过这里」：暴风雨的闪电和躲避它的摩托车的速度让“我”闪现出鬼魂裴德洛，“我”降低了摩托车的车速：时速从 95 英里降到 55 英里。 儿子克里斯确认为刚才很棒一点也不快，是不是也预示着克里斯喜欢鬼魂裴德洛？指点汽车旅馆也让约翰惊讶于“我”为什么知道，而“我”选择回避。\n思薇娅引出了鬼魂话题：「你好像见鬼了」。\n“我”开始谈论科学的鬼魂，但是这些论调好像属于“我”，而是属于鬼魂裴德洛。科学的鬼魂：只存在于人的心中，比如「万有引力定律」：\n牛顿发现它之前它存在吗？ 地球毁灭，人类消失了它还存在吗？ 它只存在于人的心中，所以是科学的鬼魂。人们之所以相信它是因为人们被催眠了，正统的说是受教育了。古代世界由鬼魂控制：神或人，牛顿是最好的一位。我们的常识由鬼魂的声音构成。\n在克里斯的追问下，“我”声称自己出发寻找鬼魂，并将鬼魂痛打了一顿，这个鬼魂就是：裴德洛。\n04 不要在你需要的情况下诅咒科技 在天气好的早晨中前进，寒风造成了生理上的不适，就像对科技的不满一样。 「他们一面需要科技，一面又要诅咒它。我相信他们很明白这一点，而这正是他们对整个环境不满的原因」。 这一部分更多的是对沿途美丽风景的描写，让人心向往之。 「我不想拥有这些草原，或是把他们拍下来，我也不想改变它们，甚至不想停下来或是继续走下去。」\n05 藝術與科學的視角決定了思考問題的方式 約翰對表象比較感興趣，但是對內涵則不然，通過用易拉罐作爲墊片修理摩托車反映了兩種態度。 那麼我們爲什麼會常常忽略這種差異呢？書中給出了答案「有些東西你忽略是因爲它們非常細微，但有些卻是因爲它們過於龐大」。 思考相同的事情，出發點不一樣就可能會導致完全不同的結論。約翰站在藝術的視角而非用邏輯去思考科學，所以四處碰壁。然後科學（摩托車）沒有按照約翰所想的那樣工作，所以約翰被激怒了，發動不了的摩托車彷彿在約翰看待問題的方式上鑿了一個洞。","title":"《禅与摩托车维修艺术》"},{"content":" tags: LeetCode https://leetcode.com/problems/validate-binary-search-tree/\n/** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public: bool isValidBST(TreeNode* root) { if (root == nullptr || (root-\u0026gt;left == nullptr \u0026amp;\u0026amp; root-\u0026gt;right == nullptr)) { return true; } if (root-\u0026gt;left != nullptr \u0026amp;\u0026amp; root-\u0026gt;right != nullptr) { if (root-\u0026gt;left-\u0026gt;val \u0026gt;= root-\u0026gt;val || root-\u0026gt;right-\u0026gt;val \u0026lt;= root-\u0026gt;val) { return false; } return isValidBST(root-\u0026gt;left) \u0026amp;\u0026amp; isValidBST(root-\u0026gt;right); } if (root-\u0026gt;left != nullptr) { if (root-\u0026gt;left-\u0026gt;val \u0026gt;= root-\u0026gt;val) { return false; } return isValidBST(root-\u0026gt;left); } if (root-\u0026gt;right != nullptr) { if (root-\u0026gt;right-\u0026gt;val \u0026lt;= root-\u0026gt;val) { return false; } return isValidBST(root-\u0026gt;right) ; } return true; } }; 无法处理子树元素大于上一层的问题。中序遍历排序：\n/** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public: bool isValidBST(TreeNode* root) { vector\u0026lt;int\u0026gt; ret; stack\u0026lt;TreeNode*\u0026gt; st; TreeNode* cur; cur = root; while (!st.empty() || cur != nullptr) { while (cur != nullptr) { st.push(cur); cur = cur-\u0026gt;left; } cur = st.top(); st.pop(); ret.push_back(cur-\u0026gt;val); cur = cur-\u0026gt;right; } int prev = ret[0]; for (int i = 1; i \u0026lt; ret.size(); i++) { auto r = ret[i]; if (r \u0026lt;= prev) { return false; } prev = r; } return true; } }; 可以去掉中间结果存数组：\n/** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public: bool isValidBST(TreeNode* root) { stack\u0026lt;TreeNode*\u0026gt; st; TreeNode* cur = nullptr; TreeNode* prev = nullptr; cur = root; while (!st.empty() || cur != nullptr) { while (cur != nullptr) { st.push(cur); cur = cur-\u0026gt;left; } cur = st.top(); st.pop(); if (prev != nullptr \u0026amp;\u0026amp; cur-\u0026gt;val \u0026lt;= prev-\u0026gt;val) { return false; } prev = cur; cur = cur-\u0026gt;right; } return true; } }; [2,1,3] [5,1,4,null,null,3,6] [2,2,2] [5,4,6,null,null,3,7] ","permalink":"https://notes.0081800.xyz/notes/20210818070934-leetcode_98_validate_binary_search_tree/","summary":"tags: LeetCode https://leetcode.com/problems/validate-binary-search-tree/\n/** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public: bool isValidBST(TreeNode* root) { if (root == nullptr || (root-\u0026gt;left == nullptr \u0026amp;\u0026amp; root-\u0026gt;right == nullptr)) { return true; } if (root-\u0026gt;left !","title":"LeetCode: 98. Validate Binary Search Tree"},{"content":" tags: LeetCode,backtracking https://leetcode.com/problems/path-sum-ii/\n/** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public: vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; pathSum(TreeNode* root, int targetSum) { vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; r; if (root == nullptr) { return r; } if (root-\u0026gt;left != nullptr) { auto left = pathSumSide(root-\u0026gt; left, root-\u0026gt;val, targetSum); if (left.size() \u0026gt; 0) { left.insert(left.begin(), root-\u0026gt;val); r.push_back(left); } } if (root-\u0026gt;right != nullptr) { auto right = pathSumSide(root-\u0026gt;right, root-\u0026gt;val, targetSum); if (right.size() \u0026gt; 0) { right.insert(right.begin(), root-\u0026gt;val); r.push_back(right); } } return r; } vector\u0026lt;int\u0026gt; pathSumSide(TreeNode* node, int sum, int targetSum) { vector\u0026lt;int\u0026gt; r; sum += node-\u0026gt;val; if (node-\u0026gt;left == nullptr \u0026amp;\u0026amp; node-\u0026gt;right == nullptr) { if (sum == targetSum) { r.push_back(node-\u0026gt;val); return r; } } if (node-\u0026gt;left != nullptr) { auto ret = pathSumSide(node-\u0026gt;left, sum, targetSum); if (ret.size() \u0026gt; 0) { ret.insert(ret.begin(), node-\u0026gt;val); return ret; } } if (node-\u0026gt;right != nullptr) { auto ret = pathSumSide(node-\u0026gt;right, sum, targetSum); if (ret.size() \u0026gt; 0) { ret.insert(ret.begin(), node-\u0026gt;val); return ret; } } return r; } }; 失败的错误用例:\n[1] 1 增加只有一个节点的判断：\nif (root-\u0026gt;left == nullptr \u0026amp;\u0026amp; root-\u0026gt;right == nullptr) { if (root-\u0026gt;val == targetSum) { vector\u0026lt;int\u0026gt; t; t.push_back(root-\u0026gt;val); r.push_back(t); } } 目前只考虑了两种情况，实际应该有很多种情况，参见用例\n[1,0,1,1,2,0,-1,0,1,-1,0,-1,0,1,0] 2 通过 backtracking + DFS 解决\n/** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public: vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; pathSum(TreeNode* root, int targetSum) { if (root == nullptr) { return res; } backtracking(root, 0, targetSum); return res; } private: vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; res; vector\u0026lt;int\u0026gt; track; void backtracking(TreeNode* node, int sum, int targetSum) { bool leaf = node-\u0026gt;left == nullptr \u0026amp;\u0026amp; node-\u0026gt;right == nullptr; if (leaf) { if (sum + node-\u0026gt;val == targetSum) { track.push_back(node-\u0026gt;val); res.push_back(track); track.pop_back(); } return; } if (node-\u0026gt;left != nullptr) { track.push_back(node-\u0026gt;val); backtracking(node-\u0026gt;left, sum + node-\u0026gt;val, targetSum); track.pop_back(); } if (node-\u0026gt;right != nullptr) { track.push_back(node-\u0026gt;val); backtracking(node-\u0026gt;right, sum + node-\u0026gt;val, targetSum); track.pop_back(); } } }; 测试用例:\n[5,4,8,11,null,13,4,7,2,null,null,5,1] 22 [] 0 [1,0,1,1,2,0,-1,0,1,-1,0,-1,0,1,0] 2 [1,2] 1 [0,1,1] 1 ","permalink":"https://notes.0081800.xyz/notes/20210816083017-leetcode_113_path_sum_ii/","summary":"tags: LeetCode,backtracking https://leetcode.com/problems/path-sum-ii/\n/** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public: vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; pathSum(TreeNode* root, int targetSum) { vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; r; if (root == nullptr) { return r; } if (root-\u0026gt;left !","title":"LeetCode: 113. Path Sum II"},{"content":" tags: LeetCode https://leetcode.com/problems/path-sum/\n递归版\n/** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public: bool hasPathSum(TreeNode* root, int targetSum) { if (root == nullptr) { return false; } return pathSum(root, 0, targetSum); } bool pathSum(TreeNode* node, int sum, int targetSum) { sum += node-\u0026gt;val; if (node-\u0026gt;left == nullptr \u0026amp;\u0026amp; node-\u0026gt;right == nullptr) { if (sum == targetSum) { return true; } } if (node-\u0026gt;left != nullptr) { if (pathSum(node-\u0026gt;left, sum, targetSum)) { return true; } } if (node-\u0026gt;right != nullptr) { if (pathSum(node-\u0026gt;right, sum, targetSum)) { return true; } } return false; } }; 测试用例\n[5,4,8,11,null,13,4,7,2,null,null,null,1] 22 [1,2] 1 [1,2] 0 [1,2,3] 5 简化版\n/** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public: bool hasPathSum(TreeNode* root, int targetSum) { return pathSum(root, 0, targetSum); } bool pathSum(TreeNode* node, int sum, int targetSum) { if (node == nullptr) { return sum == targetSum; } sum += node-\u0026gt;val; return pathSum(node-\u0026gt;left, sum, targetSum) || pathSum(node-\u0026gt;right, sum, targetSum); } }; ","permalink":"https://notes.0081800.xyz/notes/20210816074540-leetcode_112_path_sum/","summary":"tags: LeetCode https://leetcode.com/problems/path-sum/\n递归版\n/** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public: bool hasPathSum(TreeNode* root, int targetSum) { if (root == nullptr) { return false; } return pathSum(root, 0, targetSum); } bool pathSum(TreeNode* node, int sum, int targetSum) { sum += node-\u0026gt;val; if (node-\u0026gt;left == nullptr \u0026amp;\u0026amp; node-\u0026gt;right == nullptr) { if (sum == targetSum) { return true; } } if (node-\u0026gt;left !","title":"LeetCode: 112. Path Sum"},{"content":" tags: LeetCode 79. Word Search\nclass Solution { public: bool exist(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board, string word) { backtracking(board, word, 0, 0); return res; } private: string track; bool res = false; enum Direction { right, down, up, left, }; /** * @param dir: 0: right, 1: down, 2: up, 3: left */ void backtracking(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board, string word, int row, int col) { if (track == word || res) { res = true; return; } for (int i = row; i \u0026lt; board.size(); i++) { for (int j = col; j \u0026lt; board[i].size(); j++) { auto directions = get_next_directions(board, i, j); if (directions.size() == 0) { return; } for (auto d: directions) { int r, c; track.push_back(board[i][j]); std::tie(r, c) = next_char_pos(board, row, col, d); if (word.find(track) == 0) { backtracking(board, word, r, c); } track.pop_back(); } } } } vector\u0026lt;Direction\u0026gt; get_next_directions(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board, int row, int col) { vector\u0026lt;Direction\u0026gt; r; if (col \u0026lt; board[row].size() - 1) { r.push_back(right); } if (row \u0026lt; board.size() - 1) { r.push_back(down); } if (row \u0026gt; 0) { r.push_back(up); } if (col \u0026gt; 0) { r.push_back(left); } return r; } tuple\u0026lt;int, int\u0026gt; next_char_pos(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board, int row, int col, Direction dir) { switch(dir) { case right: col++; break; case left: col--; break; case up: row--; break; case down: row++; break; } tuple\u0026lt;int, int\u0026gt;r(row, col); return r; } }; 失败的用例：\n[[\u0026#34;A\u0026#34;,\u0026#34;B\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;E\u0026#34;],[\u0026#34;S\u0026#34;,\u0026#34;F\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;S\u0026#34;],[\u0026#34;A\u0026#34;,\u0026#34;D\u0026#34;,\u0026#34;E\u0026#34;,\u0026#34;E\u0026#34;]] \u0026#34;ABCB\u0026#34; 因为方向往回走导致，应该规避方向往回走。通过一个 set 来跟踪位置，防止进入前面的位置：\nclass Solution { public: bool exist(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board, string word) { backtracking(board, word, 0, 0); return res; } private: string track; bool res = false; set\u0026lt;tuple\u0026lt;int, int\u0026gt;\u0026gt; pos; enum Direction { right, down, up, left, }; /** * @param dir: 0: right, 1: down, 2: up, 3: left */ void backtracking(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board, string word, int row, int col) { if (track == word || res) { res = true; return; } for (int i = row; i \u0026lt; board.size(); i++) { for (int j = col; j \u0026lt; board[i].size(); j++) { auto directions = get_next_directions(board, i, j); if (directions.size() == 0) { return; } for (auto d: directions) { tuple\u0026lt;int, int\u0026gt; p (i, j); if (pos.find(p) != pos.end()) { continue; } pos.insert(p); track.push_back(board[i][j]); int r, c; std::tie(r, c) = next_char_pos(board, row, col, d); if (word.find(track) == 0) { backtracking(board, word, r, c); } track.pop_back(); pos.erase(p); } } } } vector\u0026lt;Direction\u0026gt; get_next_directions(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board, int row, int col) { vector\u0026lt;Direction\u0026gt; r; if (col \u0026lt; board[row].size() - 1) { r.push_back(right); } if (row \u0026lt; board.size() - 1) { r.push_back(down); } if (row \u0026gt; 0) { r.push_back(up); } if (col \u0026gt; 0) { r.push_back(left); } return r; } tuple\u0026lt;int, int\u0026gt; next_char_pos(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board, int row, int col, Direction dir) { switch(dir) { case right: col++; break; case left: col--; break; case up: row--; break; case down: row++; break; } tuple\u0026lt;int, int\u0026gt;r(row, col); return r; } }; 失败的用例：\n[[\u0026#34;a\u0026#34;]] \u0026#34;a\u0026#34; 代码逻辑有问题，修正后：\nclass Solution { public: bool exist(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board, string word) { backtracking(board, word, 0, 0); return res; } private: string track; bool res = false; set\u0026lt;tuple\u0026lt;int, int\u0026gt;\u0026gt; pos; enum Direction { right, down, up, left, }; /** * @param dir: 0: right, 1: down, 2: up, 3: left */ void backtracking(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board, string word, int row, int col) { if (track == word || res) { res = true; return; } for (int i = row; i \u0026lt; board.size(); i++) { for (int j = col; j \u0026lt; board[i].size(); j++) { tuple\u0026lt;int, int\u0026gt; p (i, j); if (pos.find(p) != pos.end()) { continue; } pos.insert(p); track.push_back(board[i][j]); if (track == word || res) { res = true; return; } if (word.find(track) == 0) { auto directions = get_next_directions(board, i, j); for (auto d: directions) { int r, c; std::tie(r, c) = next_char_pos(board, row, col, d); backtracking(board, word, r, c); } } track.pop_back(); pos.erase(p); } } } vector\u0026lt;Direction\u0026gt; get_next_directions(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board, int row, int col) { vector\u0026lt;Direction\u0026gt; r; if (col \u0026lt; board[row].size() - 1) { r.push_back(right); } if (row \u0026lt; board.size() - 1) { r.push_back(down); } if (row \u0026gt; 0) { r.push_back(up); } if (col \u0026gt; 0) { r.push_back(left); } return r; } tuple\u0026lt;int, int\u0026gt; next_char_pos(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board, int row, int col, Direction dir) { switch(dir) { case right: col++; break; case left: col--; break; case up: row--; break; case down: row++; break; } tuple\u0026lt;int, int\u0026gt;r(row, col); return r; } }; 以下测试用例无法通过：\n[[\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;]] \u0026#34;ba\u0026#34; 调整代码后（进入下一个节点的 row/col 没用 i/j）:\nclass Solution { public: bool exist(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board, string word) { backtracking(board, word, 0, 0); return res; } private: string track; bool res = false; set\u0026lt;tuple\u0026lt;int, int\u0026gt;\u0026gt; pos; enum Direction { right, down, up, left, }; /** * @param dir: 0: right, 1: down, 2: up, 3: left */ void backtracking(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board, string word, int row, int col) { cout \u0026lt;\u0026lt; track \u0026lt;\u0026lt; endl; if (track == word || res) { res = true; return; } for (int i = row; i \u0026lt; board.size(); i++) { for (int j = col; j \u0026lt; board[i].size(); j++) { tuple\u0026lt;int, int\u0026gt; p (i, j); if (pos.find(p) != pos.end()) { continue; } pos.insert(p); track.push_back(board[i][j]); if (track == word) { res = true; return; } if (word.find(track) == 0) { auto directions = get_next_directions(board, i, j); for (auto d: directions) { int r, c; std::tie(r, c) = next_char_pos(board, i, j, d); backtracking(board, word, r, c); } } track.pop_back(); pos.erase(p); } } } vector\u0026lt;Direction\u0026gt; get_next_directions(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board, int row, int col) { vector\u0026lt;Direction\u0026gt; r; if (col \u0026lt; board[row].size() - 1) { r.push_back(right); } if (row \u0026lt; board.size() - 1) { r.push_back(down); } if (row \u0026gt; 0) { r.push_back(up); } if (col \u0026gt; 0) { r.push_back(left); } return r; } tuple\u0026lt;int, int\u0026gt; next_char_pos(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board, int row, int col, Direction dir) { switch(dir) { case right: col++; break; case left: col--; break; case up: row--; break; case down: row++; break; } tuple\u0026lt;int, int\u0026gt;r(row, col); return r; } }; 此时的失败用例：\n[[\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;],[\u0026#34;c\u0026#34;,\u0026#34;d\u0026#34;]] \u0026#34;abcd\u0026#34; 改成如果位置已经存在则返回可以通过:\nclass Solution { public: bool exist(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board, string word) { backtracking(board, word, 0, 0); return res; } private: string track; bool res = false; set\u0026lt;tuple\u0026lt;int, int\u0026gt;\u0026gt; pos; enum Direction { right, down, up, left, }; /** * @param dir: 0: right, 1: down, 2: up, 3: left */ void backtracking(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board, string word, int row, int col) { if (track == word || res) { res = true; return; } for (int i = row; i \u0026lt; board.size(); i++) { for (int j = col; j \u0026lt; board[i].size(); j++) { tuple\u0026lt;int, int\u0026gt; p (i, j); if (pos.find(p) != pos.end()) { return; // \u0026lt;--------- here } pos.insert(p); track.push_back(board[i][j]); if (word.find(track) == 0) { auto directions = get_next_directions(board, i, j); if (track == word) { res = true; return; } for (auto d: directions) { int r, c; std::tie(r, c) = next_char_pos(board, i, j, d); backtracking(board, word, r, c); } } track.pop_back(); pos.erase(p); } } } vector\u0026lt;Direction\u0026gt; get_next_directions(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board, int row, int col) { vector\u0026lt;Direction\u0026gt; r; if (col \u0026lt; board[row].size() - 1) { r.push_back(right); } if (row \u0026lt; board.size() - 1) { r.push_back(down); } if (row \u0026gt; 0) { r.push_back(up); } if (col \u0026gt; 0) { r.push_back(left); } return r; } tuple\u0026lt;int, int\u0026gt; next_char_pos(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board, int row, int col, Direction dir) { switch(dir) { case right: col++; break; case left: col--; break; case up: row--; break; case down: row++; break; } tuple\u0026lt;int, int\u0026gt;r(row, col); return r; } }; 但是在下面测试用例失败了：\n[[\u0026#34;b\u0026#34;],[\u0026#34;a\u0026#34;],[\u0026#34;b\u0026#34;],[\u0026#34;b\u0026#34;],[\u0026#34;a\u0026#34;]] \u0026#34;baa\u0026#34; 简单的过滤掉：\nif (board.size() \u0026gt; 0 \u0026amp;\u0026amp; board[0].size() == 1) { string s; for (int i = 0; i \u0026lt; board.size(); i++) { s.push_back(board[0][0]); } return s.find(word) != string::npos; } 现在下面失败了：\n[[\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;],[\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;a\u0026#34;],[\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;a\u0026#34;],[\u0026#34;b\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;],[\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;a\u0026#34;],[\u0026#34;b\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;]] \u0026#34;bbbaabbbbbab\u0026#34; 经过仔细推敲后：\nclass Solution { public: bool exist(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board, string word) { for (int i = 0; i \u0026lt; board.size(); i++) { for (int j = 0; j \u0026lt; board[i].size(); j++) { backtracking(board, word, i, j); } } return res; } private: string track; bool res = false; set\u0026lt;tuple\u0026lt;int, int\u0026gt;\u0026gt; pos; enum Direction { right, down, up, left, }; /** * @param dir: 0: right, 1: down, 2: up, 3: left */ void backtracking(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board, string word, int row, int col) { tuple\u0026lt;int, int\u0026gt; p (row, col); if (pos.find(p) != pos.end()) { return; // \u0026lt;--------- here } pos.insert(p); track.push_back(board[row][col]); if (track == word) { cout \u0026lt;\u0026lt; track \u0026lt;\u0026lt; endl; res = true; return; } if (res) { return; } if (word.find(track) == 0) { cout \u0026lt;\u0026lt; row \u0026lt;\u0026lt; \u0026#34;, \u0026#34; \u0026lt;\u0026lt; col \u0026lt;\u0026lt; endl; auto directions = get_next_directions(board, row, col); for (auto d: directions) { int r, c; std::tie(r, c) = next_char_pos(board, row, col, d); cout \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; r \u0026lt;\u0026lt; \u0026#34;,\u0026#34; \u0026lt;\u0026lt; c \u0026lt;\u0026lt; endl; backtracking(board, word, r, c); } } track.pop_back(); pos.erase(p); } vector\u0026lt;Direction\u0026gt; get_next_directions(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board, int row, int col) { vector\u0026lt;Direction\u0026gt; r; if (col \u0026lt; board[row].size() - 1) { r.push_back(right); } if (row \u0026lt; board.size() - 1) { r.push_back(down); } if (row \u0026gt; 0) { r.push_back(up); } if (col \u0026gt; 0) { r.push_back(left); } return r; } tuple\u0026lt;int, int\u0026gt; next_char_pos(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board, int row, int col, Direction dir) { switch(dir) { case right: col++; break; case left: col--; break; case up: row--; break; case down: row++; break; } tuple\u0026lt;int, int\u0026gt;r(row, col); return r; } }; 下面用例会导致处理事件过长：\n[[\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;],[\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;],[\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;],[\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;],[\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;],[\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;]] \u0026#34;AAAAAAAAAAAAAAB\u0026#34; 测试用例快照:\n[[\u0026#34;A\u0026#34;,\u0026#34;B\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;E\u0026#34;],[\u0026#34;S\u0026#34;,\u0026#34;F\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;S\u0026#34;],[\u0026#34;A\u0026#34;,\u0026#34;D\u0026#34;,\u0026#34;E\u0026#34;,\u0026#34;E\u0026#34;]] \u0026#34;ABCCED\u0026#34; [[\u0026#34;A\u0026#34;,\u0026#34;B\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;E\u0026#34;],[\u0026#34;S\u0026#34;,\u0026#34;F\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;S\u0026#34;],[\u0026#34;A\u0026#34;,\u0026#34;D\u0026#34;,\u0026#34;E\u0026#34;,\u0026#34;E\u0026#34;]] \u0026#34;SEE\u0026#34; [[\u0026#34;A\u0026#34;,\u0026#34;B\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;E\u0026#34;],[\u0026#34;S\u0026#34;,\u0026#34;F\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;S\u0026#34;],[\u0026#34;A\u0026#34;,\u0026#34;D\u0026#34;,\u0026#34;E\u0026#34;,\u0026#34;E\u0026#34;]] \u0026#34;ABCB\u0026#34; [[\u0026#34;a\u0026#34;]] \u0026#34;a\u0026#34; [[\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;]] \u0026#34;ba\u0026#34; [[\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;],[\u0026#34;c\u0026#34;,\u0026#34;d\u0026#34;]] \u0026#34;dbac\u0026#34; [[\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;],[\u0026#34;c\u0026#34;,\u0026#34;d\u0026#34;]] \u0026#34;abcd\u0026#34; [[\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;],[\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;],[\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;]] \u0026#34;aaaaaaaaaaaaa\u0026#34; [[\u0026#34;b\u0026#34;],[\u0026#34;a\u0026#34;],[\u0026#34;b\u0026#34;],[\u0026#34;b\u0026#34;],[\u0026#34;a\u0026#34;]] \u0026#34;baa\u0026#34; [[\u0026#34;a\u0026#34;]] \u0026#34;ab\u0026#34; [[\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;],[\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;a\u0026#34;],[\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;a\u0026#34;],[\u0026#34;b\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;],[\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;a\u0026#34;],[\u0026#34;b\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;]] \u0026#34;bbbaabbbbbab\u0026#34; [[\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;],[\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;],[\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;],[\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;],[\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;],[\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;]] \u0026#34;AAAAAAAAAAAAAAB\u0026#34; ","permalink":"https://notes.0081800.xyz/notes/20210815081516-leetcode_79_word_search/","summary":"tags: LeetCode 79. Word Search\nclass Solution { public: bool exist(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board, string word) { backtracking(board, word, 0, 0); return res; } private: string track; bool res = false; enum Direction { right, down, up, left, }; /** * @param dir: 0: right, 1: down, 2: up, 3: left */ void backtracking(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board, string word, int row, int col) { if (track == word || res) { res = true; return; } for (int i = row; i \u0026lt; board.","title":"LeetCode: 79. Word Search"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20210814072447-event_store/","summary":"","title":"Event Store"},{"content":" 《领域驱动设计》读书笔记 ","permalink":"https://notes.0081800.xyz/notes/20210814071825-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/","summary":" 《领域驱动设计》读书笔记 ","title":"领域驱动设计"},{"content":" tags: 计划读的书,HTTP,High Performance,Network 在线： https://hpbn.co/ source: Grigorik, Ilya. High-Performance Browser Networking. Beijing ; Sebastopol, CA: O’Reilly, 2013. “Good developers know how things work. Great developers know why things work.”\n","permalink":"https://notes.0081800.xyz/notes/20210813080226-high_performance_browser_networking/","summary":"tags: 计划读的书,HTTP,High Performance,Network 在线： https://hpbn.co/ source: Grigorik, Ilya. High-Performance Browser Networking. Beijing ; Sebastopol, CA: O’Reilly, 2013. “Good developers know how things work. Great developers know why things work.”","title":"High Performance Browser Networking"},{"content":"预写日志（write-ahead log，WAL），也称为重做日志。\n一个仅支持追加修改的文件，每个 B-tree 的修改必须先更新 WAL 然后再修改数本身的页。 当数据库在崩溃后恢复时，该日志用于将 B-tree 恢复到最近一致的状态。\n","permalink":"https://notes.0081800.xyz/notes/20210813074328-%E9%A2%84%E5%86%99%E6%97%A5%E5%BF%97/","summary":"预写日志（write-ahead log，WAL），也称为重做日志。\n一个仅支持追加修改的文件，每个 B-tree 的修改必须先更新 WAL 然后再修改数本身的页。 当数据库在崩溃后恢复时，该日志用于将 B-tree 恢复到最近一致的状态。","title":"预写日志"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20210813073438-rabbitmq/","summary":"","title":"RabbitMQ"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20210813073412-twitter_distributedlog/","summary":"","title":"Twitter DistributedLog"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20210813073357-amazon_kinesis_streams/","summary":"","title":"Amazon Kinesis Streams"},{"content":"AMQP/JMS 风格的消息代理 将单个消息分配给消费者，消费者在成功处理后确认每条消息。消息被确认后从代理中删除。 适合作为一种异步 RPC。\nRabbitMQ ActiveMQ HornetQ Qpid TIBCO Enterprise MEssage Service IBM MQ Azure Service Bus Google Cloud Pub/Sub 多个消费者 负载均衡式 每一条消息都只被传递给其中一个消费者。\n扇出式 每条消息都被传递给所有消费者。\n确认和重新传递 为了确保消息不会丢失，消息代理使用确认：客户端必须在处理完消息后显式的告诉代理，以便代理可以将其从队列中移除。\n如果客户端的连接关闭或超时，而代理没有收到确认，则认为消息未处理，因此它将消息重新传递给另一个消费者。\n消息顺序性 即使消息代理试图保留消息顺序（标准要求），负载均衡与重新传递的组合也不可避免地导致消息被重新排序。\n基于日志的消息代理 代理将分区中的所有消息分配给相同的消费者节点，并始终以相同的顺序发送消息。 通过分区机制来实现并行（写在多个磁盘上突破磁盘带宽），消费者通过检查他们处理的最后一条消息的偏移量来跟踪进度。 代理将消息保存在磁盘上，因此如果有必要，可以回退并重新读取旧消息。 代表性的有：\nKafka Amazon Kinesis Streams Twitter DistributedLog 基于日志的消息存储 参照 LSM-Tree 和 B-tree 的 WAL，可以使用相同的结构来实现消息代理： 生产者通过将消息追加到日志的末尾来发送消息，消费者通过依次读取日志来接收消息。 如果消费者读到日志的末尾，它就开始等待新消息被追加的通知。\n通过对日志进行分区突破单个磁盘所能体能的带宽吞吐上线。\n代理为每个消息分区分配了一个单调递增的序列号或偏移量，保证了分区内的消息完全有序。\n消费者偏移量：记录哪些消息已经被处理，减少 ACK 开销 磁盘空间：分段，定期删除 消费者跟不上生产者：增加 LAG 报警 重新处理消息：重置偏移量 ","permalink":"https://notes.0081800.xyz/notes/20210813072847-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/","summary":"AMQP/JMS 风格的消息代理 将单个消息分配给消费者，消费者在成功处理后确认每条消息。消息被确认后从代理中删除。 适合作为一种异步 RPC。\nRabbitMQ ActiveMQ HornetQ Qpid TIBCO Enterprise MEssage Service IBM MQ Azure Service Bus Google Cloud Pub/Sub 多个消费者 负载均衡式 每一条消息都只被传递给其中一个消费者。\n扇出式 每条消息都被传递给所有消费者。\n确认和重新传递 为了确保消息不会丢失，消息代理使用确认：客户端必须在处理完消息后显式的告诉代理，以便代理可以将其从队列中移除。\n如果客户端的连接关闭或超时，而代理没有收到确认，则认为消息未处理，因此它将消息重新传递给另一个消费者。\n消息顺序性 即使消息代理试图保留消息顺序（标准要求），负载均衡与重新传递的组合也不可避免地导致消息被重新排序。\n基于日志的消息代理 代理将分区中的所有消息分配给相同的消费者节点，并始终以相同的顺序发送消息。 通过分区机制来实现并行（写在多个磁盘上突破磁盘带宽），消费者通过检查他们处理的最后一条消息的偏移量来跟踪进度。 代理将消息保存在磁盘上，因此如果有必要，可以回退并重新读取旧消息。 代表性的有：\nKafka Amazon Kinesis Streams Twitter DistributedLog 基于日志的消息存储 参照 LSM-Tree 和 B-tree 的 WAL，可以使用相同的结构来实现消息代理： 生产者通过将消息追加到日志的末尾来发送消息，消费者通过依次读取日志来接收消息。 如果消费者读到日志的末尾，它就开始等待新消息被追加的通知。\n通过对日志进行分区突破单个磁盘所能体能的带宽吞吐上线。\n代理为每个消息分区分配了一个单调递增的序列号或偏移量，保证了分区内的消息完全有序。\n消费者偏移量：记录哪些消息已经被处理，减少 ACK 开销 磁盘空间：分段，定期删除 消费者跟不上生产者：增加 LAG 报警 重新处理消息：重置偏移量 ","title":"消息队列"},{"content":" tags: TCP,High Performance Browser Networking 原文链接：https://hpbn.co/building-blocks-of-tcp/。 Overview The 4th version of RFC 675, and final two seperate RFCs:\nRFC 791 - Internet Protocol(IPv4) RFC 793 - Transmission Control Protocol TCP provides:\nEffective abstraction. A reliable network running over unreliable channel. Hiding most the complexity of network communication: retransmission of lost data, in-order delivery, congestion control and avoidance, data integrity, and more. Three-Way Handhsake Sequence numbers are important for keep in-order delivery, and they are picked randomly from both sides for security reasons.\nSYN - CLIENT picks a random sequence number X and sends a SYN packet, which may also include addition TCP flags and options. SYN ACK - SERVER increments X by one, picks own random sequence number Y, appends its own set of flags and options, and dispatches the response. ACK - CLIENT increments both X and Y by one and completes the handhsake by dispatching the last ACK packet in the handshake. Implications of Performance: Expensive to Create - Every new TCP connection will have a full roundtrip of latency before any application data can be transferred. 1\nCongestion Avoidance and Control TCP Fast Open aims to solve the Expensive to Create problem.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://notes.0081800.xyz/notes/20210813071739-networking_101_building_blocks_of_tcp/","summary":"tags: TCP,High Performance Browser Networking 原文链接：https://hpbn.co/building-blocks-of-tcp/。 Overview The 4th version of RFC 675, and final two seperate RFCs:\nRFC 791 - Internet Protocol(IPv4) RFC 793 - Transmission Control Protocol TCP provides:\nEffective abstraction. A reliable network running over unreliable channel. Hiding most the complexity of network communication: retransmission of lost data, in-order delivery, congestion control and avoidance, data integrity, and more. Three-Way Handhsake Sequence numbers are important for keep in-order delivery, and they are picked randomly from both sides for security reasons.","title":"Networking 101: Building Blocks of TCP"},{"content":" tags: Network ","permalink":"https://notes.0081800.xyz/notes/20210813071635-tcp/","summary":" tags: Network ","title":"TCP"},{"content":"阻止生产者发送更多的消息。使用背压的场景：\nUnix 管道 TCP ","permalink":"https://notes.0081800.xyz/notes/20210813071452-%E8%83%8C%E5%8E%8B/","summary":"阻止生产者发送更多的消息。使用背压的场景：\nUnix 管道 TCP ","title":"背压"},{"content":"发送事件流 消息系统 生产者速度比消费者快：丢弃消息、将消息缓存在队列、激活背压。 节点崩溃或者暂时历险，是否会有消息丢失？ 生产者与消息系统之间的直接消息传递 UDP 组播：广泛应用于金融股票 无代理消息库：ZerroMQ 和 nanomsg StatsD 和 Brubeck 使用 UDP 传递消息 HTTP、RPC 接口 消息代理 参见：AMQP/JMS 风格的消息代理。 也称消息队列。\n消息对比与数据库对比 多个消费者 确认和重传机制 分区日志 参见： 基于日志的消息代理。\n数据库与流 保持系统同步 变更数据捕获 变更数据捕获（Change Data Capture，CDC）记录了写入数据库的所有更改，并以可复制到其他系统的形式来提取数据。 如果在写入时立即将更改作为一种流来发布，那么 CDC 就更有趣来。\n实现变更数据捕获 解析复制日志，并将解析的内容发送到事件流中进行 replay。\n初始快照 replay 日志占用空间过大，需要进行截断，截断之前的进行初始快照保存。\n日志压缩 参考哈希索引。\n对变更流的 API 支持 数据库开始支持将变更流作为标准接口。\n事件溯源 一种在领域驱动设计社区中开发的技术，与 CDC 最大的区别在于事件溯源在不同抽象层次上应用了将所有对应用程序状态的更改保存为更改事件日志：\nCDC 中：应用程序以数据可变方式来操纵数据库，从数据库中提取较低级的变更日志，从而确保从数据库提取写入顺序与实际写入顺序相匹配。写入数据库的程序不需要知道 CDC 正在发生。 事件溯源中：应用程序的写入逻辑是基于写入事件日志的不可变事件构建的。事件存储仅支持追加，不鼓励甚至禁止更新或删除操作。事件旨在反映在应用程序级别所发生的事情，而不是低级别的状态改变。 专门的数据库 Event Store 来支持使用事件溯源的应用程序。\n从事件中导出当前状态：真正对用户有意义 命令和事件 命令经过校验后转化为事件。\n状态，流与不可变性 流处理 事件中的数据写入数据库、缓存、搜索索引或类似的存储系统，提供给客户端查询。 通过某种方式将事件推送给用户，如电子邮件、短信等。 处理一个或多个输入流产生过一个或多个输出流。 流处理适用场景 复杂事件处理 复杂事件处理（Complex Event Processing，CEP）尤其适用需要搜索特定的事件模式。 实现：Esper、IBM Info Sphere Streams、Apama、TIBCO StreamBase 和 SQLstream。\n流分析 Apache Storm、Spark Streaming、Flink、Concord、Samza 和 Kafka Streams。\n维护物化视图 在流上搜索 消息传递和 RPC 流的时间问题 需记录三个时间：\n事件发生时间，设备的时钟 事件发送时间，设备的时钟 事件接收时间，福奇的时钟 窗口类型 轮转窗口：长度固定，相互之间不重叠。 跳跃窗口：长度固定，可以允许相互之间重叠。 滑动窗口：通过保留事件排序的事件缓冲区并且从窗口过期时移除旧事件来实现。 会话窗口：没有固定持续事件，通过将同一用户在时间上紧密相关的所有事件分组在一起。 流式 join 流和流 join（窗口 join） 流和表 join 表和表 join join 和事件依赖性 流处理容错 微处理和校验点 重新审视原子提交 幂等性 故障后重建状态 ","permalink":"https://notes.0081800.xyz/notes/20210813065446-%E6%B5%81%E5%A4%84%E7%90%86%E7%B3%BB%E7%BB%9F/","summary":"发送事件流 消息系统 生产者速度比消费者快：丢弃消息、将消息缓存在队列、激活背压。 节点崩溃或者暂时历险，是否会有消息丢失？ 生产者与消息系统之间的直接消息传递 UDP 组播：广泛应用于金融股票 无代理消息库：ZerroMQ 和 nanomsg StatsD 和 Brubeck 使用 UDP 传递消息 HTTP、RPC 接口 消息代理 参见：AMQP/JMS 风格的消息代理。 也称消息队列。\n消息对比与数据库对比 多个消费者 确认和重传机制 分区日志 参见： 基于日志的消息代理。\n数据库与流 保持系统同步 变更数据捕获 变更数据捕获（Change Data Capture，CDC）记录了写入数据库的所有更改，并以可复制到其他系统的形式来提取数据。 如果在写入时立即将更改作为一种流来发布，那么 CDC 就更有趣来。\n实现变更数据捕获 解析复制日志，并将解析的内容发送到事件流中进行 replay。\n初始快照 replay 日志占用空间过大，需要进行截断，截断之前的进行初始快照保存。\n日志压缩 参考哈希索引。\n对变更流的 API 支持 数据库开始支持将变更流作为标准接口。\n事件溯源 一种在领域驱动设计社区中开发的技术，与 CDC 最大的区别在于事件溯源在不同抽象层次上应用了将所有对应用程序状态的更改保存为更改事件日志：\nCDC 中：应用程序以数据可变方式来操纵数据库，从数据库中提取较低级的变更日志，从而确保从数据库提取写入顺序与实际写入顺序相匹配。写入数据库的程序不需要知道 CDC 正在发生。 事件溯源中：应用程序的写入逻辑是基于写入事件日志的不可变事件构建的。事件存储仅支持追加，不鼓励甚至禁止更新或删除操作。事件旨在反映在应用程序级别所发生的事情，而不是低级别的状态改变。 专门的数据库 Event Store 来支持使用事件溯源的应用程序。\n从事件中导出当前状态：真正对用户有意义 命令和事件 命令经过校验后转化为事件。\n状态，流与不可变性 流处理 事件中的数据写入数据库、缓存、搜索索引或类似的存储系统，提供给客户端查询。 通过某种方式将事件推送给用户，如电子邮件、短信等。 处理一个或多个输入流产生过一个或多个输出流。 流处理适用场景 复杂事件处理 复杂事件处理（Complex Event Processing，CEP）尤其适用需要搜索特定的事件模式。 实现：Esper、IBM Info Sphere Streams、Apama、TIBCO StreamBase 和 SQLstream。","title":"流处理系统"},{"content":"原文链接：Why MapReduce is making a comeback。\n","permalink":"https://notes.0081800.xyz/notes/20210811111926-why_mapreduce_is_making_a_comeback/","summary":"原文链接：Why MapReduce is making a comeback。","title":"Why MapReduce is making a comeback"},{"content":" tags: Rust 原文：When Zero Cost Abstractions Aren\u0026rsquo;t Zero Cost ","permalink":"https://notes.0081800.xyz/notes/20210810151736-when_zero_cost_abstractions_aren_t_zero_cost/","summary":" tags: Rust 原文：When Zero Cost Abstractions Aren\u0026rsquo;t Zero Cost ","title":"When Zero Cost Abstractions Aren't Zero Cost"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20210810072604-%E5%BC%B9%E6%80%A7%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E9%9B%86/","summary":"","title":"弹性分布式数据集"},{"content":"基于 Hadoop 分布式文件系统使用 SSTables 和 LSM-Tree 实现随机访问的 OLTP 数据库。\n","permalink":"https://notes.0081800.xyz/notes/20210810071455-hbase/","summary":"基于 Hadoop 分布式文件系统使用 SSTables 和 LSM-Tree 实现随机访问的 OLTP 数据库。","title":"HBase"},{"content":"MPP 数据库 Gamma 数据库机器 Teradata Tandem NonStop SQL ","permalink":"https://notes.0081800.xyz/notes/20210810070530-%E5%A4%A7%E8%A7%84%E6%A8%A1%E5%B9%B6%E8%A1%8C%E5%A4%84%E7%90%86/","summary":"MPP 数据库 Gamma 数据库机器 Teradata Tandem NonStop SQL ","title":"大规模并行处理"},{"content":" tags: 分布式,一致性,Clock Synchronization,Multicast source: https://signalsandthreads.com/clock-synchronization/ Electronic Oscillator: Computer itself to Dervie its Notion of Time Computer\u0026rsquo;s clock are based on a 1 MHz electronic oscillator circuit, that is oscillating at some frequency, and driving an interrupt. So the operating system can use it to derive its notion of time. It helps computer to keep the time correct.\nBut a bad oscillator could be influenced by the heat of CPU, like compiling Linux kernel, etc. A really high-quality oscillator would be really expensive. So most computers come with fairly bad oscillators.\nGPS: External Reference Buy a GPS appliance to receive time from the signal of the GPS satellites.\nFrom the book DDIA, nearly every large data center have one in their room to synchronize time from GPS.\nThe accuracy there is something like maybe 100 nanoseconds.\nWhy Clock Synchronization is so Important? Total ordering of events in a distributed system.\nNTP: Synchronize Clock Inside of a Computer Network NTP stands for Network Time Protocol.\nThere are four timestamps, as the core:\nclient send timestamp: before client send a packet to server, client record a timestamp as it. server receive timestamp: when the server received the packet. server send timestamp: when the server reply to the client. client receive timestamp: when the client recived the reply packet from the server. With those four timestamps, we can compute two important numbers:\nThe offset, how far my clock is off from yours. The delay, how long it took those packets to traverse the network. The Weakness of NTP Too much assumption. Adjust time abruptly. May change time in the negative direction. chrony: A More Customizable Implementation of NTP NTP can do the Slewing in an appropariate way: keep the rates pretty close to the real-time rates, and it\u0026rsquo;s slowly, for chrony, the default is 12 seconds to remove one second of error.\nPTP: Precision Time Protocol A successor to NTP that uses multicast, hardware timestamping, networking switches, and faster default update rates to achieve better synchronization. Which meets MiFID II1.\nNTP is good to milliseconds. PTP is good to microseconds.\nThree things made PTP much more accurate than NTP:\nHardware Timestamping: many hardware vendors support it with PTP. So PTP get a timestamp when the packet arrives at the network card. Frequency of Updates. Lots of Switches, multicast by switches, involved and help you move time across the network while understanding their own delays that they’re adding to it. Multicast: Best Master Clock Algorithm A process for determining the best time source available, which PTP then uses as its grandmaster2.\nWith multicast, as a client, you don\u0026rsquo;t need to configured which server to talk, just run the client, and start receiving from grandmaster. It also good to grandmaster: NO connection need to maintain.\nAlso with the multicast, PTP should be used:\nIn a small area. Hybrid mode, sync message comes in multicast, but the delay request and the delay response wind up being unicast. Final Solution Some GPS appliances get time from GPS. Use PTP to move time from the GPS appliances to a set of Linux machines. The, NTP interleaved mode to move the time from those machines onto machines further downstream. Short Overview of NTP Interleaved Mode the interleaved mode is sort of a special way in which you can run NTP and that when you transmit your next NTP packet you send that hardware timestamp that you got for the previous transmission, and then the other side, each side can use those. I don’t want to get into too much of the details of how that works, but it allows you to get more accuracy and to leverage those hardware timestamps on transmission.\nResults We are absolutely no worse error than about 35 microseconds.\nA set of European financial regulations that required, among a number of other changes, that some market participants, including Jane Street, be able to show that their clocks were synchronized, within 100 Microseconds, to UTC.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nThe clock used by PTP as its time reference.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://notes.0081800.xyz/notes/20210809103849-clock_synchronization_with_chris_perl/","summary":"tags: 分布式,一致性,Clock Synchronization,Multicast source: https://signalsandthreads.com/clock-synchronization/ Electronic Oscillator: Computer itself to Dervie its Notion of Time Computer\u0026rsquo;s clock are based on a 1 MHz electronic oscillator circuit, that is oscillating at some frequency, and driving an interrupt. So the operating system can use it to derive its notion of time. It helps computer to keep the time correct.\nBut a bad oscillator could be influenced by the heat of CPU, like compiling Linux kernel, etc.","title":"Clock Synchronization with Chris Perl"},{"content":" tags: Bigdata bucketed map join ","permalink":"https://notes.0081800.xyz/notes/20210809080723-hive/","summary":" tags: Bigdata bucketed map join ","title":"Hive"},{"content":" tags: Bigdata Hadoop Distributed File System MapReduce MapReduce shuffle 按照 reducer 分区，排序和将数据分区从 mapper 复制到 reducer。（令人困惑的术语，并不完全与洗牌一样，在 MapReduce 中其实没有随机性）。\nMapReduce 的分布式执行 Hadoop MapReduce 并行化基于数据分区实现：\n输入：通常是 HDFS 中的一个目录。 分区：每个文件或文件块都被视为一个单独的分区。 处理：每个分区由单独的 map 任务来处理。 每个 mapper 都会尽量实现计算靠近数据。 代码复制：JAR 文件。 Reduce 任务的计算也被分隔成块，可以不必与 mapper 任务数量相同，MapReduce 框架使用关键字的哈希值来确保具有相同关键字的键值对都在相同的 reduce 任务中处理。 键值对必须进行排序，排序是分阶段进行的： 每个 map 任务都基于关键字哈希值，按照 reducer 对输出进行分块。 每个分区都被写入 mapper 程序所在的本地磁盘上的已排序文件，参见 SSTables 和 LSM-Tree。 reducer 与每个 mapper 相连接：MapReduce 调度器会在 mapper 写入经过排序的输出文件后，通知 reducer 开始从 mapper 中获取输出文件，框架进行 MapReduce shuffle。 reducer 任务从 mapper 中获取文件并将它们合并在一起，同时保持数据的排序。不同 mapper 使用相同的关键字生成记录，会在合并后的 reducer 输入中位于相邻的位置。 reducer 可以使用任意逻辑来处理这些记录，并且生成任意数量的输出记录。记录被写入分布式文件系统中的文件。 MapReduce 工作流调度器 Oozie Azkaban Luigi Airflow Pinball 对比分布式数据库 MapReduce 中的并行处理和并行 join 算法已经在十多年前所谓的大规模并行处理（MPP）数据库中实现了。\n存储多样性 分布式文件系统中的文件只是字节序列，可以使用任何数据模型和编码来编写。可以是数据库记录，也可以是文本、图像、视频、传感器读数、稀疏矩阵、特征向量、基因组序列或任何其他类型的数据。\nMPP 数据库 通常需要对数据和查询模式进行仔细的提前建模。\nHadoop 经常被用于实现 ETL 过程：来自事务处理系统的数据以某种原始形式转储到分布式文件系统，然后编写 MapReduce 作业进行数据清理，将其转换为关系表单，并将其导入 MPP 数据仓库以进行分析。\n处理模型多样性 MPP 数据库属于一体化、紧密集成的软件系统。 SQL、MapReduce、HBase（随机访问的 OLTP 数据库）Impala 等不同的组件。 针对频繁故障设计 YARN Yarn参数优化(Fair Scheduler版本)\n","permalink":"https://notes.0081800.xyz/notes/20210809073407-hadoop/","summary":"tags: Bigdata Hadoop Distributed File System MapReduce MapReduce shuffle 按照 reducer 分区，排序和将数据分区从 mapper 复制到 reducer。（令人困惑的术语，并不完全与洗牌一样，在 MapReduce 中其实没有随机性）。\nMapReduce 的分布式执行 Hadoop MapReduce 并行化基于数据分区实现：\n输入：通常是 HDFS 中的一个目录。 分区：每个文件或文件块都被视为一个单独的分区。 处理：每个分区由单独的 map 任务来处理。 每个 mapper 都会尽量实现计算靠近数据。 代码复制：JAR 文件。 Reduce 任务的计算也被分隔成块，可以不必与 mapper 任务数量相同，MapReduce 框架使用关键字的哈希值来确保具有相同关键字的键值对都在相同的 reduce 任务中处理。 键值对必须进行排序，排序是分阶段进行的： 每个 map 任务都基于关键字哈希值，按照 reducer 对输出进行分块。 每个分区都被写入 mapper 程序所在的本地磁盘上的已排序文件，参见 SSTables 和 LSM-Tree。 reducer 与每个 mapper 相连接：MapReduce 调度器会在 mapper 写入经过排序的输出文件后，通知 reducer 开始从 mapper 中获取输出文件，框架进行 MapReduce shuffle。 reducer 任务从 mapper 中获取文件并将它们合并在一起，同时保持数据的排序。不同 mapper 使用相同的关键字生成记录，会在合并后的 reducer 输入中位于相邻的位置。 reducer 可以使用任意逻辑来处理这些记录，并且生成任意数量的输出记录。记录被写入分布式文件系统中的文件。 MapReduce 工作流调度器 Oozie Azkaban Luigi Airflow Pinball 对比分布式数据库 MapReduce 中的并行处理和并行 join 算法已经在十多年前所谓的大规模并行处理（MPP）数据库中实现了。","title":"Hadoop"},{"content":" tags: Rust ","permalink":"https://notes.0081800.xyz/notes/20210808083146-tokio/","summary":" tags: Rust ","title":"Tokio"},{"content":" tags: 分布式 ","permalink":"https://notes.0081800.xyz/notes/20210808080733-%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/","summary":" tags: 分布式 ","title":"分布式文件系统"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20210808075738-%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%E5%AD%98%E5%82%A8/","summary":"","title":"网络连接存储"},{"content":" tags: Bigdata,分布式文件系统 与网络连接存储（NAS）和 存储区域网络（SAN）架构相比，HDFS 基于无共享原则，无需定制硬件和特殊网络基础设施（光纤）。\nHDFS 创建了一个庞大的文件系统，来充分利用每个守护进程机器上的磁盘资源。\nHDFS 包含一个在每台机器上运行的守护进程，并会开放一个网络服务以允许其他节点访问存储在该机器上的文件。 名为 NameNode 的中央服务器会跟踪哪个文件块存储在哪个服务器上。 考虑容错，文件快块复制到多台机器上，或者像 Reed-Solomon 代码中这样的纠删码方案（类似 RAID，但无需特殊硬件）。 提供很好的扩展性，配合商业硬件和开源软件，可以运行在上万台机器，容量达几百 PB。 计算靠近数据 只要有足够的空闲内存和 CPU 资源，MapReduce 调度器会尝试在输入文件的副本的某台机器上运行 mapper 任务。\n","permalink":"https://notes.0081800.xyz/notes/20210808075530-hadoop_distributed_file_system/","summary":"tags: Bigdata,分布式文件系统 与网络连接存储（NAS）和 存储区域网络（SAN）架构相比，HDFS 基于无共享原则，无需定制硬件和特殊网络基础设施（光纤）。\nHDFS 创建了一个庞大的文件系统，来充分利用每个守护进程机器上的磁盘资源。\nHDFS 包含一个在每台机器上运行的守护进程，并会开放一个网络服务以允许其他节点访问存储在该机器上的文件。 名为 NameNode 的中央服务器会跟踪哪个文件块存储在哪个服务器上。 考虑容错，文件快块复制到多台机器上，或者像 Reed-Solomon 代码中这样的纠删码方案（类似 RAID，但无需特殊硬件）。 提供很好的扩展性，配合商业硬件和开源软件，可以运行在上万台机器，容量达几百 PB。 计算靠近数据 只要有足够的空闲内存和 CPU 资源，MapReduce 调度器会尝试在输入文件的副本的某台机器上运行 mapper 任务。","title":"Hadoop Distributed File System"},{"content":" tags: Emacs M-x life RET 康威生命游戏（Conway\u0026rsquo;s Game of Life）\n","permalink":"https://notes.0081800.xyz/notes/20210808075104-emacs_easter_egg/","summary":"tags: Emacs M-x life RET 康威生命游戏（Conway\u0026rsquo;s Game of Life）","title":"Emacs Easter egg"},{"content":" tags: 技术 数据库作为一个长期发展的技术，但是在中国相对处于一个起步阶段，相关人才比较少。近年能够看得到的技术：\nTiDB 分布式关系型数据库 TDengine 面向 IoT 的 OLAP 数据库 相关创业公司：\n神策 https://zhuanlan.zhihu.com/p/396433354 ","permalink":"https://notes.0081800.xyz/notes/20210805082720-%E6%95%B0%E6%8D%AE%E5%BA%93/","summary":" tags: 技术 数据库作为一个长期发展的技术，但是在中国相对处于一个起步阶段，相关人才比较少。近年能够看得到的技术：\nTiDB 分布式关系型数据库 TDengine 面向 IoT 的 OLAP 数据库 相关创业公司：\n神策 https://zhuanlan.zhihu.com/p/396433354 ","title":"数据库"},{"content":"MapReduce MapReduce 与分布式文件系统 MapReduce 就像分布在上千台机器上的 Unix 工具。\nMapReduce 作业通常不会修改输入，除了输出外没有任何副作用。 MapReduce 作业在分布式文件系统上读写。（Unix 工具 stdin、stdout），如 HDFS（Hadoop Distributed File System)等（GlusterFS、QFS、Amazon S3、Azure Blob 和 OpenStack Swift）。 MapReduce 作业执行 MapReduce 是一个编程框架，可以使用它编写代码处理 HDFS 等分布式文件系统中的大型数据集。\n要创建 MapReduce 作业需要实现两个回调函数： mapper 和 reducer （另请参阅 MapReduce 查询）:\nMapper: 每个输入记录都会调用一次，从输入记录提取任意数量的关键字和值（可以为空），不保留任何状态，可以独立处理。 Reducer: MapReduce 框架使用 Mapper 生成的键值对，收集同一个关键字的所有值，并使用迭代器调用 reducer 以使用该值的集合。 Reducer 可以生成输出记录。 MapReduce 分布式执行 参见 Hadoop 的 MapReduce 的分布式执行。\nMapReduce 工作流 将 MapReduce 作业链接到工作流是非常普遍的，作业的输出作为下一个作业的输入。通过目录名隐式的完成：\n第一个作业必须配置将其输出写入 HDFS 中指定目录； 第二个作业必须配置读取相同的目录名作为输入。 目前已经开发了处理依赖管理的 MapReduce 工作流调度器。\nReduce 端的 join 与分组 批处理的背景下讨论 join，主要解决数据集内存在关联的所有事件。 假设 join 两张表：用户和活动事件。\n排序-合并 join 次级排序：reducer 会首先看到用户数据库的记录，然后按照时间戳顺序查看活动事件。\n基于次级排序 reducer 可以很容易的执行 join：为每个用户 ID 调用一次 reducer 函数。\n第一个值是来自用户数据库的出生日期记录，并存储在局部变量。 然后使用相同的用户 ID 遍历活动事件。 进行聚类。 reducer 每次处理一个特定用户 ID 的所有记录。\n将相关数据放在一起 分组 处理数据倾斜 数据抽样探测热键，使用算法进行补偿。缺点是需要进行数据复制。\nHive 需要在表格元数据中明确指定热键，并将与这些键相关记录与其余文件分开存放。\nMap 端 join 操作 广播哈希 join 把小数据集加载到内存哈希表中，mapper 的时候直接读取哈希表进行数据补全。\n“广播”：每个分区的 mapper 读取整个小数据集到内存哈希表。\n分区哈希 join 将加载到内存哈希表的数据缩小独立作用于每个分区。\nHive 中称为 bucketed map join。\nmap 端合并 join 按关键字升序增量读取两个输入文件，并且匹配具有相同关键字的记录。\n具有 map 端 join 的 MapReduce 工作流 批处理工作流的输出 生成搜索索引 批处理输出键值 批处理输出的哲学 对比 Hadoop 与分布式数据库 参见 对比分布式数据库。\n相关文章 Why MapReduce is making a comeback 超越 MapReduce 中间状态实体化 数据流引擎：Spark、Flink、Tez 容错：Spark 使用 弹性分布式数据集 跟踪数据的祖先，Flink 对运算符状态建立检查点来从故障中恢复。 数据流对 MapReduce 的改进是：不需要自己将所有中间状态写入文件系统。\n图与迭代处理 Pregel 处理模型 高级 API 和语言 Hive、Pig、Cascading 和 Crunch。Tez 可以将这些高级语言移植到新的数据流执行引擎。\n","permalink":"https://notes.0081800.xyz/notes/20210805074336-%E6%89%B9%E5%A4%84%E7%90%86%E7%B3%BB%E7%BB%9F/","summary":"MapReduce MapReduce 与分布式文件系统 MapReduce 就像分布在上千台机器上的 Unix 工具。\nMapReduce 作业通常不会修改输入，除了输出外没有任何副作用。 MapReduce 作业在分布式文件系统上读写。（Unix 工具 stdin、stdout），如 HDFS（Hadoop Distributed File System)等（GlusterFS、QFS、Amazon S3、Azure Blob 和 OpenStack Swift）。 MapReduce 作业执行 MapReduce 是一个编程框架，可以使用它编写代码处理 HDFS 等分布式文件系统中的大型数据集。\n要创建 MapReduce 作业需要实现两个回调函数： mapper 和 reducer （另请参阅 MapReduce 查询）:\nMapper: 每个输入记录都会调用一次，从输入记录提取任意数量的关键字和值（可以为空），不保留任何状态，可以独立处理。 Reducer: MapReduce 框架使用 Mapper 生成的键值对，收集同一个关键字的所有值，并使用迭代器调用 reducer 以使用该值的集合。 Reducer 可以生成输出记录。 MapReduce 分布式执行 参见 Hadoop 的 MapReduce 的分布式执行。\nMapReduce 工作流 将 MapReduce 作业链接到工作流是非常普遍的，作业的输出作为下一个作业的输入。通过目录名隐式的完成：\n第一个作业必须配置将其输出写入 HDFS 中指定目录； 第二个作业必须配置读取相同的目录名作为输入。 目前已经开发了处理依赖管理的 MapReduce 工作流调度器。\nReduce 端的 join 与分组 批处理的背景下讨论 join，主要解决数据集内存在关联的所有事件。 假设 join 两张表：用户和活动事件。","title":"批处理系统"},{"content":" tags: LeetCode ","permalink":"https://notes.0081800.xyz/notes/20210805073600-leetcode_37_sudoku_solver/","summary":" tags: LeetCode ","title":"LeetCode: 37. Sudoku Solver"},{"content":" tags: LeetCode https://leetcode.com/problems/valid-sudoku/\n\u0026lt;- high -- low -\u0026gt; +------------------- wow(row(i):0,col(j):0) 0 -\u0026gt; [ 0010, 0010 ] | 1 -\u0026gt; [ 0000, 0000 ] | 2 -\u0026gt; [ 0000, 0000 ] | | +--------------- wow(row(i):0,col(j):1) 0 -\u0026gt; [ 0010 | 1 = 0011, 0010 ] | | 1 -\u0026gt; [ 0000, 0000 | 1 = 0001 ] | | 2 -\u0026gt; [ 0000, 0000 ] | | | | +----------- wow(row(i):0,col(j):2) 0 -\u0026gt; [ 0011 | 3 = 0100, 0010 ] | | | 1 -\u0026gt; [ 0000, 0001 ] | | | 2 -\u0026gt; [ 0000, 0000 | 3 = 0100 ] +---+---+---+ | 2 | 1 | 3 | +---+---+---+ ----| 3 | 2 | 1 | | +---+---+---+ | | 1 | 3 | 2 | | +---+---+---+ |- wow(row(i):1,col(j):0) 0 -\u0026gt; [0010 | 3 = 0110, 0010] +---------------------+ 1 -\u0026gt; [0000, 0001 | 3 = 0101] 2 -\u0026gt; [0000, 0100] class Solution { public: bool isValidSudoku(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board) { vector\u0026lt;int\u0026gt; wow(9,0); int mux1; int mux2; int mux3; int box_index; for(int i=0;i\u0026lt;9;i++){ for(int j=0;j\u0026lt;9;j++){ if(board[i][j] == \u0026#39;.\u0026#39;){ continue; } mux1 = 0x01 \u0026lt;\u0026lt; (board[i][j] - \u0026#39;1\u0026#39;); mux2 = 0x01 \u0026lt;\u0026lt; 9 \u0026lt;\u0026lt; (board[i][j] - \u0026#39;1\u0026#39;); mux3 = 0x01 \u0026lt;\u0026lt; 9 \u0026lt;\u0026lt; 9 \u0026lt;\u0026lt; (board[i][j] - \u0026#39;1\u0026#39;); box_index = (i/3) * 3 + j/3; if((wow[i]\u0026amp;mux1) != mux1 \u0026amp;\u0026amp; (wow[j]\u0026amp;mux2) != mux2 \u0026amp;\u0026amp; (wow[box_index]\u0026amp;mux3) != mux3){ wow[i] = wow[i]|mux1; wow[j] = wow[j]|mux2; wow[box_index] = wow[box_index]|mux3; } else{ return false; } } } return true; } }; ","permalink":"https://notes.0081800.xyz/notes/20210805070351-leetcode_36_valid_sudoku/","summary":"tags: LeetCode https://leetcode.com/problems/valid-sudoku/\n\u0026lt;- high -- low -\u0026gt; +------------------- wow(row(i):0,col(j):0) 0 -\u0026gt; [ 0010, 0010 ] | 1 -\u0026gt; [ 0000, 0000 ] | 2 -\u0026gt; [ 0000, 0000 ] | | +--------------- wow(row(i):0,col(j):1) 0 -\u0026gt; [ 0010 | 1 = 0011, 0010 ] | | 1 -\u0026gt; [ 0000, 0000 | 1 = 0001 ] | | 2 -\u0026gt; [ 0000, 0000 ] | | | | +----------- wow(row(i):0,col(j):2) 0 -\u0026gt; [ 0011 | 3 = 0100, 0010 ] | | | 1 -\u0026gt; [ 0000, 0001 ] | | | 2 -\u0026gt; [ 0000, 0000 | 3 = 0100 ] +---+---+---+ | 2 | 1 | 3 | +---+---+---+ ----| 3 | 2 | 1 | | +---+---+---+ | | 1 | 3 | 2 | | +---+---+---+ |- wow(row(i):1,col(j):0) 0 -\u0026gt; [0010 | 3 = 0110, 0010] +---------------------+ 1 -\u0026gt; [0000, 0001 | 3 = 0101] 2 -\u0026gt; [0000, 0100] class Solution { public: bool isValidSudoku(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board) { vector\u0026lt;int\u0026gt; wow(9,0); int mux1; int mux2; int mux3; int box_index; for(int i=0;i\u0026lt;9;i++){ for(int j=0;j\u0026lt;9;j++){ if(board[i][j] == \u0026#39;.","title":"LeetCode: 36. Valid Sudoku"},{"content":" tags: 分布式 ","permalink":"https://notes.0081800.xyz/topics/20210804115431-%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%B1%E8%AF%86/","summary":" tags: 分布式 ","title":"分布式共识"},{"content":" tags: 分布式共识,技术概念 ","permalink":"https://notes.0081800.xyz/notes/20210804115349-%E5%8C%BA%E5%9D%97%E9%93%BE/","summary":" tags: 分布式共识,技术概念 ","title":"区块链"},{"content":" tags: LeetCode source: https://leetcode.com/problems/combination-sum-ii/ LeetCode: 39. Combination Sum 的进阶。元素不在唯一且每一个元素只能出现一次。对结果进行排序然后通过 set 对结果进行去重：\nclass Solution { public: vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; combinationSum2(vector\u0026lt;int\u0026gt;\u0026amp; candidates, int target) { sort(candidates.begin(), candidates.end()); backtracking(candidates, 0, 0, target); vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; r; for (auto t : res) { r.push_back(t); } return r; } private: set\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; res; vector\u0026lt;int\u0026gt; track; map\u0026lt;int, bool\u0026gt; visited; void backtracking(vector\u0026lt;int\u0026gt;\u0026amp; condidates, int start, int n, int target) { if (n == target) { res.insert(track); return; } if (n \u0026gt; target) { return; } int c = 0; int sz = condidates.size(); for (int i = start; i \u0026lt; sz; i++) { c = condidates[i]; track.push_back(c); backtracking(condidates, i + 1, n + c, target); track.pop_back(); } } }; 以下测试用例无法通过：\n[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] 30 class Solution { public: vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; combinationSum2(vector\u0026lt;int\u0026gt;\u0026amp; candidates, int target) { sort(candidates.begin(), candidates.end()); backtracking(candidates, 0, 0, target); vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; r; for (auto t : res) { r.push_back(t); } return r; } private: set\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; res; vector\u0026lt;int\u0026gt; track; map\u0026lt;int, bool\u0026gt; visited; void backtracking(vector\u0026lt;int\u0026gt;\u0026amp; condidates, int start, int n, int target) { if (n \u0026gt;= target) { if (n == target) { res.insert(track); } return; } int c = 0; int sz = condidates.size(); for (int i = start; i \u0026lt; sz; i++) { // 避免全是一样的陷入无限的循环。 if (i \u0026gt; start \u0026amp;\u0026amp; condidates[i] == condidates[i - 1]) { continue; } c = condidates[i]; track.push_back(c); backtracking(condidates, i + 1, n + c, target); track.pop_back(); } cout \u0026lt;\u0026lt; start \u0026lt;\u0026lt; \u0026#34;/\u0026#34; \u0026lt;\u0026lt; sz \u0026lt;\u0026lt; \u0026#34;, \u0026#34;; } }; ","permalink":"https://notes.0081800.xyz/notes/20210804071039-leetcode_40_combination_sum_ii/","summary":"tags: LeetCode source: https://leetcode.com/problems/combination-sum-ii/ LeetCode: 39. Combination Sum 的进阶。元素不在唯一且每一个元素只能出现一次。对结果进行排序然后通过 set 对结果进行去重：\nclass Solution { public: vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; combinationSum2(vector\u0026lt;int\u0026gt;\u0026amp; candidates, int target) { sort(candidates.begin(), candidates.end()); backtracking(candidates, 0, 0, target); vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; r; for (auto t : res) { r.push_back(t); } return r; } private: set\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; res; vector\u0026lt;int\u0026gt; track; map\u0026lt;int, bool\u0026gt; visited; void backtracking(vector\u0026lt;int\u0026gt;\u0026amp; condidates, int start, int n, int target) { if (n == target) { res.insert(track); return; } if (n \u0026gt; target) { return; } int c = 0; int sz = condidates.","title":"LeetCode: 40. Combination Sum II"},{"content":" tags: LeetCode source: https://leetcode.com/problems/combination-sum/ class Solution { public: vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; combinationSum(vector\u0026lt;int\u0026gt;\u0026amp; candidates, int target) { backtracking(candidates, 0, target); return res; } private: vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; res; vector\u0026lt;int\u0026gt; track; void backtracking(vector\u0026lt;int\u0026gt; \u0026amp; candidates, int n, int target) { if (n == target) { res.push_back(track); return; } // this is new if (n \u0026gt; target) { return; } for (auto c : candidates) { track.push_back(c); backtracking(candidates, n + c, target); track.pop_back(); } } }; 问题：会有不同顺序但是元素相同的数组，如何快速高效的进行过滤？\n- [[2,2,3],[2,3,2],[3,2,2],[7]] + [[2,2,3],[7]] 一个比较 tricky 的技巧，就是判断最终结果是不是升序的，不是就放弃，居然可以通过：\nclass Solution { public: vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; combinationSum(vector\u0026lt;int\u0026gt;\u0026amp; candidates, int target) { backtracking(candidates, 0, target); return res; } private: vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; res; vector\u0026lt;int\u0026gt; track; void backtracking(vector\u0026lt;int\u0026gt; \u0026amp; candidates, int n, int target) { if (n == target) { int p = 0; for (auto t : track) { if (t \u0026lt; p) { return; } p = t; } res.push_back(track); return; } // this is new if (n \u0026gt; target) { return; } for (auto c : candidates) { track.push_back(c); backtracking(candidates, n + c, target); track.pop_back(); } } }; ","permalink":"https://notes.0081800.xyz/notes/20210804064757-leetcode_39_combination_sum/","summary":"tags: LeetCode source: https://leetcode.com/problems/combination-sum/ class Solution { public: vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; combinationSum(vector\u0026lt;int\u0026gt;\u0026amp; candidates, int target) { backtracking(candidates, 0, target); return res; } private: vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; res; vector\u0026lt;int\u0026gt; track; void backtracking(vector\u0026lt;int\u0026gt; \u0026amp; candidates, int n, int target) { if (n == target) { res.push_back(track); return; } // this is new if (n \u0026gt; target) { return; } for (auto c : candidates) { track.push_back(c); backtracking(candidates, n + c, target); track.pop_back(); } } }; 问题：会有不同顺序但是元素相同的数组，如何快速高效的进行过滤？","title":"LeetCode: 39. Combination Sum"},{"content":" tags: LeetCode,backtracking source: https://leetcode.com/problems/n-queens-ii/ 参见：LeetCode: 51. N-Queens\n","permalink":"https://notes.0081800.xyz/notes/20210803074630-leetcode_52_n_queens_ii/","summary":"tags: LeetCode,backtracking source: https://leetcode.com/problems/n-queens-ii/ 参见：LeetCode: 51. N-Queens","title":"LeetCode: 52. N-Queens II"},{"content":" tags: Algorithm,Brute Force Approach ","permalink":"https://notes.0081800.xyz/notes/20210803065050-%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/","summary":" tags: Algorithm,Brute Force Approach ","title":"回溯算法"},{"content":" tags: 技术概念 创业公司有：积梦智能。\n","permalink":"https://notes.0081800.xyz/notes/20210802193422-%E5%B7%A5%E4%B8%9A%E4%BA%91/","summary":"tags: 技术概念 创业公司有：积梦智能。","title":"工业云"},{"content":" tags: 技术概念 ","permalink":"https://notes.0081800.xyz/notes/20210802193059-%E4%BA%91%E5%8E%9F%E7%94%9F/","summary":" tags: 技术概念 ","title":"云原生"},{"content":" tags: 技术概念 ","permalink":"https://notes.0081800.xyz/notes/20210802193038-%E4%BA%91%E8%AE%A1%E7%AE%97/","summary":" tags: 技术概念 ","title":"云计算"},{"content":" tags: 技术 目前互联网领域里比较热门的概念和方向。\n","permalink":"https://notes.0081800.xyz/notes/20210802193020-%E6%8A%80%E6%9C%AF%E6%A6%82%E5%BF%B5/","summary":"tags: 技术 目前互联网领域里比较热门的概念和方向。","title":"技术概念"},{"content":" tags: 技术概念 ","permalink":"https://notes.0081800.xyz/notes/20210802193049-%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/","summary":" tags: 技术概念 ","title":"边缘计算"},{"content":" tags: LeetCode,backtracking source: https://leetcode.com/problems/n-queens/ 一旦一个 Queue 被放置，那么横轴、纵轴、对角线都不再允许放置。我们按行进行遍历，所以我们需要跟踪以下位置是否已经放置 Queue：\n纵轴（Column）：cols 主对角线（Positive Diagonal）：posDiag 次对角线（Negative Diagonal）：negDiag 纵轴很好记录，但是对角线比较困难，我们先来看一下对角线的特征，假设横轴为 r 纵轴为 c ，\nr - c 在正对角线是一致的：\n斜对角线 r + c 是一致的:\nclass Solution { public: vector\u0026lt;vector\u0026lt;string\u0026gt;\u0026gt; solveNQueens(int n) { for (int r = 0; r \u0026lt; n; r++) { string col = string(n, \u0026#39;.\u0026#39;); track.push_back(col); } backtracking(0, n); return res; } private: set\u0026lt;int\u0026gt; cols; // c set\u0026lt;int\u0026gt; posDiag; // r - c set\u0026lt;int\u0026gt; negDiag; // r + c vector\u0026lt;vector\u0026lt;string\u0026gt;\u0026gt; res; vector\u0026lt;string\u0026gt; track; void backtracking(int r, int n) { if (r == n) { res.push_back(track); return; } for (int c = 0; c \u0026lt; n; c++) { if (cols.find(c) != cols.end() || posDiag.find(r - c) != posDiag.end() || negDiag.find(r + c) != negDiag.end()) { continue; } cols.insert(c); posDiag.insert(r - c); negDiag.insert(r + c); track[r][c] = \u0026#39;Q\u0026#39;; backtracking(r + 1, n); track[r][c] = \u0026#39;.\u0026#39;; cols.erase(c); posDiag.erase(r - c); negDiag.erase(r + c); } } }; 结果\n[[\u0026#34;.Q..\u0026#34;,\u0026#34;...Q\u0026#34;,\u0026#34;Q...\u0026#34;,\u0026#34;..Q.\u0026#34;],[\u0026#34;..Q.\u0026#34;,\u0026#34;Q...\u0026#34;,\u0026#34;...Q\u0026#34;,\u0026#34;.Q..\u0026#34;]] 一些想明白的问题：\n为什么没有 Q 出现在第一行第一列的情况？因为没有走到最后一行（r == n） 怎么出现的两个结果？这个要看回溯过程。 回溯过程：\n在每一列放置 Q 之后都会陷入下一行的递归中。 相当于以第一行的每一列进行遍历，依次穷举剩下行的每一列的可能性。 一旦一条路径走到头（r == n）说明有结果，还是回溯过程，接着进行下一列的可能回到 1. 继续 ","permalink":"https://notes.0081800.xyz/notes/20210802073234-leetcode_51_n_queues/","summary":"tags: LeetCode,backtracking source: https://leetcode.com/problems/n-queens/ 一旦一个 Queue 被放置，那么横轴、纵轴、对角线都不再允许放置。我们按行进行遍历，所以我们需要跟踪以下位置是否已经放置 Queue：\n纵轴（Column）：cols 主对角线（Positive Diagonal）：posDiag 次对角线（Negative Diagonal）：negDiag 纵轴很好记录，但是对角线比较困难，我们先来看一下对角线的特征，假设横轴为 r 纵轴为 c ，\nr - c 在正对角线是一致的：\n斜对角线 r + c 是一致的:\nclass Solution { public: vector\u0026lt;vector\u0026lt;string\u0026gt;\u0026gt; solveNQueens(int n) { for (int r = 0; r \u0026lt; n; r++) { string col = string(n, \u0026#39;.\u0026#39;); track.push_back(col); } backtracking(0, n); return res; } private: set\u0026lt;int\u0026gt; cols; // c set\u0026lt;int\u0026gt; posDiag; // r - c set\u0026lt;int\u0026gt; negDiag; // r + c vector\u0026lt;vector\u0026lt;string\u0026gt;\u0026gt; res; vector\u0026lt;string\u0026gt; track; void backtracking(int r, int n) { if (r == n) { res.","title":"LeetCode: 51. N-Queens"},{"content":" tags: 分布式共识,Paxos ","permalink":"https://notes.0081800.xyz/notes/20210731075851-multi_paxios/","summary":" tags: 分布式共识,Paxos ","title":"Multi-Paxios"},{"content":" tags: 分布式共识 ","permalink":"https://notes.0081800.xyz/notes/20210731075206-zab/","summary":" tags: 分布式共识 ","title":"Zab"},{"content":" tags: 分布式共识,分布式 ","permalink":"https://notes.0081800.xyz/notes/20210731075140-paxos/","summary":" tags: 分布式共识,分布式 ","title":"Paxos"},{"content":" tags: 共识算法，分布式共识 ","permalink":"https://notes.0081800.xyz/notes/20210731075154-raft/","summary":" tags: 共识算法，分布式共识 ","title":"Raft"},{"content":" tags: Incomplete，分布式，共识算法 ","permalink":"https://notes.0081800.xyz/notes/20210731075128-vsr/","summary":" tags: Incomplete，分布式，共识算法 ","title":"VSR"},{"content":" tags: 分布式,Incomplete ","permalink":"https://notes.0081800.xyz/notes/20210728071508-%E9%93%BE%E5%BC%8F%E5%A4%8D%E5%88%B6/","summary":" tags: 分布式,Incomplete ","title":"链式复制"},{"content":"利用底层指令集实现比较设置等原子操作。\nSee also：https://zh.wikipedia.org/wiki/%E6%AF%94%E8%BE%83%E5%B9%B6%E4%BA%A4%E6%8D%A2\n","permalink":"https://notes.0081800.xyz/notes/20210728070407-%E6%AF%94%E8%BE%83_%E8%AE%BE%E7%BD%AE/","summary":"利用底层指令集实现比较设置等原子操作。\nSee also：https://zh.wikipedia.org/wiki/%E6%AF%94%E8%BE%83%E5%B9%B6%E4%BA%A4%E6%8D%A2","title":"比较-设置"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20210727073548-%E5%85%A8%E5%BA%8F/","summary":"","title":"全序"},{"content":" tags: GDB,macOS macOS 下通过 GDB 调试程序会出现：\nUnable to find Mach task port for process-id 1375: (os/kern) failure (0x5). (please check gdb is codesigned - see taskgated(8)) 需要通过 Keychain Access Application 创建证书： code-sign-cert\n需要对 gdb 进行签名，首先创建 gdb-entitlement.xml ：\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE plist PUBLIC \u0026#34;-//Apple//DTD PLIST 1.0//EN\u0026#34; \u0026#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd\u0026#34;\u0026gt; \u0026lt;plist version=\u0026#34;1.0\u0026#34;\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;com.apple.security.cs.debugger\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;/dict\u0026gt; 运行签名\ncodesign --entitlements gdb-entitlement.xml -fs code-sign-cert $(which gdb) See also: PermissionsDarwin。\n","permalink":"https://notes.0081800.xyz/notes/20210726181021-macos_%E7%AD%BE%E5%90%8D_gdb/","summary":"tags: GDB,macOS macOS 下通过 GDB 调试程序会出现：\nUnable to find Mach task port for process-id 1375: (os/kern) failure (0x5). (please check gdb is codesigned - see taskgated(8)) 需要通过 Keychain Access Application 创建证书： code-sign-cert\n需要对 gdb 进行签名，首先创建 gdb-entitlement.xml ：\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE plist PUBLIC \u0026#34;-//Apple//DTD PLIST 1.0//EN\u0026#34; \u0026#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd\u0026#34;\u0026gt; \u0026lt;plist version=\u0026#34;1.0\u0026#34;\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;com.apple.security.cs.debugger\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;/dict\u0026gt; 运行签名\ncodesign --entitlements gdb-entitlement.xml -fs code-sign-cert $(which gdb) See also: PermissionsDarwin。","title":"macOS 签名 GDB"},{"content":" tags: Translate,Rust,Tokio 原文链接：Understanding Rust futures by going way too deep。\n译者注：原文大量的引入了有趣的对话，迫于排版问题这里不进行翻译，必要的对话通过引用块来解释。\n深入理解 Rust future 用 Rust future！就是这么简单！直到我们发现并非如此。所以我们先探索简单的部分，然后继续探索困难部分而不是等它慢慢靠近我们。\n起步 Choo choo here comes the easy part 🚂💨\n我们创建一个新的项目：\n$ cargo new waytoodeep Created binary (application) `waytoodeep` package 我们需要安装 cargo-edit 如果之前没有安装过的话，接下来就可以直接 cargo add ：\n$ cargo install cargo-edit Updating crates.io index Downloaded cargo-edit v0.7.0 Downloaded 1 crate (57.6 KB) in 0.47s Ignored package `cargo-edit v0.7.0` is already installed, use --force to override 因为 cargo-edit 很方便，所以你可能已经安装过它。部分读者会感到困惑是因为像 cargo new, cargo build, cargo test, cargo run 等子命令都内置在 cargo 中， 但是 cargo add 没有。\n实际上，有一大堆像这样的包，如 cargo-hack,cargo-udeps,cargo-expand\u0026hellip;等等。\n然后我们需要选择一个「异步运行时」（async runtime），因为这些 future 对象不会轮询（poll）自己。。。 我们毫无理由的选择 tokio，唯一的原因是：过去几个月我一直在用它。\n$ cargo add tokio@1.9.0 --features full Updating \u0026#39;https://github.com/rust-lang/crates.io-index\u0026#39; index Adding tokio v1.9.0 to dependencies with features: [\u0026#34;full\u0026#34;] 然后我们修改 main 函数使用 tokio 默认执行器（executor）（ cargo new 为我们生成了一个 main 函数，但是这里并不能满足我们的需求）：\n// in `src/main.rs` #[tokio::main] async fn main() { println!(\u0026#34;Hello from a (so far completely unnecessary) async runtime\u0026#34;); } $ cargo run 3s 209ms Compiling waytoodeep v0.1.0 (/Users/wh/codes/rust/waytoodeep) Finished dev [unoptimized + debuginfo] target(s) in 3.47s Running `target/debug/waytoodeep` Hello from a (so far completely unnecessary) async runtime 酷！\n接下来让我们添加其他一些我喜欢在我的项目中使用的好东西。\n首先，对于错误处理 - 我们编写程序就需要处理一堆不同库里不同的错误类型，如果能通过一个类型统一它们就会非常整洁。\neyre 可以赋予我们这些（就像 anyhow ）！\n并且因为我喜欢漂亮的颜色我将使用 color-eyre。\n$ cargo add color-eyre@0.5.11 Updating \u0026#39;https://github.com/rust-lang/crates.io-index\u0026#39; index Adding color-eyre v0.5.11 to dependencies 现在我们需要安装 color-eyre 作为默认的崩溃（panic）处理器，我悄悄修改了一些环境变量来默认输出调用堆栈（backtracks）。\nuse color_eyre::Report; #[tokio::main] async fn main() -\u0026gt; Result\u0026lt;(), Report\u0026gt; { setup()?; println!(\u0026#34;Hello from a (so far completely unnecessary) async runtime\u0026#34;); Ok(()) } fn setup() -\u0026gt; Result\u0026lt;(), Report\u0026gt; { if std::env::var(\u0026#34;RUST_LIB_BACKTRACE\u0026#34;).is_err() { std::env::set_var(\u0026#34;RUST_LIB_BACKTRACE\u0026#34;, \u0026#34;1\u0026#34;) } color_eyre::install()?; Ok(()) } $ cargo run Finished dev [unoptimized + debuginfo] target(s) in 0.02s Running `target/debug/waytoodeep` Hello from a (so far completely unnecessary) async runtime 很好！现在如果我们某处出现了一个错误，我们将看到完整的堆栈跟踪，就像下面这样： 最后，因为我喜欢结构化日志，让我们添加 tracing 然后通过漂亮的颜色打印它们，让我们添加 tracing-subscriber.\n$ cargo add tracing@0.1.26 tracing-subscriber@0.2.19 Updating \u0026#39;https://github.com/rust-lang/crates.io-index\u0026#39; index Adding tracing v0.1.26 to dependencies Adding tracing-subscriber v0.2.19 to dependencies 我们已经有一个 setup 函数，所以直接在那里安装 tracing-subscriber.. 然后我们将 println! 改成 info! ！ 然后，为了演示如何设置让我们再次修改一些环境变量：对所有包（crates）默认 info 日志级别。\nuse color_eyre::Report; use tracing::info; use tracing_subscriber::EnvFilter; #[tokio::main] async fn main() -\u0026gt; Result\u0026lt;(), Report\u0026gt; { setup()?; info!(\u0026#34;Hello from a comfy nest we\u0026#39;ve made for ourselves\u0026#34;); Ok(()) } fn setup() -\u0026gt; Result\u0026lt;(), Report\u0026gt; { if std::env::var(\u0026#34;RUST_LIB_BACKTRACE\u0026#34;).is_err() { std::env::set_var(\u0026#34;RUST_LIB_BACKTRACE\u0026#34;, \u0026#34;1\u0026#34;) } color_eyre::install()?; if std::env::var(\u0026#34;RUST_LOG\u0026#34;).is_err() { std::env::set_var(\u0026#34;RUST_LOG\u0026#34;, \u0026#34;info\u0026#34;) } tracing_subscriber::fmt::fmt() .with_env_filter(EnvFilter::from_default_env()) .init(); Ok(()) } $ cargo run Finished dev [unoptimized + debuginfo] target(s) in 0.02s Running `target/debug/waytoodeep` Jul 25 17:03:46.993 INFO waytoodeep: Hello from a comfy nest we\u0026#39;ve made for ourselves 好了，我们准备好做一些有用的事情了。\n做一些有用的事情 当决定在咖啡间隙阅读哪一篇文章的时候，人们通常同时打开几个网站，然后读最先加载出来的那一篇。\n事实如此。你可以引用我的话，谁会去验证呢？毕竟这听起来需要很多工作。\n所以让我们来编写一个程序做相同的事情。\n让我们引入 reqwest \u0026ndash; 尽管我不喜欢它的 API，但它会很好的完成接下来的工作。\n同时，因为 screw OpenSSL 我们将标记 reqwest 使用 rustls：\n$ cargo add reqwest@0.11.4 --no-default-features --features rustls-tls Updating \u0026#39;https://github.com/rust-lang/crates.io-index\u0026#39; index Adding reqwest v0.11.4 to dependencies with features: [\u0026#34;rustls-tls\u0026#34;] 我们准备好发送一个请求了！\nuse color_eyre::Report; use tracing::info; use tracing_subscriber::EnvFilter; use reqwest::Client; #[tokio::main] async fn main() -\u0026gt; Result\u0026lt;(), Report\u0026gt; { setup()?; info!(\u0026#34;Hello from a comfy nest we\u0026#39;ve made for ourselves\u0026#34;); let client = Client::new(); let url = \u0026#34;https://fasterthanli.me\u0026#34;; // this will turn non-200 HTTP status codes into rust errors, // so the first `?` propagates \u0026#34;we had a connection problem\u0026#34; and // the second `?` propagates \u0026#34;we had a chat with the server and they // were not pleased\u0026#34; let res = client.get(url).send().await?.error_for_status()?; info!(%url, content_type = ?res.headers().get(\u0026#34;content-type\u0026#34;), \u0026#34;Got a response!\u0026#34;); Ok(()) } fn setup() -\u0026gt; Result\u0026lt;(), Report\u0026gt; { if std::env::var(\u0026#34;RUST_LIB_BACKTRACE\u0026#34;).is_err() { std::env::set_var(\u0026#34;RUST_LIB_BACKTRACE\u0026#34;, \u0026#34;1\u0026#34;) } color_eyre::install()?; if std::env::var(\u0026#34;RUST_LOG\u0026#34;).is_err() { std::env::set_var(\u0026#34;RUST_LOG\u0026#34;, \u0026#34;info\u0026#34;) } tracing_subscriber::fmt::fmt() .with_env_filter(EnvFilter::from_default_env()) .init(); Ok(()) } 出发了！\ncargo run Compiling waytoodeep v0.1.0 (/Users/wh/codes/rust/waytoodeep) Finished dev [unoptimized + debuginfo] target(s) in 7.16s Running `target/debug/waytoodeep` Jul 26 16:50:57.778 INFO waytoodeep: Hello from a comfy nest we\u0026#39;ve made for ourselves Jul 26 16:50:59.090 INFO waytoodeep: Got a response! url=https://fasterthanli.me content_type=Some(\u0026#34;text/html; charset=utf-8\u0026#34;) 这就是我所说的「结构化日志」。嗯，其中的一部分。让我们看下这行代码：\ninfo!(%url, content_type = ?res.headers().get(\u0026#34;content-type\u0026#34;), \u0026#34;Got a response!\u0026#34;); 我们输出来一个消息： Got a response! ，一个名为 url 的标签：值为变量 url 的 Display 格式， 一个名为 content_type 的标签：值为表达式的 Debug 格式。\n就是这么简单！ name = %value 输出 Display ， name = ?value 输出 Debug 。\n当然，还有非常棒的跨度（spans），重点是你可以将它们发送到 APM（Appliation Performance Monitoring），比如 Datadog 或者 Honeycomb 等，但是这不是一篇关于跟踪的文章。\n为了举例说明，如果我们安装一个 JSON 的 tracing subscriber，我们将获得如下内容：\n$ cargo run Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep) Finished dev [unoptimized + debuginfo] target(s) in 3.09s Running `target/debug/waytoodeep` {\u0026#34;timestamp\u0026#34;:\u0026#34;Jul 25 17:17:21.531\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;INFO\u0026#34;,\u0026#34;fields\u0026#34;:{\u0026#34;message\u0026#34;:\u0026#34;Hello from a comfy nest we\u0026#39;ve made for ourselves\u0026#34;},\u0026#34;target\u0026#34;:\u0026#34;waytoodeep\u0026#34;} {\u0026#34;timestamp\u0026#34;:\u0026#34;Jul 25 17:17:21.709\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;INFO\u0026#34;,\u0026#34;fields\u0026#34;:{\u0026#34;message\u0026#34;:\u0026#34;Got a response!\u0026#34;,\u0026#34;url\u0026#34;:\u0026#34;https://fasterthanli.me\u0026#34;,\u0026#34;content_type\u0026#34;:\u0026#34;Some(\\\u0026#34;text/html; charset=utf-8\\\u0026#34;)\u0026#34;},\u0026#34;target\u0026#34;:\u0026#34;waytoodeep\u0026#34;} 这应该足以激起你的兴趣。\n同时获取两个地址 现在让我们获取两个地址：\npub const URL_1: \u0026amp;str = \u0026#34;https://fasterthanli.me/articles/whats-in-the-box\u0026#34;; pub const URL_2: \u0026amp;str = \u0026#34;https://fasterthanli.me/series/advent-of-code-2020/part-13\u0026#34;; 。。。这是一个公平的比较。 这两篇文章都托管在我自己的网站上，绝对不是为了推广，而是为了使获取时间具有可比性，并且任一都有可能先加载完成（并且会随着时间的推移随机变化）。\n我们将创建一个函数来获取内容：\nasync fn fetch_thing(client: \u0026amp;Client, url: \u0026amp;str) -\u0026gt; Result\u0026lt;(), Report\u0026gt; { let res = client.get(url).send().await?.error_for_status()?; info!(%url, content_type = ?res.headers().get(\u0026#34;content-type\u0026#34;), \u0026#34;Got a response!\u0026#34;); Ok(()) } 并使用它：\n#[tokio::main] async fn main() -\u0026gt; Result\u0026lt;(), Report\u0026gt; { setup()?; info!(\u0026#34;Hello from a comfy nest we\u0026#39;ve made for ourselves\u0026#34;); let client = Client::new(); fetch_thing(\u0026amp;client, URL_1); fetch_thing(\u0026amp;client, URL_2); Ok(()) } 然后运行它:\n$ cargo run Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep) warning: unused implementer of `Future` that must be used --\u0026gt; src/main.rs:15:5 | 15 | fetch_thing(\u0026amp;client, URL_1); | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ | = note: `#[warn(unused_must_use)]` on by default = note: futures do nothing unless you `.await` or poll them warning: unused implementer of `Future` that must be used --\u0026gt; src/main.rs:16:5 | 16 | fetch_thing(\u0026amp;client, URL_2); | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ | = note: futures do nothing unless you `.await` or poll them warning: 2 warnings emitted Finished dev [unoptimized + debuginfo] target(s) in 3.01s Running `target/debug/waytoodeep` Jul 25 17:26:31.571 INFO waytoodeep: Hello from a comfy nest we\u0026#39;ve made for ourselves 奇怪的是，没有任何事情发生。\n黄色的波浪线和恼人的 Rust 警告已经给出了提示。\n让我们来修复它：\nfetch_thing(\u0026amp;client, URL_1).await?; fetch_thing(\u0026amp;client, URL_2).await?; $ cargo run Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep) Finished dev [unoptimized + debuginfo] target(s) in 3.17s Running `target/debug/waytoodeep` Jul 25 17:27:29.768 INFO waytoodeep: Hello from a comfy nest we\u0026#39;ve made for ourselves Jul 25 17:27:29.891 INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(\u0026#34;text/html; charset=utf-8\u0026#34;) Jul 25 17:27:29.974 INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(\u0026#34;text/html; charset=utf-8\u0026#34;) 所以，第零课：future 对象不做任何事情直到它们被轮询（polled）。\n这是因为 future 对象几乎就是状态。让我们来创建一个：\n// in `src/main.rs` mod dumb; // in `src/dumb.rs` use std::{ future::Future, pin::Pin, task::{Context, Poll}, }; use tracing::info; pub struct DumbFuture {} impl Future for DumbFuture { type Output = (); fn poll(self: Pin\u0026lt;\u0026amp;mut Self\u0026gt;, _cx: \u0026amp;mut Context\u0026lt;\u0026#39;_\u0026gt;) -\u0026gt; Poll\u0026lt;Self::Output\u0026gt; { info!(\u0026#34;Hello from a dumb future!\u0026#34;); Poll::Ready(()) } } // back in `src/main.rs` #[tokio::main] async fn main() -\u0026gt; Result\u0026lt;(), Report\u0026gt; { setup()?; let fut = dumb::DumbFuture {}; Ok(()) } 以上！我们几乎就完成了，除了我们没有进行 .await 。\n运行它除了打印警告不会有任何效果：\n$ cargo run Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep) warning: unused variable: `fut` --\u0026gt; src/main.rs:14:9 | 14 | let fut = dumb::DumbFuture {}; | ^^^ help: if this is intentional, prefix it with an underscore: `_fut` | = note: `#[warn(unused_variables)]` on by default warning: 1 warning emitted Finished dev [unoptimized + debuginfo] target(s) in 2.11s Running `target/debug/waytoodeep` 因为怎么可能？我们字面上仅仅构建了一个结构体。一个零大小的结构体。\n如果我们调用它的 .await 。。 然后当我们要求运行时运行它的事件循环直到 future 对象被轮询（polled）并且最终返回 Poll::Ready （我们的代码立即返回）：\n#[tokio::main] async fn main() -\u0026gt; Result\u0026lt;(), Report\u0026gt; { setup()?; info!(\u0026#34;Building that dumb future...\u0026#34;); let fut = dumb::DumbFuture {}; info!(\u0026#34;Awaiting that dumb future...\u0026#34;); fut.await; info!(\u0026#34;Done awaiting that dumb future\u0026#34;); Ok(()) } $ cargo run Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep) Finished dev [unoptimized + debuginfo] target(s) in 2.34s Running `target/debug/waytoodeep` Jul 25 17:37:09.261 INFO waytoodeep: Building that dumb future... Jul 25 17:37:09.261 INFO waytoodeep: Awaiting that dumb future... Jul 25 17:37:09.261 INFO waytoodeep::dumb: Hello from a dumb future! Jul 25 17:37:09.262 INFO waytoodeep: Done awaiting that dumb future 这里与 ECMAScript 的 promise 有一些略微的区别：即使它们压根没有被 await 其中包含的工作依然会被执行。\n但是 Rust 的 future 对象仅仅是无聊的状态机，如果你故意制造麻烦就可以理解这个机制：\n// in `src/dumb.rs` impl Future for DumbFuture { type Output = (); fn poll(self: Pin\u0026lt;\u0026amp;mut Self\u0026gt;, _cx: \u0026amp;mut Context\u0026lt;\u0026#39;_\u0026gt;) -\u0026gt; Poll\u0026lt;Self::Output\u0026gt; { panic!(\u0026#34;Oh heck no\u0026#34;); } } $ RUST_BACKTRACE=1 cargo run Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep) Finished dev [unoptimized + debuginfo] target(s) in 2.28s Running `target/debug/waytoodeep` Jul 25 17:41:18.956 INFO waytoodeep: Building that dumb future... Jul 25 17:41:18.956 INFO waytoodeep: Awaiting that dumb future... The application panicked (crashed). Message: Oh heck no Location: src/dumb.rs:14 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ BACKTRACE ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ ⋮ 6 frames hidden ⋮ 7: \u0026lt;waytoodeep::dumb::DumbFuture as core::future::future::Future\u0026gt;::poll::h4a44780628f4c5f0 at /home/amos/ftl/waytoodeep/src/dumb.rs:14 8: waytoodeep::main::{{closure}}::h36de5a1f1f2a5c5b at /home/amos/ftl/waytoodeep/src/main.rs:17 9: \u0026lt;core::future::from_generator::GenFuture\u0026lt;T\u0026gt; as core::future::future::Future\u0026gt;::poll::h20a96e082c7a581e at /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/future/mod.rs:80 10: tokio::park::thread::CachedParkThread::block_on::{{closure}}::hdf98cb3c7fdf3de4 at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/park/thread.rs:263 11: tokio::coop::with_budget::{{closure}}::h6a86a24a246e220f at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/coop.rs:106 12: std::thread::local::LocalKey\u0026lt;T\u0026gt;::try_with::h2ce0ac27c85965b6 at /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local.rs:376 13: std::thread::local::LocalKey\u0026lt;T\u0026gt;::with::hc449f38c9f65fb53 at /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local.rs:352 14: tokio::coop::with_budget::h5db157bd1e95e0e8 at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/coop.rs:99 15: tokio::coop::budget::h7b57383f1255ac24 at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/coop.rs:76 16: tokio::park::thread::CachedParkThread::block_on::hece399485213b91c at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/park/thread.rs:263 17: tokio::runtime::enter::Enter::block_on::h89e9882e539e82d3 at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/runtime/enter.rs:151 18: tokio::runtime::thread_pool::ThreadPool::block_on::h1a0186470c00ba70 at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/runtime/thread_pool/mod.rs:71 19: tokio::runtime::Runtime::block_on::h7c21d6989b86d606 at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/runtime/mod.rs:452 20: waytoodeep::main::hb4dd5ffd46a5c032 at /home/amos/ftl/waytoodeep/src/main.rs:20 21: core::ops::function::FnOnce::call_once::hc1fcc87431f77d25 at /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:227 ⋮ 11 frames hidden ⋮ Run with COLORBT_SHOW_HIDDEN=1 environment variable to disable frame filtering. Run with RUST_BACKTRACE=full to include source snippets. 上面堆栈跟踪如果加上颜色效果会更好，所以我希望你在本地做了相同的尝试，即使如此我们依然可以看到我们真正的 main 函数在 20 帧，然后往上，我们可以看到 Runtime::block_on 、一个线程池的东西、一些挂起（parked）的线程、thread-local（其他 TLS）、一个 生成的 future（帧 9 和 8，也就是我们的 async fn main 的最终结果），最后是我们的 DumbFuture poll 方法（帧 7）。\n帧 6 到 1 就是 panic 机制，再次完全超出本文讨论的范围。\n但是请站起来，亲爱的观众，用你的手臂绕过这个装置，以确保没有障眼法，没有隐藏的线，没有。。。\n。。。我要说的是对于异步堆栈跟踪没有“特殊处理”（special handling）。当然，这里我们崩溃了，但是仅仅是 Rust，操作系统甚至不知道我几乎避免了一场灾难。\n但是我们可以制造更大的混乱，如果我们愿意使用 unsafe ：\nimpl Future for DumbFuture { type Output = (); fn poll(self: Pin\u0026lt;\u0026amp;mut Self\u0026gt;, _cx: \u0026amp;mut Context\u0026lt;\u0026#39;_\u0026gt;) -\u0026gt; Poll\u0026lt;Self::Output\u0026gt; { unsafe { *(0xF00D as *mut u64) = 0x0; } unreachable!(); // pinky promise } } 然后就不会有一些列的崩溃处理来拯救我们：\n$ RUST_BACKTRACE=1 cargo run Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep) Finished dev [unoptimized + debuginfo] target(s) in 2.18s Running `target/debug/waytoodeep` Jul 25 17:46:53.926 INFO waytoodeep: Building that dumb future... Jul 25 17:46:53.926 INFO waytoodeep: Awaiting that dumb future... zsh: segmentation fault (core dumped) RUST_BACKTRACE=1 cargo run 但是 GDB 可以：\n$ cargo build \u0026amp;\u0026amp; gdb --quiet --args ./target/debug/waytoodeep Finished dev [unoptimized + debuginfo] target(s) in 0.04s Reading symbols from ./target/debug/waytoodeep... warning: Missing auto-load script at offset 0 in section .debug_gdb_scripts of file /home/amos/ftl/waytoodeep/target/debug/waytoodeep. Use `info auto-load python-scripts [REGEXP]\u0026#39; to list them. (gdb) r Starting program: /home/amos/ftl/waytoodeep/target/debug/waytoodeep [Thread debugging using libthread_db enabled] Using host libthread_db library \u0026#34;/lib/x86_64-linux-gnu/libthread_db.so.1\u0026#34;. [New Thread 0x7ffff7c28700 (LWP 129418)] [New Thread 0x7ffff7a27700 (LWP 129419)] [New Thread 0x7ffff7826700 (LWP 129420)] [New Thread 0x7ffff7625700 (LWP 129421)] [New Thread 0x7ffff7424700 (LWP 129422)] [New Thread 0x7ffff7223700 (LWP 129423)] [New Thread 0x7ffff7022700 (LWP 129424)] [New Thread 0x7ffff6e1e700 (LWP 129425)] [New Thread 0x7ffff6c1a700 (LWP 129426)] [New Thread 0x7ffff6a16700 (LWP 129427)] [New Thread 0x7ffff6812700 (LWP 129428)] [New Thread 0x7ffff660e700 (LWP 129429)] [New Thread 0x7ffff640a700 (LWP 129430)] [New Thread 0x7ffff6206700 (LWP 129431)] [New Thread 0x7ffff6002700 (LWP 129432)] Jul 25 17:47:13.278 INFO waytoodeep: Building that dumb future... Jul 25 17:47:13.279 INFO waytoodeep: Awaiting that dumb future... Thread 1 \u0026#34;waytoodeep\u0026#34; received signal SIGSEGV, Segmentation fault. \u0026lt;waytoodeep::dumb::DumbFuture as core::future::future::Future\u0026gt;::poll (self=..., _cx=0x7fffffffd690) at src/dumb.rs:15 15 *(0xF00D as *mut u64) = 0x0; (gdb) bt #0 \u0026lt;waytoodeep::dumb::DumbFuture as core::future::future::Future\u0026gt;::poll (self=..., _cx=0x7fffffffd690) at src/dumb.rs:15 #1 0x00005555555ab3a3 in waytoodeep::main::{{closure}} () at src/main.rs:17 #2 0x00005555555adb29 in \u0026lt;core::future::from_generator::GenFuture\u0026lt;T\u0026gt; as core::future::future::Future\u0026gt;::poll (self=..., cx=0x7fffffffd690) at /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/future/mod.rs:80 #3 0x00005555555adaa0 in tokio::park::thread::CachedParkThread::block_on::{{closure}} () at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/park/thread.rs:263 #4 0x00005555555b1742 in tokio::coop::with_budget::{{closure}} (cell=0x7ffff7c2c412) at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/coop.rs:106 #5 0x00005555555a9f58 in std::thread::local::LocalKey\u0026lt;T\u0026gt;::try_with (self=0x555555925fc0, f=...) at /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local.rs:376 #6 0x00005555555a9e3d in std::thread::local::LocalKey\u0026lt;T\u0026gt;::with (self=0x555555925fc0, f=...) at /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local.rs:352 #7 0x00005555555ad7c8 in tokio::coop::with_budget (budget=..., f=...) at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/coop.rs:99 #8 tokio::coop::budget (f=...) at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/coop.rs:76 #9 tokio::park::thread::CachedParkThread::block_on (self=0x7fffffffd7a0, f=...) at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/park/thread.rs:263 #10 0x00005555555abcc9 in tokio::runtime::enter::Enter::block_on (self=0x7fffffffd7f0, f=...) at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/runtime/enter.rs:151 #11 0x00005555555acf2e in tokio::runtime::thread_pool::ThreadPool::block_on (self=0x7fffffffd908, future=...) at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/runtime/thread_pool/mod.rs:71 #12 0x00005555555b0dfd in tokio::runtime::Runtime::block_on (self=0x7fffffffd900, future=...) at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/runtime/mod.rs:452 #13 0x00005555555aa807 in waytoodeep::main () at src/main.rs:20 (gdb) 我们再次丢失了高亮颜色，这里可以看一下： 译注：我在本地环境并没有通过 GDB 复现带高亮的堆栈跟踪，反而是通过 LLDB 可以看到高亮的堆栈跟踪。\n是不是很漂亮？\n现在让我们回到正常有用的代码，移除所有关于自己实现的 future 代码： src/dumb.rs 和 mod dumb 。并使用一个获取 future 替代：\n#[tokio::main] async fn main() -\u0026gt; Result\u0026lt;(), Report\u0026gt; { setup()?; info!(\u0026#34;Building that fetch future...\u0026#34;); let client = Client::new(); let fut = fetch_thing(\u0026amp;client, URL_1); info!(\u0026#34;Awaiting that fetch future...\u0026#34;); fut.await?; info!(\u0026#34;Done awaiting that fetch future\u0026#34;); Ok(()) } $ RUST_BACKTRACE=1 cargo run Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep) Finished dev [unoptimized + debuginfo] target(s) in 2.99s Running `target/debug/waytoodeep` Jul 25 17:51:49.281 INFO waytoodeep: Building that fetch future... Jul 25 17:51:49.282 INFO waytoodeep: Awaiting that fetch future... Jul 25 17:51:49.437 INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(\u0026#34;text/html; charset=utf-8\u0026#34;) Jul 25 17:51:49.438 INFO waytoodeep: Done awaiting that fetch future 有两种方式考虑我们的函数，一个是语法糖层：也就是 async fn ：\nasync fn fetch_thing(client: \u0026amp;Client, url: \u0026amp;str) -\u0026gt; Result\u0026lt;(), Report\u0026gt; { let res = client.get(url).send().await?.error_for_status()?; info!(%url, content_type = ?res.headers().get(\u0026#34;content-type\u0026#34;), \u0026#34;Got a response!\u0026#34;); Ok(()) } 然后是核心实现层：一个普通的 fn 仅用来返回一个 future 对象：\nuse std::future::Future; fn fetch_thing\u0026lt;\u0026#39;a\u0026gt;( client: \u0026amp;\u0026#39;a Client, url: \u0026amp;\u0026#39;a str, ) -\u0026gt; impl Future\u0026lt;Output = Result\u0026lt;(), Report\u0026gt;\u0026gt; + \u0026#39;a { async move { let res = client.get(url).send().await?.error_for_status()?; info!(%url, content_type = ?res.headers().get(\u0026#34;content-type\u0026#34;), \u0026#34;Got a response!\u0026#34;); Ok(()) } } 由于借用 client 和 url ，所以 Future 对象的存活时间不能超过两者，这也是为什么我会将上面两个生命周期命名为 'a ， 并且返回的值也是任意实现了 Future （通过 Output ）同时生命周期也是 'a 。\n整个 async move {} 快也仅仅是“构建状态” \u0026ndash; 等于一个实现了 Future 的类型。\n我们只是无法命名它。\n我们只能尽量获取它的描述：\nfn type_name_of\u0026lt;T\u0026gt;(_: \u0026amp;T) -\u0026gt; \u0026amp;\u0026#39;static str { std::any::type_name::\u0026lt;T\u0026gt;() } // in main #[tokio::main] async fn main() -\u0026gt; Result\u0026lt;(), Report\u0026gt; { setup()?; info!(\u0026#34;Building that fetch future...\u0026#34;); let client = Client::new(); let fut = fetch_thing(\u0026amp;client, URL_1); info!( type_name = type_name_of(\u0026amp;fut), \u0026#34;That fetch future has a type..\u0026#34; ); info!(\u0026#34;Awaiting that fetch future...\u0026#34;); fut.await?; info!(\u0026#34;Done awaiting that fetch future\u0026#34;); Ok(()) } $ cargo run Finished dev [unoptimized + debuginfo] target(s) in 0.05s Running `target/debug/waytoodeep` Jul 25 18:00:39.774 INFO waytoodeep: Building that fetch future... Jul 25 18:00:39.775 INFO waytoodeep: That fetch future has a type.. type_name=\u0026#34;core::future::from_generator::GenFuture\u0026lt;waytoodeep::fetch_thing::{{closure}}\u0026gt;\u0026#34; Jul 25 18:00:39.775 INFO waytoodeep: Awaiting that fetch future... Jul 25 18:00:39.882 INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(\u0026#34;text/html; charset=utf-8\u0026#34;) Jul 25 18:00:39.882 INFO waytoodeep: Done awaiting that fetch future 。。。但是等等，由于我们使用了 async 语法所以它是一个编译器生成的类型。某种意义上我们无法命名它也就意味这我们无法绑定这个对象，或者编写一个函数仅仅接受该类型。\n为了让我们自己相信 future 对象在我们真正轮询它之前它不会做任何工作，我们可以打开 reqwest 的调试日志：\n$ RUST_LOG=info,reqwest=debug cargo run Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep) Finished dev [unoptimized + debuginfo] target(s) in 3.07s Running `target/debug/waytoodeep` Jul 25 18:05:07.384 INFO waytoodeep: Building that fetch future... Jul 25 18:05:07.385 INFO waytoodeep: That fetch future has a type.. type_name=\u0026#34;core::future::from_generator::GenFuture\u0026lt;waytoodeep::fetch_thing::{{closure}}\u0026gt;\u0026#34; Jul 25 18:05:07.385 INFO waytoodeep: Awaiting that fetch future... Jul 25 18:05:07.385 DEBUG reqwest::connect: starting new connection: https://fasterthanli.me/ Jul 25 18:05:07.503 DEBUG reqwest::async_impl::client: response \u0026#39;200 OK\u0026#39; for https://fasterthanli.me/articles/whats-in-the-box Jul 25 18:05:07.503 INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(\u0026#34;text/html; charset=utf-8\u0026#34;) Jul 25 18:05:07.503 INFO waytoodeep: Done awaiting that fetch future 甚至对于每一个包（crate），我们都可以通过监听 hyper 和 h2 来观察：\n$ RUST_LOG=debug cargo run Finished dev [unoptimized + debuginfo] target(s) in 0.04s Running `target/debug/waytoodeep` Jul 25 18:05:59.973 INFO waytoodeep: Building that fetch future... Jul 25 18:05:59.973 INFO waytoodeep: That fetch future has a type.. type_name=\u0026#34;core::future::from_generator::GenFuture\u0026lt;waytoodeep::fetch_thing::{{closure}}\u0026gt;\u0026#34; Jul 25 18:05:59.973 INFO waytoodeep: Awaiting that fetch future... Jul 25 18:05:59.974 DEBUG reqwest::connect: starting new connection: https://fasterthanli.me/ Jul 25 18:05:59.974 DEBUG hyper::client::connect::dns: resolving host=\u0026#34;fasterthanli.me\u0026#34; Jul 25 18:05:59.989 DEBUG hyper::client::connect::http: connecting to 172.67.196.144:443 Jul 25 18:06:00.000 DEBUG hyper::client::connect::http: connected to 172.67.196.144:443 Jul 25 18:06:00.000 DEBUG rustls::client::hs: No cached session for DNSNameRef(\u0026#34;fasterthanli.me\u0026#34;) Jul 25 18:06:00.000 DEBUG rustls::client::hs: Not resuming any session Jul 25 18:06:00.016 DEBUG rustls::client::hs: Using ciphersuite TLS13_CHACHA20_POLY1305_SHA256 Jul 25 18:06:00.016 DEBUG rustls::client::tls13: Not resuming Jul 25 18:06:00.017 DEBUG rustls::client::tls13: TLS1.3 encrypted extensions: [ServerNameAck, Protocols([PayloadU8([104, 50])])] Jul 25 18:06:00.017 DEBUG rustls::client::hs: ALPN protocol is Some(b\u0026#34;h2\u0026#34;) Jul 25 18:06:00.018 DEBUG h2::client: binding client connection Jul 25 18:06:00.018 DEBUG h2::client: client connection bound Jul 25 18:06:00.018 DEBUG h2::codec::framed_write: send frame=Settings { flags: (0x0), enable_push: 0, initial_window_size: 2097152, max_frame_size: 16384 } Jul 25 18:06:00.019 DEBUG Connection{peer=Client}: h2::codec::framed_write: send frame=WindowUpdate { stream_id: StreamId(0), size_increment: 5177345 } Jul 25 18:06:00.019 DEBUG hyper::client::pool: pooling idle connection for (\u0026#34;https\u0026#34;, fasterthanli.me) Jul 25 18:06:00.020 DEBUG Connection{peer=Client}: h2::codec::framed_write: send frame=Headers { stream_id: StreamId(1), flags: (0x5: END_HEADERS | END_STREAM) } Jul 25 18:06:00.029 DEBUG Connection{peer=Client}: rustls::client::tls13: Ticket saved Jul 25 18:06:00.029 DEBUG Connection{peer=Client}: rustls::client::tls13: Ticket saved Jul 25 18:06:00.029 DEBUG Connection{peer=Client}: h2::codec::framed_read: received frame=Settings { flags: (0x0), max_concurrent_streams: 256, initial_window_size: 65536, max_frame_size: 16777215 } Jul 25 18:06:00.030 DEBUG Connection{peer=Client}: h2::codec::framed_write: send frame=Settings { flags: (0x1: ACK) } Jul 25 18:06:00.030 DEBUG Connection{peer=Client}: h2::codec::framed_read: received frame=WindowUpdate { stream_id: StreamId(0), size_increment: 2147418112 } Jul 25 18:06:00.041 DEBUG Connection{peer=Client}: h2::codec::framed_read: received frame=Settings { flags: (0x1: ACK) } Jul 25 18:06:00.041 DEBUG Connection{peer=Client}: h2::proto::settings: received settings ACK; applying Settings { flags: (0x0), enable_push: 0, initial_window_size: 2097152, max_frame_size: 16384 } Jul 25 18:06:00.120 DEBUG Connection{peer=Client}: h2::codec::framed_read: received frame=Headers { stream_id: StreamId(1), flags: (0x4: END_HEADERS) } Jul 25 18:06:00.120 DEBUG Connection{peer=Client}: h2::codec::framed_read: received frame=Data { stream_id: StreamId(1) } Jul 25 18:06:00.121 DEBUG reqwest::async_impl::client: response \u0026#39;200 OK\u0026#39; for https://fasterthanli.me/articles/whats-in-the-box Jul 25 18:06:00.121 INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(\u0026#34;text/html; charset=utf-8\u0026#34;) Jul 25 18:06:00.121 INFO waytoodeep: Done awaiting that fetch future Jul 25 18:06:00.121 DEBUG Connection{peer=Client}: h2::codec::framed_read: received frame=Data { stream_id: StreamId(1) } Jul 25 18:06:00.122 DEBUG Connection{peer=Client}: h2::codec::framed_write: send frame=Reset { stream_id: StreamId(1), error_code: CANCEL } Jul 25 18:06:00.122 DEBUG Connection{peer=Client}: h2::codec::framed_write: send frame=GoAway { error_code: NO_ERROR, last_stream_id: StreamId(0) } Jul 25 18:06:00.122 DEBUG Connection{peer=Client}: h2::proto::connection: Connection::poll; connection error error=NO_ERROR Jul 25 18:06:00.122 DEBUG Connection{peer=Client}: rustls::session: Sending warning alert CloseNotify 上面出现了 rustls，并且使用了 TLS 1.3，作者做过一期视频介绍过 TLS 1.3。\n这些应该足够说服你，除非你只相信内核所说的，所以让我们看看调用堆栈只为了更加确定。\n我们在 await future 对象之前增加一秒钟的休眠：\nuse tokio::time::sleep; use std::time::Duration; #[tokio::main] async fn main() -\u0026gt; Result\u0026lt;(), Report\u0026gt; { setup()?; info!(\u0026#34;Building that fetch future...\u0026#34;); let client = Client::new(); let fut = fetch_thing(\u0026amp;client, URL_1); info!(\u0026#34;Sleeping for a bit...\u0026#34;); sleep(Duration::from_secs(1)).await; info!(\u0026#34;Awaiting that fetch future...\u0026#34;); fut.await?; info!(\u0026#34;Done awaiting that fetch future\u0026#34;); Ok(()) } $ cargo build \u0026amp;\u0026amp; strace -e \u0026#39;connect\u0026#39; ./target/debug/waytoodeep Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep) Finished dev [unoptimized + debuginfo] target(s) in 3.13s Jul 25 18:09:36.595 INFO waytoodeep: Building that fetch future... Jul 25 18:09:36.596 INFO waytoodeep: Sleeping for a bit... Jul 25 18:09:37.599 INFO waytoodeep: Awaiting that fetch future... connect(9, {sa_family=AF_INET, sin_port=htons(443), sin_addr=inet_addr(\u0026#34;104.21.92.169\u0026#34;)}, 16) = -1 EINPROGRESS (Operation now in progress) Jul 25 18:09:37.720 INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(\u0026#34;text/html; charset=utf-8\u0026#34;) Jul 25 18:09:37.721 INFO waytoodeep: Done awaiting that fetch future +++ exited with 0 +++ 再次强调，附上会让显著提高上面信息的可读性，如果不让我选择它们的话我是非常喜欢高亮的。我本地看起来是这样的： 由于 tracing-subscriber 默认格式会输出时间戳，可以看到程序休眠了1分钟（外加3毫秒），而且只有我们真正调用 await 时我们的程序才会开始连接到托管文章的 CDN 节点。\n好了！让我们再次尝试拉取两篇文章：\n#[tokio::main] async fn main() -\u0026gt; Result\u0026lt;(), Report\u0026gt; { setup()?; let client = Client::new(); let fut1 = fetch_thing(\u0026amp;client, URL_1); let fut2 = fetch_thing(\u0026amp;client, URL_2); fut1.await?; fut2.await?; Ok(()) } 再次检查日志：\n$ RUST_LOG=info,reqwest=debug cargo run --quiet Jul 25 18:31:47.396 DEBUG reqwest::connect: starting new connection: https://fasterthanli.me/ Jul 25 18:31:47.536 DEBUG reqwest::async_impl::client: response \u0026#39;200 OK\u0026#39; for https://fasterthanli.me/articles/whats-in-the-box Jul 25 18:31:47.537 INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(\u0026#34;text/html; charset=utf-8\u0026#34;) Jul 25 18:31:47.627 DEBUG reqwest::async_impl::client: response \u0026#39;200 OK\u0026#39; for https://fasterthanli.me/series/advent-of-code-2020/part-13 Jul 25 18:31:47.627 INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(\u0026#34;text/html; charset=utf-8\u0026#34;) 非常有趣。从这里可以看到， reqwest 为两个请求复用了相同的连接。我会这么说是因我只看到了一行 reqwest::connect 日志。\n让我们快速通过 strace 检查一下：\n$ cargo build --quiet \u0026amp;\u0026amp; strace -e \u0026#39;connect\u0026#39; ./target/debug/waytoodeep \u0026gt; /dev/null connect(9, {sa_family=AF_INET, sin_port=htons(443), sin_addr=inet_addr(\u0026#34;172.67.196.144\u0026#34;)}, 16) = -1 EINPROGRESS (Operation now in progress) +++ exited with 0 +++ 现在可以确认了，只有一次连接。\n但是，第一个请求完成后才开始了第二个请求。第一个耗费了 536-396 = 140 毫秒，但是第二个耗费了 627-537 = 90 毫秒！\nEmmm，现在我们运行构建的是 debug 版本不是吗？\n这是真的。我确信我们面临的是 IO 密集型，而不是 CPU 密集型。\ndebug 版本的构建绝对有一些额外的开销，但是我怀疑这里它不会太影响延迟。无论如何，让我们检查一下： （注意 \u0026ndash;release）\n$ RUST_LOG=info,reqwest=debug cargo run --quiet --release Jul 25 18:34:59.211 DEBUG reqwest::connect: starting new connection: https://fasterthanli.me/ Jul 25 18:34:59.343 DEBUG reqwest::async_impl::client: response \u0026#39;200 OK\u0026#39; for https://fasterthanli.me/articles/whats-in-the-box Jul 25 18:34:59.343 INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(\u0026#34;text/html; charset=utf-8\u0026#34;) Jul 25 18:34:59.427 DEBUG reqwest::async_impl::client: response \u0026#39;200 OK\u0026#39; for https://fasterthanli.me/series/advent-of-code-2020/part-13 Jul 25 18:34:59.427 INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(\u0026#34;text/html; charset=utf-8\u0026#34;) 我们计算一下延迟 343-211 = 132ms ， 427-343 = 84ms 。\n几毫秒的差异可能的解释是邻居打开了一个 YouTube 视频导致无线电波爆发，从而导致冲突（802.11 没有空中流量控制，全民自由（free-for-all））和重传。\n或者另外一百万个原因。这也是我们不继续分析的原因。\n让我们回到文章的主题。\n等待第一个完成 是的！等待第一个完成。所以我们如何让程序同时请求两个？\n其实有一大堆方式！\n例如，我们可以在一个执行器上执行（ spawn ）这些 future 对象，然后休眠一秒钟。1 秒钟足够了吧？\n#[tokio::main] async fn main() -\u0026gt; Result\u0026lt;(), Report\u0026gt; { setup()?; let client = Client::new(); let fut1 = fetch_thing(\u0026amp;client, URL_1); tokio::spawn(fut1); let fut2 = fetch_thing(\u0026amp;client, URL_2); tokio::spawn(fut2); tokio::time::sleep(Duration::from_secs(1)).await; Ok(()) } $ RUST_LOG=info,reqwest=debug cargo run --quiet --release error[E0597]: `client` does not live long enough --\u0026gt; src/main.rs:17:28 | 17 | let fut1 = fetch_thing(\u0026amp;client, URL_1); | ------------^^^^^^^-------- | | | | | borrowed value does not live long enough | argument requires that `client` is borrowed for `\u0026#39;static` ... 25 | } | - `client` dropped here while still borrowed error: aborting due to previous error For more information about this error, try `rustc --explain E0597`. error: could not compile `waytoodeep` To learn more, run the command again with --verbose. 额，除非我们不可以。不可以是因为。。。\n我们将「future 对象交给执行器执行」并将 future 对象转交给执行器，对吧？我们转移了它和它的内容的所有权。\n然后即使我们不对其进行 await ，future 对象因为是「执行器需要做」的一部分依然会被执行，所以即使我们从 main 返回 future 对象也会被轮询（polled）。\n但是如果我们从 main 返回，则整个程序都会退出。\n这里也可以是任何函数（这里是 main ）。重要的是如果函数返回了但是 future 对象借用了部分数据将无法通过借用检查器。\n这让我很高兴，因为这意味着我们不会意外访问到一些被释放的资源：UAF。\n这里我们的例子没有完成。\n所以。。。我们需要解决这个问题。如果 fetch_thing 返回的 future 对象是 'static 的呢？或者它不借用任何东西？\n程序现在看起来如下：\nuse std::future::Future; fn fetch_thing\u0026lt;\u0026#39;a\u0026gt;( client: \u0026amp;\u0026#39;a Client, url: \u0026amp;\u0026#39;a str, ) -\u0026gt; impl Future\u0026lt;Output = Result\u0026lt;(), Report\u0026gt;\u0026gt; + \u0026#39;a { async move { let res = client.get(url).send().await?.error_for_status()?; info!(%url, content_type = ?res.headers().get(\u0026#34;content-type\u0026#34;), \u0026#34;Got a response!\u0026#34;); Ok(()) } } 好吧，之前我们用了 async fn ，但是为了更加深入的理解，我们不得不放弃漂亮的语法。\n但是幸运的是，这正是我们想要的：\nfn fetch_thing\u0026lt;\u0026#39;a\u0026gt;( client: \u0026amp;\u0026#39;a Client, url: \u0026amp;\u0026#39;a str, // 👇 ) -\u0026gt; impl Future\u0026lt;Output = Result\u0026lt;(), Report\u0026gt;\u0026gt; + \u0026#39;static {} 但是我们借用了 client 和 url 我们必须避免这个问题。\n因为 url 本身就是常量，所以很容易解决：\npub const URL_1: \u0026amp;str = \u0026#34;https://fasterthanli.me/articles/whats-in-the-box\u0026#34;; pub const URL_2: \u0026amp;str = \u0026#34;https://fasterthanli.me/series/advent-of-code-2020/part-13\u0026#34;; 它们本身就是 'static 。所以我们只需要调整需要 'static 就行:\nfn fetch_thing\u0026lt;\u0026#39;a\u0026gt;( client: \u0026amp;\u0026#39;a Client, // 👇 url: \u0026amp;\u0026#39;static str, ) -\u0026gt; impl Future\u0026lt;Output = Result\u0026lt;(), Report\u0026gt;\u0026gt; + \u0026#39;static {} 非常好！解决了一个生命周期，还剩下一个。\n我们可以要求 client 的生命周期为 'static 。由于它是一个 Client 的引用，意味着 Cleint 本身也需要是 'static 生命周期。\nfn fetch_thing( // 👇 client: \u0026amp;\u0026#39;static Client, url: \u0026amp;\u0026#39;static str, ) -\u0026gt; impl Future\u0026lt;Output = Result\u0026lt;(), Report\u0026gt;\u0026gt; + \u0026#39;static {} 由于它被 main 所有，额，我们可以，可以。。。可以泄漏它：\n#[tokio::main] async fn main() -\u0026gt; Result\u0026lt;(), Report\u0026gt; { setup()?; let client = Client::new(); let leaked_client = Box::leak(Box::new(client)); let fut1 = fetch_thing(leaked_client, URL_1); let fut2 = fetch_thing(leaked_client, URL_2); tokio::spawn(fut1); tokio::spawn(fut2); tokio::time::sleep(Duration::from_secs(1)).await; Ok(()) } 完美！没有生命周期的问题了。\n仅仅将所有东西泄漏就行。看到没？你不需要 C！\n$ RUST_LOG=info,reqwest=debug cargo run --quiet --release Jul 25 18:54:53.614 DEBUG reqwest::connect: starting new connection: https://fasterthanli.me/ Jul 25 18:54:53.614 DEBUG reqwest::connect: starting new connection: https://fasterthanli.me/ Jul 25 18:54:53.708 DEBUG reqwest::async_impl::client: response \u0026#39;200 OK\u0026#39; for https://fasterthanli.me/articles/whats-in-the-box Jul 25 18:54:53.708 INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(\u0026#34;text/html; charset=utf-8\u0026#34;) Jul 25 18:54:53.733 DEBUG reqwest::async_impl::client: response \u0026#39;200 OK\u0026#39; for https://fasterthanli.me/series/advent-of-code-2020/part-13 Jul 25 18:54:53.733 INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(\u0026#34;text/html; charset=utf-8\u0026#34;) 非～～常有趣！\n我们的两个请求肯定是并发的发出去了，我们之所以知道是因为从我的笔记本上请求我的网站大概耗时 80ms 到 140ms 之间，但是在日志中我们看到两个响应之间只有 ~25ms 的间隔。\n我们还可以看到 reqwest 有连接池机制：同时创建了两个连接。可能是因为我们开始第二个连接的时候第一个请求的连接还没有建立完成。\n也就意味着我们通过 strace 可以看到：\n$ cargo build --quiet --release \u0026amp;\u0026amp; strace -e \u0026#39;connect\u0026#39; ./target/release/waytoodeep Jul 25 18:58:16.425 INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(\u0026#34;text/html; charset=utf-8\u0026#34;) Jul 25 18:58:16.443 INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(\u0026#34;text/html; charset=utf-8\u0026#34;) +++ exited with 0 +++ 。。。两个 connect 调用！如我所料！\n谬论：一个 connect 调用都没看到？因为 Rust 构建 HTTP/2 请求的时候甚至都需要建立 TCP 连接。真是革命性的！\n这当然不是真的。可能在其他线程执行了？也许 strace 默认仅跟踪了主线程？\n啊，对了， -f 可以跟踪所有「子进程」，就像大家知道的那样 Linux 线程仅仅是披了件风衣的进程（或者其他方式）。所以，让我们看一下：\n$ cargo build --quiet --release \u0026amp;\u0026amp; strace -f -e \u0026#39;connect\u0026#39; ./target/release/waytoodeep strace: Process 154612 attached strace: Process 154613 attached strace: Process 154614 attached strace: Process 154615 attached strace: Process 154616 attached strace: Process 154617 attached strace: Process 154618 attached strace: Process 154619 attached strace: Process 154620 attached strace: Process 154621 attached strace: Process 154622 attached strace: Process 154623 attached strace: Process 154624 attached strace: Process 154625 attached strace: Process 154626 attached strace: Process 154627 attached strace: Process 154628 attached [pid 154627] connect(9, {sa_family=AF_UNIX, sun_path=\u0026#34;/var/run/nscd/socket\u0026#34;}, 110) = -1 ENOENT (No such file or directory) [pid 154628] connect(10, {sa_family=AF_UNIX, sun_path=\u0026#34;/var/run/nscd/socket\u0026#34;}, 110) = -1 ENOENT (No such file or directory) [pid 154627] connect(9, {sa_family=AF_UNIX, sun_path=\u0026#34;/var/run/nscd/socket\u0026#34;}, 110) = -1 ENOENT (No such file or directory) [pid 154628] connect(9, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr(\u0026#34;127.0.0.53\u0026#34;)}, 16) = 0 [pid 154627] connect(10, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr(\u0026#34;127.0.0.53\u0026#34;)}, 16) = 0 [pid 154627] connect(9, {sa_family=AF_INET6, sin6_port=htons(0), sin6_flowinfo=htonl(0), inet_pton(AF_INET6, \u0026#34;2606:4700:3034::6815:5ca9\u0026#34;, \u0026amp;sin6_addr), sin6_scope_id=0}, 28) = -1 ENETUNREACH (Network is unreachable) [pid 154627] connect(9, {sa_family=AF_UNSPEC, sa_data=\u0026#34;\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\u0026#34;}, 16) = 0 [pid 154627] connect(9, {sa_family=AF_INET6, sin6_port=htons(0), sin6_flowinfo=htonl(0), inet_pton(AF_INET6, \u0026#34;2606:4700:3031::ac43:c490\u0026#34;, \u0026amp;sin6_addr), sin6_scope_id=0}, 28) = -1 ENETUNREACH (Network is unreachable) [pid 154627] connect(9, {sa_family=AF_UNSPEC, sa_data=\u0026#34;\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\u0026#34;}, 16) = 0 [pid 154627] connect(9, {sa_family=AF_INET, sin_port=htons(0), sin_addr=inet_addr(\u0026#34;104.21.92.169\u0026#34;)}, 16) = 0 [pid 154627] connect(9, {sa_family=AF_UNSPEC, sa_data=\u0026#34;\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\u0026#34;}, 16) = 0 [pid 154627] connect(9, {sa_family=AF_INET, sin_port=htons(0), sin_addr=inet_addr(\u0026#34;172.67.196.144\u0026#34;)}, 16) = 0 [pid 154628] connect(10, {sa_family=AF_INET6, sin6_port=htons(0), sin6_flowinfo=htonl(0), inet_pton(AF_INET6, \u0026#34;2606:4700:3034::6815:5ca9\u0026#34;, \u0026amp;sin6_addr), sin6_scope_id=0}, 28) = -1 ENETUNREACH (Network is unreachable) [pid 154628] connect(10, {sa_family=AF_UNSPEC, sa_data=\u0026#34;\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\u0026#34;}, 16) = 0 [pid 154628] connect(10, {sa_family=AF_INET6, sin6_port=htons(0), sin6_flowinfo=htonl(0), inet_pton(AF_INET6, \u0026#34;2606:4700:3031::ac43:c490\u0026#34;, \u0026amp;sin6_addr), sin6_scope_id=0}, 28) = -1 ENETUNREACH (Network is unreachable) [pid 154628] connect(10, {sa_family=AF_UNSPEC, sa_data=\u0026#34;\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\u0026#34;}, 16) = 0 [pid 154628] connect(10, {sa_family=AF_INET, sin_port=htons(0), sin_addr=inet_addr(\u0026#34;104.21.92.169\u0026#34;)}, 16) = 0 [pid 154628] connect(10, {sa_family=AF_UNSPEC, sa_data=\u0026#34;\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\u0026#34;}, 16) = 0 [pid 154628] connect(10, {sa_family=AF_INET, sin_port=htons(0), sin_addr=inet_addr(\u0026#34;172.67.196.144\u0026#34;)}, 16) = 0 [pid 154625] connect(9, {sa_family=AF_INET, sin_port=htons(443), sin_addr=inet_addr(\u0026#34;104.21.92.169\u0026#34;)}, 16) = -1 EINPROGRESS (Operation now in progress) [pid 154626] connect(10, {sa_family=AF_INET, sin_port=htons(443), sin_addr=inet_addr(\u0026#34;104.21.92.169\u0026#34;)}, 16) = -1 EINPROGRESS (Operation now in progress) Jul 25 19:00:53.862 INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(\u0026#34;text/html; charset=utf-8\u0026#34;) Jul 25 19:00:53.880 INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(\u0026#34;text/html; charset=utf-8\u0026#34;) [pid 154628] +++ exited with 0 +++ [pid 154627] +++ exited with 0 +++ [pid 154618] +++ exited with 0 +++ [pid 154614] +++ exited with 0 +++ [pid 154612] +++ exited with 0 +++ [pid 154619] +++ exited with 0 +++ [pid 154617] +++ exited with 0 +++ [pid 154613] +++ exited with 0 +++ [pid 154615] +++ exited with 0 +++ [pid 154623] +++ exited with 0 +++ [pid 154616] +++ exited with 0 +++ [pid 154624] +++ exited with 0 +++ [pid 154621] +++ exited with 0 +++ [pid 154622] +++ exited with 0 +++ [pid 154626] +++ exited with 0 +++ [pid 154620] +++ exited with 0 +++ [pid 154625] +++ exited with 0 +++ +++ exited with 0 +++shell 哇哦，一大堆 connect 。\n所以程序首先尝试连接 nscd 因为显然我们依然生活在 90 年代：\n[pid 154627] connect(9, {sa_family=AF_UNIX, sun_path=\u0026#34;/var/run/nscd/socket\u0026#34;}, 110) = -1 ENOENT (No such file or directory) 。。。幸好我的系统没有它，所以它继续通过 /etc/resolv.conf 查询 DNS：\n[pid 154628] connect(9, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr(\u0026#34;127.0.0.53\u0026#34;)}, 16) = 0 然后最终获得一些 Cloudflare 的 IP 地址，如 172.67.196.144 和 104.21.92.169 。还有一些 IPv6 相关的，由于我禁用了 IPv6 所以并没有工作：\n[pid 154627] connect(9, {sa_family=AF_INET6, sin6_port=htons(0), sin6_flowinfo=htonl(0), inet_pton(AF_INET6, \u0026#34;2606:4700:3034::6815:5ca9\u0026#34;, \u0026amp;sin6_addr), sin6_scope_id=0}, 28) = -1 ENETUNREACH (Network is unreachable) 然后终于程序决定使用 IPv4 的地址 104.21.92.169 去构建请求，同时我们能看到这些都是非阻塞的（non-blocking）连接，因为 connect 返回 -1 而不是 0 表示「正在连接、正在连接、稍后回来检查」。\n[pid 154625] connect(9, {sa_family=AF_INET, sin_port=htons(443), sin_addr=inet_addr(\u0026#34;104.21.92.169\u0026#34;)}, 16) = -1 EINPROGRESS (Operation now in progress) [pid 154626] connect(10, {sa_family=AF_INET, sin_port=htons(443), sin_addr=inet_addr(\u0026#34;104.21.92.169\u0026#34;)}, 16) = -1 EINPROGRESS (Operation now in progress) 好了！所以忽略 DNS 的话我们看到了两个连接。\n同时我们看到了一些线程。\n这就是 Rust 异步的工作方式？我们只是用了一些线程？这也就是它能在「后台运行」的原因？\n在我们回答这些问题前，让我们先调整我们的代码真正的去等待 future 完成，而不是随意的休眠 1 秒钟。\n#[tokio::main] async fn main() -\u0026gt; Result\u0026lt;(), Report\u0026gt; { setup()?; let client = Client::new(); let leaked_client = Box::leak(Box::new(client)); let fut1 = fetch_thing(leaked_client, URL_1); let fut2 = fetch_thing(leaked_client, URL_2); let handle1 = tokio::spawn(fut1); let handle2 = tokio::spawn(fut2); handle1.await.unwrap()?; handle2.await.unwrap()?; Ok(()) } 等等，我们这不又回到原点吗？等待第一个请求完成，然后才开始第二个请求。\n当然不是！我们运行几次就可以看到：\n$ RUST_LOG=info cargo run --quiet --release Jul 25 19:11:07.934 INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(\u0026#34;text/html; charset=utf-8\u0026#34;) Jul 25 19:11:07.958 INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(\u0026#34;text/html; charset=utf-8\u0026#34;) $ RUST_LOG=info cargo run --quiet --release Jul 25 19:11:08.676 INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(\u0026#34;text/html; charset=utf-8\u0026#34;) Jul 25 19:11:08.680 INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(\u0026#34;text/html; charset=utf-8\u0026#34;) $ RUST_LOG=info cargo run --quiet --release Jul 25 19:11:09.325 INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(\u0026#34;text/html; charset=utf-8\u0026#34;) Jul 25 19:11:09.338 INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(\u0026#34;text/html; charset=utf-8\u0026#34;) $ RUST_LOG=info cargo run --quiet --release Jul 25 19:11:10.134 INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(\u0026#34;text/html; charset=utf-8\u0026#34;) Jul 25 19:11:10.144 INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(\u0026#34;text/html; charset=utf-8\u0026#34;) 。。。大部分情况下“whats-in-the-box”胜出了（它确实先开始），但是“advent-of-code-2020”也首先完成了几次。这也是我们希望看到的。\n谬论：也就是说因为有线程请求被并行（parallel）的执行了。\n不是的。但是不要相信我，让我们继续深入。\n不是因为线程 让我们通过 GDB 运行我们的小程序，大部分原因是我还没有对 LLDB 形成肌肉记忆，我相信这是水到渠成的事。\n$ cargo build --quiet \u0026amp;\u0026amp; gdb --quiet --args ./target/debug/waytoodeep Reading symbols from ./target/debug/waytoodeep... warning: Missing auto-load script at offset 0 in section .debug_gdb_scripts of file /home/amos/ftl/waytoodeep/target/debug/waytoodeep. Use `info auto-load python-scripts [REGEXP]\u0026#39; to list them. (gdb) 一切就绪！\n在我们开始之前先设置一下断点。我说了断点？应该是捕捉点（catchpoint）。我不知道参与构造 HTTP/2 请求的所有函数名，但是我知道 connect 对应的系统调用（syscall），这也是我们需要打断点的地方，或者捕捉（catch）。\n(gdb) catch syscall connect Catchpoint 1 (syscall \u0026#39;connect\u0026#39; [42]) 现在我们开始！\n$ Starting program: /home/amos/ftl/waytoodeep/target/debug/waytoodeep [Thread debugging using libthread_db enabled] Using host libthread_db library \u0026#34;/lib/x86_64-linux-gnu/libthread_db.so.1\u0026#34;. [New Thread 0x7ffff7c28700 (LWP 158945)] [New Thread 0x7ffff7a27700 (LWP 158946)] [New Thread 0x7fffef826700 (LWP 158947)] [New Thread 0x7ffff7826700 (LWP 158948)] [New Thread 0x7ffff7625700 (LWP 158949)] [New Thread 0x7ffff7424700 (LWP 158950)] [New Thread 0x7ffff7223700 (LWP 158951)] [New Thread 0x7ffff701f700 (LWP 158952)] [New Thread 0x7ffff6e1e700 (LWP 158953)] [New Thread 0x7ffff6c1a700 (LWP 158954)] [New Thread 0x7ffff6a16700 (LWP 158955)] [New Thread 0x7ffff680f700 (LWP 158956)] [New Thread 0x7ffff660e700 (LWP 158957)] [New Thread 0x7ffff640a700 (LWP 158958)] [New Thread 0x7ffff6206700 (LWP 158959)] [New Thread 0x7ffff5f4b700 (LWP 158960)] [New Thread 0x7ffff5d4a700 (LWP 158961)] [Switching to Thread 0x7ffff5f4b700 (LWP 158960)] Thread 17 \u0026#34;tokio-runtime-w\u0026#34; hit Catchpoint 1 (call to syscall connect), 0x00007ffff7d5033b in __libc_connect (fd=fd@entry=9, addr=..., addr@entry=..., len=len@entry=110) at ../sysdeps/unix/sysv/linux/connect.c:26 26 ../sysdeps/unix/sysv/linux/connect.c: No such file or directory. (gdb) 不错不错，真快！我们停在了名为 tokio-runtime-w 的 Thread 17 中，因为我猜其他所有字母都被使用了。\nw 意味这 worker ，如果你不是第一天用 Unix 就会知道什么这么简写。\n好的， Thread 17 ，那么其他线程在做什么呢？\n(gdb) info threads Id Target Id Frame 1 Thread 0x7ffff7c2c6c0 (LWP 158941) \u0026#34;waytoodeep\u0026#34; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38 2 Thread 0x7ffff7c28700 (LWP 158945) \u0026#34;tokio-runtime-w\u0026#34; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38 3 Thread 0x7ffff7a27700 (LWP 158946) \u0026#34;tokio-runtime-w\u0026#34; 0x00007ffff7d4f5ce in epoll_wait (epfd=3, events=0x555556338b60, maxevents=1024, timeout=-1) at ../sysdeps/unix/sysv/linux/epoll_wait.c:30 4 Thread 0x7fffef826700 (LWP 158947) \u0026#34;tokio-runtime-w\u0026#34; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38 5 Thread 0x7ffff7826700 (LWP 158948) \u0026#34;tokio-runtime-w\u0026#34; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38 6 Thread 0x7ffff7625700 (LWP 158949) \u0026#34;tokio-runtime-w\u0026#34; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38 7 Thread 0x7ffff7424700 (LWP 158950) \u0026#34;tokio-runtime-w\u0026#34; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38 8 Thread 0x7ffff7223700 (LWP 158951) \u0026#34;tokio-runtime-w\u0026#34; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38 9 Thread 0x7ffff701f700 (LWP 158952) \u0026#34;tokio-runtime-w\u0026#34; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38 10 Thread 0x7ffff6e1e700 (LWP 158953) \u0026#34;tokio-runtime-w\u0026#34; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38 11 Thread 0x7ffff6c1a700 (LWP 158954) \u0026#34;tokio-runtime-w\u0026#34; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38 12 Thread 0x7ffff6a16700 (LWP 158955) \u0026#34;tokio-runtime-w\u0026#34; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38 13 Thread 0x7ffff680f700 (LWP 158956) \u0026#34;tokio-runtime-w\u0026#34; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38 14 Thread 0x7ffff660e700 (LWP 158957) \u0026#34;tokio-runtime-w\u0026#34; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38 15 Thread 0x7ffff640a700 (LWP 158958) \u0026#34;tokio-runtime-w\u0026#34; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38 16 Thread 0x7ffff6206700 (LWP 158959) \u0026#34;tokio-runtime-w\u0026#34; syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38 *17 Thread 0x7ffff5f4b700 (LWP 158960) \u0026#34;tokio-runtime-w\u0026#34; 0x00007ffff7d5033b in __libc_connect (fd=fd@entry=9, addr=..., addr@entry=..., len=len@entry=110) at ../sysdeps/unix/sysv/linux/connect.c:26 18 Thread 0x7ffff5d4a700 (LWP 158961) \u0026#34;tokio-runtime-w\u0026#34; 0x00007ffff7d48a46 in __GI___mmap64 (offset=0, fd=-1, flags=16418, prot=0, len=134217728, addr=0x0) at ../sysdeps/unix/sysv/linux/mmap64.c:59 额。\n我们可以获得更多的栈帧？\n(gdb) thread apply all backtrace 2 Thread 18 (Thread 0x7ffff5d4a700 (LWP 158961)): #0 0x00007ffff7d48a46 in __GI___mmap64 (offset=0, fd=-1, flags=16418, prot=0, len=134217728, addr=0x0) at ../sysdeps/unix/sysv/linux/mmap64.c:59 #1 __GI___mmap64 (addr=addr@entry=0x0, len=len@entry=134217728, prot=prot@entry=0, flags=flags@entry=16418, fd=fd@entry=-1, offset=offset@entry=0) at ../sysdeps/unix/sysv/linux/mmap64.c:47 (More stack frames follow...) Thread 17 (Thread 0x7ffff5f4b700 (LWP 158960)): #0 0x00007ffff7d5033b in __libc_connect (fd=fd@entry=9, addr=..., addr@entry=..., len=len@entry=110) at ../sysdeps/unix/sysv/linux/connect.c:26 #1 0x00007ffff7d8b713 in open_socket (type=type@entry=GETFDHST, key=key@entry=0x7ffff7de5ccb \u0026#34;hosts\u0026#34;, keylen=keylen@entry=6) at nscd_helper.c:185 (More stack frames follow...) Thread 16 (Thread 0x7ffff6206700 (LWP 158959)): #0 syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38 #1 0x0000555555b9f1d1 in parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (self=0x7ffff6206498, ts=...) at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot_core-0.8.3/src/thread_parker/linux.rs:112 (More stack frames follow...) Thread 15 (Thread 0x7ffff640a700 (LWP 158958)): #0 syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38 #1 0x0000555555b9f1d1 in parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (self=0x7ffff640a498, ts=...) at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot_core-0.8.3/src/thread_parker/linux.rs:112 (More stack frames follow...) Thread 14 (Thread 0x7ffff660e700 (LWP 158957)): #0 syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38 #1 0x0000555555b9f1d1 in parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (self=0x7ffff660e498, ts=...) at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot_core-0.8.3/src/thread_parker/linux.rs:112 (More stack frames follow...) Thread 13 (Thread 0x7ffff680f700 (LWP 158956)): #0 syscall () at ../sysdeps/unix/sysv/linux/x86_64/syscall.S:38 #1 0x0000555555b9f1d1 in parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (self=0x7ffff680f498, ts=...) at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot_core-0.8.3/src/thread_parker/linux.rs:112 (More stack frames follow...) 额。大部分都是挂起的。也就是空闲的。更准确的是它们在等待工作。\n我们也可以通过 htop 查看这些所有线程，我知道我们已经看到了，但是我仅仅是觉得 htop 很棒。感谢 Hisham！ 所以，我们注意到一些线程，同时也有一些 CPU 核心。可能是一个 CPU 核心一个线程？ 是的。然后还有一些阻塞的线程，正如我们从上面 strace 输出看到的那样， 它会进行一些阻塞的 connect 调用去查询 DNS（实际是 glibc 在执行）， 所以它通过运行在工作线程之外避免阻塞其他任务。\n所以多个线程，这就是为什么一次可以运行多个请求的原因？\n实际上文档上表明这是一个单线程的执行器，我也不能确定，所以让我们试一下：\n// 👇 #[tokio::main(flavor = \u0026#34;current_thread\u0026#34;)] async fn main() -\u0026gt; Result\u0026lt;(), Report\u0026gt; { // (same as before) } $ RUST_LOG=info cargo run --quiet --release Jul 25 19:50:15.977 INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(\u0026#34;text/html; charset=utf-8\u0026#34;) Jul 25 19:50:15.994 INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(\u0026#34;text/html; charset=utf-8\u0026#34;) 两个响应间隔 17ms ，这个时间不够构造一个完整的请求，所以请求并行（parallel）的执行了。如果你依然坚持它内部使用了线程，让我们进一步确认我们只有一个线程： 确实有多个线程，但是这些都是阻塞线程。仅仅是 DNS 查询。可以通过 htop 看到已经没有无数（15）的工作线程了： （顺便说一下 15 个工作线程的原因，这是因为我预留了一个 CPU 核心没有分配给虚拟机，这样即使虚拟机全速运行也不会导致宿主机停止响应）。\n如果我们将 DNS 查询排除在外，我们就可以看到实际上仅仅使用了一个线程，我们将继续下去，以防你依然存疑！\n插曲：让我们避免泄漏内存 但是在那之前：正在泄漏 reqwest 的 Client 让我很不爽。\n为了避免，我们可以创建一个原子引用计数（atomically-reference-counted），这样它就可以随着任务运行而存活。\n修改起来非常简单：\n// 👇 Atomically Reference Counted = Arc use std::sync::Arc; #[tokio::main(flavor = \u0026#34;current_thread\u0026#34;)] async fn main() -\u0026gt; Result\u0026lt;(), Report\u0026gt; { setup()?; // 👇 there we go let client = Arc::new(Client::new()); // 👇 let fut1 = fetch_thing(client.clone(), URL_1); // (cloning it only increases the reference count) let fut2 = fetch_thing(client.clone(), URL_2); let handle1 = tokio::spawn(fut1); let handle2 = tokio::spawn(fut2); handle1.await.unwrap()?; handle2.await.unwrap()?; Ok(()) } #[allow(clippy::manual_async_fn)] fn fetch_thing( // 👇 now taking this, we have shared ownership of it client: Arc\u0026lt;Client\u0026gt;, url: \u0026amp;\u0026#39;static str, ) -\u0026gt; impl Future\u0026lt;Output = Result\u0026lt;(), Report\u0026gt;\u0026gt; + \u0026#39;static { async move { // luckily this 👇 only requires `\u0026amp;self` let res = client.get(url).send().await?.error_for_status()?; info!(%url, content_type = ?res.headers().get(\u0026#34;content-type\u0026#34;), \u0026#34;Got a response!\u0026#34;); Ok(()) } } 好了，现在我感觉好多了。我们的程序不再泄漏一些字节即使它永远不会运行超过几秒钟。一切都还好。\n让我们看一下 reqwest 的 Client 定义:\n#[derive(Clone)] pub struct Client { inner: Arc\u0026lt;ClientRef\u0026gt;, } 它已经是引用计数的了，所以我们可以直接接受一个 Client:\n#[tokio::main(flavor = \u0026#34;current_thread\u0026#34;)] async fn main() -\u0026gt; Result\u0026lt;(), Report\u0026gt; { setup()?; // 👇 let client = Client::new(); // 👇 let fut1 = fetch_thing(client.clone(), URL_1); // no need to clone a second time let fut2 = fetch_thing(client, URL_2); let handle1 = tokio::spawn(fut1); let handle2 = tokio::spawn(fut2); handle1.await.unwrap()?; handle2.await.unwrap()?; Ok(()) } #[allow(clippy::manual_async_fn)] fn fetch_thing( // 👇 client: Client, url: \u0026amp;\u0026#39;static str, ) -\u0026gt; impl Future\u0026lt;Output = Result\u0026lt;(), Report\u0026gt;\u0026gt; + \u0026#39;static { async move { let res = client.get(url).send().await?.error_for_status()?; info!(%url, content_type = ?res.headers().get(\u0026#34;content-type\u0026#34;), \u0026#34;Got a response!\u0026#34;); Ok(()) } } 好了。\n对了，仅供参考，更简单的 async fn 也可以工作了：\nasync fn fetch_thing(client: Client, url: \u0026amp;str) -\u0026gt; Result\u0026lt;(), Report\u0026gt; { let res = client.get(url).send().await?.error_for_status()?; info!(%url, content_type = ?res.headers().get(\u0026#34;content-type\u0026#34;), \u0026#34;Got a response!\u0026#34;); Ok(()) } 我们甚至不需要要求 url 的借用生命周期是 'static 。如果 url 是 'static 的则返回的 Future 也是，反之亦然。\n作为例子，下面代码无法通过编译：\n#[tokio::main(flavor = \u0026#34;current_thread\u0026#34;)] async fn main() -\u0026gt; Result\u0026lt;(), Report\u0026gt; { setup()?; let client = Client::new(); // this is a `String`, owned by main let url1 = String::from(URL_1); // we\u0026#39;re borrowing from main 👇 let fut1 = fetch_thing(client.clone(), \u0026amp;url1); let fut2 = fetch_thing(client, URL_2); let handle1 = tokio::spawn(fut1); let handle2 = tokio::spawn(fut2); handle1.await.unwrap()?; handle2.await.unwrap()?; Ok(()) } $ cargo check Checking waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep) error[E0597]: `url1` does not live long enough --\u0026gt; src/main.rs:18:44 | 18 | let fut1 = fetch_thing(client.clone(), \u0026amp;url1); | ----------------------------^^^^^- | | | | | borrowed value does not live long enough | argument requires that `url1` is borrowed for `\u0026#39;static` ... 28 | } | - `url1` dropped here while still borrowed 你面对的考验就是：修改了一些代码，然后突然间整个 Future 不再实现 Send ，但是你需要它实现 Send 。参考Getting in and out of trouble with Rust futures。\n在我们进一步深入之前，我们还想提一下，除了通过 tokio::spawn 可以同时运行两个 future 并且立即等待两个 future 完成，还是使用 FuturesUnordered 实现相同目的。\n$ cargo add futures@0.3.16 Updating \u0026#39;https://github.com/rust-lang/crates.io-index\u0026#39; index Adding futures v0.3.16 to dependencies use futures::{stream::FuturesUnordered, StreamExt}; #[tokio::main(flavor = \u0026#34;current_thread\u0026#34;)] async fn main() -\u0026gt; Result\u0026lt;(), Report\u0026gt; { setup()?; let client = Client::new(); let mut group = vec![ fetch_thing(client.clone(), URL_1), fetch_thing(client, URL_2), ] .into_iter() .collect::\u0026lt;FuturesUnordered\u0026lt;_\u0026gt;\u0026gt;(); while let Some(item) = group.next().await { // propagate errors item?; } Ok(()) } 通过这个解决半啃啊，我们可以 await 任意数量的 future 对象，同时也是并发的被轮询（polled）。\n$ RUST_LOG=info cargo run --quiet --release Jul 25 20:12:37.208 INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(\u0026#34;text/html; charset=utf-8\u0026#34;) Jul 25 20:12:37.227 INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(\u0026#34;text/html; charset=utf-8\u0026#34;) 仅仅。。。19 毫秒的间隔 \u0026ndash; 可以确定是并发的。\n彻底摆脱 DNS 现在让我们暂时忘掉 reqwest 。\nHTTP 并不难 ，我们可以自己构建。只要 TCP 就行：\nuse std::net::SocketAddr; use tokio::{ io::{AsyncReadExt, AsyncWriteExt}, net::TcpStream, }; async fn fetch_thing(name: \u0026amp;str) -\u0026gt; Result\u0026lt;(), Report\u0026gt; { // look mom, no DNS! let addr: SocketAddr = ([1, 1, 1, 1], 80).into(); let mut socket = TcpStream::connect(addr).await?; // we\u0026#39;re writing straight to the socket, there\u0026#39;s no buffering // so no need to flush socket.write_all(b\u0026#34;GET / HTTP/1.1\\r\\n\u0026#34;).await?; socket.write_all(b\u0026#34;Host: 1.1.1.1\\r\\n\u0026#34;).await?; socket.write_all(b\u0026#34;User-Agent: cool-bear\\r\\n\u0026#34;).await?; socket.write_all(b\u0026#34;Connection: close\\r\\n\u0026#34;).await?; socket.write_all(b\u0026#34;\\r\\n\u0026#34;).await?; let mut response = String::with_capacity(256); socket.read_to_string(\u0026amp;mut response).await?; let status = response.lines().next().unwrap_or_default(); info!(%status, , \u0026#34;Got response!\u0026#34;); // dropping the socket will close the connection Ok(()) } 可以正常运行：\n$ RUST_LOG=info cargo run --quiet --release Jul 25 20:24:05.158 INFO waytoodeep: Got response! status=HTTP/1.1 301 Moved Permanently name=second Jul 25 20:24:05.159 INFO waytoodeep: Got response! status=HTTP/1.1 301 Moved Permanently name=first （看，第二个赢得了胜利）。\n同时再也没有 DNS 查询了。\n当然 http://1.1.1.1 将我们重定向到 HTTPS 的页面，技术上实现 TLS 并不困难，但是我们的篇幅已经很长了，所以。。。\n$ cargo add tokio-rustls@0.22.0 Updating \u0026#39;https://github.com/rust-lang/crates.io-index\u0026#39; index Adding tokio-rustls v0.22.0 to dependencies $ cargo add webpki@0.21.4 Updating \u0026#39;https://github.com/rust-lang/crates.io-index\u0026#39; index Adding webpki v0.21.4 to dependencies $ cargo add webpki-roots@0.21.1 Updating \u0026#39;https://github.com/rust-lang/crates.io-index\u0026#39; index Adding webpki-roots v0.21.1 to dependencies 然后。。。\n$ cargo rm reqwest Removing reqwest from dependencies use std::sync::Arc; use webpki::DNSNameRef; use tokio_rustls::{rustls::ClientConfig, TlsConnector}; async fn fetch_thing(name: \u0026amp;str) -\u0026gt; Result\u0026lt;(), Report\u0026gt; { // look out it\u0026#39;s port 443 now let addr: SocketAddr = ([1, 1, 1, 1], 443).into(); let socket = TcpStream::connect(addr).await?; // establish a TLS session... let connector: TlsConnector = { let mut config = ClientConfig::new(); config .root_store .add_server_trust_anchors(\u0026amp;webpki_roots::TLS_SERVER_ROOTS); Arc::new(config).into() }; // we have to use the proper DNS name now 👇 let dnsname = DNSNameRef::try_from_ascii_str(\u0026#34;one.one.one.one\u0026#34;)?; let mut socket = connector.connect(dnsname, socket).await?; // we\u0026#39;re writing straight to the socket, there\u0026#39;s no buffering // so no need to flush socket.write_all(b\u0026#34;GET / HTTP/1.1\\r\\n\u0026#34;).await?; // 👇 socket.write_all(b\u0026#34;Host: one.one.one.one\\r\\n\u0026#34;).await?; socket.write_all(b\u0026#34;User-Agent: cool-bear\\r\\n\u0026#34;).await?; socket.write_all(b\u0026#34;Connection: close\\r\\n\u0026#34;).await?; socket.write_all(b\u0026#34;\\r\\n\u0026#34;).await?; let mut response = String::with_capacity(256); socket.read_to_string(\u0026amp;mut response).await?; let status = response.lines().next().unwrap_or_default(); info!(%status, , \u0026#34;Got response!\u0026#34;); // dropping the socket will close the connection Ok(()) } $ RUST_LOG=info cargo run --quiet --release Jul 25 20:31:32.627 INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second Jul 25 20:31:32.658 INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first 好了，现在返回状态码 200！\n我们的目标是了解 Rust 的 future，我们已经获得了不错的进展。\n但是让我们考虑以下场景：我们想并发的执行两个请求，一旦其中一个失败，另外一个也应该立即请求失败，或者两个一起成功。\ntokio 的 try_join 宏 实际上，又一个宏可以做这个！\n#[tokio::main(flavor = \u0026#34;current_thread\u0026#34;)] async fn main() -\u0026gt; Result\u0026lt;(), Report\u0026gt; { setup()?; let res = tokio::try_join!(fetch_thing(\u0026#34;first\u0026#34;), fetch_thing(\u0026#34;second\u0026#34;),)?; info!(?res, \u0026#34;All done!\u0026#34;); Ok(()) } 这就是我们想要的！\n$ RUST_LOG=info cargo run --quiet --release Jul 25 20:44:52.150 INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first Jul 25 20:44:52.165 INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second Jul 25 20:44:52.165 INFO waytoodeep: All done! res=((), ()) 再次快速检查以下：响应间隔在 15ms \u0026ndash; 也就是确定是并发的发送。\ntry_join! 帮我们进行了 await ，同时帮我们处理了结果。如果一切正常，我们得到所有 future 对象的结果：内容为 Ok 的空元组（有序的）。\n所以我们可以取到我们 future 返回的对象：\n// 👇 async fn fetch_thing(name: \u0026amp;str) -\u0026gt; Result\u0026lt;\u0026amp;str, Report\u0026gt; { // (omitted) // 👇 Ok(name) } 为了方便我们自己，它们按照顺序返回，无论哪个先被执行：\n$ RUST_LOG=info cargo run --quiet --release Jul 25 20:47:56.967 INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second Jul 25 20:47:56.967 INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first Jul 25 20:47:56.967 INFO waytoodeep: All done! res=(\u0026#34;first\u0026#34;, \u0026#34;second\u0026#34;) $ RUST_LOG=info cargo run --quiet --release Jul 25 20:47:57.933 INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first Jul 25 20:47:57.935 INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second Jul 25 20:47:57.935 INFO waytoodeep: All done! res=(\u0026#34;first\u0026#34;, \u0026#34;second\u0026#34;) $ RUST_LOG=info cargo run --quiet --release Jul 25 20:47:58.942 INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second Jul 25 20:47:58.946 INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first Jul 25 20:47:58.946 INFO waytoodeep: All done! res=(\u0026#34;first\u0026#34;, \u0026#34;second\u0026#34;) 好了，现在我们没有 DNS 查询，我们就可以消除“同时”请求是由于多线程实现的。\n因为，如果我们在 strace 下运行程序，并通过 -f 请求跟踪子线程（ BTW f 意思是跟踪（ follow ）子线程）：\n$ cargo build --quiet --release \u0026amp;\u0026amp; strace -f -e \u0026#39;connect\u0026#39; ./target/release/waytoodeep connect(9, {sa_family=AF_INET, sin_port=htons(443), sin_addr=inet_addr(\u0026#34;1.1.1.1\u0026#34;)}, 16) = -1 EINPROGRESS (Operation now in progress) connect(10, {sa_family=AF_INET, sin_port=htons(443), sin_addr=inet_addr(\u0026#34;1.1.1.1\u0026#34;)}, 16) = -1 EINPROGRESS (Operation now in progress) Jul 25 20:51:54.004 INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first Jul 25 20:51:54.013 INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second Jul 25 20:51:54.015 INFO waytoodeep: All done! res=(\u0026#34;first\u0026#34;, \u0026#34;second\u0026#34;) +++ exited with 0 +++ 。。。现在我们看到了预期的两次 connect 调用，但是没有任何子线程。而且在这个运行中，响应之间的间隔时间是 9 毫秒！少于我直接 ping 1.1.1.1:\n$ ping -c 1 1.1.1.1 PING 1.1.1.1 (1.1.1.1) 56(84) bytes of data. 64 bytes from 1.1.1.1: icmp_seq=1 ttl=57 time=13.7 ms --- 1.1.1.1 ping statistics --- 1 packets transmitted, 1 received, 0% packet loss, time 0ms rtt min/avg/max/mdev = 13.748/13.748/13.748/0.000 ms 这是因为执行器通过 Event Loop 构建非阻塞的系统调用，然后订阅 Event Loop 管理的资源相关的事件， 然后就可以知道一个 socket 什么时间可以进行读写。\n所以，future 对象只是一些状态，接下来就可以进行 await，那么在哪订阅的事件呢？\n让我们尝试创建一个我们自己的 try_join \u0026ndash; 一个函数，并且只接受两个 future。然后我们就能看到发生了什么。\n我们已经实现了自己的 future，实现一个 try_join 函数会有多麻烦？\n事实证明很麻烦 我们先从简单的开始！我们想实现一个函数接受两个 future 对象然后返回一个 future 对象。\n// in `src/main.rs` mod tj; // in `src/tj.rs` use std::future::Future; pub fn try_join\u0026lt;A, B\u0026gt;(a: A, b: B) -\u0026gt; impl Future\u0026lt;Output = ()\u0026gt; where A: Future, B: Future, { todo!(\u0026#34;implement me!\u0026#34;); } 额。函数不应该只返回一个空元组，它需要返回一个包含成功结果的元组。或者遇到的第一个错误。\n所以我们需要添加一些更多的范型参数：一个错误类型（我们假设两个 future 对象返回同样的错误类型），另一个是 future 对象返回的 Ok 的类型。\npub fn try_join\u0026lt;A, B, AR, BR, E\u0026gt;(a: A, b: B) -\u0026gt; impl Future\u0026lt;Output = Result\u0026lt;(AR, BR), E\u0026gt;\u0026gt; where A: Future\u0026lt;Output = Result\u0026lt;AR, E\u0026gt;\u0026gt;, B: Future\u0026lt;Output = Result\u0026lt;BR, E\u0026gt;\u0026gt;, { todo!(\u0026#34;implement me!\u0026#34;); } 好了！这非常绕口，但是我相信我们已经实现了需求。\n需要注意的是我们使用了 impl Trait 语法，让我们不用暴露我们自己的 try join future 。这不重要，但是可以让我们用更少的 pub 关键字，同时我们的手指已经码累了。非常累。\n所以，让我们来创建这个类型！\n类型需要持续 A 和 B ，并注意 AR 、 BR 和 E 类型。所以，希望您对这些范型参数沙拉有个好胃口。\nstruct TryJoin\u0026lt;A, B, AR, BR, E\u0026gt; where A: Future\u0026lt;Output = Result\u0026lt;AR, E\u0026gt;\u0026gt;, B: Future\u0026lt;Output = Result\u0026lt;BR, E\u0026gt;\u0026gt;, { a: A, b: B, } 然后可以在我们的 try_join 函数中返回它：\npub fn try_join\u0026lt;A, B, AR, BR, E\u0026gt;(a: A, b: B) -\u0026gt; impl Future\u0026lt;Output = Result\u0026lt;(AR, BR), E\u0026gt;\u0026gt; where A: Future\u0026lt;Output = Result\u0026lt;AR, E\u0026gt;\u0026gt;, B: Future\u0026lt;Output = Result\u0026lt;BR, E\u0026gt;\u0026gt;, { // so simple! TryJoin { a, b } } 我认为这很好的说明一个事实：创建 future 对象仅仅是构建状态。不需要任何额外的工作。\n当然，这个不会通过编译，因为 TryJoin 还没有实现 Future 。\n但是不要担心！ rust-analyzer 可以帮助我们生成缺失的部分：\nuse std::{ future::Future, pin::Pin, task::{Context, Poll}, }; impl\u0026lt;A, B, AR, BR, E\u0026gt; Future for TryJoin\u0026lt;A, B, AR, BR, E\u0026gt; where A: Future\u0026lt;Output = Result\u0026lt;AR, E\u0026gt;\u0026gt;, B: Future\u0026lt;Output = Result\u0026lt;BR, E\u0026gt;\u0026gt;, { type Output = Result\u0026lt;(AR, BR), E\u0026gt;; fn poll(self: Pin\u0026lt;\u0026amp;mut Self\u0026gt;, cx: \u0026amp;mut Context\u0026lt;\u0026#39;_\u0026gt;) -\u0026gt; Poll\u0026lt;Self::Output\u0026gt; { todo!() } } 如果我们真正的实现了，我们将按照下面方式使用：\n#[tokio::main(flavor = \u0026#34;current_thread\u0026#34;)] async fn main() -\u0026gt; Result\u0026lt;(), Report\u0026gt; { setup()?; let res = tj::try_join(fetch_thing(\u0026#34;first\u0026#34;), fetch_thing(\u0026#34;second\u0026#34;)).await?; info!(?res, \u0026#34;All done!\u0026#34;); Ok(()) } 当然，现在只是会崩溃：\n$ RUST_LOG=info cargo run --quiet --release The application panicked (crashed). Message: not yet implemented Location: src/tj.rs:32 Backtrace omitted. Run with RUST_BACKTRACE=1 environment variable to display it. Run with RUST_BACKTRACE=full to include source snippets. 所以，我猜我们需要实现它！\n好吧，让我们先尝试至少轮询（polling）一个 future 对象。\nfn poll(self: Pin\u0026lt;\u0026amp;mut Self\u0026gt;, cx: \u0026amp;mut Context\u0026lt;\u0026#39;_\u0026gt;) -\u0026gt; Poll\u0026lt;Self::Output\u0026gt; { let a = self.a.poll(cx); todo!() } $ RUST_LOG=info cargo run --quiet --release error[E0599]: no method named `poll` found for type parameter `A` in the current scope --\u0026gt; src/tj.rs:32:24 | 32 | let a = self.a.poll(cx); | ^^^^ method not found in `A` | ::: /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/future/future.rs:100:8 | 100 | fn poll(self: Pin\u0026lt;\u0026amp;mut Self\u0026gt;, cx: \u0026amp;mut Context\u0026lt;\u0026#39;_\u0026gt;) -\u0026gt; Poll\u0026lt;Self::Output\u0026gt;; | ---- the method is available for `Pin\u0026lt;\u0026amp;mut A\u0026gt;` here | help: consider wrapping the receiver expression with the appropriate type | 32 | let a = Pin::new(\u0026amp;mut self.a).poll(cx); | ^^^^^^^^^^^^^ ^ 额！一个好的开始，好的开始。\n我已经在这里详细的解释了 Pin，所以这里我们就简单的介绍一下。\n方法通常通过如下方式定义接收者（receiver）：\nstruct MyType { fn do_thing(\u0026amp;self) { println!(\u0026#34;my value is {}\u0026#34;, self.value) } } 也就是下面的简写：\nstruct MyType { fn do_thing(self: \u0026amp;Self) { println!(\u0026#34;my value is {}\u0026#34;, self.value) } } 因为我们在 impl MyType 代码块中 Self 就是 MyType 。\n很清晰吧？好了，还可以定义其他很多类型作为接收者， Pin\u0026lt;\u0026amp;mut Self\u0026gt; 就是其中之一：\nstruct MyType { fn do_thing(self: Pin\u0026lt;\u0026amp;mut Self\u0026gt;) { // good luck!1 } } 那么 MyType 必须是固定的（pinned）是什么意思呢？比如，它保证不进行转移（move）。除非它实现了 Unpin ， 然后它就可以是非固定的（unpinned），可移动，然后被再一次固定。\n对于剩下的文章，我们不会假设我们的 future A 和 B 都是 Unpin ，也就是说我们自己不会移动（move）它们（只销毁（drop）它们）。\n你可以说我们不需要 A 和 B 是 Unpin 的，因为我们没有添加指定的 where clause 来标记需要它们是 Unpin 。 因为如果我们需要，我们就要像下面这样添加额外的 trait bound ：\nstruct TryJoin\u0026lt;A, B, AR, BR, E\u0026gt; where // 👇 A: Future\u0026lt;Output = Result\u0026lt;AR, E\u0026gt;\u0026gt; + Unpin, B: Future\u0026lt;Output = Result\u0026lt;BR, E\u0026gt;\u0026gt; + Unpin, {} 但是我们没有，所以我们不能假设 A 或 B 是 Unpin 的。\n所以！我们现在真的只是面临固定（pin）保护的问题。\n我们现在只持有一个 Pin\u0026lt;\u0026amp;mut TryJoin\u0026lt;A, B, ...\u0026gt;\u0026gt; 但是我希望持续一个 Pin\u0026lt;\u0026amp;mut A\u0026gt; （因为这就是我们因为需要轮询 A ）。\n另外一个解决方法，我倾向于通过一些类似 pin-project 包，或者类似 pin-project-lite，但是在我们前进的方向直接使用 pin-project 真的很尴尬， 所以我们这里使用 unsafe 作为替代：\nfn poll(self: Pin\u0026lt;\u0026amp;mut Self\u0026gt;, cx: \u0026amp;mut Context\u0026lt;\u0026#39;_\u0026gt;) -\u0026gt; Poll\u0026lt;Self::Output\u0026gt; { let a = unsafe { self.map_unchecked_mut(|this| \u0026amp;mut this.a) }; let a = a.poll(cx); todo!() } 可以通过编译。但是我们在使用 unsafe ，也就意味着编译器正式停止 照顾 检查我们的代码。 我们自己必须强制执行一些不变量（invariants），并且非常非常小心，同时让其他人审查（review）我们的工作， 但是依然可能会出错，因为他们也会休息。\n现在，非常棒的是我们可以轮询 a 。它如果完成会返回 Poll::Ready(Result\u0026lt;AR, E\u0026gt;) ， 否则就是等会会完成则返回 Poll::Pending 。\n我们可以观察到：\nfn poll(self: Pin\u0026lt;\u0026amp;mut Self\u0026gt;, cx: \u0026amp;mut Context\u0026lt;\u0026#39;_\u0026gt;) -\u0026gt; Poll\u0026lt;Self::Output\u0026gt; { let a = unsafe { self.map_unchecked_mut(|this| \u0026amp;mut this.a) }; match a.poll(cx) { Poll::Pending =\u0026gt; { info!(\u0026#34;A is pending...\u0026#34;); return Poll::Pending; } Poll::Ready(res) =\u0026gt; match res { Ok(_) =\u0026gt; info!(\u0026#34;A is ready!\u0026#34;), Err(e) =\u0026gt; return Poll::Ready(Err(e)), }, } todo!() } 我们通过打印日志“A is pending”知道准备完成。这可能需要几个回合：毕竟，我们正在做一些重要的事情。 我们建立一个 TCP 连接，接着在上面进行 TLS 会话，接着是一些分开的写，最后读到 EOF（end of file）。\n当然，如果我们运行它的话：\naytoodeep::tj: A is pending... Jul 25 22:54:14.495 INFO waytoodeep::tj: A is pending... Jul 25 22:54:14.495 INFO waytoodeep::tj: A is pending... Jul 25 22:54:14.495 INFO waytoodeep::tj: A is pending... Jul 25 22:54:14.495 INFO waytoodeep::tj: A is pending... Jul 25 22:54:14.495 INFO waytoodeep::tj: A is pending... Jul 25 22:54:14.495 INFO waytoodeep::tj: A is pending... Jul 25 22:54:14.495 INFO waytoodeep::tj: A is pending... Jul 25 22:54:14.513 INFO waytoodeep::tj: A is pending... Jul 25 22:54:14.513 INFO waytoodeep::tj: A is pending... Jul 25 22:54:14.513 INFO waytoodeep::tj: A is pending... Jul 25 22:54:14.513 INFO waytoodeep::tj: A is pending... Jul 25 22:54:14.513 INFO waytoodeep::tj: A is pending... Jul 25 22:54:14.514 INFO waytoodeep::tj: A is pending... Jul 25 22:54:14.522 INFO waytoodeep::tj: A is pending... Jul 25 22:54:14.522 INFO waytoodeep::tj: A is pending... Jul 25 22:54:14.522 INFO waytoodeep::tj: A is pending... Jul 25 22:54:14.522 INFO waytoodeep::tj: A is pending... Jul 25 22:54:14.522 INFO waytoodeep::tj: A is pending... Jul 25 22:54:14.523 INFO waytoodeep::tj: A is pending... Jul 25 22:54:14.523 INFO waytoodeep::tj: A is pending... Jul 25 22:54:14.530 INFO waytoodeep::tj: A is pending... Jul 25 22:54:14.530 INFO waytoodeep::tj: A is pending... Jul 25 22:54:14.530 INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first Jul 25 22:54:14.530 INFO waytoodeep::tj: A is ready! The application panicked (crashed). Message: not yet implemented Location: src/tj.rs:46 Backtrace omitted. Run with RUST_BACKTRACE=1 environment variable to display it. Run with RUST_BACKTRACE=full to include source snippets. 我们可以看到它确实花费了几个回合。\n注意如果 A 返回错误我们的代码也会返回 Poll:Ready ，因为我们想收集 A 和 B 的结果。\n所以我们对 B 做相同的事情：\nfn poll(self: Pin\u0026lt;\u0026amp;mut Self\u0026gt;, cx: \u0026amp;mut Context\u0026lt;\u0026#39;_\u0026gt;) -\u0026gt; Poll\u0026lt;Self::Output\u0026gt; { let a = unsafe { self.map_unchecked_mut(|this| \u0026amp;mut this.a) }; match a.poll(cx) { Poll::Pending =\u0026gt; { info!(\u0026#34;A is pending...\u0026#34;); return Poll::Pending; } Poll::Ready(res) =\u0026gt; match res { Ok(_) =\u0026gt; info!(\u0026#34;A is ready!\u0026#34;), Err(e) =\u0026gt; return Poll::Ready(Err(e)), }, } let b = unsafe { self.map_unchecked_mut(|this| \u0026amp;mut this.a) }; match b.poll(cx) { Poll::Pending =\u0026gt; { info!(\u0026#34;B is pending...\u0026#34;); return Poll::Pending; } Poll::Ready(res) =\u0026gt; match res { Ok(_) =\u0026gt; info!(\u0026#34;B is ready!\u0026#34;), Err(e) =\u0026gt; return Poll::Ready(Err(e)), }, } todo!() } 然后。。whoops：\nRUST_LOG=info cargo run --quiet --release error[E0382]: use of moved value: `self` --\u0026gt; src/tj.rs:46:26 | 33 | fn poll(self: Pin\u0026lt;\u0026amp;mut Self\u0026gt;, cx: \u0026amp;mut Context\u0026lt;\u0026#39;_\u0026gt;) -\u0026gt; Poll\u0026lt;Self::Output\u0026gt; { | ---- move occurs because `self` has type `Pin\u0026lt;\u0026amp;mut TryJoin\u0026lt;A, B, AR, BR, E\u0026gt;\u0026gt;`, which does not implement the `Copy` trait 34 | let a = unsafe { self.map_unchecked_mut(|this| \u0026amp;mut this.a) }; | ------------------------------------- `self` moved due to this method call ... 46 | let b = unsafe { self.map_unchecked_mut(|this| \u0026amp;mut this.a) }; | ^^^^ value used here after move | note: this function takes ownership of the receiver `self`, which moves `self` --\u0026gt; /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/pin.rs:776:43 | 776 | pub unsafe fn map_unchecked_mut\u0026lt;U, F\u0026gt;(self, func: F) -\u0026gt; Pin\u0026lt;\u0026amp;\u0026#39;a mut U\u0026gt; | ^^^^ 是的。 map_unchecked_mut 占有了 self 。\n不用担心，我们可以使用 .as_mut() ：\n// 👇 fn poll(mut self: Pin\u0026lt;\u0026amp;mut Self\u0026gt;, cx: \u0026amp;mut Context\u0026lt;\u0026#39;_\u0026gt;) -\u0026gt; Poll\u0026lt;Self::Output\u0026gt; { // 👇 let a = unsafe { self.as_mut().map_unchecked_mut(|this| \u0026amp;mut this.a) }; match a.poll(cx) { Poll::Pending =\u0026gt; { info!(\u0026#34;A is pending...\u0026#34;); return Poll::Pending; } Poll::Ready(res) =\u0026gt; match res { Ok(_) =\u0026gt; info!(\u0026#34;A is ready!\u0026#34;), Err(e) =\u0026gt; return Poll::Ready(Err(e)), }, } // 👇 let b = unsafe { self.as_mut().map_unchecked_mut(|this| \u0026amp;mut this.a) }; match b.poll(cx) { Poll::Pending =\u0026gt; { info!(\u0026#34;B is pending...\u0026#34;); return Poll::Pending; } Poll::Ready(res) =\u0026gt; match res { Ok(_) =\u0026gt; info!(\u0026#34;B is ready!\u0026#34;), Err(e) =\u0026gt; return Poll::Ready(Err(e)), }, } todo!() } 但是依然无法通过编译：\n$ RUST_LOG=info cargo run --quiet --release (cut) Jul 25 22:57:07.913 INFO waytoodeep::tj: A is pending... Jul 25 22:57:07.913 INFO waytoodeep::tj: A is pending... Jul 25 22:57:07.913 INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first Jul 25 22:57:07.913 INFO waytoodeep::tj: A is ready! The application panicked (crashed). Message: `async fn` resumed after completion Location: src/main.rs:24 Backtrace omitted. Run with RUST_BACKTRACE=1 environment variable to display it. Run with RUST_BACKTRACE=full to include source snippets. 可以看到，一旦 Future 返回 Poll::Ready 我们就不能再次轮询它了。我们为什么会这样？因为 Future 已经返回了结果。如果结果是非 Copy 的，它可能只能返回一次。\n所以，我们需要 1）跟踪 A 是否完成，然后 2）在某个地方存储它的返回结果。\n我们只需要在我们的结构体中添加一些字段：\nstruct TryJoin\u0026lt;A, B, AR, BR, E\u0026gt; where A: Future\u0026lt;Output = Result\u0026lt;AR, E\u0026gt;\u0026gt;, B: Future\u0026lt;Output = Result\u0026lt;BR, E\u0026gt;\u0026gt;, { a: A, b: B, // 👇 a_res: Option\u0026lt;AR\u0026gt;, b_res: Option\u0026lt;BR\u0026gt;, } 不要忘记初始化它们：\npub fn try_join\u0026lt;A, B, AR, BR, E\u0026gt;(a: A, b: B) -\u0026gt; impl Future\u0026lt;Output = Result\u0026lt;(AR, BR), E\u0026gt;\u0026gt; where A: Future\u0026lt;Output = Result\u0026lt;AR, E\u0026gt;\u0026gt;, B: Future\u0026lt;Output = Result\u0026lt;BR, E\u0026gt;\u0026gt;, { TryJoin { a, b, // 👇 a_res: None, b_res: None, } } 现在计划是：\n如果 a_res 是 Some ，然后我们就不需要轮询 a ,因为它已经完成了 同样的逻辑处理 b_res 和 b 让我们实现它。同时，因为我们已经在使用了 unsafe ，所以我们已经负责维护不变量（invariants）， 所以我决定同时固定 a 和 b ，如下：\nfn poll(self: Pin\u0026lt;\u0026amp;mut Self\u0026gt;, cx: \u0026amp;mut Context\u0026lt;\u0026#39;_\u0026gt;) -\u0026gt; Poll\u0026lt;Self::Output\u0026gt; { let this = unsafe { self.get_unchecked_mut() }; let (a, b) = unsafe { ( Pin::new_unchecked(\u0026amp;mut this.a), Pin::new_unchecked(\u0026amp;mut this.b), ) }; if this.a_res.is_none() { match a.poll(cx) { Poll::Pending =\u0026gt; return Poll::Pending, Poll::Ready(res) =\u0026gt; match res { Ok(x) =\u0026gt; this.a_res = Some(x), Err(e) =\u0026gt; return Poll::Ready(Err(e)), }, } } if this.b_res.is_none() { match b.poll(cx) { Poll::Pending =\u0026gt; return Poll::Pending, Poll::Ready(res) =\u0026gt; match res { Ok(x) =\u0026gt; this.b_res = Some(x), Err(e) =\u0026gt; return Poll::Ready(Err(e)), }, } } todo!() } 好了，这个应该能让 a 和 b 有机会在我们崩溃之前完成：\n$ RUST_LOG=info cargo run --quiet --release Jul 25 23:11:03.851 INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first Jul 25 23:11:04.380 INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second The application panicked (crashed). Message: not yet implemented Location: src/tj.rs:69 Backtrace omitted. Run with RUST_BACKTRACE=1 environment variable to display it. Run with RUST_BACKTRACE=full to include source snippets. 很好！现在我们需要做的就是解出两个结果并返回它们：\n// instead of the `todo!()`: if let (Some(_), Some(_)) = (\u0026amp;this.a_res, \u0026amp;this.b_res) { let a = this.a_res.take().unwrap(); let b = this.b_res.take().unwrap(); Poll::Ready(Ok((a, b))) } else { Poll::Pending } 可以工作：\n$ RUST_LOG=info cargo run --quiet --release Jul 25 23:13:32.497 INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first Jul 25 23:13:32.829 INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second Jul 25 23:13:32.829 INFO waytoodeep: All done! res=(\u0026#34;first\u0026#34;, \u0026#34;second\u0026#34;) 。。。但是这不是 try_join 的实现。我们正在做的和这个完全一样：\n// (pseudo-code, buncha things are missing) async fn try_join(a: A, b: B) { let a = self.a.await?; let b = self.b.await?; Ok((a, b)) } 是顺序的执行的。请记住，仅仅是因为 tokio 的执行器可能用了一堆线程并意味着同时运行是自动的。 前面我们不得不使用 tokio::spwan 或 UnorderedFutures 或 try_join! 让其同时运行。\n所以让我们重新看一下。。。当我们轮询 a 的是后发生了什么？\nif this.a_res.is_none() { match a.poll(cx) { Poll::Pending =\u0026gt; return Poll::Pending, Poll::Ready(res) =\u0026gt; match res { Ok(x) =\u0026gt; this.a_res = Some(x), Err(e) =\u0026gt; return Poll::Ready(Err(e)), }, } } 额，当轮询 a 的时候返回 Poll::Pending 时我们也会返回 Poll::Pending 。所以这就是问题。 如果 a 正在等待（pending）我们不应该返回。因为如果这时候 b 已经准备好或者有错误呢？\n或者如果，我们像这样调用 try_join 呢：\ninfo!(\u0026#34;Joining...\u0026#34;); let res = tj::try_join( async move { sleep(Duration::from_millis(2000)).await; Ok(()) }, async move { sleep(Duration::from_millis(10)).await; Err::\u0026lt;(), Report\u0026gt;(color_eyre::eyre::eyre!(\u0026#34;uh oh\u0026#34;)) }, ) .await; 。。。然后 a 花费了 2 秒钟才准备好，同时 b 会在 10毫秒之后返回一个错误，如果我们轮询它！\n嗐，我们并没有：\n$ RUST_LOG=info cargo run --quiet --release Jul 25 23:19:26.972 INFO waytoodeep: Joining... Jul 25 23:19:28.990 INFO waytoodeep: All done! res=Err( 0: uh oh Location: src/main.rs:28 (cut) （注意时间戳）\n重点是 try_join 会提前失败：一旦 Future 返回 Result::Err~ 。\n所以我们必须同时轮询 a 和 b 。好吧。。。不是严格意义的同时。我们必须每次我们的 TryJoin future 对象被轮询时并发（concurrently）的轮询它们， 直到它们返回结果。\n有一个简单解决办法 \u0026ndash; 在任一 future 对象返回 Poll::Pending 时不返回 Poll::Pending 。\n同时，我厌倦了输入 Poll::Ready 并且 Poll\u0026lt;T\u0026gt; 实现了 From\u0026lt;T\u0026gt; ,所以我们可以使用 .into() 了：\nfn poll(self: Pin\u0026lt;\u0026amp;mut Self\u0026gt;, cx: \u0026amp;mut Context\u0026lt;\u0026#39;_\u0026gt;) -\u0026gt; Poll\u0026lt;Self::Output\u0026gt; { let this = unsafe { self.get_unchecked_mut() }; let (a, b) = unsafe { ( Pin::new_unchecked(\u0026amp;mut this.a), Pin::new_unchecked(\u0026amp;mut this.b), ) }; if this.a_res.is_none() { if let Poll::Ready(res) = a.poll(cx) { match res { Ok(x) =\u0026gt; this.a_res = Some(x), Err(e) =\u0026gt; return Err(e).into(), } } } if this.b_res.is_none() { if let Poll::Ready(res) = b.poll(cx) { match res { Ok(x) =\u0026gt; this.b_res = Some(x), Err(e) =\u0026gt; return Err(e).into(), } } } if let (Some(_), Some(_)) = (\u0026amp;this.a_res, \u0026amp;this.b_res) { let a = this.a_res.take().unwrap(); let b = this.b_res.take().unwrap(); Ok((a, b)).into() } else { Poll::Pending } } 让我们再次运行\n$ RUST_LOG=info cargo run --quiet --release Jul 25 23:22:40.238 INFO waytoodeep: Joining... Jul 25 23:22:40.253 INFO waytoodeep: All done! res=Err( 0: uh oh Location: src/main.rs:28 (cut) 。。。可以了！我是说它按照预期的失败了。预期的失败就是成功。\n然后我们将这个方法应用到调用 try_join :\n#[tokio::main(flavor = \u0026#34;current_thread\u0026#34;)] async fn main() -\u0026gt; Result\u0026lt;(), Report\u0026gt; { setup()?; info!(\u0026#34;Joining...\u0026#34;); let res = tj::try_join(fetch_thing(\u0026#34;first\u0026#34;), fetch_thing(\u0026#34;second\u0026#34;)).await?; info!(?res, \u0026#34;All done!\u0026#34;); Ok(()) } 我们可以看到竞争又回来了：有时 first 先完成，有时则不是：\n$ RUST_LOG=info cargo run --quiet --release Jul 25 23:25:25.925 INFO waytoodeep: Joining... Jul 25 23:25:26.224 INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first Jul 25 23:25:26.236 INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second Jul 25 23:25:26.236 INFO waytoodeep: All done! res=(\u0026#34;first\u0026#34;, \u0026#34;second\u0026#34;) $ RUST_LOG=info cargo run --quiet --release Jul 25 23:25:26.937 INFO waytoodeep: Joining... Jul 25 23:25:27.237 INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first Jul 25 23:25:27.242 INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second Jul 25 23:25:27.242 INFO waytoodeep: All done! res=(\u0026#34;first\u0026#34;, \u0026#34;second\u0026#34;) $ RUST_LOG=info cargo run --quiet --release Jul 25 23:25:27.865 INFO waytoodeep: Joining... Jul 25 23:25:28.164 INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second Jul 25 23:25:28.818 INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first Jul 25 23:25:28.818 INFO waytoodeep: All done! res=(\u0026#34;first\u0026#34;, \u0026#34;second\u0026#34;) $ RUST_LOG=info cargo run --quiet --release Jul 25 23:25:30.153 INFO waytoodeep: Joining... Jul 25 23:25:31.477 INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second Jul 25 23:25:31.496 INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first Jul 25 23:25:31.496 INFO waytoodeep: All done! res=(\u0026#34;first\u0026#34;, \u0026#34;second\u0026#34;) 。。。同时结果的顺序是正确的。\n非常好，我们实现了它！\n但是！\n我们可以做的更好 幸运的是，坏就是好。\n下面这个类型困扰着我：\nstruct TryJoin\u0026lt;A, B, AR, BR, E\u0026gt; where A: Future\u0026lt;Output = Result\u0026lt;AR, E\u0026gt;\u0026gt;, B: Future\u0026lt;Output = Result\u0026lt;BR, E\u0026gt;\u0026gt;, { a: A, b: B, a_res: Option\u0026lt;AR\u0026gt;, b_res: Option\u0026lt;BR\u0026gt;, } 我其实只有在 a 完成后才需要 a_res 。一旦 a 完成然后将结果存储到 a_res ，我们就不再需要 a 了。\n实际上，甚至我们不应该再碰 a 。\n这听起来更像我们要么持有 A 要么持有 AR ，但是永远不会同时持有。\nSUM TYPES : Rust 的枚举就是一个汇总类型。\n所以！汇总类型。Rust 枚举。这就是我们想要的。让我们创建一个叫做 State 的类型，然后它有两个变体： 一个用于它还是 future 对象，一个用于它是一个结果。非常简单！\nenum State\u0026lt;F, T, E\u0026gt; where F: Future\u0026lt;Output = Result\u0026lt;T, E\u0026gt;\u0026gt;, { Future(F), Ok(T), } 这将会非常棒！\n让我们赋给我们的 TryJoin 结构体：\nstruct TryJoin\u0026lt;A, B, AR, BR, E\u0026gt; where A: Future\u0026lt;Output = Result\u0026lt;AR, E\u0026gt;\u0026gt;, B: Future\u0026lt;Output = Result\u0026lt;BR, E\u0026gt;\u0026gt;, { a: State\u0026lt;A, AR, E\u0026gt;, b: State\u0026lt;B, BR, E\u0026gt;, } （是不是非常漂亮）\n然后初始化它们：\npub fn try_join\u0026lt;A, B, AR, BR, E\u0026gt;(a: A, b: B) -\u0026gt; impl Future\u0026lt;Output = Result\u0026lt;(AR, BR), E\u0026gt;\u0026gt; where A: Future\u0026lt;Output = Result\u0026lt;AR, E\u0026gt;\u0026gt;, B: Future\u0026lt;Output = Result\u0026lt;BR, E\u0026gt;\u0026gt;, { TryJoin { a: State::Future(a), b: State::Future(b), } } 非常酷。然后我们只需要稍微调整一下我们的 poll 方法，我们需要将 Pin\u0026lt;\u0026amp;mut Self\u0026gt; 转换为 \u0026amp;mut Self 。。。\nfn poll(self: Pin\u0026lt;\u0026amp;mut Self\u0026gt;, cx: \u0026amp;mut Context\u0026lt;\u0026#39;_\u0026gt;) -\u0026gt; Poll\u0026lt;Self::Output\u0026gt; { let this = unsafe { self.get_unchecked_mut() }; 这是可以的，因为我们承诺维护不变量，也就是说我们不会转移（move） State::Future 内部。\n然后如果 a 是 State::Future 我们就轮询它，然后我们再传播错误或者保存它的结果：\nif let State::Future(a) = \u0026amp;mut this.a { let a = unsafe { Pin::new_unchecked(a) }; if let Poll::Ready(res) = a.poll(cx) { match res { Ok(t) =\u0026gt; this.a = State::Ok(t), Err(e) =\u0026gt; return Err(e).into(), } } } 然后同样的修改 b 。。。\n// you can figure that one out, I believe in you 然后我们就完成了如果它们都是 State::Ok ！否则我们就返回 Poll::Pending :\nmatch (this.a, this.b) { (State::Ok(a), State::Ok(b)) =\u0026gt; Ok((a, b)).into(), _ =\u0026gt; Poll::Pending, } 非常好。\n除了它无法通过编译：\n$ RUST_LOG=info cargo run --quiet --release error[E0507]: cannot move out of `this.a` which is behind a mutable reference --\u0026gt; src/tj.rs:65:16 | 65 | match (this.a, this.b) { | ^^^^^^ move occurs because `this.a` has type `State\u0026lt;A, AR, E\u0026gt;`, which does not implement the `Copy` trait error[E0507]: cannot move out of `this.b` which is behind a mutable reference --\u0026gt; src/tj.rs:65:24 | 65 | match (this.a, this.b) { | ^^^^^^ move occurs because `this.b` has type `State\u0026lt;B, BR, E\u0026gt;`, which does not implement the `Copy` trait error: aborting due to 2 previous errors For more information about this error, try `rustc --explain E0507`. error: could not compile `waytoodeep` To learn more, run the command again with --verbose. 因为。。。我们只有 \u0026amp;mut Self 而不是 Self 。\n我们没有自己的所有权，仅仅是借用我们自己。\n所以，我们不能将将我们的成员转移（move）出去，因为我们不能阻止其他人再次轮询 TryJoin 。 所以这种情况，我们需要崩溃（panic）。\n当然，如果我们像 Option\u0026lt;T\u0026gt; 那样有一个 .take() 方法事情就会大大简化。 它返回 Option 拥有的任何内容，或者 None 。\n但是我们没有 None 。我们只有 State::Future 和 State::OK ，没有“中立”（neutral）状态。\n让我们创建一个：\nenum State\u0026lt;F, T, E\u0026gt; where F: Future\u0026lt;Output = Result\u0026lt;T, E\u0026gt;\u0026gt;, { Future(F), Ok(T), Gone, } 现在，我们可以将 this.a 和 this.b 替换为 State::Gone 。。。或者它的返回结果（我们拥有所有权）。 然后我们就可以将它们转移（move）出去。\n但是同时。。。我们需要再次对其进行模式匹配（pattern match）。\n就像：\nmatch (\u0026amp;this.a, \u0026amp;this.b) { (State::Ok(_), State::Ok(_)) =\u0026gt; { let a = match std::mem::replace(\u0026amp;mut this.a, State::Gone) { State::Ok(t) =\u0026gt; t, _ =\u0026gt; unreachable!(), }; let b = match std::mem::replace(\u0026amp;mut this.b, State::Gone) { State::Ok(t) =\u0026gt; t, _ =\u0026gt; unreachable!(), }; Ok((a, b)).into() } _ =\u0026gt; Poll::Pending, } 实话说。。。我看过更糟的代码。它只是没那么DRY。\n非常好的实现！\n$ RUST_LOG=info cargo run --quiet --release Jul 25 23:52:24.097 INFO waytoodeep: Joining... Jul 25 23:52:25.050 INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second Jul 25 23:52:25.061 INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first Jul 25 23:52:25.061 INFO waytoodeep: All done! res=(\u0026#34;first\u0026#34;, \u0026#34;second\u0026#34;) 看，只有 11ms 的间隔。\n更进一步？ 这段代码再次困扰了我：\nstruct TryJoin\u0026lt;A, B, AR, BR, E\u0026gt; where A: Future\u0026lt;Output = Result\u0026lt;AR, E\u0026gt;\u0026gt;, B: Future\u0026lt;Output = Result\u0026lt;BR, E\u0026gt;\u0026gt;, { a: State\u0026lt;A, AR, E\u0026gt;, b: State\u0026lt;B, BR, E\u0026gt;, } 因为现在 a 和 b 是三态的（tri-state）： Future 、 Ok 或者 Gone 。\n如果 a 和 b 都是 Gone 呢？这个状态不合理！\n如果发生了这个状态，我们现在将会永远返回 Poll::Pending \u0026ndash; 这不太好 \u0026ndash; 一个死锁。\n我们真正想要的是。。。两个枚举。实际上我们想要整个 TryJoin 类型是一个 enum 。\nenum TryJoin\u0026lt;A, B, AR, BR, E\u0026gt; where A: Future\u0026lt;Output = Result\u0026lt;AR, E\u0026gt;\u0026gt;, B: Future\u0026lt;Output = Result\u0026lt;BR, E\u0026gt;\u0026gt;, { Polling { a: State\u0026lt;A, AR, E\u0026gt;, b: State\u0026lt;B, BR, E\u0026gt;, }, Done, } 像这样初始化：\npub fn try_join\u0026lt;A, B, AR, BR, E\u0026gt;(a: A, b: B) -\u0026gt; impl Future\u0026lt;Output = Result\u0026lt;(AR, BR), E\u0026gt;\u0026gt; where A: Future\u0026lt;Output = Result\u0026lt;AR, E\u0026gt;\u0026gt;, B: Future\u0026lt;Output = Result\u0026lt;BR, E\u0026gt;\u0026gt;, { TryJoin::Polling { a: State::Future(a), b: State::Future(b), } } 然后，surprice！ Poll\u0026lt;T\u0026gt; 实现了 Try trait。所以我们可以使用 ? 。 所以最终我们的代码实际上非常短小：\nimpl\u0026lt;A, B, AR, BR, E\u0026gt; Future for TryJoin\u0026lt;A, B, AR, BR, E\u0026gt; where A: Future\u0026lt;Output = Result\u0026lt;AR, E\u0026gt;\u0026gt;, B: Future\u0026lt;Output = Result\u0026lt;BR, E\u0026gt;\u0026gt;, { type Output = Result\u0026lt;(AR, BR), E\u0026gt;; fn poll(self: Pin\u0026lt;\u0026amp;mut Self\u0026gt;, cx: \u0026amp;mut Context\u0026lt;\u0026#39;_\u0026gt;) -\u0026gt; Poll\u0026lt;Self::Output\u0026gt; { let this = unsafe { self.get_unchecked_mut() }; let (a, b) = match this { Self::Polling { a, b } =\u0026gt; (a, b), Self::Done =\u0026gt; panic!(\u0026#34;TryJoin future polled after completion\u0026#34;), }; if let State::Future(fut) = a { if let Poll::Ready(res) = unsafe { Pin::new_unchecked(fut) }.poll(cx) { *a = State::Ok(res?); } } if let State::Future(fut) = b { if let Poll::Ready(res) = unsafe { Pin::new_unchecked(fut) }.poll(cx) { *b = State::Ok(res?); } } match (a, b) { (State::Ok(_), State::Ok(_)) =\u0026gt; match std::mem::replace(this, Self::Done) { Self::Polling { a: State::Ok(a), b: State::Ok(b), } =\u0026gt; Ok((a, b)).into(), _ =\u0026gt; unreachable!(), }, _ =\u0026gt; Poll::Pending, } } } 现在，我知道你在想什么。 Pin\u0026lt;\u0026amp;mut T\u0026gt; 不是恰恰用来避免像 std::mem::swap 和 std::mem::replace 吗？ 这些所有的转移（move）都是围绕着内存！这是被禁止的！是的，我们承诺了不去转移（move）它。 但是在这个情况下，我们只是在完成轮询两个 future 对象后转移了 self / this 。\n然后我们就再也没有使用过两个 future 对象，无论固定还是非固定。同时我们从来也没保证过结果自身是否将要被固定（pinned）！\n我们只需要决定某些东西是“永远固定”还是“永不固定”，然后我们可能会编写结果正确的代码。\n在我们的场景下，只有 TryJoin::Polling(State::Future(_)) 就是“永远固定” 的，其他都不是。\n当然，我们快速的从 Pin\u0026lt;\u0026amp;mut Self\u0026gt; 切换到 \u0026amp;mut Self ，然后又回到 Pin\u0026lt;\u0026amp;mut A\u0026gt; ， 但只要我们不要在中间移动就没有问题。\n如果我们在持有 future 对象的情况下使用 std::mem:replace 或 std::mem::swap 就会不妙。 所以，我们还好，我想，我不太确定。如果不是，有人应该会留言。\n就这样 让我们回顾我们的工作：\n// in `src/tj.rs` use std::{ future::Future, pin::Pin, task::{Context, Poll}, }; pub fn try_join\u0026lt;A, B, AR, BR, E\u0026gt;(a: A, b: B) -\u0026gt; impl Future\u0026lt;Output = Result\u0026lt;(AR, BR), E\u0026gt;\u0026gt; where A: Future\u0026lt;Output = Result\u0026lt;AR, E\u0026gt;\u0026gt;, B: Future\u0026lt;Output = Result\u0026lt;BR, E\u0026gt;\u0026gt;, { TryJoin::Polling { a: State::Future(a), b: State::Future(b), } } enum State\u0026lt;F, T, E\u0026gt; where F: Future\u0026lt;Output = Result\u0026lt;T, E\u0026gt;\u0026gt;, { Future(F), Ok(T), } enum TryJoin\u0026lt;A, B, AR, BR, E\u0026gt; where A: Future\u0026lt;Output = Result\u0026lt;AR, E\u0026gt;\u0026gt;, B: Future\u0026lt;Output = Result\u0026lt;BR, E\u0026gt;\u0026gt;, { Polling { a: State\u0026lt;A, AR, E\u0026gt;, b: State\u0026lt;B, BR, E\u0026gt;, }, Done, } impl\u0026lt;A, B, AR, BR, E\u0026gt; Future for TryJoin\u0026lt;A, B, AR, BR, E\u0026gt; where A: Future\u0026lt;Output = Result\u0026lt;AR, E\u0026gt;\u0026gt;, B: Future\u0026lt;Output = Result\u0026lt;BR, E\u0026gt;\u0026gt;, { type Output = Result\u0026lt;(AR, BR), E\u0026gt;; fn poll(self: Pin\u0026lt;\u0026amp;mut Self\u0026gt;, cx: \u0026amp;mut Context\u0026lt;\u0026#39;_\u0026gt;) -\u0026gt; Poll\u0026lt;Self::Output\u0026gt; { let this = unsafe { self.get_unchecked_mut() }; let (a, b) = match this { Self::Polling { a, b } =\u0026gt; (a, b), Self::Done =\u0026gt; panic!(\u0026#34;TryJoin future polled after completion\u0026#34;), }; if let State::Future(fut) = a { if let Poll::Ready(res) = unsafe { Pin::new_unchecked(fut) }.poll(cx) { *a = State::Ok(res?); } } if let State::Future(fut) = b { if let Poll::Ready(res) = unsafe { Pin::new_unchecked(fut) }.poll(cx) { *b = State::Ok(res?); } } match (a, b) { (State::Ok(_), State::Ok(_)) =\u0026gt; match std::mem::replace(this, Self::Done) { Self::Polling { a: State::Ok(a), b: State::Ok(b), } =\u0026gt; Ok((a, b)).into(), _ =\u0026gt; unreachable!(), }, _ =\u0026gt; Poll::Pending, } } } 还有我们小小的 HTTPS 客户端：\n// in `src/main.rs` use color_eyre::Report; use std::{net::SocketAddr, sync::Arc}; use tokio::{ io::{AsyncReadExt, AsyncWriteExt}, net::TcpStream, }; use tokio_rustls::{rustls::ClientConfig, TlsConnector}; use tracing::info; use tracing_subscriber::EnvFilter; use webpki::DNSNameRef; mod tj; #[tokio::main(flavor = \u0026#34;current_thread\u0026#34;)] async fn main() -\u0026gt; Result\u0026lt;(), Report\u0026gt; { setup()?; info!(\u0026#34;Joining...\u0026#34;); let res = tj::try_join(fetch_thing(\u0026#34;first\u0026#34;), fetch_thing(\u0026#34;second\u0026#34;)).await?; info!(?res, \u0026#34;All done!\u0026#34;); Ok(()) } #[allow(dead_code)] async fn fetch_thing(name: \u0026amp;str) -\u0026gt; Result\u0026lt;\u0026amp;str, Report\u0026gt; { // look out it\u0026#39;s port 443 now let addr: SocketAddr = ([1, 1, 1, 1], 443).into(); let socket = TcpStream::connect(addr).await?; // establish a TLS session... let connector: TlsConnector = { let mut config = ClientConfig::new(); config .root_store .add_server_trust_anchors(\u0026amp;webpki_roots::TLS_SERVER_ROOTS); Arc::new(config).into() }; let dnsname = DNSNameRef::try_from_ascii_str(\u0026#34;one.one.one.one\u0026#34;)?; let mut socket = connector.connect(dnsname, socket).await?; // we\u0026#39;re writing straight to the socket, there\u0026#39;s no buffering // so no need to flush socket.write_all(b\u0026#34;GET / HTTP/1.1\\r\\n\u0026#34;).await?; socket.write_all(b\u0026#34;Host: one.one.one.one\\r\\n\u0026#34;).await?; socket.write_all(b\u0026#34;User-Agent: cool-bear\\r\\n\u0026#34;).await?; socket.write_all(b\u0026#34;Connection: close\\r\\n\u0026#34;).await?; socket.write_all(b\u0026#34;\\r\\n\u0026#34;).await?; let mut response = String::with_capacity(256); socket.read_to_string(\u0026amp;mut response).await?; let status = response.lines().next().unwrap_or_default(); info!(%status, , \u0026#34;Got response!\u0026#34;); // dropping the socket will close the connection Ok(name) } fn setup() -\u0026gt; Result\u0026lt;(), Report\u0026gt; { if std::env::var(\u0026#34;RUST_LIB_BACKTRACE\u0026#34;).is_err() { std::env::set_var(\u0026#34;RUST_LIB_BACKTRACE\u0026#34;, \u0026#34;1\u0026#34;) } color_eyre::install()?; if std::env::var(\u0026#34;RUST_LOG\u0026#34;).is_err() { std::env::set_var(\u0026#34;RUST_LOG\u0026#34;, \u0026#34;info\u0026#34;) } tracing_subscriber::fmt::fmt() .with_env_filter(EnvFilter::from_default_env()) .init(); Ok(()) } And it works.\n$ RUST_LOG=info cargo run --quiet --release Jul 26 00:08:13.399 INFO waytoodeep: Joining... Jul 26 00:08:13.707 INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=first Jul 26 00:08:13.709 INFO waytoodeep: Got response! status=HTTP/1.1 200 OK name=second Jul 26 00:08:13.710 INFO waytoodeep: All done! res=(\u0026#34;first\u0026#34;, \u0026#34;second\u0026#34;) 2ms 间隔！这是一个新的记录。\n","permalink":"https://notes.0081800.xyz/articles/20210726105711-understanding_rust_futures_by_going_way_too_deep/","summary":"tags: Translate,Rust,Tokio 原文链接：Understanding Rust futures by going way too deep。\n译者注：原文大量的引入了有趣的对话，迫于排版问题这里不进行翻译，必要的对话通过引用块来解释。\n深入理解 Rust future 用 Rust future！就是这么简单！直到我们发现并非如此。所以我们先探索简单的部分，然后继续探索困难部分而不是等它慢慢靠近我们。\n起步 Choo choo here comes the easy part 🚂💨\n我们创建一个新的项目：\n$ cargo new waytoodeep Created binary (application) `waytoodeep` package 我们需要安装 cargo-edit 如果之前没有安装过的话，接下来就可以直接 cargo add ：\n$ cargo install cargo-edit Updating crates.io index Downloaded cargo-edit v0.7.0 Downloaded 1 crate (57.6 KB) in 0.47s Ignored package `cargo-edit v0.7.0` is already installed, use --force to override 因为 cargo-edit 很方便，所以你可能已经安装过它。部分读者会感到困惑是因为像 cargo new, cargo build, cargo test, cargo run 等子命令都内置在 cargo 中， 但是 cargo add 没有。","title":"Understanding Rust futures by going way too deep"},{"content":"偏序集合（英语：Partiallyordered set，简写poset）是数学中，特别是序理论中，指配备了部分排序关系的集合。 这\nSee also: 偏序关系\n","permalink":"https://notes.0081800.xyz/notes/20210726080332-%E5%81%8F%E5%BA%8F/","summary":"偏序集合（英语：Partiallyordered set，简写poset）是数学中，特别是序理论中，指配备了部分排序关系的集合。 这\nSee also: 偏序关系","title":"偏序"},{"content":"CAP 最初作为一个经验法则提出（20 世纪 70 年代），并没有准确的定义，目的也只是帮助大家深入探讨数据库设计的权衡之道。它由 Eric Brewer 于 2000 年正式命名。\n解释一 CAP 定理：不要求线性化的应用更能容忍网络故障。\n只要不可靠才诶黄哦，都会发生违背线性化的风险。我们可以做如下权衡：\n如果应用要求线性化，一旦发生网络分区，则必须等待网络修复，或者直接返回错误。结果为服务不可用（保证一致性或者线性化）。 如果应用不要求线性化，且每个可副本独立处理请求。此时服务可用，但结果行为不符合线性化（保证高可用）。 解释二 一致性（Consistency）、可用性（Availability）、分区容错性（Partition tolerance）。系统只能支持两个特性。\n这里的分区指网络分区（即网络故障）。\n不过，这种理解存在误导性，网络分区是一种故障，不管喜欢还是不喜欢，它都可能发生，所以无法选择或逃避分区问题。\n网络正常的时候，系统可以同时保证一致性（线性化）和可用性。而一旦发生了网络故障，必须要么选择线性（一致性），要么可用性。 也就是“网络分区的情况下”是选择一致还是可用。\n","permalink":"https://notes.0081800.xyz/notes/20210726072940-cap_%E7%90%86%E8%AE%BA/","summary":"CAP 最初作为一个经验法则提出（20 世纪 70 年代），并没有准确的定义，目的也只是帮助大家深入探讨数据库设计的权衡之道。它由 Eric Brewer 于 2000 年正式命名。\n解释一 CAP 定理：不要求线性化的应用更能容忍网络故障。\n只要不可靠才诶黄哦，都会发生违背线性化的风险。我们可以做如下权衡：\n如果应用要求线性化，一旦发生网络分区，则必须等待网络修复，或者直接返回错误。结果为服务不可用（保证一致性或者线性化）。 如果应用不要求线性化，且每个可副本独立处理请求。此时服务可用，但结果行为不符合线性化（保证高可用）。 解释二 一致性（Consistency）、可用性（Availability）、分区容错性（Partition tolerance）。系统只能支持两个特性。\n这里的分区指网络分区（即网络故障）。\n不过，这种理解存在误导性，网络分区是一种故障，不管喜欢还是不喜欢，它都可能发生，所以无法选择或逃避分区问题。\n网络正常的时候，系统可以同时保证一致性（线性化）和可用性。而一旦发生了网络故障，必须要么选择线性（一致性），要么可用性。 也就是“网络分区的情况下”是选择一致还是可用。","title":"CAP 理论"},{"content":" tags: 分布式共识,一致性 一致性保证 分布式一致性主要针对延迟和故障等问题来协调副本之间的状态。\n线性化：最强一致性模型 顺序保证：保证时间顺序，特别是因果关系和全局顺序 最终一致性：一种非常弱的保证，参见最终一致性效应 可线性化 分布式语义下对寄存器（单个对象）顺序的读写。应区别与可串行化。\n可串行化针对不同事务的隔离，用来确保事务执行的结果与串形执行的结果相同 可线性化是读写寄存器（单个对象）的最新值的保证。 线性化依赖的条件 加锁与主节点选举 每个启动节点都试图获得锁，其中只有一个可以成功成为主节点。通过加锁来保证主节点选举「线性化」。\n约束与唯一性保证 同一个用户名、电子邮件或系统中文件名需要唯一性的保证，也应该进行「线性化」。\n跨通道的时间依赖 系统中存在其他通信渠道也需要「线性化」。\n实现线性化系统 主从复制（部分支持可线性化） 共识算法（可线性化） 多主复制（不可线性化） 无主复制（可能不可线性化） 线性化与Quorum 一致性 Dynamo 风格的复制模型，读写遵从严格的 quorum 是无法支持可线性化的。\n线性化的代价 多主复制和主从复制，网络中断都会导致同步暂停，从而无法保证客户端要求的线性化读写。\nCAP 理论 可线性化与网络延迟 很少有系统真正满足线性化，现代多个 CPU 对同一个内存地址的读写都不能满足（参见硬件内存模型），如果需要强一致则需要内存屏障（栅栏）指令。\n之所以放弃线性化的原因就是性能，而不是为了容错。由于网络延迟的不确定性，无论是否发生网络故障，线性化对性能的影响都是巨大的。\n顺序保证 顺序与因果关系 顺序有助于保持因果关系。\n因果顺序并非全序：因果关系是小范围集合的偏序，可线性化是一个全序操作。 可线性化强于因果一致性 捕获因果依赖关系：检测并发写 序列号排序 非因果序列发生器 适用于系统不存在唯一主节点。\n每个节点都独立产生自己的一组序列号：一个奇数一个偶数，或者切入节点唯一标识符。 用足够高的分辨率的墙上时间戳附加到每个操作上。 预先分配区间范围，并及时扩容。 Lamport 时间戳 可以产生因果关系一致的序列号。Lamport 时间戳是一个值对 （计数器，节点 ID） ：\n节点 ID：每个节点都有一个唯一标志符。 计数器：每个节点都有一个计数器记录各自处理的请求总数。 优点：\n两个节点可能存在相同的计数器，但是时间戳中的节点 ID 可以确保每个时间戳都是唯一的。 保证全序：比较两个 Lamport 时间戳，计数器较大的时间戳越大，计数器相同则节点 ID 大的那个时间戳越大。 通过节点排序保证了全局因果关系。Lamport 不同于版本矢量：\n版本矢量用以区分两个操作是并发还是因果依赖。 Lamport 时间戳主要用于确保全序关系。 时间戳依然不够 某些场景下全序关系依然不能满足需求，比如用户名唯一性要求，为了确认用户名唯一，需要获取所有节点正在进行的请求，查看有没有相同的用户名请求，才能建立全序关系。\n全序关系广播 分布式系统面临的问题：\n分布式系统中让所有节点就全序关系达成一致。 如何扩展系统的吞吐量使之突破单一主节点的限制。 如何处理主节点失效时的故障切换。 全序关系广播通常指节点之间交换消息的某种协议。需要满足两个基本安全属性：\n可靠发送：没有消息丢失，一定发送到所有节点。 严格有序：消息总是以相同顺序发送给每个节点。 全系关系广播使用场景 ZooKeeper 和 etcd 这样的共识服务实际上就实现了全序关系广播。\n数据库复制：通过消息传递代表数据库写请求，让每个副本按照相同的顺序处理写请求，那么副本可以保持一致。 可串形化事务：通过消息表示确定性事务并且作为存储过程来执行，切每个节点都遵从相同的执行顺序。 提供 Fencing 令牌的锁服务：每个获取锁的请求都作为消息附加到日志中，所有消息按照日志中的顺序一次编号。（ZooKeeper 的 zxid）。 全序关系广播和可线性化 全系关系广播：基于异步模型，保证消息以固定顺序可靠的发送，但是不保证消息何时发送成功 可线性化强调就近性：读取时保证能够看到最新写入值。 采用全序关系广播实现线性化存储 可以通过使用全序关系广播以追加日志的方式来实现线性化的原子比较-设置操作：\n日志中追加一条消息，并指明用户名 读取日志，将其广播给所有节点，并等待回复 检查是否有任何消息声称改用户名已被注册。如果第一条这样的回复来自当前节点，那么就成功获取用户名。 此过程只保证了线性化写入，无法保证线性化读取，这里只提供了顺序一致性有时也成为时间线一致性，弱与线性化的保证。\n满足线性化读取的方案：\nectd 的 quorum 读取：追加的方式把读取请求排序、广播，然后各个节点获取该日志，当本节点收到消息时才执行真正的操作。 ZooKeeper 的 sync() 操作：如果可以以线性化的方式获取当前最新日志中的消息的位置，则查询位置，等待直到该位置之前的所有条目都已经发送给你，接下来再执行读取。 可以从同步更新的副本上进行读取，这样确保总是读取最新值。这种技术可以用于链式复制。 采用线性化存储实现全序关系广播 通过线性化存储递增一个计数，相比于 Lamport 时间戳 其具有连续性，可以检测消息可靠性。\n实现线性化存储难点是失效。\n分布式事务与共识 共识问题是分布式计算中最重要也是最基本的问题之一。\n很多重要的场景需要集群节点达成一致，例如：\n主节点选举：脑裂。 原子事务提交：跨节点或跨分区事务提交。所有节点要么全部成功，要么全部中止。 原子提交与两阶段提交 两阶段提交 tags: 分布式共识 2PC 是一种在多节点之间实现事务原子提交的算法，用来确保所有节点要么全部提交，要么全部中止。\n不同于单节点上请求提交，2PC 中的提交/中止过程分为两个阶段。\n不要混淆 2PC 和 2PL。\n2PL 引入了新的组件：协调者（也称为事务管理器）。协调者通常实现为共享库，运行在请求事务相同进程中，但也可以是单独的进程或服务。\n数据库节点称为事务中的参与者。当应用程序准备提交事务时，协调者开始阶段1:发送一个准备请求到所有节点，询问它们是否可以提交。协调者然后跟踪参与者的回应：\n全部回应「是」：表示准备好提交，协调者开始阶段 2 ，提交开始实际执行。 任何回应「否」：协调者发送放弃请求。 实践中的分布式事务 目前两种截然不同的分布式事务：\n数据库内部的分布式事务：所有节点运行相同的软件，协议也是内部的无需考虑兼容性。 异构分布式事务：存在两种或两种以上的不同参与者实现技术。即使完全不同的系统，跨系统的分布式事务必须确保原子提交。 异构分布式事务充满挑战。\nExactly-once 消息处理 异构分布式事务旨在无缝集成多种不同的系统。消息队列通过自动提交消息和消息处理结果，可以确保消息可以有效处理有且仅有一次。 让系统可以进行安全的重试，来保持原子性。\nX/A 交易 X/Open XA（eXtend Architectrue，XA）是异构环境下实施两阶段提交的一个工业标准。其并不是一个网络协议，而是一个 C API。 XA 假定应用程序通过网络或者客户端库函数与参与者节点进行通信。事务协调者需要实现 XA API。\n应用程序崩溃，事务日志保存在应用服务本地磁盘，需要重启崩溃节点，XA API 读取日志，进而恢复事务的决定。\n停顿扔持有锁 从协调者故障恢复 启发式决策：参与者节点可以在紧急情况下单方面做出决定，放弃或者继续那些停顿的事务，而不需要等到协调者发出指令。\n分布式事务限制 如果协调者不支持数据复制，会造成单点故障。 破坏现在很多 HTTP 服务的无状态特性。 X/A 需要保持多系统可兼容的最低标准，来兼容各种数据系统，无法实现诸如死锁检测和 SSI。 分布式事务有扩大事务失败的风险，与构建容错系统背道而驰。 支持容错的共识 共识就是让几个节点就某项协议达成一致。\n需要满足的性质：\n协商一致性（Uniform agreement）：所有节点都接受相同的决议。共识的核心思想：决定一致的结果，一旦决定，就不能改变。 诚实性（Integrity）：所有节点不能反悔，即对某一些提议不能有两次决定。 合法性（Validity）：如果决定了值 v，则 v 一定是由某个节点锁提议的。 可终止性：节点如果不崩溃则最终一定可以达成决议。引入容错思想：强调共识算法不能原地空转，必须取得实质性的进展。属于一种活性（安全性和活性)。 大部分节点都正常运行才能确保可终止性，这个多数就可能安全的构成 quorum。\n可终止性的前提下，发生崩溃或者不可用的节点数必须小于半数节点。\n大多数共识算法都假定系统不存在拜占庭故障。\n共识算法与全序广播 最著名的容错式共识算法包括：VSR、Paxos、Raft 和 Zab。\n这些算法实际上并没有直接采用上述的形式化模型：提议一个值，同时满足上面 4 个属性。 相反，他们是决定一个值，然后采用全序关系广播算法：在每一轮中，节点提出他们接下来想要发送的消息，然后决定下一个消息的全局顺序。\n全序广播相当于持续多轮共识：\n由与协商一致性，所有节点决定以相同的顺序发送相同的消息。 由于诚实性，消息不能重复。 由于合法性，消息不会被破坏，也不是凭空捏造。 由于可终止性，消息不会丢失。 全序关系广播比重复性的一轮共识只解决一个提议更加高效（VSR、Raft 和 Zab，Paxos 对应的是其优化版本 Multi-Paxios）。\n主从复制与共识 主从复制的主节点一般是有运维人员手动选择和配置的，是一个独裁性质的“一致性算法”。 如果支持自动选举主节点和切换，这样更接近容错式全序广播，从而达成共识。\n共识面临选举一个主节点需要一个主节点。要解决共识，必须先处理共识。\nEpoch 和 Quorum 共识算法协议采用了一种弱化保证：协议定义了一个世代编号（epoch number，Paxos 的 ballot number，VSP 的 view number，Raft 中的 term number）， 并保证在每个世代里，主节点是唯一确定的。\n如果当前主节点失效，节点就开始一轮投票。选举会赋予一个单调递增的 epoch 号。\n主节点如果想做某个决定，需将提议发送给其他所有节点，等待 quorum 节点响应。\n两轮不同的投票：首先决定谁是主节点，然后对主节点的提议进行投票。\n和 2PC 最大的区别是：\n2PC 的协调者不依靠选举产生。 2PC 要求每个参与者都必须做出“是”，容错共识算法只需要收到多数节点的投票结果即可通过决议。 共识算法定义了恢复过程，出现故障可重新选举主节点。 共识的局限性 节点投票过程是一个同步复制过程。 许多严格的多数节点才能允许。3节点允许1节点失效、5/2。 多数共识算法假定一组固定参与投票的节点集，无法动态缩扩容。 依靠超时来检测节点失效。 对网络特别敏感，比如 Raft 中两个节点如果网络持续不可靠会出现主从反复切换，从而性能下降。 成员协调服务 ZooKeeper etcd 将成千上万节点的共识交由像 ZooKeeper 这样由三五节点组成的共识代理大大提高性能。\n","permalink":"https://notes.0081800.xyz/notes/20210725072621-%E4%B8%80%E8%87%B4%E6%80%A7%E4%B8%8E%E5%85%B1%E8%AF%86/","summary":"tags: 分布式共识,一致性 一致性保证 分布式一致性主要针对延迟和故障等问题来协调副本之间的状态。\n线性化：最强一致性模型 顺序保证：保证时间顺序，特别是因果关系和全局顺序 最终一致性：一种非常弱的保证，参见最终一致性效应 可线性化 分布式语义下对寄存器（单个对象）顺序的读写。应区别与可串行化。\n可串行化针对不同事务的隔离，用来确保事务执行的结果与串形执行的结果相同 可线性化是读写寄存器（单个对象）的最新值的保证。 线性化依赖的条件 加锁与主节点选举 每个启动节点都试图获得锁，其中只有一个可以成功成为主节点。通过加锁来保证主节点选举「线性化」。\n约束与唯一性保证 同一个用户名、电子邮件或系统中文件名需要唯一性的保证，也应该进行「线性化」。\n跨通道的时间依赖 系统中存在其他通信渠道也需要「线性化」。\n实现线性化系统 主从复制（部分支持可线性化） 共识算法（可线性化） 多主复制（不可线性化） 无主复制（可能不可线性化） 线性化与Quorum 一致性 Dynamo 风格的复制模型，读写遵从严格的 quorum 是无法支持可线性化的。\n线性化的代价 多主复制和主从复制，网络中断都会导致同步暂停，从而无法保证客户端要求的线性化读写。\nCAP 理论 可线性化与网络延迟 很少有系统真正满足线性化，现代多个 CPU 对同一个内存地址的读写都不能满足（参见硬件内存模型），如果需要强一致则需要内存屏障（栅栏）指令。\n之所以放弃线性化的原因就是性能，而不是为了容错。由于网络延迟的不确定性，无论是否发生网络故障，线性化对性能的影响都是巨大的。\n顺序保证 顺序与因果关系 顺序有助于保持因果关系。\n因果顺序并非全序：因果关系是小范围集合的偏序，可线性化是一个全序操作。 可线性化强于因果一致性 捕获因果依赖关系：检测并发写 序列号排序 非因果序列发生器 适用于系统不存在唯一主节点。\n每个节点都独立产生自己的一组序列号：一个奇数一个偶数，或者切入节点唯一标识符。 用足够高的分辨率的墙上时间戳附加到每个操作上。 预先分配区间范围，并及时扩容。 Lamport 时间戳 可以产生因果关系一致的序列号。Lamport 时间戳是一个值对 （计数器，节点 ID） ：\n节点 ID：每个节点都有一个唯一标志符。 计数器：每个节点都有一个计数器记录各自处理的请求总数。 优点：\n两个节点可能存在相同的计数器，但是时间戳中的节点 ID 可以确保每个时间戳都是唯一的。 保证全序：比较两个 Lamport 时间戳，计数器较大的时间戳越大，计数器相同则节点 ID 大的那个时间戳越大。 通过节点排序保证了全局因果关系。Lamport 不同于版本矢量：","title":"一致性与共识"},{"content":"节点撒谎伪造 Fencing 令牌，或者部分节点故障、不遵从协议、干扰网络或者恶意攻击，则为「拜占庭故障」。 如果系统仍可以继续运行，那么我们称之为「拜占庭式容错系统」。\n","permalink":"https://notes.0081800.xyz/notes/20210722080226-%E6%8B%9C%E5%8D%A0%E5%BA%AD%E6%95%85%E9%9A%9C/","summary":"节点撒谎伪造 Fencing 令牌，或者部分节点故障、不遵从协议、干扰网络或者恶意攻击，则为「拜占庭故障」。 如果系统仍可以继续运行，那么我们称之为「拜占庭式容错系统」。","title":"拜占庭故障"},{"content":"Fencing（围栏）锁，每次锁服务授予锁时，同时返回 fencing 令牌，每次客户端发送写请求，都必须包含所持有的 fencing 令牌。\nfencing 令牌单调递增，如果低版本的写入后到达，发现已经有高版本的 fencing 令牌写入，则拒绝此次写入。\n","permalink":"https://notes.0081800.xyz/notes/20210722075942-fencing_%E4%BB%A4%E7%89%8C/","summary":"Fencing（围栏）锁，每次锁服务授予锁时，同时返回 fencing 令牌，每次客户端发送写请求，都必须包含所持有的 fencing 令牌。\nfencing 令牌单调递增，如果低版本的写入后到达，发现已经有高版本的 fencing 令牌写入，则拒绝此次写入。","title":"Fencing 令牌"},{"content":"墙上时钟 根据某个日历返回当前的日期与时间。\nLinux 上的 clock_gettime(CLOCK_REALTIME) Java 中的 System.currentTimeMills() 会返回 1970-01-01（UTC）的时间戳（秒和毫秒）。\n墙上时钟会和 NTP 服务器同步产生跳跃导致一些奇怪的问题。\n单调时钟 更适合测量持续时间段（时间间隔），如超时或服务的响应时间。保证总是向前（不会出现墙上时钟的回拨现象）。\nLinux 上的 clock_gettime(CLOCK_MONOTONIC) Java 中的 System.nanoTime() 单调时钟多个节点的对比没有任何意义，多路 CPU 可能有单独的计时器，且不与其他 CPU 进行同步。由操作系统进行补偿它们之间的偏差。\nNTP 检测到本地石英比时间服务器更快或者更慢，NTP 会调整本地石英的震动频率（摆动），最大幅度为 0.05%。 NTP 并不会直接调整单调时钟向前或回拨 。\n","permalink":"https://notes.0081800.xyz/notes/20210722073012-%E5%8D%95%E8%B0%83%E6%97%B6%E9%92%9F%E4%B8%8E%E5%A2%99%E4%B8%8A%E6%97%B6%E9%92%9F/","summary":"墙上时钟 根据某个日历返回当前的日期与时间。\nLinux 上的 clock_gettime(CLOCK_REALTIME) Java 中的 System.currentTimeMills() 会返回 1970-01-01（UTC）的时间戳（秒和毫秒）。\n墙上时钟会和 NTP 服务器同步产生跳跃导致一些奇怪的问题。\n单调时钟 更适合测量持续时间段（时间间隔），如超时或服务的响应时间。保证总是向前（不会出现墙上时钟的回拨现象）。\nLinux 上的 clock_gettime(CLOCK_MONOTONIC) Java 中的 System.nanoTime() 单调时钟多个节点的对比没有任何意义，多路 CPU 可能有单独的计时器，且不与其他 CPU 进行同步。由操作系统进行补偿它们之间的偏差。\nNTP 检测到本地石英比时间服务器更快或者更慢，NTP 会调整本地石英的震动频率（摆动），最大幅度为 0.05%。 NTP 并不会直接调整单调时钟向前或回拨 。","title":"单调时钟与墙上时钟"},{"content":" tags: LeetCode,backtracking 视频解析：https://www.youtube.com/watch?v=s7AvT7cGdSo\n在 LeetCode: 46. Permutations 的基础上增加重复的元素。感觉不能依赖于 track + map 的去重逻辑回溯。\nclass Solution { public: vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; permuteUnique(vector\u0026lt;int\u0026gt;\u0026amp; nums) { vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; res; } }; 数据特征：\nValue: 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, Index: 2, 1, 0, 1, 0, 2, 1, 0, 1, 0, 2, 1, 0, 1, 0, class Solution { public: vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; permuteUnique(vector\u0026lt;int\u0026gt;\u0026amp; nums) { set\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; res; vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; ret; int n, i; vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; perms; if (nums.size() == 1) { ret.push_back(nums); return ret; } for (i = 0; i \u0026lt; nums.size(); i++) { n = nums.back(); nums.pop_back(); perms = permuteUnique(nums); for (auto perm : perms) { perm.push_back(n); res.insert(perm); } nums.insert(nums.begin(), n); } for (auto r : res) { ret.push_back(r); } return ret; } }; ","permalink":"https://notes.0081800.xyz/notes/20210721073657-leetcode_47_permutations_ii/","summary":"tags: LeetCode,backtracking 视频解析：https://www.youtube.com/watch?v=s7AvT7cGdSo\n在 LeetCode: 46. Permutations 的基础上增加重复的元素。感觉不能依赖于 track + map 的去重逻辑回溯。\nclass Solution { public: vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; permuteUnique(vector\u0026lt;int\u0026gt;\u0026amp; nums) { vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; res; } }; 数据特征：\nValue: 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, Index: 2, 1, 0, 1, 0, 2, 1, 0, 1, 0, 2, 1, 0, 1, 0, class Solution { public: vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; permuteUnique(vector\u0026lt;int\u0026gt;\u0026amp; nums) { set\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; res; vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; ret; int n, i; vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; perms; if (nums.","title":"LeetCode: 47. Permutations II"},{"content":" tags: 分布式 故障与部分失效 单节点一般是要么工作要么失效，但是分布式系统多节点面临部分失效，大大提高了分布式系统的复杂性。\n单节点软件特性：\n硬件正常工作时，相同的操作通常总会产生相同的结果，即确定性。 如果发生了某种内部错误，我们宁愿使计算机全部崩溃，而不是返回一个错误的结果。 云计算和超算 超算：垂直扩展的极端，设置检查点，一点节点故障则全部失效从上一个检查点重新开始（离线批处理），类似单机上内核崩溃。 云计算：水平扩展的极端 传统企业位于两个极端的中间 分布式可靠必然面临部分失效，需要依赖软件系统来提供容错机制。我们需要在不可靠的组件上构建可靠的系统。\n不可靠网络 分布式无共享系统：成本低廉。 互联网以及大多数 IDC 内部网络都是异步网络：不保证发送一定到达（排队），等待响应时可能出现任何错误。 现实中的网络故障非常普遍 故障检测：HA、主从切换、保活机制（ICMP，SYN） 超时与无限期的延迟 网络拥塞与排队 网络负载过高会出现拥塞。 数据在发送的过程中分别会在发送端和接收端进行排队：等待发送和等待处理。 TCP 的拥塞控制机制。 虚拟化 CPU 核切换虚拟机 同步与异步网络 同步网络：固定电话网络，一路电话分配固定的电路、有带宽保证，规定延迟内保证完成数据包发送，不会丢弃数据包，成本高，利用率低 异步网络：数据中心网络，共享带宽，无法保证延迟和数据包发送，成本低廉，利用率高 不可靠时钟 单调时钟与墙上时钟 时间同步与准确性 计算机中的石英钟不够精确 NTP 服务器不稳定（网络、防火墙或服务本身） 虚拟机中时钟是虚拟化的。 终端设备不可控：休眠、故意设置 依赖同步的时钟 时钟陷阱：\n一天可能不总是 86400 秒 回拨 多个节点上的时间完全不相同 需要精确同步的时钟：\n自己监控所有节点上的时钟偏差 某个节点时钟漂移超出上限则将其宣告失效 时间戳与时间顺序 最后写入者获胜 时钟的置信区间 通过直接安装 GPS 接收器或原子（铯）时钟，它的误差范围通常可以查询制造商手册。\n全局快照的同步时钟 Google Spanner 根据部署了 GPS 接收器或者原子时钟的 TrueTime API 返回的时钟置信区间。确保读事务足够晚发生，避免与先前事务的置信区间产生重叠。\n进程暂停 垃圾回收 虚拟化暂停虚拟机 磁盘 I/O 内存交换分区 手动暂停进程（SIGSTOP/SIGCONT） 响应时间保证 RTOS 系统 调整垃圾回收的影响 知识，真相与谎言 真相由多数决定：Quorum 一致性 主节点与锁 Fencing 令牌 拜占庭故障 理论系统模型与现实 计时方面\n同步模型：有上界网络延迟、上界进程暂停、上界的时钟误差。 部分同步模型：允许少量的网络延迟、进程暂停、时钟误差超过上界。 异步模型：不会做任何假设。 节点失效模型：\n崩溃-中止模型 崩溃-恢复模型 拜占庭（任意）失效模型 算法的正确性 唯一性：两个令牌不能获取到相同的值 单调递增 可用性 安全性和活性 安全性：没有意外发生 活性： 预期的事情最终一定会发生 ","permalink":"https://notes.0081800.xyz/notes/20210721063222-%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%8C%91%E6%88%98/","summary":"tags: 分布式 故障与部分失效 单节点一般是要么工作要么失效，但是分布式系统多节点面临部分失效，大大提高了分布式系统的复杂性。\n单节点软件特性：\n硬件正常工作时，相同的操作通常总会产生相同的结果，即确定性。 如果发生了某种内部错误，我们宁愿使计算机全部崩溃，而不是返回一个错误的结果。 云计算和超算 超算：垂直扩展的极端，设置检查点，一点节点故障则全部失效从上一个检查点重新开始（离线批处理），类似单机上内核崩溃。 云计算：水平扩展的极端 传统企业位于两个极端的中间 分布式可靠必然面临部分失效，需要依赖软件系统来提供容错机制。我们需要在不可靠的组件上构建可靠的系统。\n不可靠网络 分布式无共享系统：成本低廉。 互联网以及大多数 IDC 内部网络都是异步网络：不保证发送一定到达（排队），等待响应时可能出现任何错误。 现实中的网络故障非常普遍 故障检测：HA、主从切换、保活机制（ICMP，SYN） 超时与无限期的延迟 网络拥塞与排队 网络负载过高会出现拥塞。 数据在发送的过程中分别会在发送端和接收端进行排队：等待发送和等待处理。 TCP 的拥塞控制机制。 虚拟化 CPU 核切换虚拟机 同步与异步网络 同步网络：固定电话网络，一路电话分配固定的电路、有带宽保证，规定延迟内保证完成数据包发送，不会丢弃数据包，成本高，利用率低 异步网络：数据中心网络，共享带宽，无法保证延迟和数据包发送，成本低廉，利用率高 不可靠时钟 单调时钟与墙上时钟 时间同步与准确性 计算机中的石英钟不够精确 NTP 服务器不稳定（网络、防火墙或服务本身） 虚拟机中时钟是虚拟化的。 终端设备不可控：休眠、故意设置 依赖同步的时钟 时钟陷阱：\n一天可能不总是 86400 秒 回拨 多个节点上的时间完全不相同 需要精确同步的时钟：\n自己监控所有节点上的时钟偏差 某个节点时钟漂移超出上限则将其宣告失效 时间戳与时间顺序 最后写入者获胜 时钟的置信区间 通过直接安装 GPS 接收器或原子（铯）时钟，它的误差范围通常可以查询制造商手册。\n全局快照的同步时钟 Google Spanner 根据部署了 GPS 接收器或者原子时钟的 TrueTime API 返回的时钟置信区间。确保读事务足够晚发生，避免与先前事务的置信区间产生重叠。\n进程暂停 垃圾回收 虚拟化暂停虚拟机 磁盘 I/O 内存交换分区 手动暂停进程（SIGSTOP/SIGCONT） 响应时间保证 RTOS 系统 调整垃圾回收的影响 知识，真相与谎言 真相由多数决定：Quorum 一致性 主节点与锁 Fencing 令牌 拜占庭故障 理论系统模型与现实 计时方面","title":"分布式系统挑战"},{"content":" tags: LeetCode,backtracking Keywords backtrack 回溯算法\n图解 举例： [1, 2, 3] ，顺着叶子节点和删除的节点就可以还原成全排列。\n从上面图可以看出来，叶子节点加上回溯路径上被移除的节点就是结果的一项，从左到右依次是：\n[3,R:2,R:1] -\u0026gt; [3,2,1] [2,R:3,R:1] -\u0026gt; [2,3,1] \u0026hellip; class Solution { public: vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; permute(vector\u0026lt;int\u0026gt;\u0026amp; nums) { vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; res; vector\u0026lt;int\u0026gt; track; backtrack(res, track, nums); return res; } void backtrack(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; \u0026amp; res, vector\u0026lt;int\u0026gt; \u0026amp; track, vector\u0026lt;int\u0026gt;\u0026amp; nums) { if (track.size() == nums.size()) { res.push_back(track); return; } for (int i = 0; i \u0026lt; nums.size(); i++) { if (visited.find(nums[i]) != visited.end() \u0026amp;\u0026amp; visited[nums[i]]) { continue; } track.push_back(nums[i]); visited[nums[i]] = true; // go into next level backtrack(res, track, nums); visited[nums[i]] = false; track.pop_back(); } } private: map\u0026lt;int, bool\u0026gt; visited; }; 根据视频解析：https://www.youtube.com/watch?v=s7AvT7cGdSo\n得出以下解法：\nclass Solution { public: vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; permute(vector\u0026lt;int\u0026gt;\u0026amp; nums) { vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; res; int n, i; vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; perms; if (nums.size() == 1) { res.push_back(nums); return res; } for (i = 0; i \u0026lt; nums.size(); i++) { n = nums.back(); nums.pop_back(); perms = permute(nums); for (auto perm : perms) { perm.push_back(n); res.push_back(perm); } nums.insert(nums.begin(), n); } return res; } }; ","permalink":"https://notes.0081800.xyz/notes/20210719073125-leetcode_46_permutations/","summary":"tags: LeetCode,backtracking Keywords backtrack 回溯算法\n图解 举例： [1, 2, 3] ，顺着叶子节点和删除的节点就可以还原成全排列。\n从上面图可以看出来，叶子节点加上回溯路径上被移除的节点就是结果的一项，从左到右依次是：\n[3,R:2,R:1] -\u0026gt; [3,2,1] [2,R:3,R:1] -\u0026gt; [2,3,1] \u0026hellip; class Solution { public: vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; permute(vector\u0026lt;int\u0026gt;\u0026amp; nums) { vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; res; vector\u0026lt;int\u0026gt; track; backtrack(res, track, nums); return res; } void backtrack(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; \u0026amp; res, vector\u0026lt;int\u0026gt; \u0026amp; track, vector\u0026lt;int\u0026gt;\u0026amp; nums) { if (track.size() == nums.size()) { res.push_back(track); return; } for (int i = 0; i \u0026lt; nums.size(); i++) { if (visited.find(nums[i]) != visited.end() \u0026amp;\u0026amp; visited[nums[i]]) { continue; } track.","title":"LeetCode: 46. Permutations"},{"content":" tags: 编程语言内存模型,JavaScript litmus test\nLitmus Test: ES2017 racy reads on ARMv8 Can this program (using atomics) see r1 = 0, r2 = 1? // Thread 1 // Thread 2 x = 1 y = 1 r1 = y x = 2 (non-atomic) r2 = x C++: yes (data race, can do anything at all). Java: the program cannot be written. ARMv8 using ldar/stlr: yes. ES2017: no! (contradicting ARMv8) ","permalink":"https://notes.0081800.xyz/notes/20210716120333-javascript_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B_2017/","summary":" tags: 编程语言内存模型,JavaScript litmus test\nLitmus Test: ES2017 racy reads on ARMv8 Can this program (using atomics) see r1 = 0, r2 = 1? // Thread 1 // Thread 2 x = 1 y = 1 r1 = y x = 2 (non-atomic) r2 = x C++: yes (data race, can do anything at all). Java: the program cannot be written. ARMv8 using ldar/stlr: yes. ES2017: no! (contradicting ARMv8) ","title":"JavaScript 内存模型 (2017)"},{"content":" tags: Rust,Swift,编程语言内存模型 都采用C++11 内存模型。\n","permalink":"https://notes.0081800.xyz/notes/20210716120258-c_rust_%E5%92%8C_swift_%E7%9A%84%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/","summary":"tags: Rust,Swift,编程语言内存模型 都采用C++11 内存模型。","title":"C、Rust 和 Swift 的内存模型"},{"content":" tags: C++11 内存模型,C/C++ C++ 还添加了较弱的原子，可以使用 atomic_store_explicit 和 atomic_load_explicit 以及附加的n内存排序参数来访问这些原子。使用 memory_order_seq_cst 使显式调用等效于C++ 同步原子（atomic）较短的调用。\n较弱的原子称为 acquire/release 原子，一个 release 如果被后来的 acquire 观察到，那么就创建了一个 happen-before 的关系(从 release 到 acquire)。这个术语意在唤起 mutex:release 就像 unlock mutex ， acquire 就像锁定同一个 mutex 。release 之前执行的写入必须对后续 acquire 之后执行的读取可见，就像解锁 mutex 之前执行的写入必须对后解锁 mutex 之后执行的读取可见一样。\natomic\u0026lt;int\u0026gt; done; // Thread 1 // Thread 2 atomic_store(\u0026amp;done, 1, memory_order_release); while(atomic_load(\u0026amp;done, memory_order_acquire) == 0) { /* loop */ } acquire/release 原子只对单个内存位置的操作进行顺序一致的交替执行，所以属于内存一致性（coherence）而非顺序一致性。\n来看下面 litmus test：\nLitmus Test: Store Buffering Can this program see r1 = 0, r2 = 0? // Thread 1 // Thread 2 x = 1 y = 1 r1 = y r2 = x On sequentially consistent hardware: no. On x86 (or other TSO): yes! On ARM/POWER: yes! On Java (using volatiles): no. On C++11 (sequentially consistent atomics): no. On C++11 (acquire/release atomics): yes! ","permalink":"https://notes.0081800.xyz/notes/20210716115953-c_%E5%BC%B1%E5%90%8C%E6%AD%A5%E5%8E%9F%E5%AD%90_acquire_release_atomic/","summary":"tags: C++11 内存模型,C/C++ C++ 还添加了较弱的原子，可以使用 atomic_store_explicit 和 atomic_load_explicit 以及附加的n内存排序参数来访问这些原子。使用 memory_order_seq_cst 使显式调用等效于C++ 同步原子（atomic）较短的调用。\n较弱的原子称为 acquire/release 原子，一个 release 如果被后来的 acquire 观察到，那么就创建了一个 happen-before 的关系(从 release 到 acquire)。这个术语意在唤起 mutex:release 就像 unlock mutex ， acquire 就像锁定同一个 mutex 。release 之前执行的写入必须对后续 acquire 之后执行的读取可见，就像解锁 mutex 之前执行的写入必须对后解锁 mutex 之后执行的读取可见一样。\natomic\u0026lt;int\u0026gt; done; // Thread 1 // Thread 2 atomic_store(\u0026amp;done, 1, memory_order_release); while(atomic_load(\u0026amp;done, memory_order_acquire) == 0) { /* loop */ } acquire/release 原子只对单个内存位置的操作进行顺序一致的交替执行，所以属于内存一致性（coherence）而非顺序一致性。\n来看下面 litmus test：\nLitmus Test: Store Buffering Can this program see r1 = 0, r2 = 0?","title":"C++ 弱同步原子（acquire/release atomic）"},{"content":" tags: C++11 内存模型,C/C++ C++ 并没有仅仅停留在内存一致性（coherence）的C++ 弱同步原子（acquire/release atomic）。它还引入了非同步原子，称为 relaxed 原子（memory_order_relaxed）。这些原子根本没有同步效果——它们没有创建先发生的边——并且它们根本没有排序保证。事实上，宽松原子读_写和普通读_写没有区别，除了宽松原子上的竞争不被认为是竞争， 不能着火 。\n","permalink":"https://notes.0081800.xyz/notes/20210716114242-c_%E9%9D%9E%E5%90%8C%E6%AD%A5%E5%8E%9F%E5%AD%90_relaxed_atomic/","summary":"tags: C++11 内存模型,C/C++ C++ 并没有仅仅停留在内存一致性（coherence）的C++ 弱同步原子（acquire/release atomic）。它还引入了非同步原子，称为 relaxed 原子（memory_order_relaxed）。这些原子根本没有同步效果——它们没有创建先发生的边——并且它们根本没有排序保证。事实上，宽松原子读_写和普通读_写没有区别，除了宽松原子上的竞争不被认为是竞争， 不能着火 。","title":"C++ 非同步原子（Relaxed atomic）"},{"content":" tags: C++11 内存模型 C++ 采用了顺序一致的原子变量，很像Java 同步原子（volatile）(与 C++ volatile 没有关系）。\natomic\u0026lt;int\u0026gt; done; // Thread 1 // Thread 2 atomic_store(\u0026amp;done, 1); while(atomic_load(\u0026amp;done) == 0) { /* loop */ } C++ 弱同步原子（acquire/release atomic） ","permalink":"https://notes.0081800.xyz/notes/20210716113858-c_%E5%90%8C%E6%AD%A5%E5%8E%9F%E5%AD%90_atomic/","summary":" tags: C++11 内存模型 C++ 采用了顺序一致的原子变量，很像Java 同步原子（volatile）(与 C++ volatile 没有关系）。\natomic\u0026lt;int\u0026gt; done; // Thread 1 // Thread 2 atomic_store(\u0026amp;done, 1); while(atomic_load(\u0026amp;done) == 0) { /* loop */ } C++ 弱同步原子（acquire/release atomic） ","title":"C++ 同步原子（atomic）"},{"content":" tags: C++11 内存模型 与 Java 不同，C++ 没有给有竞争的程序任何保证。任何有竞争的程序都属于“未定义的行为”。允许在程序执行的最初几微秒内进行竞争访问，从而在几小时或几天后导致任意的错误行为。这通常被称为“DRF-SC或着火”：如果程序没有数据竞争，它以顺序一致的方式运行，如果有数据竞争，它可以做任何事情，包括着火。\n","permalink":"https://notes.0081800.xyz/notes/20210716113642-drf_sc_%E8%BF%98%E6%98%AF%E7%9D%80%E7%81%AB_catch_fire/","summary":"tags: C++11 内存模型 与 Java 不同，C++ 没有给有竞争的程序任何保证。任何有竞争的程序都属于“未定义的行为”。允许在程序执行的最初几微秒内进行竞争访问，从而在几小时或几天后导致任意的错误行为。这通常被称为“DRF-SC或着火”：如果程序没有数据竞争，它以顺序一致的方式运行，如果有数据竞争，它可以做任何事情，包括着火。","title":"DRF-SC 还是着火（Catch Fire）"},{"content":" tags: C/C++,Memory Model,编程语言内存模型 受新的 Java 内存模型（2004）许多同样的人开始为 C++ 定义一个类似的内存模型，最终在 C++11 中采用。 两个重要方便的差异：\nC++ 对具有数据竞争的程序不做任何保证 C++ 提供了三种原子性：强同步（顺序一致性），弱同步（内存一致性（coherence））和无同步（“relaxed”，用于隐藏竞争）。 第一点尝试消除对 Java 模型的复杂性需求，“relaxed” 的原子性重新引入 Java 关于定义什么是竞争程序的所有复杂性。结果是C++模型比Java更复杂，但对程序员的帮助更小。\n","permalink":"https://notes.0081800.xyz/notes/20210716113225-c_11_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/","summary":"tags: C/C++,Memory Model,编程语言内存模型 受新的 Java 内存模型（2004）许多同样的人开始为 C++ 定义一个类似的内存模型，最终在 C++11 中采用。 两个重要方便的差异：\nC++ 对具有数据竞争的程序不做任何保证 C++ 提供了三种原子性：强同步（顺序一致性），弱同步（内存一致性（coherence））和无同步（“relaxed”，用于隐藏竞争）。 第一点尝试消除对 Java 模型的复杂性需求，“relaxed” 的原子性重新引入 Java 关于定义什么是竞争程序的所有复杂性。结果是C++模型比Java更复杂，但对程序员的帮助更小。","title":"C++11 内存模型"},{"content":" 线程的创建前置于（happens bofere）线程的第一个动作。 互斥体 m 的解锁前置于（happens before）任何 后续（subsequent） 对互斥体 m 的锁定。 volatile 变量 v 的写入前置于（happens bofere）任何 后续（subsequent） 对变量 v 的读取。 “后续（subsequent）” 意味着什么？Java 定义了所有锁定、解锁和 volatile 变量访问的行为，给出了整个程序中所有这些操作的总顺序，就像它们发生在某个顺序一致的交错中一样。“后续（subsequent）”指在总顺序中较晚执行。也就是说：锁定、解锁和 volatile 变量的访问的“总顺序”定义了“后续”的含义，“后续”定义了由特定执行创建的“前置于（happens before）”关系，最终“前置于（happens before）”关系定义了该特定执行是否存在数据竞争。如果没有数据竞争，那么执行就会以顺序一致的方式进行。\n事实上， volatile 访问必须表现得像在某种总排序一样，意味这在下面 litmus test 中，不能出现 r1=0 和 r2=0 的结果:\nLitmus Test: Store Buffering Can this program see r1 = 0, r2 = 0? // Thread 1 // Thread 2 x = 1 y = 1 r1 = y r2 = x On sequentially consistent hardware: no. On x86 (or other TSO): yes! On ARM/POWER: yes! On Java using volatiles: no. Java 中对 volatile 变量 x 和 y 的读写不能被重新排序：一个线程的写入一定会同步到第二个，紧随着第二个的写入的读取就一定能看到第一个写入。\n","permalink":"https://notes.0081800.xyz/notes/20210716112805-java_%E5%90%8C%E6%AD%A5%E5%8E%9F%E5%AD%90_volatile/","summary":"线程的创建前置于（happens bofere）线程的第一个动作。 互斥体 m 的解锁前置于（happens before）任何 后续（subsequent） 对互斥体 m 的锁定。 volatile 变量 v 的写入前置于（happens bofere）任何 后续（subsequent） 对变量 v 的读取。 “后续（subsequent）” 意味着什么？Java 定义了所有锁定、解锁和 volatile 变量访问的行为，给出了整个程序中所有这些操作的总顺序，就像它们发生在某个顺序一致的交错中一样。“后续（subsequent）”指在总顺序中较晚执行。也就是说：锁定、解锁和 volatile 变量的访问的“总顺序”定义了“后续”的含义，“后续”定义了由特定执行创建的“前置于（happens before）”关系，最终“前置于（happens before）”关系定义了该特定执行是否存在数据竞争。如果没有数据竞争，那么执行就会以顺序一致的方式进行。\n事实上， volatile 访问必须表现得像在某种总排序一样，意味这在下面 litmus test 中，不能出现 r1=0 和 r2=0 的结果:\nLitmus Test: Store Buffering Can this program see r1 = 0, r2 = 0? // Thread 1 // Thread 2 x = 1 y = 1 r1 = y r2 = x On sequentially consistent hardware: no.","title":"Java 同步原子（volatile）"},{"content":"对于小于等于 word 大小的变量，对变量（或字段） x 的读取必须看到对 x 的某一次写入所存储的值。 如果读取 r 观察到对 x 的写入 w ，那么 r 不发生在 w 之前。\n也就是说 r 可以观察发生在 r 之前的所有写入，并且可以观察与 r 竞争的写入。\n","permalink":"https://notes.0081800.xyz/notes/20210716112456-java_%E5%86%B3%E5%AE%9A%E7%AB%9E%E4%BA%89%E8%AF%BB%E5%86%99%E7%9A%84%E5%85%B7%E4%BD%93%E8%A7%84%E5%88%99/","summary":"对于小于等于 word 大小的变量，对变量（或字段） x 的读取必须看到对 x 的某一次写入所存储的值。 如果读取 r 观察到对 x 的写入 w ，那么 r 不发生在 w 之前。\n也就是说 r 可以观察发生在 r 之前的所有写入，并且可以观察与 r 竞争的写入。","title":"Java 决定竞争读写的具体规则"},{"content":"See also: 顺序一致性。\n","permalink":"https://notes.0081800.xyz/notes/20210716111043-%E5%86%85%E5%AD%98%E9%A1%BA%E5%BA%8F%E4%B8%80%E8%87%B4%E6%80%A7_sequential_consistency/","summary":"See also: 顺序一致性。","title":"内存顺序一致性（sequential consistency）"},{"content":" tags: Memory Model，一致性 FROM 硬件内存模型：\nthreads in the system must agree about a total order for the writes to a single memory location. That is, threads must agree which writes overwrite other writes. This property is called called coherence.\n内存一致性的系统都所有线程都必须接受对一个内存地址所有写入的总顺序。换句话说，所有线程必须同意哪些写入可以覆盖另外的一些写入。\n","permalink":"https://notes.0081800.xyz/notes/20210716110953-%E5%86%85%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7_coherence/","summary":"tags: Memory Model，一致性 FROM 硬件内存模型：\nthreads in the system must agree about a total order for the writes to a single memory location. That is, threads must agree which writes overwrite other writes. This property is called called coherence.\n内存一致性的系统都所有线程都必须接受对一个内存地址所有写入的总顺序。换句话说，所有线程必须同意哪些写入可以覆盖另外的一些写入。","title":"内存一致性（coherence）"},{"content":" Coherence deals with maintaining a global order in which writes to a single location or single variable are seen by all processors. Consistency deals with the ordering of operations to multiple locations with respect to all processors.\nMemory coherence: a memory system is coherent if any read of a data item returns the most recently written value of that data item (what values can be returned by a read).\nMemory consistency: A memory consistency model for a shared address space specifies constraints on the order in which memory operations must appear to be performed (i.e. to become visible to the processors) with respect to one another.(when a written value will be returned/seen by a read).\nCoherence defines the behavior of reads and writes to the same memory location, while consistency defines the behavior of reads and writes with respect to accesses to other locations.\n这里应该想要区分还是内存一致性（coherence）和内存顺序一致性（sequential consistency）。\nSee also What’s the difference between memory coherence and consistency? ","permalink":"https://notes.0081800.xyz/notes/20210716110147-memory_coherence_vs_consistency/","summary":"Coherence deals with maintaining a global order in which writes to a single location or single variable are seen by all processors. Consistency deals with the ordering of operations to multiple locations with respect to all processors.\nMemory coherence: a memory system is coherent if any read of a data item returns the most recently written value of that data item (what values can be returned by a read).","title":"Memory coherence vs consistency"},{"content":"悲观并发控制 两阶段加锁是一个典型的悲观并发控制。设计原则：如果某些操作可能出错，则直接放弃等待直到安全。\n乐观并发控制 如果可能发生潜在冲突，事务会继续执行而不是终止，寄希望与相安无事；而当事务提交时，数据库会检查是否发生了冲突，如果是的话，中止事务并接下来重试。\n对比 如果冲突很多则性能不佳，如果性能良好，且事务之间的竞争不大，乐观并发控制会比悲观方式性能高很多。\n","permalink":"https://notes.0081800.xyz/notes/20210716080024-%E6%82%B2%E8%A7%82%E4%B8%8E%E4%B9%90%E8%A7%82%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/","summary":"悲观并发控制 两阶段加锁是一个典型的悲观并发控制。设计原则：如果某些操作可能出错，则直接放弃等待直到安全。\n乐观并发控制 如果可能发生潜在冲突，事务会继续执行而不是终止，寄希望与相安无事；而当事务提交时，数据库会检查是否发生了冲突，如果是的话，中止事务并接下来重试。\n对比 如果冲突很多则性能不佳，如果性能良好，且事务之间的竞争不大，乐观并发控制会比悲观方式性能高很多。","title":"悲观与乐观并发控制"},{"content":"可串形化的快照隔离（Serializable Snapshot Isolation，SSI）近两年被研究，尚需在实践中证明其性能，但是它很有可能成为未来数据的标配。\n悲观与乐观并发控制 ","permalink":"https://notes.0081800.xyz/notes/20210716075758-%E5%8F%AF%E4%B8%B2%E5%BD%A2%E5%8C%96%E7%9A%84%E5%BF%AB%E7%85%A7%E9%9A%94%E7%A6%BB/","summary":"可串形化的快照隔离（Serializable Snapshot Isolation，SSI）近两年被研究，尚需在实践中证明其性能，但是它很有可能成为未来数据的标配。\n悲观与乐观并发控制 ","title":"可串形化的快照隔离"},{"content":"两阶段枷锁（two-phase locking，2PL）是近 30 年来数据库唯一一种被广泛使用的串形化算法。 多个事务可以同时读取同一个对象，但只要出现任何写操作（修改或删除），则必须加锁以独占访问。\n两阶段包括：\n事务执行之前要获得锁（第一阶段） 事务结束之后要释放锁（第二阶段） 实现 2PL 用于 MySQL（InnoDB）和 SQL Server 中的“可串形化隔离”，以及 DB2 的“可重复读”。\n每个对象通过一个「读写锁」隔离读写操作。\n共享锁进行读取。 独占锁进行修改。 读取先获取共享锁，如果要修改则升级为独占锁。 事务获得锁之后一直持有到事务结束。 性能 慢和死锁\n谓词锁 通过对区间条件加谓词锁。\n索引区间锁 ","permalink":"https://notes.0081800.xyz/notes/20210716074845-%E4%B8%A4%E9%98%B6%E6%AE%B5%E5%8A%A0%E9%94%81/","summary":"两阶段枷锁（two-phase locking，2PL）是近 30 年来数据库唯一一种被广泛使用的串形化算法。 多个事务可以同时读取同一个对象，但只要出现任何写操作（修改或删除），则必须加锁以独占访问。\n两阶段包括：\n事务执行之前要获得锁（第一阶段） 事务结束之后要释放锁（第二阶段） 实现 2PL 用于 MySQL（InnoDB）和 SQL Server 中的“可串形化隔离”，以及 DB2 的“可重复读”。\n每个对象通过一个「读写锁」隔离读写操作。\n共享锁进行读取。 独占锁进行修改。 读取先获取共享锁，如果要修改则升级为独占锁。 事务获得锁之后一直持有到事务结束。 性能 慢和死锁\n谓词锁 通过对区间条件加谓词锁。\n索引区间锁 ","title":"两阶段加锁"},{"content":"实际串行执行 解决并发问题最直接的方法：在一个线程上按照顺序方式每次执行一个事务。\n为什么可行：\n内存越来越便宜，可以将事务需要的数据都放在内存中。 OLTP 事务通常执行很快，只产生少量的读写操作。通常较长时间的分析操作通常是只读。 事务为了充分利用单线程所做的调整：\n采用存储过程封装事务，Redis 采用 Lua 分区 约束 事务必须简短而高效。 事务所需数据都在内存。 写入吞吐量必须低，否则需要采用分区，最好没有跨分区事务。 要支持跨分区事务必须确保跨分区事务占比很小。 两阶段加锁 可串形化的快照隔离 ","permalink":"https://notes.0081800.xyz/notes/20210716074157-%E4%B8%B2%E8%A1%8C%E5%8C%96/","summary":"实际串行执行 解决并发问题最直接的方法：在一个线程上按照顺序方式每次执行一个事务。\n为什么可行：\n内存越来越便宜，可以将事务需要的数据都放在内存中。 OLTP 事务通常执行很快，只产生少量的读写操作。通常较长时间的分析操作通常是只读。 事务为了充分利用单线程所做的调整：\n采用存储过程封装事务，Redis 采用 Lua 分区 约束 事务必须简短而高效。 事务所需数据都在内存。 写入吞吐量必须低，否则需要采用分区，最好没有跨分区事务。 要支持跨分区事务必须确保跨分区事务占比很小。 两阶段加锁 可串形化的快照隔离 ","title":"串行化"},{"content":"即不是脏写也不会更新丢失，事务之间的写冲突并不直接，写倾斜可以视为更广义的数据丢失。\n考虑急诊医生请假系统，核心逻辑是必须要有一个医生值班。两个医生同时请假，事务同时同时开始，那么两个医生都能查询到有两个医生值班，最后请假成功，导致无医生值班。\n","permalink":"https://notes.0081800.xyz/notes/20210716072157-%E5%86%99%E5%80%BE%E6%96%9C/","summary":"即不是脏写也不会更新丢失，事务之间的写冲突并不直接，写倾斜可以视为更广义的数据丢失。\n考虑急诊医生请假系统，核心逻辑是必须要有一个医生值班。两个医生同时请假，事务同时同时开始，那么两个医生都能查询到有两个医生值班，最后请假成功，导致无医生值班。","title":"写倾斜"},{"content":"写事务并发除了需要防止更新丢失还有一些更为微妙的写冲突。\n写倾斜与幻读 定义写倾斜。\n","permalink":"https://notes.0081800.xyz/notes/20210716071953-%E5%86%99%E5%80%BE%E6%96%9C%E4%B8%8E%E5%B9%BB%E8%AF%BB/","summary":"写事务并发除了需要防止更新丢失还有一些更为微妙的写冲突。\n写倾斜与幻读 定义写倾斜。","title":"写倾斜与幻读"},{"content":"读事务遇到并发写会出现脏读（读-提交和可重复读可以解决），写事务并发会带来一些冲突，最值得关注的就是更新丢失问题。 应用程序从数据库读取某些值，然后应用逻辑做出修改，然后写回新值。\n原子写操作 UPDATE counters SET value=value+1 WHERE key = \u0026#39;foo\u0026#39;; 原子操作通常采用方式：\n对读取对象加独占加锁，这种技术有时被称为「游标稳定性」。 强制所有原子操作都在单线程上执行。 显式枷锁 BEGIN TRANSACTION; SELECT * FROM figures WHERE name = \u0026#39;robot\u0026#39; AND game_id = 222 FOR UPDATE; -- 指示数据库对返回的所有结果行要加锁。 缺点：侵入应用逻辑、容易引发死锁（竞争冲突）。\n自动检测更新丢失 数据库（Oracle 的串形化和 SQL Server 的快照级别隔离）可以自动检测何时发生了更新丢失，然后终止违规的那个事务。\n原子比较和设置 UPDATE wiki_pages SET content = \u0026#39;new_content\u0026#39; WHERE id = 1234 AND conetnt = \u0026#39;old_content\u0026#39;; 冲突解决与复制 最后写入者获胜 ","permalink":"https://notes.0081800.xyz/notes/20210716070457-%E9%98%B2%E6%AD%A2%E6%9B%B4%E6%96%B0%E4%B8%A2%E5%A4%B1/","summary":"读事务遇到并发写会出现脏读（读-提交和可重复读可以解决），写事务并发会带来一些冲突，最值得关注的就是更新丢失问题。 应用程序从数据库读取某些值，然后应用逻辑做出修改，然后写回新值。\n原子写操作 UPDATE counters SET value=value+1 WHERE key = \u0026#39;foo\u0026#39;; 原子操作通常采用方式：\n对读取对象加独占加锁，这种技术有时被称为「游标稳定性」。 强制所有原子操作都在单线程上执行。 显式枷锁 BEGIN TRANSACTION; SELECT * FROM figures WHERE name = \u0026#39;robot\u0026#39; AND game_id = 222 FOR UPDATE; -- 指示数据库对返回的所有结果行要加锁。 缺点：侵入应用逻辑、容易引发死锁（竞争冲突）。\n自动检测更新丢失 数据库（Oracle 的串形化和 SQL Server 的快照级别隔离）可以自动检测何时发生了更新丢失，然后终止违规的那个事务。\n原子比较和设置 UPDATE wiki_pages SET content = \u0026#39;new_content\u0026#39; WHERE id = 1234 AND conetnt = \u0026#39;old_content\u0026#39;; 冲突解决与复制 最后写入者获胜 ","title":"防止更新丢失"},{"content":" tags: Go,Memory Model source: 更新Go内存模型 https://research.swtch.com/gomm ","permalink":"https://notes.0081800.xyz/notes/20210715110202-%E6%9B%B4%E6%96%B0_go_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/","summary":" tags: Go,Memory Model source: 更新Go内存模型 https://research.swtch.com/gomm ","title":"更新 Go 内存模型"},{"content":" tags: LeetCode source: https://leetcode.com/problems/reverse-nodes-in-k-group/ /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: ListNode* reverseKGroup(ListNode* head, int k) { deque\u0026lt;ListNode*\u0026gt; dq; ListNode* cur = head; ListNode* top = nullptr; ListNode* tail = nullptr; bool first_k = true; while (cur != nullptr) { dq.push_front(cur); cur = cur-\u0026gt;next; if (dq.size() == k) { // start reverse in k top = dq.front(); dq.pop_front(); // override head or connected from last k if (first_k) { head = top; first_k = false; } else { tail-\u0026gt;next = top; } while(!dq.empty()) { top-\u0026gt;next = dq.front(); dq.pop_front(); top = top-\u0026gt;next; } top-\u0026gt;next = cur; tail = top; // mark the tail of linked list } } if (!dq.empty() \u0026amp;\u0026amp; tail != nullptr) { tail-\u0026gt;next = dq.back(); } return head; } }; ","permalink":"https://notes.0081800.xyz/notes/20210715064442-leetcode_25_reverse_nodes_in_k_group/","summary":"tags: LeetCode source: https://leetcode.com/problems/reverse-nodes-in-k-group/ /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: ListNode* reverseKGroup(ListNode* head, int k) { deque\u0026lt;ListNode*\u0026gt; dq; ListNode* cur = head; ListNode* top = nullptr; ListNode* tail = nullptr; bool first_k = true; while (cur !","title":"LeetCode: 25. Reverse Nodes in k-Group"},{"content":"读-未提交 读数据时，会读到未成功提交的数据（未防止“脏读”） 写数据时，只会覆盖已成功提交的数据（防止“脏写”） 读-提交 读数据时，只会读到已成功提交的数据（防止“脏读”） 写数据时，只会覆盖已成功提交的数据（防止“脏写”） 防止脏写 通常通过推迟第二个写请求（行锁），直到前面的事务完成提交（或者终止）。\n防止脏读 通过行锁同样可以避免脏读，但是实际中不可行（性能太差），一般采用类似 MVCC 的方式：对于待更新的对象，数据库都会维护其旧值和当前持锁事务将要设置的新值两个版本。 事务提交之前，其他所有读操作读旧值；仅当写事务提交之后，才会切换到读取新值。\n可重复读（快照级别隔离） 在同一个事务中，反复读取总能获得一致性的结果，而不会读取到其他事务提交修改的新值。总体性想法是：每个事务都从数据库的一致性快照中读取，事务一开始所看到的是最近提交的数据，即使数据随后可能被另外一个事务更改，但保证每个事务都只看到特定时间点的旧数据。\n实现快照级别隔离 MVCC\n串行化 ","permalink":"https://notes.0081800.xyz/notes/20210714074945-%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/","summary":"读-未提交 读数据时，会读到未成功提交的数据（未防止“脏读”） 写数据时，只会覆盖已成功提交的数据（防止“脏写”） 读-提交 读数据时，只会读到已成功提交的数据（防止“脏读”） 写数据时，只会覆盖已成功提交的数据（防止“脏写”） 防止脏写 通常通过推迟第二个写请求（行锁），直到前面的事务完成提交（或者终止）。\n防止脏读 通过行锁同样可以避免脏读，但是实际中不可行（性能太差），一般采用类似 MVCC 的方式：对于待更新的对象，数据库都会维护其旧值和当前持锁事务将要设置的新值两个版本。 事务提交之前，其他所有读操作读旧值；仅当写事务提交之后，才会切换到读取新值。\n可重复读（快照级别隔离） 在同一个事务中，反复读取总能获得一致性的结果，而不会读取到其他事务提交修改的新值。总体性想法是：每个事务都从数据库的一致性快照中读取，事务一开始所看到的是最近提交的数据，即使数据随后可能被另外一个事务更改，但保证每个事务都只看到特定时间点的旧数据。\n实现快照级别隔离 MVCC\n串行化 ","title":"事务隔离级别"},{"content":"原子性（Atomicity） 一致性（Consistency） 一致性并不是数据所保证的，而是程序借助数据库的原子性和隔离性（AD）来达到一致性。一致性的 C 放到 ACID 中只是为了可以更加顺畅的宣传（读）。\n隔离性（Isolation） 事务隔离级别\n持久性（Durability） ","permalink":"https://notes.0081800.xyz/notes/20210714074135-acid/","summary":"原子性（Atomicity） 一致性（Consistency） 一致性并不是数据所保证的，而是程序借助数据库的原子性和隔离性（AD）来达到一致性。一致性的 C 放到 ACID 中只是为了可以更加顺畅的宣传（读）。\n隔离性（Isolation） 事务隔离级别\n持久性（Durability） ","title":"ACID"},{"content":"事务简化程序层错误处理，将多个读写捆绑成一个操作逻辑操作单元，成功则全部成功，失败则可以进行安全重试。\n深入理解事务 ACID 单对象与多对象事务操作 事务操作涉及多对象和但对象。\n多对象，如更新邮件未读数和未读邮件个数 单对象，如更新一个大的字段（20KB 的 JSON） 弱隔离级别 事务隔离级别中的「读-未提交」、「读-提交」和「快照级别隔离可重复读」。\n防止更新丢失 写倾斜与幻读 串行化 ","permalink":"https://notes.0081800.xyz/notes/20210714073909-%E4%BA%8B%E5%8A%A1/","summary":"事务简化程序层错误处理，将多个读写捆绑成一个操作逻辑操作单元，成功则全部成功，失败则可以进行安全重试。\n深入理解事务 ACID 单对象与多对象事务操作 事务操作涉及多对象和但对象。\n多对象，如更新邮件未读数和未读邮件个数 单对象，如更新一个大的字段（20KB 的 JSON） 弱隔离级别 事务隔离级别中的「读-未提交」、「读-提交」和「快照级别隔离可重复读」。\n防止更新丢失 写倾斜与幻读 串行化 ","title":"事务"},{"content":" tags: LeetCode source: https://leetcode.com/problems/reverse-linked-list-ii/ /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: ListNode* reverseBetween(ListNode* head, int left, int right) { stack\u0026lt;int\u0026gt; st; ListNode* cur = head; ListNode* prev_start = nullptr; if (left == 1) { prev_start = new ListNode(0, head); // dummy prev_start point to head } int i = 1; while(cur != nullptr) { if (i \u0026gt;= left \u0026amp;\u0026amp; i \u0026lt;= right) { st.push(cur-\u0026gt;val); } if ((i + 1) == left) { prev_start = cur; } // move ahead i++; cur = cur-\u0026gt;next; } if (prev_start != nullptr) { cur = prev_start-\u0026gt;next; while (st.size() \u0026gt; 0) { cur-\u0026gt;val = st.top(); cur = cur-\u0026gt;next; st.pop(); } } return head; } }; ","permalink":"https://notes.0081800.xyz/notes/20210714065549-leetcode_92_reverse_linked_list_ii/","summary":"tags: LeetCode source: https://leetcode.com/problems/reverse-linked-list-ii/ /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: ListNode* reverseBetween(ListNode* head, int left, int right) { stack\u0026lt;int\u0026gt; st; ListNode* cur = head; ListNode* prev_start = nullptr; if (left == 1) { prev_start = new ListNode(0, head); // dummy prev_start point to head } int i = 1; while(cur !","title":"LeetCode: 92. Reverse Linked List II"},{"content":" tags: Emacs 最近换到 ivy 之后 projectile 切换项目加载 Buffer 或查找文件变得巨慢，查抄一番发现问题可以通过缓存解决：\nivy-rich Projectile Caching ","permalink":"https://notes.0081800.xyz/notes/20210714065205-emacs_projectile_%E4%BC%98%E5%8C%96/","summary":" tags: Emacs 最近换到 ivy 之后 projectile 切换项目加载 Buffer 或查找文件变得巨慢，查抄一番发现问题可以通过缓存解决：\nivy-rich Projectile Caching ","title":"Emacs Projectile 优化"},{"content":" tags: Memory Model,Java,编程语言内存模型 ","permalink":"https://notes.0081800.xyz/notes/20210713202541-java_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/","summary":" tags: Memory Model,Java,编程语言内存模型 ","title":"Java 内存模型"},{"content":" tags: Java 内存模型 新模型遵循 DRF-SC 方法：保证弱有序和无数据竞争（DRF）的 Java 程序以顺序一致的方式执行。\nJSR-133，在 2004 年发布的 Java 5.0 中被采用。规范：The Java Memory Model, 2005。\nJava 中程序员需要同步操作建立 happens-before 关系，确保一个线程不会在另一个线程读取或写入时并发的写入非原子变量。主要的同步操作有：\n同步原子（volatile）和其它操作 参见：Java 同步原子（volatile）。\n有数据竞争的程序语义 弱有序和无数据竞争（DRF）只保证「无数据」竞争的程序的顺序一致性行为。新的 Java 模型（和原版本一致）出于以下原因定义了「有数据」竞争程序的顺序一致性行为：\n支持Java的一般安全（security）和安全保障（safety guarantee）。 让程序员更容易发现错误。 使攻击者更难利用问题，因为由于数据竞争的原因可能造成的损失更有限。 让程序员更清楚他们的程序是做什么的 新的模型不再依赖内存一致性（coherence），取而代之的复用 happens-before（已经用于决定程序是否存在竞争）来决定竞争读写的结果。\n具体规则参见：Java 决定竞争读写的具体规则。使用 happens-before 并结合Java 同步原子（volatile）就可以建立新的 happen before 关系，是对原始Java内存模型的重大改进。它为程序员提供了更多有用的保证，并使大量重要的编译器优化得到了明确的允。\nhappens-before 不排除语无伦次（incoherence） 以前发生的事不排除无用性（acausality） ","permalink":"https://notes.0081800.xyz/notes/20210713201332-%E6%96%B0%E7%9A%84_java_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B_2004/","summary":" tags: Java 内存模型 新模型遵循 DRF-SC 方法：保证弱有序和无数据竞争（DRF）的 Java 程序以顺序一致的方式执行。\nJSR-133，在 2004 年发布的 Java 5.0 中被采用。规范：The Java Memory Model, 2005。\nJava 中程序员需要同步操作建立 happens-before 关系，确保一个线程不会在另一个线程读取或写入时并发的写入非原子变量。主要的同步操作有：\n同步原子（volatile）和其它操作 参见：Java 同步原子（volatile）。\n有数据竞争的程序语义 弱有序和无数据竞争（DRF）只保证「无数据」竞争的程序的顺序一致性行为。新的 Java 模型（和原版本一致）出于以下原因定义了「有数据」竞争程序的顺序一致性行为：\n支持Java的一般安全（security）和安全保障（safety guarantee）。 让程序员更容易发现错误。 使攻击者更难利用问题，因为由于数据竞争的原因可能造成的损失更有限。 让程序员更清楚他们的程序是做什么的 新的模型不再依赖内存一致性（coherence），取而代之的复用 happens-before（已经用于决定程序是否存在竞争）来决定竞争读写的结果。\n具体规则参见：Java 决定竞争读写的具体规则。使用 happens-before 并结合Java 同步原子（volatile）就可以建立新的 happen before 关系，是对原始Java内存模型的重大改进。它为程序员提供了更多有用的保证，并使大量重要的编译器优化得到了明确的允。\nhappens-before 不排除语无伦次（incoherence） 以前发生的事不排除无用性（acausality） ","title":"新的 Java 内存模型（2004）"},{"content":"// p and q may or may not point at the same object. int i = p.x; // ... maybe another thread writes p.x at this point ... int j = q.x; int k = p.x; 在这个程序中，公共子表达式消除（common subexpression elimination）会注意到 p.x 被计算了两次，并将最后一行优化为 k = i 。\n","permalink":"https://notes.0081800.xyz/notes/20210713201045-java_%E7%BC%96%E8%AF%91%E5%99%A8%E5%85%AC%E5%85%B1%E5%AD%90%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B6%88%E9%99%A4_common_subexpression_elimination/","summary":"// p and q may or may not point at the same object. int i = p.x; // ... maybe another thread writes p.x at this point ... int j = q.x; int k = p.x; 在这个程序中，公共子表达式消除（common subexpression elimination）会注意到 p.x 被计算了两次，并将最后一行优化为 k = i 。","title":"Java 编译器公共子表达式消除（common subexpression elimination）"},{"content":" tags: Java 内存模型,Java Java 是第一个试图写下多线程程序保证的主流语言。它包括：\n互斥体（mutex），并定义了它们隐含的内存排序要求。 “volatile” 原子变量: volatile 变量的所有读和写都需要直接在主内存中按程序顺序执行，使得对 volatile 变量的操作以顺序一致的方式进行。 制定了（或者至少试图制定）具有数据竞争的程序的行为。 缺陷 Atomic 需要同步：volatile 原子变量是不同步的，所以它们无助于消除程序其余部分的竞争。不能用于构建新的同步原语。 一致性与编译器优化不兼容：Java 编译器公共子表达式消除（common subexpression elimination）会导致其他线程写入新值无法对消除后表达式生效。 ","permalink":"https://notes.0081800.xyz/notes/20210713200556-%E5%8E%9F%E5%A7%8B_java_%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B_1996/","summary":" tags: Java 内存模型,Java Java 是第一个试图写下多线程程序保证的主流语言。它包括：\n互斥体（mutex），并定义了它们隐含的内存排序要求。 “volatile” 原子变量: volatile 变量的所有读和写都需要直接在主内存中按程序顺序执行，使得对 volatile 变量的操作以顺序一致的方式进行。 制定了（或者至少试图制定）具有数据竞争的程序的行为。 缺陷 Atomic 需要同步：volatile 原子变量是不同步的，所以它们无助于消除程序其余部分的竞争。不能用于构建新的同步原语。 一致性与编译器优化不兼容：Java 编译器公共子表达式消除（common subexpression elimination）会导致其他线程写入新值无法对消除后表达式生效。 ","title":"原始 Java 内存模型（1996）"},{"content":"保证了弱有序和无数据竞争（DRF）的系统会提供称为同步的特定指令，提供一种协调不同处理器（相当于硬件线程）的属性。\n","permalink":"https://notes.0081800.xyz/notes/20210713195115-drf_sc_%E7%B3%BB%E7%BB%9F%E5%90%8C%E6%AD%A5%E6%8C%87%E4%BB%A4/","summary":"保证了弱有序和无数据竞争（DRF）的系统会提供称为同步的特定指令，提供一种协调不同处理器（相当于硬件线程）的属性。","title":"DRF-SC 系统同步指令"},{"content":"原子变量（atomic variable）或原子操作（tomic operation）更好的解释。\n","permalink":"https://notes.0081800.xyz/notes/20210713194409-%E5%90%8C%E6%AD%A5%E5%8E%9F%E5%AD%90_synchronizing_atomic/","summary":"原子变量（atomic variable）或原子操作（tomic operation）更好的解释。","title":"同步原子（synchronizing atomic）"},{"content":"现代语言以原子变量（atomic variable）或原子操作（atomic operation）的形式提供特殊能力，允许程序同步其线程(参见硬件内存一致性模型)。\n代码示例\n// Thread 1 // Thread 2 x = 1; while(done == 0) { /* loop */ } done = 1; print(x); 如果使用原子变量实现 done 会产生很多效果：\nThread 1 的编译代码必须确保对 x 的写入完成，并且对 done 的写入可见之前对 x 的写入对其他线程可见。 Thread 2 的编译代码必须在循环的每次迭代中（重新）读取 done 。 Thread 2 的编译代码必须在读取 done 之后才读取 x 。 编译后的代码必须做任何必要的事情来禁用可能会重新引入这些问题的硬件优化。 使 done 原子化的最终结果是程序按照我们想要的方式运行，成功地将 x 的值从 Thread 1 传递到 Thread 2 。 上面代码如果不使用原子变量会出现 Thread 1 和 Thread 2 读取 x 的同时写 x ，从而导致数据竞争（data race)。 done 使用原子变量实现后，用于同步对 x 的访问： Thread 1 现在不可能在 Thread 2 读取 x 的同时写 x，从而避免数据竞争。 这是硬件内存模型弱有序和无数据竞争（DRF）在编程语言环境的应用。\n原子变量（atomic variable）或原子操作（atomic operation）更恰当的名称应该是「同步原子（synchronizing atomic）」。\n","permalink":"https://notes.0081800.xyz/notes/20210713193214-%E5%8E%9F%E5%AD%90%E5%8F%98%E9%87%8F_atomic_variable_%E6%88%96%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C_tomic_operation/","summary":"现代语言以原子变量（atomic variable）或原子操作（atomic operation）的形式提供特殊能力，允许程序同步其线程(参见硬件内存一致性模型)。\n代码示例\n// Thread 1 // Thread 2 x = 1; while(done == 0) { /* loop */ } done = 1; print(x); 如果使用原子变量实现 done 会产生很多效果：\nThread 1 的编译代码必须确保对 x 的写入完成，并且对 done 的写入可见之前对 x 的写入对其他线程可见。 Thread 2 的编译代码必须在循环的每次迭代中（重新）读取 done 。 Thread 2 的编译代码必须在读取 done 之后才读取 x 。 编译后的代码必须做任何必要的事情来禁用可能会重新引入这些问题的硬件优化。 使 done 原子化的最终结果是程序按照我们想要的方式运行，成功地将 x 的值从 Thread 1 传递到 Thread 2 。 上面代码如果不使用原子变量会出现 Thread 1 和 Thread 2 读取 x 的同时写 x ，从而导致数据竞争（data race)。 done 使用原子变量实现后，用于同步对 x 的访问： Thread 1 现在不可能在 Thread 2 读取 x 的同时写 x，从而避免数据竞争。 这是硬件内存模型弱有序和无数据竞争（DRF）在编程语言环境的应用。","title":"原子变量（atomic variable）或原子操作（tomic operation）"},{"content":"弱有序是 Sarita Adve 和 Mark Hill 在他们 1990 年的论文 Weak Ordering - A New Definition (1990) 提出。\n定义如下\nLet a synchronization model be a set of constraints on memory accesses that specify how and when synchronization needs to be done.\n同步模型是对内存访问的一组约束，这些约束指定了何时以及如何进行同步。\n硬件相对于同步模型是弱有序的，当且仅当它在顺序上与遵守同步模型的所有软件一致时。\nAdve和Hill提出了一种同步模型，他们称之为无数据竞争(data-race-free，DRF)。该模型假设硬件具有独立于普通内存读写的内存同步操作。普通的内存读写可以在同步操作之间重新排序，但不能在跨它们移动。(也就是说，同步操作也可用来做重新排序的内存屏障。)如果对于所有理想化的顺序一致的执行，从不同线程对同一位置的任何两个普通存储器访问要么都是读取，要么通过同步操作强制一个在另一个之前发生而分开执行，则程序被称为无数据竞争的。\n","permalink":"https://notes.0081800.xyz/notes/20210712164357-%E5%BC%B1%E6%9C%89%E5%BA%8F%E5%92%8C%E6%97%A0%E6%95%B0%E6%8D%AE%E7%AB%9E%E4%BA%89_drf/","summary":"弱有序是 Sarita Adve 和 Mark Hill 在他们 1990 年的论文 Weak Ordering - A New Definition (1990) 提出。\n定义如下\nLet a synchronization model be a set of constraints on memory accesses that specify how and when synchronization needs to be done.\n同步模型是对内存访问的一组约束，这些约束指定了何时以及如何进行同步。\n硬件相对于同步模型是弱有序的，当且仅当它在顺序上与遵守同步模型的所有软件一致时。\nAdve和Hill提出了一种同步模型，他们称之为无数据竞争(data-race-free，DRF)。该模型假设硬件具有独立于普通内存读写的内存同步操作。普通的内存读写可以在同步操作之间重新排序，但不能在跨它们移动。(也就是说，同步操作也可用来做重新排序的内存屏障。)如果对于所有理想化的顺序一致的执行，从不同线程对同一位置的任何两个普通存储器访问要么都是读取，要么通过同步操作强制一个在另一个之前发生而分开执行，则程序被称为无数据竞争的。","title":"弱有序和无数据竞争（DRF）"},{"content":"ARM和POWER系统的概念模型是，每个处理器从其自己的完整内存副本中读取和向其写入，每个写入独立地传播到其他处理器，随着写入的传播，允许重新排序。\n在这个宽松的(relaxed)模型中，我们迄今为止所看到的每一个litmus test的答案都是“yes，这真的可能发生。”\nLitmus Test: Message Passing Can this program see r1 = 1, r2 = 0? // Thread 1 // Thread 2 x = 1 r1 = y y = 1 r2 = x On sequentially consistent hardware: no. On x86 (or other TSO): no. On ARM/POWER: yes! Litmus Test: Store Buffering Can this program see r1 = 0, r2 = 0? // Thread 1 // Thread 2 x = 1 y = 1 r1 = y r2 = x On sequentially consistent hardware: no. On x86 (or other TSO): yes! On ARM/POWER: yes! Litmus Test: Independent Reads of Independent Writes (IRIW) Can this program see r1 = 1, r2 = 0, r3 = 1, r4 = 0? (Can Threads 3 and 4 see x and y change in different orders?) // Thread 1 // Thread 2 // Thread 3 // Thread 4 x = 1 y = 1 r1 = x r3 = y r2 = y r4 = x On sequentially consistent hardware: no. On x86 (or other TSO): no. On ARM/POWER: yes! Litmus Test: Load Buffering Can this program see r1 = 1, r2 = 1? (Can each thread\u0026#39;s read happen after the other thread\u0026#39;s write?) // Thread 1 // Thread 2 r1 = x r2 = y y = 1 x = 1 On sequentially consistent hardware: no. On x86 (or other TSO): no. On ARM/POWER: yes! ","permalink":"https://notes.0081800.xyz/notes/20210712162917-arm_power_relaxed_memory_model/","summary":"ARM和POWER系统的概念模型是，每个处理器从其自己的完整内存副本中读取和向其写入，每个写入独立地传播到其他处理器，随着写入的传播，允许重新排序。\n在这个宽松的(relaxed)模型中，我们迄今为止所看到的每一个litmus test的答案都是“yes，这真的可能发生。”\nLitmus Test: Message Passing Can this program see r1 = 1, r2 = 0? // Thread 1 // Thread 2 x = 1 r1 = y y = 1 r2 = x On sequentially consistent hardware: no. On x86 (or other TSO): no. On ARM/POWER: yes! Litmus Test: Store Buffering Can this program see r1 = 0, r2 = 0? // Thread 1 // Thread 2 x = 1 y = 1 r1 = y r2 = x On sequentially consistent hardware: no.","title":"ARM/POWER Relaxed Memory Model"},{"content":"内存屏障（或栅栏）是非顺序一致性的硬件提供的一种显式指令，用于控制排序提供更强的内存排序，修复同步算法。\n添加内存屏障，确保每个线程在开始读取之前都会刷新其先前对内存的写入：\n// Thread 1 // Thread 2 x = 1 y = 1 barrier barrier r1 = y r2 = x x86 总存储有序（x86-TSO) 加上内存屏障之后 r1=0, r2=0 就会变得不可能。\n","permalink":"https://notes.0081800.xyz/notes/20210712162102-%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C/","summary":"内存屏障（或栅栏）是非顺序一致性的硬件提供的一种显式指令，用于控制排序提供更强的内存排序，修复同步算法。\n添加内存屏障，确保每个线程在开始读取之前都会刷新其先前对内存的写入：\n// Thread 1 // Thread 2 x = 1 y = 1 barrier barrier r1 = y r2 = x x86 总存储有序（x86-TSO) 加上内存屏障之后 r1=0, r2=0 就会变得不可能。","title":"内存屏障"},{"content":" x86 总存储有序(x86 Total Store Order, x86-TSO)：所有处理器仍然连接到一个共享内存，但是每个处理器都将对该内存的写入(write)放入到本地写入队列中。处理器继续执行新指令，同时写操作(write)会更新到这个共享内存。一个处理器上的内存读取在查询主内存之前会查询本地写队列，但它看不到其他处理器上的写队列。其效果就是当前处理器比其他处理器会先看到自己的写操作。\n重要的是： 所有处理器都保证写入（存储 store）到共享内存的（总）顺序，所以给这个模型起了个名字：总存储有序（Total Store Order，TSO）。\n写队列是一个标准的先进先出队列：内存写操作总是以与处理器执行相同顺序的应用于共享内存。\n基于以上下面 litmus test 的答案依然是 no ，这种情况与顺序一致性模型结果一致：\nLitmus Test: Message Passing Can this program see r1 = 1, r2 = 0? // Thread 1 // Thread 2 x = 1 r1 = y y = 1 r2 = x On sequentially consistent hardware: no. On x86 (or other TSO): no. 但其他测试则并不一致区分与顺序一致性的常用例子:\nLitmus Test: Write Queue (also called Store Buffer) Can this program see r1 = 0, r2 = 0? // Thread 1 // Thread 2 x = 1 y = 1 r1 = y r2 = x On sequentially consistent hardware: no. On x86 (or other TSO): yes! TSO 系统中，线程 1和 2 可能会将它们的写操作排队，然后任何一个写操作进入内存之前从内存中读取，这两个读操作都会看到零。但是任何顺序一致的执行中， x=1 或 y=1 必会有一个首先生效。\n如果基于 TSO 系统需要更强的内存排序，可以使用内存屏障。\n一旦一个写操作到达主存储器，所有处理器不仅同认同该值存在，而且还认同它相对于来自其他处理器的写操作的先后顺序。考虑一下这个litmus test:\nLitmus Test: Independent Reads of Independent Writes (IRIW) Can this program see r1 = 1, r2 = 0, r3 = 1, r4 = 0? (Can Threads 3 and 4 see x and y change in different orders?) // Thread 1 // Thread 2 // Thread 3 // Thread 4 x = 1 y = 1 r1 = x r3 = y r2 = y r4 = x On sequentially consistent hardware: no. On x86 (or other TSO): no. ","permalink":"https://notes.0081800.xyz/notes/20210712155827-x86_%E6%80%BB%E5%AD%98%E5%82%A8%E6%9C%89%E5%BA%8F_x86_tso/","summary":"x86 总存储有序(x86 Total Store Order, x86-TSO)：所有处理器仍然连接到一个共享内存，但是每个处理器都将对该内存的写入(write)放入到本地写入队列中。处理器继续执行新指令，同时写操作(write)会更新到这个共享内存。一个处理器上的内存读取在查询主内存之前会查询本地写队列，但它看不到其他处理器上的写队列。其效果就是当前处理器比其他处理器会先看到自己的写操作。\n重要的是： 所有处理器都保证写入（存储 store）到共享内存的（总）顺序，所以给这个模型起了个名字：总存储有序（Total Store Order，TSO）。\n写队列是一个标准的先进先出队列：内存写操作总是以与处理器执行相同顺序的应用于共享内存。\n基于以上下面 litmus test 的答案依然是 no ，这种情况与顺序一致性模型结果一致：\nLitmus Test: Message Passing Can this program see r1 = 1, r2 = 0? // Thread 1 // Thread 2 x = 1 r1 = y y = 1 r2 = x On sequentially consistent hardware: no. On x86 (or other TSO): no. 但其他测试则并不一致区分与顺序一致性的常用例子:\nLitmus Test: Write Queue (also called Store Buffer) Can this program see r1 = 0, r2 = 0?","title":"x86 总存储有序（x86-TSO)"},{"content":"下面这种关于样本结果的问题被称为 litmus test 。它只有两个答案：可能还是不可能？为我们提供了一种区分内存一致性模型的清晰方法：如果一个模型支持特定的执行，而另一个不支持，那么这两个模型显然不同。\nlitmus test 假设所有变量都初始为 0 ， rN 表示非共享变量，而是一个线程本地寄存器。\nLitmus Test: Message Passing Can this program see r1 = 1, r2 = 0? // Thread 1 // Thread 2 x = 1 r1 = y y = 1 r2 = x 然而不幸的是，一个特定的模型对一个特定的 litmus test 给出的答案往往令人惊讶。\n","permalink":"https://notes.0081800.xyz/notes/20210712153952-litmus_test/","summary":"下面这种关于样本结果的问题被称为 litmus test 。它只有两个答案：可能还是不可能？为我们提供了一种区分内存一致性模型的清晰方法：如果一个模型支持特定的执行，而另一个不支持，那么这两个模型显然不同。\nlitmus test 假设所有变量都初始为 0 ， rN 表示非共享变量，而是一个线程本地寄存器。\nLitmus Test: Message Passing Can this program see r1 = 1, r2 = 0? // Thread 1 // Thread 2 x = 1 r1 = y y = 1 r2 = x 然而不幸的是，一个特定的模型对一个特定的 litmus test 给出的答案往往令人惊讶。","title":"litmus test"},{"content":"Leslie Lamport 1979 年的论文 How to Make a Multiprocessor Computer That Correctly Executes Multiprocess Programs 定义：\nThe customary approach to designing and proving the correctness of multiprocess algorithms for such a computer assumes that the following condition is satisfied: the result of any execution is the same as if the operations of all the processors were executed in some sequential order, and the operations of each individual processor appear in this sequence in the order specified by its program. A multiprocessor satisfying this condition will be called sequentially consistent.\n为这种计算机设计和证明多处理算法正确性的通常方法假定满足下列条件:任何执行的结果都是相同的，就好像所有处理器的操作都是按某种顺序执行的，每个处理器的操作都是按程序指定的顺序出现的。满足这一条件的多处理器系统将被称为顺序一致的。\n顺序一致性允许程序员假设程序按照它们在源码中组织相同的顺序执行，并且单个线程的执行只是以某种顺序交替（interleaving），而不是以其他方式排列。\n看一下下面这个 litmus test：\nLitmus Test: Message Passing Can this program see r1 = 1, r2 = 0? // Thread 1 // Thread 2 x = 1 r1 = y y = 1 r2 = x 如果 litmus test 的执行顺序一致，则有六种可能的交替：\n所以这个 litmus test 的答案是 no 。\n不幸得时，实践中现在硬件都会偏离顺序一致性来放弃严格的顺序一致性可以让硬件更快的执行程序。\n","permalink":"https://notes.0081800.xyz/notes/20210712151942-%E9%A1%BA%E5%BA%8F%E4%B8%80%E8%87%B4%E6%80%A7/","summary":"Leslie Lamport 1979 年的论文 How to Make a Multiprocessor Computer That Correctly Executes Multiprocess Programs 定义：\nThe customary approach to designing and proving the correctness of multiprocess algorithms for such a computer assumes that the following condition is satisfied: the result of any execution is the same as if the operations of all the processors were executed in some sequential order, and the operations of each individual processor appear in this sequence in the order specified by its program.","title":"顺序一致性"},{"content":" tags: 一致性，Memory Model 当执行给定程序时，硬件和编译器之间的契约，对编译后后的代码对存储在内存中的数据更改的可见性和一致性。 这种契约称为「内存一致性模型（Memeory Consistency Model）」或仅仅是「内存模型（Memory Model）」。\n最初目标是定义程序员编写汇编代码时硬件提供的保证，后来用来定义高级编程语言（如 C++ 或 Java）对该语言编写代码的程序员提供的保证。\n例如下面变量都初始为 0 的情况下，线程 1 和 2 都运行在自己专用的处理器上，都运行到完成，这个程序能打印 0 吗？\n// Thread 1 // Thread 2 x = 1; while(done == 0) { /* loop */ } done = 1; print(x); Memory coherence vs consistency 内存一致性（coherence） 内存顺序一致性（sequential consistency） 硬件 顺序一致性 x86 总存储有序（x86-TSO) ARM/POWER Relaxed Memory Model 弱有序和无数据竞争（DRF） 编程语言内存模型 ","permalink":"https://notes.0081800.xyz/notes/20210712150516-%E5%86%85%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7%E6%A8%A1%E5%9E%8B/","summary":" tags: 一致性，Memory Model 当执行给定程序时，硬件和编译器之间的契约，对编译后后的代码对存储在内存中的数据更改的可见性和一致性。 这种契约称为「内存一致性模型（Memeory Consistency Model）」或仅仅是「内存模型（Memory Model）」。\n最初目标是定义程序员编写汇编代码时硬件提供的保证，后来用来定义高级编程语言（如 C++ 或 Java）对该语言编写代码的程序员提供的保证。\n例如下面变量都初始为 0 的情况下，线程 1 和 2 都运行在自己专用的处理器上，都运行到完成，这个程序能打印 0 吗？\n// Thread 1 // Thread 2 x = 1; while(done == 0) { /* loop */ } done = 1; print(x); Memory coherence vs consistency 内存一致性（coherence） 内存顺序一致性（sequential consistency） 硬件 顺序一致性 x86 总存储有序（x86-TSO) ARM/POWER Relaxed Memory Model 弱有序和无数据竞争（DRF） 编程语言内存模型 ","title":"内存一致性模型"},{"content":" tags: Memory Model,Programming Language,Computer Systems Programming Language Memory Models 编程语言内存模型 编程语言内存模型回答了并行程序可以依靠什么行为以便它们的线程之间可以共享内存的问题。\n首先需要理解原子变量（atomic variable）或原子操作（tomic operation），编程语言模型作为程序员和编译器之间的约定规定了它们之间所需要的额外细节。\n硬件、Litmus Tests、Happens Before 和 DRF-SC 程序使用DRF-SC 系统同步指令在多个处理器运行的代码之间创建一种“happens before”的关系。\nThread 1 和 Thread 2 执行 S(a) 同步指令。在这个特定执行中，两条 S(a) 指令建立了从 Thread 1 到 Thread 2 的 happens-before 关系，因此 Thread 1 中的 = W(x)= 发生在 Thread 2 中的 R(x) 之前。\n","permalink":"https://notes.0081800.xyz/topics/20210712143544-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/","summary":"tags: Memory Model,Programming Language,Computer Systems Programming Language Memory Models 编程语言内存模型 编程语言内存模型回答了并行程序可以依靠什么行为以便它们的线程之间可以共享内存的问题。\n首先需要理解原子变量（atomic variable）或原子操作（tomic operation），编程语言模型作为程序员和编译器之间的约定规定了它们之间所需要的额外细节。\n硬件、Litmus Tests、Happens Before 和 DRF-SC 程序使用DRF-SC 系统同步指令在多个处理器运行的代码之间创建一种“happens before”的关系。\nThread 1 和 Thread 2 执行 S(a) 同步指令。在这个特定执行中，两条 S(a) 指令建立了从 Thread 1 到 Thread 2 的 happens-before 关系，因此 Thread 1 中的 = W(x)= 发生在 Thread 2 中的 R(x) 之前。","title":"编程语言内存模型"},{"content":" tags: Memory Model,Computer Systems Hardware Memory Models 硬件内存模型 内存模型 内存一致性模型\n","permalink":"https://notes.0081800.xyz/notes/20210712143220-%E7%A1%AC%E4%BB%B6%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/","summary":"tags: Memory Model,Computer Systems Hardware Memory Models 硬件内存模型 内存模型 内存一致性模型","title":"硬件内存模型"},{"content":" tags: Emacs 优化 GC 参考：LSP Mode Performance\n;; Optmization ;; Sources: ;; ;; - https://www.reddit.com/r/emacs/comments/ofhket/further_boost_start_up_time_with_a_simple_tweak/ ;; - https://emacs-lsp.github.io/lsp-mode/page/performance/ ;; (setq gc-cons-threshold 32000000) ;; 32mb (setq read-process-output-max (* 1024 1024)) ;; 1mb 将启动速度优化到 3 秒左右。\nDumping Emacs Emacs WIKI: Dumping Emacs Painless Transition to Portable Dumper ","permalink":"https://notes.0081800.xyz/notes/20210712114303-emacs_%E4%BC%98%E5%8C%96%E5%90%AF%E5%8A%A8%E9%80%9F%E5%BA%A6/","summary":" tags: Emacs 优化 GC 参考：LSP Mode Performance\n;; Optmization ;; Sources: ;; ;; - https://www.reddit.com/r/emacs/comments/ofhket/further_boost_start_up_time_with_a_simple_tweak/ ;; - https://emacs-lsp.github.io/lsp-mode/page/performance/ ;; (setq gc-cons-threshold 32000000) ;; 32mb (setq read-process-output-max (* 1024 1024)) ;; 1mb 将启动速度优化到 3 秒左右。\nDumping Emacs Emacs WIKI: Dumping Emacs Painless Transition to Portable Dumper ","title":"Emacs 优化启动速度"},{"content":"为什么不用取模？ 节点数发生变化时，会导致很多关键字需要做节点数据迁移，会大大增加再平衡的成本。\n固定数量的分区 创建远超实际节点数的分区数量，然后再为每个节点分配多个分区。\n新加入节点 从现有的节点上匀走几个分区，直到分区再次达到平衡。\n删除节点 采取和上面相反的过程。\n优点 分区总数量不变，也不会改变关键字的分区映射关系。 唯一需要调整的分区与节点的映射关系。 分区和节点的映射关系调整可以逐步完成。 缺点 分区数量需要数据库创建时确定，并不能更改 动态分区 分区数据增长超过一个可配参数的阈值（HBase 10GB），它就拆分为两个分区，相反则合并相邻的分区。过程类似B-trees 的分裂操作。\n每个分区总是分配一个节点，一个节点可以承载多个分区。\n分区分裂 将其中的一半转移到其他节点以平衡负载。\n优点 分区数量可以自动适配数据总量。 空数据库可以配置初始分区解决少量数据集就一个分区避免系统热点（HBase 和 MongoDB） 按节点比例分区 使分区数与集群节点数成正比关系（Cassandra 和 Ketama），就是每个节点具有固定数量的分区。 当节点数不变时，每个分区的大小与数据集大小保持正比增长关系。\n新加入节点 随机选择固定数量的现有分区进行分裂，然后拿走这些分区的一半数据量。\n优点 较大的数据可以使每个分区的大小保持稳定。 缺点 存在不公平分裂。 ","permalink":"https://notes.0081800.xyz/notes/20210712072221-%E5%8A%A8%E6%80%81%E5%86%8D%E5%B9%B3%E8%A1%A1%E7%AD%96%E7%95%A5/","summary":"为什么不用取模？ 节点数发生变化时，会导致很多关键字需要做节点数据迁移，会大大增加再平衡的成本。\n固定数量的分区 创建远超实际节点数的分区数量，然后再为每个节点分配多个分区。\n新加入节点 从现有的节点上匀走几个分区，直到分区再次达到平衡。\n删除节点 采取和上面相反的过程。\n优点 分区总数量不变，也不会改变关键字的分区映射关系。 唯一需要调整的分区与节点的映射关系。 分区和节点的映射关系调整可以逐步完成。 缺点 分区数量需要数据库创建时确定，并不能更改 动态分区 分区数据增长超过一个可配参数的阈值（HBase 10GB），它就拆分为两个分区，相反则合并相邻的分区。过程类似B-trees 的分裂操作。\n每个分区总是分配一个节点，一个节点可以承载多个分区。\n分区分裂 将其中的一半转移到其他节点以平衡负载。\n优点 分区数量可以自动适配数据总量。 空数据库可以配置初始分区解决少量数据集就一个分区避免系统热点（HBase 和 MongoDB） 按节点比例分区 使分区数与集群节点数成正比关系（Cassandra 和 Ketama），就是每个节点具有固定数量的分区。 当节点数不变时，每个分区的大小与数据集大小保持正比增长关系。\n新加入节点 随机选择固定数量的现有分区进行分裂，然后拿走这些分区的一半数据量。\n优点 较大的数据可以使每个分区的大小保持稳定。 缺点 存在不公平分裂。 ","title":"动态再平衡策略"},{"content":"对所有数据构建全局索引，为了避免瓶颈，对索引本身进行分区，比如：\n将 a～r 开始的关键字放在分区 0 将 s～z 开始的关键字放在分区 1 优点 可以支持高效的区间查询 读取更为高效 缺点 写入速度慢，会引入明显的写入放大 写入逻辑复杂 难以保证索引时刻最新，需要跨多个相关分区的分布式事务支持 实践 对全局二级索引的更新往往都是异步的。\n","permalink":"https://notes.0081800.xyz/notes/20210712071502-%E5%9F%BA%E4%BA%8E%E8%AF%8D%E6%9D%A1%E7%9A%84%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95%E5%88%86%E5%8C%BA/","summary":"对所有数据构建全局索引，为了避免瓶颈，对索引本身进行分区，比如：\n将 a～r 开始的关键字放在分区 0 将 s～z 开始的关键字放在分区 1 优点 可以支持高效的区间查询 读取更为高效 缺点 写入速度慢，会引入明显的写入放大 写入逻辑复杂 难以保证索引时刻最新，需要跨多个相关分区的分布式事务支持 实践 对全局二级索引的更新往往都是异步的。","title":"基于词条的二级索引分区"},{"content":"每个分区各自维护自身的二级索引，读取时需要对所有分区节点进行查询然后对结果进行合并。\n这种方法虽然二级索引查询代价高，但依然广泛用于实践：MongoDB、Riak、Cassandra、ElasticSearch、SolrCloud 和 VoltDB。\n","permalink":"https://notes.0081800.xyz/notes/20210712071105-%E5%9F%BA%E4%BA%8E%E6%96%87%E6%A1%A3%E5%88%86%E5%8C%BA%E7%9A%84%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95/","summary":"每个分区各自维护自身的二级索引，读取时需要对所有分区节点进行查询然后对结果进行合并。\n这种方法虽然二级索引查询代价高，但依然广泛用于实践：MongoDB、Riak、Cassandra、ElasticSearch、SolrCloud 和 VoltDB。","title":"基于文档分区的二级索引"},{"content":"可以基于关键值哈希函数的方式分区，解决基于关键字区间分区数据倾斜与热点的问题。一个好的哈希函数可以处理数据倾斜并使其均匀分布，并且不需要在加密方面很强。\n优点 这种方法可以很好的将关键字均匀分配到多个分区中。\n缺点 丧失良好的区间查询性能。即使关键字相邻，也会分布在不同的分区上。\n","permalink":"https://notes.0081800.xyz/notes/20210711171149-%E5%9F%BA%E4%BA%8E%E5%85%B3%E9%94%AE%E5%AD%97%E5%93%88%E5%B8%8C%E5%80%BC%E5%88%86%E5%8C%BA/","summary":"可以基于关键值哈希函数的方式分区，解决基于关键字区间分区数据倾斜与热点的问题。一个好的哈希函数可以处理数据倾斜并使其均匀分布，并且不需要在加密方面很强。\n优点 这种方法可以很好的将关键字均匀分配到多个分区中。\n缺点 丧失良好的区间查询性能。即使关键字相邻，也会分布在不同的分区上。","title":"基于关键字哈希值分区"},{"content":"为每个分区分配一段连续的关键字或者关键字区间范围。\n","permalink":"https://notes.0081800.xyz/notes/20210711154220-%E5%9F%BA%E4%BA%8E%E5%85%B3%E9%94%AE%E5%AD%97%E5%8C%BA%E9%97%B4%E5%88%86%E5%8C%BA/","summary":"为每个分区分配一段连续的关键字或者关键字区间范围。","title":"基于关键字区间分区"},{"content":"负载倾斜会导致所有负载都集中在一个分区节点上，这种负载严重不成比例的分区即称为系统热点。\n应用层解决 即使通过基于关键字哈希值分区和基于关键字区间分区等策略解决了大部分热点问题，但是极端情况下依然会出现热点，比如社交媒体的热点时间都会导致热点，只能通过应用层解决，一个简单的技术：\n关键字开头或结尾添加一个随机数，两位随机数就可以将关键字的写操作分布到 100 个不同的分区上； 读取就必须从所有的 1000 个关键字中读取数据然后进行合并； 通过额外的元数据标记哪些关键字进行了特殊处理。 由于对读取造成的额外开销，所以通常只有对少量的热点关键词附加随机数才有意义。\n","permalink":"https://notes.0081800.xyz/notes/20210711153934-%E7%B3%BB%E7%BB%9F%E7%83%AD%E7%82%B9/","summary":"负载倾斜会导致所有负载都集中在一个分区节点上，这种负载严重不成比例的分区即称为系统热点。\n应用层解决 即使通过基于关键字哈希值分区和基于关键字区间分区等策略解决了大部分热点问题，但是极端情况下依然会出现热点，比如社交媒体的热点时间都会导致热点，只能通过应用层解决，一个简单的技术：\n关键字开头或结尾添加一个随机数，两位随机数就可以将关键字的写操作分布到 100 个不同的分区上； 读取就必须从所有的 1000 个关键字中读取数据然后进行合并； 通过额外的元数据标记哪些关键字进行了特殊处理。 由于对读取造成的额外开销，所以通常只有对少量的热点关键词附加随机数才有意义。","title":"系统热点"},{"content":"分区不均匀时出现某些分区节点比其他分区承担更多的数据量和查询负载。倾斜会导致分区效率严重下降。\n","permalink":"https://notes.0081800.xyz/notes/20210711153606-%E8%B4%9F%E8%BD%BD%E5%80%BE%E6%96%9C/","summary":"分区不均匀时出现某些分区节点比其他分区承担更多的数据量和查询负载。倾斜会导致分区效率严重下降。","title":"负载倾斜"},{"content":"每一条数据都属于特定的分区，每个分区都是一个小型数据库。\n目的 提高扩展性，分散大的数据集和查询负载。\n目标 将数据和查询负载均匀的分步在所有节点上。如果分布不均匀会出现负载倾斜和系统热点。\n数据分区与数据复制 结合数据复制每个分区在多个节点都有副本，进行冗余提高可用性。\n键-值数据的分区 避免系统热点最简单的方法是将记录随机分配给所有节点上，缺点是：没办法知道数据保存在哪个节点上，所以读取时需要查询所有节点。\n基于关键字区间分区 基于关键字哈希值分区 负载倾斜与系统热点 分区与二级索引 二级索引不能唯一标识一条记录，比如查询颜色为红色的汽车。二级索引带来的主要挑战是它们不能规整的映射到分区中。\n有两种方法来支持对二级索引进行分区：\n基于文档分区的二级索引 基于词条的二级索引分区 分区再平衡 动态再平衡策略 自动与手动再平衡操作 请求路由 策略 客户端可以连接任意节点，并由节点做转发不在当前节点的分区请求。 由路由层来充当分区感知的负载均衡器。 客户端直接感知分区和节点分配关系，客户端直连目标节点。 做出路由决策的组件 Zookeeper gossip 协议 ","permalink":"https://notes.0081800.xyz/notes/20210711153015-%E6%95%B0%E6%8D%AE%E5%88%86%E5%8C%BA/","summary":"每一条数据都属于特定的分区，每个分区都是一个小型数据库。\n目的 提高扩展性，分散大的数据集和查询负载。\n目标 将数据和查询负载均匀的分步在所有节点上。如果分布不均匀会出现负载倾斜和系统热点。\n数据分区与数据复制 结合数据复制每个分区在多个节点都有副本，进行冗余提高可用性。\n键-值数据的分区 避免系统热点最简单的方法是将记录随机分配给所有节点上，缺点是：没办法知道数据保存在哪个节点上，所以读取时需要查询所有节点。\n基于关键字区间分区 基于关键字哈希值分区 负载倾斜与系统热点 分区与二级索引 二级索引不能唯一标识一条记录，比如查询颜色为红色的汽车。二级索引带来的主要挑战是它们不能规整的映射到分区中。\n有两种方法来支持对二级索引进行分区：\n基于文档分区的二级索引 基于词条的二级索引分区 分区再平衡 动态再平衡策略 自动与手动再平衡操作 请求路由 策略 客户端可以连接任意节点，并由节点做转发不在当前节点的分区请求。 由路由层来充当分区感知的负载均衡器。 客户端直接感知分区和节点分配关系，客户端直连目标节点。 做出路由决策的组件 Zookeeper gossip 协议 ","title":"数据分区"},{"content":" syn::Span 代码位置 ","permalink":"https://notes.0081800.xyz/notes/20210616144616-syn/","summary":" syn::Span 代码位置 ","title":"syn"},{"content":"循环展开 let fields = vec![ syn::Ident::new(\u0026#34;foo\u0026#34;, syn::Span::call_site()), syn::Ident::new(\u0026#34;bar\u0026#34;, syn::Span::call_site()), ]; let token = quote!{ #(#fields),* }; // -\u0026gt; foo,bar ","permalink":"https://notes.0081800.xyz/notes/20210616144334-quote/","summary":"循环展开 let fields = vec![ syn::Ident::new(\u0026#34;foo\u0026#34;, syn::Span::call_site()), syn::Ident::new(\u0026#34;bar\u0026#34;, syn::Span::call_site()), ]; let token = quote!{ #(#fields),* }; // -\u0026gt; foo,bar ","title":"quote"},{"content":"准备 解析宏通过两个 crate 进行：\nquote = \u0026ldquo;1.0\u0026rdquo; syn = \u0026ldquo;1.0\u0026rdquo; Derive 属性宏 探讨 Rust 宏系统中带属性（Attributes）的 Derive 宏的几种变体，以及如何进行解析。\n属性宏的变体 函数调用\n#[derive(Custom)] struct Demo { #[attr(arg)] a: i8, } 关键字参数调用\n#[derive(Custom)] struct Demo { #[args(name = \u0026#34;val\u0026#34;)] b: i8, } 直接赋值\n#[derive(Custom)] struct Demo { #[meta = \u0026#34;val\u0026#34;] c: i8, } 函数调用 关键字参数调用 可以从 Struct 解析出各个字段，通过解析各个字段的 attrs 属性，并对 attrs 进行遍历，使用 attr.parse_args()? 即可解析出对应的关键字参数，咱们以前面的代码为例:\n#[derive(Custom)] struct Demo { #[args(name = \u0026#34;val\u0026#34;)] b: i8, } 对应的解析代码为：\nuse proc_macro::TokenStream; use quote::quote; use syn::{self, parse, DeriveInput}; #[proc_macro_derive(Custom, attributes(args))] pub fn derive(input: TokenStream) -\u0026gt; TokenStream { let ast: DeriveInput = parse(input).unwrap(); let name = \u0026amp;ast.ident; let mut debug_fields = vec![]; if let syn::Data::Struct(ds) = ast.data { if let syn::Fields::Named(fields) = ds.fields { for field in fields.named.iter() { let field_name = field.ident.clone().unwrap(); if let Some(attr) = field.attrs.clone().iter().next() { match parse_args_attr_value(\u0026amp;attr) { Ok(v) =\u0026gt; { // TODO }, Err(err) =\u0026gt; return err.to_compile_error().into(), } } } } } let tokens = quote!{ }; tokens.into() } fn parse_args_attr_value(attr: \u0026amp;syn::Attribute) -\u0026gt; Result\u0026lt;Option\u0026lt;syn::LitStr\u0026gt;, syn::Error\u0026gt; { if let Some(seg) = attr.path.segments.first() { if seg.ident == \u0026#34;args\u0026#34; { let args = attr.parse_args()?; if let syn::Meta::NameValue(values) = args { let arg_name = \u0026amp;values.path.segments.first().unwrap().ident; if arg_name == \u0026#34;name\u0026#34; { if let syn::Lit::Str(name) = values.lit { return Ok(Some(name)); } } else { return Err(syn::Error::new(attr.bracket_token.span, \u0026#34;expected `args(name = \\\u0026#34;...\\\u0026#34;)`\u0026#34;.to_owned())); } } } } return Ok(None) } 直接赋值 直接赋值类似于上面的关键字解析调用，但是对应的 attr.parse_args 需要替换为 attr.parse_meta ，比如解析：\n#[derive(Custom)] struct Demo { #[meta = \u0026#34;val\u0026#34;] c: i8, } 对应的代码如下\nuse proc_macro::TokenStream; use quote::quote; use syn::{self, parse, DeriveInput}; #[proc_macro_derive(Custom, attributes(args))] pub fn derive(input: TokenStream) -\u0026gt; TokenStream { let ast: DeriveInput = parse(input).unwrap(); let name = \u0026amp;ast.ident; let mut debug_fields = vec![]; if let syn::Data::Struct(ds) = ast.data { if let syn::Fields::Named(fields) = ds.fields { for field in fields.named.iter() { let field_name = field.ident.clone().unwrap(); if let Some(attr) = field.attrs.clone().iter().next() { match parse_meta_attr_value(\u0026amp;attr) { Ok(v) =\u0026gt; { // TODO }, Err(err) =\u0026gt; return err.to_compile_error().into(), } } } } } let tokens = quote!{ }; tokens.into() } fn parse_meta_attr_value(attr: \u0026amp;syn::Attribute) -\u0026gt; Result\u0026lt;Option\u0026lt;syn::LitStr\u0026gt;, syn::Error\u0026gt; { if let Some(seg) = attr.path.segments.first() { if seg.ident == \u0026#34;meta\u0026#34; { let args = attr.parse_meta()?; if let syn::Meta::NameValue(values) = args { let arg_name = \u0026amp;values.path.segments.first().unwrap().ident; if arg_name == \u0026#34;meta\u0026#34; { if let syn::Lit::Str(name) = values.lit { return Ok(Some(name)); } } else { return Err(syn::Error::new(attr.bracket_token.span, \u0026#34;expected `meta = \\\u0026#34;...\\\u0026#34;`\u0026#34;.to_owned())); } } } } return Ok(None) } ","permalink":"https://notes.0081800.xyz/notes/20210616141500-rust_%E5%B1%9E%E6%80%A7%E5%AE%8F%E8%A7%A3%E6%9E%90/","summary":"准备 解析宏通过两个 crate 进行：\nquote = \u0026ldquo;1.0\u0026rdquo; syn = \u0026ldquo;1.0\u0026rdquo; Derive 属性宏 探讨 Rust 宏系统中带属性（Attributes）的 Derive 宏的几种变体，以及如何进行解析。\n属性宏的变体 函数调用\n#[derive(Custom)] struct Demo { #[attr(arg)] a: i8, } 关键字参数调用\n#[derive(Custom)] struct Demo { #[args(name = \u0026#34;val\u0026#34;)] b: i8, } 直接赋值\n#[derive(Custom)] struct Demo { #[meta = \u0026#34;val\u0026#34;] c: i8, } 函数调用 关键字参数调用 可以从 Struct 解析出各个字段，通过解析各个字段的 attrs 属性，并对 attrs 进行遍历，使用 attr.parse_args()? 即可解析出对应的关键字参数，咱们以前面的代码为例:\n#[derive(Custom)] struct Demo { #[args(name = \u0026#34;val\u0026#34;)] b: i8, } 对应的解析代码为：","title":"Rust 属性宏解析"},{"content":"确定前后关系 服务器为每个主键维护一个版本号，每当主键新值写入时递增版本号，并将新版本号与写入值一起保存。 当客户端读取主键时，服务器将返回所有（未被覆盖的）当前值以及最新的版本号。且要求写入之前，客户端必须先发送读请求。 客户端写主键，写请求必须包含之前读到的版本号，读到的值和新值合并后的集合。写请求的响应可以像读操作一样，会返回所有当前值，这样可以一步步链接起多个写入的值。 当服务器收到带有特定版本号的写入时，覆盖该版本号或者更低版本的所有值，但必须保存更高版本号所有值。 当写请求包含了前一次读取的版本号时，意味着修改时基于以前的状态。否则它将与所有的其他写入同时进行，不会覆盖任何已有值，其传入的值将包含在后续读请求的返回值列表中。\n合并同时写入的值 上面算法不会导致数据丢失，但是客户端需要做一些额外的工作：如果多个操作并发发生，则客户端必须通过合并并发写入的值来继承旧值。同时删除需要特殊的墓碑标记，防止被合并回去。\n版本矢量 每个副本和每个主键均定义一个版本号，每个副本在处理时增加自己的版本号，并跟踪从其他副本看到的版本号。通过这些信息来指示要覆盖那些值，该保留那些并发值。\n所有的版本号集合称为版本矢量。\n","permalink":"https://notes.0081800.xyz/notes/20210615215426-happens_before_%E5%85%B3%E7%B3%BB%E5%92%8C%E5%B9%B6%E5%8F%91/","summary":"确定前后关系 服务器为每个主键维护一个版本号，每当主键新值写入时递增版本号，并将新版本号与写入值一起保存。 当客户端读取主键时，服务器将返回所有（未被覆盖的）当前值以及最新的版本号。且要求写入之前，客户端必须先发送读请求。 客户端写主键，写请求必须包含之前读到的版本号，读到的值和新值合并后的集合。写请求的响应可以像读操作一样，会返回所有当前值，这样可以一步步链接起多个写入的值。 当服务器收到带有特定版本号的写入时，覆盖该版本号或者更低版本的所有值，但必须保存更高版本号所有值。 当写请求包含了前一次读取的版本号时，意味着修改时基于以前的状态。否则它将与所有的其他写入同时进行，不会覆盖任何已有值，其传入的值将包含在后续读请求的返回值列表中。\n合并同时写入的值 上面算法不会导致数据丢失，但是客户端需要做一些额外的工作：如果多个操作并发发生，则客户端必须通过合并并发写入的值来继承旧值。同时删除需要特殊的墓碑标记，防止被合并回去。\n版本矢量 每个副本和每个主键均定义一个版本号，每个副本在处理时增加自己的版本号，并跟踪从其他副本看到的版本号。通过这些信息来指示要覆盖那些值，该保留那些并发值。\n所有的版本号集合称为版本矢量。","title":"Happens-before 关系和并发"},{"content":"LWW：最后写入者获胜 Happens-before 关系和并发 ","permalink":"https://notes.0081800.xyz/notes/20210615213433-%E6%A3%80%E6%B5%8B%E5%B9%B6%E5%8F%91%E5%86%99/","summary":"LWW：最后写入者获胜 Happens-before 关系和并发 ","title":"检测并发写"},{"content":"当节点不能满足 \\(w + r \u0026gt; n\\) 时将写请求暂时写入一些可访问的临时节点中，一旦网络问题得到交接，临时节点需要把接收的写入全部发送到原始主节点上。这就是所谓的数据回传（或者暗示移交）。\n","permalink":"https://notes.0081800.xyz/notes/20210615212500-sloppy_quorum/","summary":"当节点不能满足 \\(w + r \u0026gt; n\\) 时将写请求暂时写入一些可访问的临时节点中，一旦网络问题得到交接，临时节点需要把接收的写入全部发送到原始主节点上。这就是所谓的数据回传（或者暗示移交）。","title":"sloppy quorum"},{"content":" tags: 一致性 确定读写成功 确定读写节点在多少节点成功才可以认为写入成功：需要保证读取时至少一个包含新值。\nn 个副本的情况下，写入需要 \\(w\\) 个节点确认，读取必须至少查询 \\(r\\) 个节点，则只要 \\(w + r \u0026gt; n\\) ，读取的节点中一定会包含最新值。\n\\(w\\) 仲裁写（法定票数写） \\(r\\) 仲裁读（法定票说读） 一般 \\(n\\) 设置为奇数： \\(w=r=(n+1)/2\\) （向上取整）。\n可容忍的失效节点数 仲裁条件 \\(w+r\u0026gt;n\\) 定义了系统可容忍的失效节点数。\n\\(w\u0026lt;n\\) ，如果一个节点不可用，仍然可以处理写入。 \\(r\u0026lt;n\\) ，如果一个节点不可用，仍然可以处理读取。 \\(n=3\\),\\(w=2\\),\\(r=2\\)，则可以容忍一个节点不可用 \\(n=5\\),\\(w=3\\),\\(r=3\\), 则可以容忍两个节点不可用 局限性 如果采用了 sloppy quorum，写操作的 w 节点和读取的 r 节点可能完全不同，因此无法保证写请求一定存在重叠的节点。 并发无法明确顺序，需要进行合并并发写入。如最后写入者获胜。 同时读写，写操作在一部分节点上完成，则读取新值还是旧值存在不确定性。 部分节点写入成功，但是最终写入失败无法回滚。 新值的节点失效，但恢复数据来自某个旧值，则总的新值节点数低于 w 边界情况 ","permalink":"https://notes.0081800.xyz/notes/20210615211745-quorum_%E4%B8%80%E8%87%B4%E6%80%A7/","summary":" tags: 一致性 确定读写成功 确定读写节点在多少节点成功才可以认为写入成功：需要保证读取时至少一个包含新值。\nn 个副本的情况下，写入需要 \\(w\\) 个节点确认，读取必须至少查询 \\(r\\) 个节点，则只要 \\(w + r \u0026gt; n\\) ，读取的节点中一定会包含最新值。\n\\(w\\) 仲裁写（法定票数写） \\(r\\) 仲裁读（法定票说读） 一般 \\(n\\) 设置为奇数： \\(w=r=(n+1)/2\\) （向上取整）。\n可容忍的失效节点数 仲裁条件 \\(w+r\u0026gt;n\\) 定义了系统可容忍的失效节点数。\n\\(w\u0026lt;n\\) ，如果一个节点不可用，仍然可以处理写入。 \\(r\u0026lt;n\\) ，如果一个节点不可用，仍然可以处理读取。 \\(n=3\\),\\(w=2\\),\\(r=2\\)，则可以容忍一个节点不可用 \\(n=5\\),\\(w=3\\),\\(r=3\\), 则可以容忍两个节点不可用 局限性 如果采用了 sloppy quorum，写操作的 w 节点和读取的 r 节点可能完全不同，因此无法保证写请求一定存在重叠的节点。 并发无法明确顺序，需要进行合并并发写入。如最后写入者获胜。 同时读写，写操作在一部分节点上完成，则读取新值还是旧值存在不确定性。 部分节点写入成功，但是最终写入失败无法回滚。 新值的节点失效，但恢复数据来自某个旧值，则总的新值节点数低于 w 边界情况 ","title":"Quorum 一致性"},{"content":"没有主节点，允许任何节点接受来自客户端的写请求。\n实现方式 客户端直接将其写请求发送到多节点 一个协调者代表客户端进行写入，与主节点的数据库不同，协调者并不负责写入顺序的维护。 节点失效时写入数据库 客户端将写请求并行发送给三个节点，两个可用节点接受写请求，而不可用副本则无法处理该请求。\n现在失效的节点重新上线，客户端可能会读取到旧的值。\n为了解决这个问题客户端并行的向多个节点发送读请求，并通过版本号来确定哪个值更新。\n读修复与反熵 读修复；客户端并行读取多个节点，检测到过期的返回值，然后用新的返回值写入到返回旧值的副本。 反熵过程：后台不断查找副本之间的差异，将任何缺少的数据从一个节点复制到另一个节点。不保证特定顺序的复制写入，并且会引入明显的复制滞后问题。 Quorum 一致性 检测并发写 ","permalink":"https://notes.0081800.xyz/notes/20210615210219-%E6%97%A0%E4%B8%BB%E8%8A%82%E7%82%B9%E5%A4%8D%E5%88%B6/","summary":"没有主节点，允许任何节点接受来自客户端的写请求。\n实现方式 客户端直接将其写请求发送到多节点 一个协调者代表客户端进行写入，与主节点的数据库不同，协调者并不负责写入顺序的维护。 节点失效时写入数据库 客户端将写请求并行发送给三个节点，两个可用节点接受写请求，而不可用副本则无法处理该请求。\n现在失效的节点重新上线，客户端可能会读取到旧的值。\n为了解决这个问题客户端并行的向多个节点发送读请求，并通过版本号来确定哪个值更新。\n读修复与反熵 读修复；客户端并行读取多个节点，检测到过期的返回值，然后用新的返回值写入到返回旧值的副本。 反熵过程：后台不断查找副本之间的差异，将任何缺少的数据从一个节点复制到另一个节点。不保证特定顺序的复制写入，并且会引入明显的复制滞后问题。 Quorum 一致性 检测并发写 ","title":"无主节点复制"},{"content":"最常见的拓扑结构，提供更好的容错。每个节点从其他所有节点同步写入。\n","permalink":"https://notes.0081800.xyz/notes/20210615084309-%E5%85%A8%E9%83%A8_%E8%87%B3_%E5%85%A8%E9%83%A8%E5%9E%8B%E6%8B%93%E6%89%91/","summary":"最常见的拓扑结构，提供更好的容错。每个节点从其他所有节点同步写入。","title":"全部-至-全部型拓扑"},{"content":"通过指定一个根节点，根结点将所有的写操作转发给其他所有节点。\n","permalink":"https://notes.0081800.xyz/notes/20210615084143-%E6%98%9F%E5%9E%8B%E6%8B%93%E6%89%91/","summary":"通过指定一个根节点，根结点将所有的写操作转发给其他所有节点。","title":"星型拓扑"},{"content":"每个节点接收来自前序节点的写入，并将这些写入（加上字节的写入）转发后后序节点。同时通过唯一 ID 防止无限循环。\n","permalink":"https://notes.0081800.xyz/notes/20210615084010-%E7%8E%AF%E5%BD%A2%E6%8B%93%E6%89%91/","summary":"每个节点接收来自前序节点的写入，并将这些写入（加上字节的写入）转发后后序节点。同时通过唯一 ID 防止无限循环。","title":"环形拓扑"},{"content":"每个副本总是保存最新值，允许覆盖并丢弃旧值。假定每个写请求都最终同步到所有副本，只要我们有一个明确的方法来确定哪个写入时最新的，则副本可以最终收敛到相同的值。\n通过每个请求附加一个时间戳，选择最新即最大的时间戳，丢弃较早的写入。则为最后写入着获胜（last write wins，LWW）。\n缺点 会造成数据丢失。\n适用场景 缓存系统。 确保安全无副作用 唯一方法是只写入一次然后写入值视为不可变，这样旧避免对同一个主键的并发（覆盖）写。\n","permalink":"https://notes.0081800.xyz/notes/20210615083500-%E6%9C%80%E5%90%8E%E5%86%99%E5%85%A5%E8%80%85%E8%8E%B7%E8%83%9C/","summary":"每个副本总是保存最新值，允许覆盖并丢弃旧值。假定每个写请求都最终同步到所有副本，只要我们有一个明确的方法来确定哪个写入时最新的，则副本可以最终收敛到相同的值。\n通过每个请求附加一个时间戳，选择最新即最大的时间戳，丢弃较早的写入。则为最后写入着获胜（last write wins，LWW）。\n缺点 会造成数据丢失。\n适用场景 缓存系统。 确保安全无副作用 唯一方法是只写入一次然后写入值视为不可变，这样旧避免对同一个主键的并发（覆盖）写。","title":"最后写入者获胜"},{"content":"多个主节点看到的执行顺序不一致，病了同时按照各自看到的写入顺序执行，那么数据库最终将处于不一致状态。\n数据库必须以一种趋同的方式来解决冲突。\n可能的解决方式 给每个写入分配唯一的 ID，如基于时间戳的最后写入者获胜。 为每个主节点分配一个唯一 ID，序列号高的优先于序列号低的主节点，可能导致数据丢失 以某种方式合并值，如按照字母顺序拼接在一起 利用预定义号的格式记录，然后依靠应用层逻辑，事后解决冲突（可能会提示用户） ","permalink":"https://notes.0081800.xyz/notes/20210615083221-%E6%94%B6%E6%95%9B%E4%BA%8E%E4%B8%80%E8%87%B4%E7%9A%84%E7%8A%B6%E6%80%81/","summary":"多个主节点看到的执行顺序不一致，病了同时按照各自看到的写入顺序执行，那么数据库最终将处于不一致状态。\n数据库必须以一种趋同的方式来解决冲突。\n可能的解决方式 给每个写入分配唯一的 ID，如基于时间戳的最后写入者获胜。 为每个主节点分配一个唯一 ID，序列号高的优先于序列号低的主节点，可能导致数据丢失 以某种方式合并值，如按照字母顺序拼接在一起 利用预定义号的格式记录，然后依靠应用层逻辑，事后解决冲突（可能会提示用户） ","title":"收敛于一致的状态"},{"content":"应用层保证对特定记录的写请求总是通过同一个主节点，来避免发生些冲突。\n如用户更新自己的配置总是路由到特定的数据中心。\n缺点 特定数据中心发生故障不得不改变事先指定的主节点。\n","permalink":"https://notes.0081800.xyz/notes/20210615082908-%E9%81%BF%E5%85%8D%E5%86%B2%E7%AA%81/","summary":"应用层保证对特定记录的写请求总是通过同一个主节点，来避免发生些冲突。\n如用户更新自己的配置总是路由到特定的数据中心。\n缺点 特定数据中心发生故障不得不改变事先指定的主节点。","title":"避免冲突"},{"content":"对于一系列按照某个顺序发生的写请求，同时读取这些内容时也会按照当时写入的顺序。\n场景 分区数据库中出现的一个特殊问题。\n正常对话：\nP: C小姐，你能看到多远的文莱？\nC：大约 10s，P 先生。\n但是由于复制滞后，最终能被观察到的可能是：\nC：大约 10s，P 先生。\nP: C小姐，你能看到多远的文莱？\n解决方案 低效率：具有因果关系的写入都交给一个分区来完成。 新方法：跟踪事件因果关系。\n","permalink":"https://notes.0081800.xyz/notes/20210614211632-%E5%89%8D%E7%BC%80%E4%B8%80%E8%87%B4%E8%AF%BB/","summary":"对于一系列按照某个顺序发生的写请求，同时读取这些内容时也会按照当时写入的顺序。\n场景 分区数据库中出现的一个特殊问题。\n正常对话：\nP: C小姐，你能看到多远的文莱？\nC：大约 10s，P 先生。\n但是由于复制滞后，最终能被观察到的可能是：\nC：大约 10s，P 先生。\nP: C小姐，你能看到多远的文莱？\n解决方案 低效率：具有因果关系的写入都交给一个分区来完成。 新方法：跟踪事件因果关系。","title":"前缀一致读"},{"content":"是一种比强一致性弱但是比最终一致性效应强的保证，单调读保证：\n如果某个用户依次进行多次读取，则绝不会看到回滚的现象，即在读取到较新的值之后又发生读旧值的情况。\n场景 用户刷新网络，读请求被随机路由到某个从节点，先后从两个不同的从节点读取到了不同的内容，比如看到一个新添加的评论一次出现，一次消失。\n解决方案 按照用户 ID 进行哈希方法取代随机路由。\n","permalink":"https://notes.0081800.xyz/notes/20210614210918-%E5%8D%95%E8%B0%83%E8%AF%BB%E4%B8%80%E8%87%B4%E6%80%A7/","summary":"是一种比强一致性弱但是比最终一致性效应强的保证，单调读保证：\n如果某个用户依次进行多次读取，则绝不会看到回滚的现象，即在读取到较新的值之后又发生读旧值的情况。\n场景 用户刷新网络，读请求被随机路由到某个从节点，先后从两个不同的从节点读取到了不同的内容，比如看到一个新添加的评论一次出现，一次消失。\n解决方案 按照用户 ID 进行哈希方法取代随机路由。","title":"单调读一致性"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20210614210953-%E5%BC%BA%E4%B8%80%E8%87%B4%E6%80%A7/","summary":"","title":"强一致性"},{"content":"也称为「写后读一致性」，解决用户主节点写入后立马从从节点读取不到到情况。只能解决单用户的一致性，但是解决不了多用户的一致性。\n场景 用户新提交了评论，但是自己看不到，需要等一会才能看到。\n解决方案 记录更新时间戳，在指定时间内从主节点读取。\n","permalink":"https://notes.0081800.xyz/notes/20210614210755-%E8%AF%BB%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7/","summary":"也称为「写后读一致性」，解决用户主节点写入后立马从从节点读取不到到情况。只能解决单用户的一致性，但是解决不了多用户的一致性。\n场景 用户新提交了评论，但是自己看不到，需要等一会才能看到。\n解决方案 记录更新时间戳，在指定时间内从主节点读取。","title":"读写一致性"},{"content":"主从异步复制的情况下会导致数据库中出现明显不一致，此时从不同的从节点读取就会得到不一样的结果。这种不一致只是一个暂时状态，如果停止写入数据，经过一段时间之后，从节点最终会赶上并与主节点保持一致。\n这种效应被称为最终一致性。\n","permalink":"https://notes.0081800.xyz/notes/20210614210005-%E6%9C%80%E7%BB%88%E4%B8%80%E8%87%B4%E6%80%A7%E6%95%88%E5%BA%94/","summary":"主从异步复制的情况下会导致数据库中出现明显不一致，此时从不同的从节点读取就会得到不一样的结果。这种不一致只是一个暂时状态，如果停止写入数据，经过一段时间之后，从节点最终会赶上并与主节点保持一致。\n这种效应被称为最终一致性。","title":"最终一致性效应"},{"content":"异步同步的情况下出出现最终一致性效应复制滞后会导致：用户提交了修改到主节点，但是从从节点没有读取到最新的变更，比如看不到自己提交的评论等。\n读写一致性：读自己的写 一旦用户的数据最近发生改变则路由用户请求从主节点进行读取，规避复制滞后的问题。\n缺点：只保证单一用户写后读的的一致性，但是不保证多个用户的一致性。比如发了一条评论，自己能刷新到但是同在身边的朋友可能就刷新不到。\n单调读一致性 前缀一致读 解决方案 应用层可以提供比数据库更强有力的保证。 事务是数据库提供的更强保证的一种方式。 ","permalink":"https://notes.0081800.xyz/notes/20210614205621-%E5%A4%8D%E5%88%B6%E6%BB%9E%E5%90%8E%E9%97%AE%E9%A2%98/","summary":"异步同步的情况下出出现最终一致性效应复制滞后会导致：用户提交了修改到主节点，但是从从节点没有读取到最新的变更，比如看不到自己提交的评论等。\n读写一致性：读自己的写 一旦用户的数据最近发生改变则路由用户请求从主节点进行读取，规避复制滞后的问题。\n缺点：只保证单一用户写后读的的一致性，但是不保证多个用户的一致性。比如发了一条评论，自己能刷新到但是同在身边的朋友可能就刷新不到。\n单调读一致性 前缀一致读 解决方案 应用层可以提供比数据库更强有力的保证。 事务是数据库提供的更强保证的一种方式。 ","title":"复制滞后问题"},{"content":"基于语句复制 优点：简单 缺点：语句副作用，或者随时间改变返回值的函数的使用会导致复制的数据产生改变。\n基于预写日志（WAL）传输 优点：解决基于语句复制的问题。 缺点：日志描述过于底层：哪些磁盘块的哪些字节发生了改变，和引擎实现高度耦合，不利于模式演进。\n基于行的逻辑日志复制 用一系列记录来描述数据表行级别的写请求：\n对于插入行，日志包含所有相关列的新值。 对于删除行，标记主键删除。 对于行货更新，记录主键和对应列的新值。 MySQL binlog 基于此模式。\n优点：更利于模式演进，支持向后兼容，同时解耦特性引擎便于外部解析。\n基于触发器的复制 触发器支持注册自己的应用层代码并在数据发生改变时被调用。\n优点：将复制控制交给应用层，支持更高的灵活性。 缺点：开销更大，更容易出错。\n","permalink":"https://notes.0081800.xyz/notes/20210614205249-%E5%A4%8D%E5%88%B6%E6%97%A5%E5%BF%97%E5%AE%9E%E7%8E%B0/","summary":"基于语句复制 优点：简单 缺点：语句副作用，或者随时间改变返回值的函数的使用会导致复制的数据产生改变。\n基于预写日志（WAL）传输 优点：解决基于语句复制的问题。 缺点：日志描述过于底层：哪些磁盘块的哪些字节发生了改变，和引擎实现高度耦合，不利于模式演进。\n基于行的逻辑日志复制 用一系列记录来描述数据表行级别的写请求：\n对于插入行，日志包含所有相关列的新值。 对于删除行，标记主键删除。 对于行货更新，记录主键和对应列的新值。 MySQL binlog 基于此模式。\n优点：更利于模式演进，支持向后兼容，同时解耦特性引擎便于外部解析。\n基于触发器的复制 触发器支持注册自己的应用层代码并在数据发生改变时被调用。\n优点：将复制控制交给应用层，支持更高的灵活性。 缺点：开销更大，更容易出错。","title":"复制日志实现"},{"content":"主从模式下主节点进行写入，可以从从节点进行读取。\n同步复制 主节点写入，并等待从节点写入后再返回写入成功。\n半同步复制 主节点写入，选举一个从节点进行同步复制，其他从节点进行异步复制，一旦同步复制的从节点出现性能下降或故障则选用一个新的从节点进行同步复制。\n异步复制 主节点写入，不等待从节点写入直接返回写入成功。\n","permalink":"https://notes.0081800.xyz/notes/20210614203213-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/","summary":"主从模式下主节点进行写入，可以从从节点进行读取。\n同步复制 主节点写入，并等待从节点写入后再返回写入成功。\n半同步复制 主节点写入，选举一个从节点进行同步复制，其他从节点进行异步复制，一旦同步复制的从节点出现性能下降或故障则选用一个新的从节点进行同步复制。\n异步复制 主节点写入，不等待从节点写入直接返回写入成功。","title":"主从复制"},{"content":"主节点与从节点 复制 单个节点可以完整存放所有数据副本，节点间进行主从复制。\n配置新从节点 可以通过快照来加速新从节点复制：\n对主节点的数据副本产生一个一致性快照，避免长时间锁定数据库。 拷贝快照到从节点 请求快照后面的更改日志 应用数据变更 节点失效 从节点失效：追赶式恢复 主节点失效：节点切换 自动切换\n确认失效 选举新的主节点 使主节点生效 挑战\n从节点复制不完整 各个数据层数据不一致，如 MySQL 和 Redis 之间 多个主节点选举：脑裂 如何有效检测主节点失效 复制日志实现 复制滞后问题 多主节点复制 使用场景 多数据中心 优点：\n性能 容忍数据中心失效 容忍网络问题 缺点：写冲突\n离线客户端操作 协作编辑 处理写冲突 同步与异步冲突检测 同步：等待写请求完成对所有主节点的同步再通知用户写入成功。 异步：等待单一主节点写入成功后通知用户卸乳成功，稍后多主节点数据同步的时候才能检测到冲突 避免冲突 收敛于一致的状态 自定义冲突解决逻辑 写入时解决 读取时解决 拓扑结构 环形拓扑 星型拓扑 全部-至-全部型拓扑 无主节点复制 ","permalink":"https://notes.0081800.xyz/notes/20210614203122-%E6%95%B0%E6%8D%AE%E5%A4%8D%E5%88%B6/","summary":"主节点与从节点 复制 单个节点可以完整存放所有数据副本，节点间进行主从复制。\n配置新从节点 可以通过快照来加速新从节点复制：\n对主节点的数据副本产生一个一致性快照，避免长时间锁定数据库。 拷贝快照到从节点 请求快照后面的更改日志 应用数据变更 节点失效 从节点失效：追赶式恢复 主节点失效：节点切换 自动切换\n确认失效 选举新的主节点 使主节点生效 挑战\n从节点复制不完整 各个数据层数据不一致，如 MySQL 和 Redis 之间 多个主节点选举：脑裂 如何有效检测主节点失效 复制日志实现 复制滞后问题 多主节点复制 使用场景 多数据中心 优点：\n性能 容忍数据中心失效 容忍网络问题 缺点：写冲突\n离线客户端操作 协作编辑 处理写冲突 同步与异步冲突检测 同步：等待写请求完成对所有主节点的同步再通知用户写入成功。 异步：等待单一主节点写入成功后通知用户卸乳成功，稍后多主节点数据同步的时候才能检测到冲突 避免冲突 收敛于一致的状态 自定义冲突解决逻辑 写入时解决 读取时解决 拓扑结构 环形拓扑 星型拓扑 全部-至-全部型拓扑 无主节点复制 ","title":"数据复制"},{"content":" 当一个不可能出错的事物出错了，通常也就意味着不可修复 \u0026ndash; Douglas Adams，《基本无害》（1992） 关于写文档 There is a secret that needs to be understood in order to write good software documentation: there isn’t one thing called documentation, there are four.\nThey are: tutorials, how-to guides, technical reference and explanation. They represent four different purposes or functions, and require four different approaches to their creation. Understanding the implications of this will help improve most documentation - often immensely.\n","permalink":"https://notes.0081800.xyz/notes/20210612092853-%E8%AE%A4%E5%90%8C%E7%9A%84%E8%AF%9D/","summary":"当一个不可能出错的事物出错了，通常也就意味着不可修复 \u0026ndash; Douglas Adams，《基本无害》（1992） 关于写文档 There is a secret that needs to be understood in order to write good software documentation: there isn’t one thing called documentation, there are four.\nThey are: tutorials, how-to guides, technical reference and explanation. They represent four different purposes or functions, and require four different approaches to their creation. Understanding the implications of this will help improve most documentation - often immensely.","title":"认同的话"},{"content":"Actor 模型是用于单个进程中的并发模型。逻辑被封装在 Actor 中。每个 Actor 通常代表一个客户端或实体，可以具备本地状态（不共享），通过发送和接收异步消息与其他 Actor 通信。不保证消息传送：某些错误情况下，消息将丢失。每个 Actor 只处理一条消息，因此可以由框架独立调度。\nActor 框架集成了任务调度和消息流的框架。\n","permalink":"https://notes.0081800.xyz/notes/20210612091808-actor/","summary":"Actor 模型是用于单个进程中的并发模型。逻辑被封装在 Actor 中。每个 Actor 通常代表一个客户端或实体，可以具备本地状态（不共享），通过发送和接收异步消息与其他 Actor 通信。不保证消息传送：某些错误情况下，消息将丢失。每个 Actor 只处理一条消息，因此可以由框架独立调度。\nActor 框架集成了任务调度和消息流的框架。","title":"Actor"},{"content":"两种模式语言：IDL 用于人工编辑，另一种更易于机器读取。\nAvro 编码数据中只有对应字段的长度和具体的数据，不包含字段的类型信息。\n写模式与读模式 写模式：使用所知道的模式的任何版本来编码数据（可以编译到代码中） 读模式：解码时期望数据符合某个模式，可能是构建过程中基于模式生成 Avro 的关键思想是写模式和读不必完全一样，只需要保持兼容，由读取端解决差异：通过对比查看写模式和读模式并将数据从写模式转换为读模式。\n读取数据的代码中遇到出现在写模式但是不在读模式的字段，则忽略。 如果读数据的带代码需要某个字段，但是写模式不包含该字段的名称，则使用在读模式中声明的默认值填充。 模式演化 向前兼容：新版本的模式作为 writer，旧版本的模式作为 reader。 向后兼容：新版本的模式作为 reader，旧版本的模式作为 writer。 同时为了保持兼容性，只能添加莫删除具有默认值的字段。\n","permalink":"https://notes.0081800.xyz/notes/20210610222725-avro/","summary":"两种模式语言：IDL 用于人工编辑，另一种更易于机器读取。\nAvro 编码数据中只有对应字段的长度和具体的数据，不包含字段的类型信息。\n写模式与读模式 写模式：使用所知道的模式的任何版本来编码数据（可以编译到代码中） 读模式：解码时期望数据符合某个模式，可能是构建过程中基于模式生成 Avro 的关键思想是写模式和读不必完全一样，只需要保持兼容，由读取端解决差异：通过对比查看写模式和读模式并将数据从写模式转换为读模式。\n读取数据的代码中遇到出现在写模式但是不在读模式的字段，则忽略。 如果读数据的带代码需要某个字段，但是写模式不包含该字段的名称，则使用在读模式中声明的默认值填充。 模式演化 向前兼容：新版本的模式作为 writer，旧版本的模式作为 reader。 向后兼容：新版本的模式作为 reader，旧版本的模式作为 writer。 同时为了保持兼容性，只能添加莫删除具有默认值的字段。","title":"Avro"},{"content":"每个字段一个标记号码，字段名可以随意调整因为编码信息中只有标记号码，没有字段名称，但是标记号码不能随意调整，基于此可以实现：\n向前兼容 旧代码忽略不能识别的标记号码，并根据类型的注释来通知解析器跳过特定的字节数。 向后兼容 标记号码不变的情况下新的代码总是能够解析旧代码序列化的数据，但是新添加的字段不能标记为 required，不然会触发运行时错误。 同时为了保证前后兼容，删除字段也不能删除设置为 required 的字段，同时再次新添字段标记号码不能被再次使用。\n改变类型同时也会导致前后兼容问题。\n","permalink":"https://notes.0081800.xyz/notes/20210610222754-thrift_%E4%B8%8E_protocol_buffers/","summary":"每个字段一个标记号码，字段名可以随意调整因为编码信息中只有标记号码，没有字段名称，但是标记号码不能随意调整，基于此可以实现：\n向前兼容 旧代码忽略不能识别的标记号码，并根据类型的注释来通知解析器跳过特定的字节数。 向后兼容 标记号码不变的情况下新的代码总是能够解析旧代码序列化的数据，但是新添加的字段不能标记为 required，不然会触发运行时错误。 同时为了保证前后兼容，删除字段也不能删除设置为 required 的字段，同时再次新添字段标记号码不能被再次使用。\n改变类型同时也会导致前后兼容问题。","title":"Thrift 与 Protocol Buffers"},{"content":"模式演化要保证：\n向后兼容 较新的代码可以读取旧代码编写的数据 向前兼容 较旧的代码可以读取较新代码编写的数据 数据编码格式 语言特定格式 Python pickle Java java.io.Serializable Ruby Marshal JSON、XML与二进制变体 二进制变体\nMessage Pack：二进制的 JSON Thrift 与 Protocol Buffers Avro 数据流模式 基于数据库的数据流 不同是写写入不同的值 归档存储 基于服务的数据流：REST 和 RPC RPC 的问题 给人一种本地调用的错觉，却需要面临网络的不确定性：延迟和超时。\n基于消息传递的数据流 消息中间件：RabbitMQ、Kafka 分布式Actor 框架：Akka、Erlang OTP ","permalink":"https://notes.0081800.xyz/notes/20210610215330-%E6%95%B0%E6%8D%AE%E7%BC%96%E7%A0%81%E4%B8%8E%E6%BC%94%E5%8C%96/","summary":"模式演化要保证：\n向后兼容 较新的代码可以读取旧代码编写的数据 向前兼容 较旧的代码可以读取较新代码编写的数据 数据编码格式 语言特定格式 Python pickle Java java.io.Serializable Ruby Marshal JSON、XML与二进制变体 二进制变体\nMessage Pack：二进制的 JSON Thrift 与 Protocol Buffers Avro 数据流模式 基于数据库的数据流 不同是写写入不同的值 归档存储 基于服务的数据流：REST 和 RPC RPC 的问题 给人一种本地调用的错觉，却需要面临网络的不确定性：延迟和超时。\n基于消息传递的数据流 消息中间件：RabbitMQ、Kafka 分布式Actor 框架：Akka、Erlang OTP ","title":"数据编码与演化"},{"content":"在线分析处理（Online Analytic Processing，OLAP）。\n","permalink":"https://notes.0081800.xyz/notes/20210610214521-olap/","summary":"在线分析处理（Online Analytic Processing，OLAP）。","title":"OLAP"},{"content":"在线事务处理（Online Transaction Processing，OLTP）。\n","permalink":"https://notes.0081800.xyz/notes/20210610214348-oltp/","summary":"在线事务处理（Online Transaction Processing，OLTP）。","title":"OLTP"},{"content":"B-tree 是最广泛使用的索引结构。和排序字符串表：SSTables一样，B-tree 保留按键排序的 key-value 对， 这样可以实现高效的 key-value 查找和区间查询。\n结构 B-tree 将数据库分解成固定大小的页或块，传统上 4KB，这种设计更接近底层硬件，磁盘也是以固定大小的块排列的。\n分页因子 B-tree 中一个页所包含的子页引用数量称为分支因子。\n添加新键 找到其范围新键的页 如果页没有足够的可用空间来容纳新键，则将其分裂为两个半满的页，并更新父页以包含新的键范围。 算法确保树保持平衡：具有 n 个键的 B-tree 总是具有 \\(O(log n)\\) 的深度。大多数据库适合 3~4 层的 B-tree。 分支因子为 500 的 4KB 页的四级树可以存储高达 256TB。\n可靠性：WAL B-tree 底层的基本写操作是使用新的数据覆盖磁盘上的旧页。\n如果发生页分裂则需要覆盖多个不同的页，同时更新父页，这个操作比较危险，如果此时发生崩溃则会破坏索引。 常见的 B-tree 使用额外的数据结构：预写日志(WAL)：\n追加的写 WAL； 每个 B-tree 必须先更新 WAL 然后再修改树本身的页。 通过使用「锁存器」保护进行并发控制，保护 B-tree 页被多个线程访问而看到树不一样的状态。\n优化 通过复制方案替代 WAL 进行崩溃恢复，修改的页被写入不同的位置，树中父页的新版本被创建，并指向新的位置。 保存键的缩略信息，可以压入更多的键，保持更高的分支因子，减少层数。 对树进行布局，相邻叶子页按顺序保存在磁盘。 添加额外的指针到树中，如左右兄弟页。 变体，如分形树：借鉴日志结构减少磁盘寻道。 ","permalink":"https://notes.0081800.xyz/notes/20210606143901-b_trees/","summary":"B-tree 是最广泛使用的索引结构。和排序字符串表：SSTables一样，B-tree 保留按键排序的 key-value 对， 这样可以实现高效的 key-value 查找和区间查询。\n结构 B-tree 将数据库分解成固定大小的页或块，传统上 4KB，这种设计更接近底层硬件，磁盘也是以固定大小的块排列的。\n分页因子 B-tree 中一个页所包含的子页引用数量称为分支因子。\n添加新键 找到其范围新键的页 如果页没有足够的可用空间来容纳新键，则将其分裂为两个半满的页，并更新父页以包含新的键范围。 算法确保树保持平衡：具有 n 个键的 B-tree 总是具有 \\(O(log n)\\) 的深度。大多数据库适合 3~4 层的 B-tree。 分支因子为 500 的 4KB 页的四级树可以存储高达 256TB。\n可靠性：WAL B-tree 底层的基本写操作是使用新的数据覆盖磁盘上的旧页。\n如果发生页分裂则需要覆盖多个不同的页，同时更新父页，这个操作比较危险，如果此时发生崩溃则会破坏索引。 常见的 B-tree 使用额外的数据结构：预写日志(WAL)：\n追加的写 WAL； 每个 B-tree 必须先更新 WAL 然后再修改树本身的页。 通过使用「锁存器」保护进行并发控制，保护 B-tree 页被多个线程访问而看到树不一样的状态。\n优化 通过复制方案替代 WAL 进行崩溃恢复，修改的页被写入不同的位置，树中父页的新版本被创建，并指向新的位置。 保存键的缩略信息，可以压入更多的键，保持更高的分支因子，减少层数。 对树进行布局，相邻叶子页按顺序保存在磁盘。 添加额外的指针到树中，如左右兄弟页。 变体，如分形树：借鉴日志结构减少磁盘寻道。 ","title":"B-trees"},{"content":"索引 先来看一个世界上由 Bash 实现的最简单的数据库实现：\n#!/bin/bash db_set() { echo \u0026#34;$1,$2\u0026#34; \u0026gt;\u0026gt; database } db_get() { grep \u0026#34;^$1,\u0026#34; database | sed -e \u0026#34;s/^$1,//\u0026#34; | tail -n 1 } 这种数据库通过追加文件尾部的方式高效写入，许多数据库内部都是用日志，日志是一个仅支持追加更新的数据文件。但是 db_get 的性能会随着数据量的变大而下降，为了解决这个问题就需要引入新的数据结构： 索引 。\n索引是基于原始数据而派生而来的额外数据结构：适当的索引可以加速读取查询，但是回减慢写速度。\nkey-value 索引通常使用 hash map 来实现，最简单的索引策略：保存内存中的 hash map，把每个键一一映射到数据文件中特定的字节偏移量。\n优化磁盘占用 将日志分解成一定大小的段，当文件达到一定大小时就关闭它，并将后续写入到新的段文件中。 然后可以在这些段上执行压缩：丢弃重复的键，并且只保留每个键最近的更新。 同时将变小后的多个段在后台合并在一起（段在写入后不再会进行修改所以不会出现竞争）。 合并完成后将读取请求切换到新的合并段上，然后可以安全的删除旧的段文件。 实现中面临的问题 文件格式：二进制。 删除记录：通过特殊的墓碑标记。 崩溃恢复：Bitcask 通过将 hash map 快照存储到磁盘。 部分写入：文件校验丢弃损坏的部分。 并发控制：只有一个写线程。 追加的好处 顺序写性能高。 并发控制和崩溃恢复简单。 段合并避免文件碎片化。 局限性 大量的键存储在内存可能导致内存耗尽，同时需要处理哈希冲突 区间查询效率不高。 ","permalink":"https://notes.0081800.xyz/notes/20210606103354-%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95/","summary":"索引 先来看一个世界上由 Bash 实现的最简单的数据库实现：\n#!/bin/bash db_set() { echo \u0026#34;$1,$2\u0026#34; \u0026gt;\u0026gt; database } db_get() { grep \u0026#34;^$1,\u0026#34; database | sed -e \u0026#34;s/^$1,//\u0026#34; | tail -n 1 } 这种数据库通过追加文件尾部的方式高效写入，许多数据库内部都是用日志，日志是一个仅支持追加更新的数据文件。但是 db_get 的性能会随着数据量的变大而下降，为了解决这个问题就需要引入新的数据结构： 索引 。\n索引是基于原始数据而派生而来的额外数据结构：适当的索引可以加速读取查询，但是回减慢写速度。\nkey-value 索引通常使用 hash map 来实现，最简单的索引策略：保存内存中的 hash map，把每个键一一映射到数据文件中特定的字节偏移量。\n优化磁盘占用 将日志分解成一定大小的段，当文件达到一定大小时就关闭它，并将后续写入到新的段文件中。 然后可以在这些段上执行压缩：丢弃重复的键，并且只保留每个键最近的更新。 同时将变小后的多个段在后台合并在一起（段在写入后不再会进行修改所以不会出现竞争）。 合并完成后将读取请求切换到新的合并段上，然后可以安全的删除旧的段文件。 实现中面临的问题 文件格式：二进制。 删除记录：通过特殊的墓碑标记。 崩溃恢复：Bitcask 通过将 hash map 快照存储到磁盘。 部分写入：文件校验丢弃损坏的部分。 并发控制：只有一个写线程。 追加的好处 顺序写性能高。 并发控制和崩溃恢复简单。 段合并避免文件碎片化。 局限性 大量的键存储在内存可能导致内存耗尽，同时需要处理哈希冲突 区间查询效率不高。 ","title":"哈希索引"},{"content":"SSTables 通过按照键的顺序存储在日志段文件中来解决哈希索引面临的一些问题。它要求每个键在每个合并的段文件中只能出现一次（通过压缩确保）。\n对比哈希索引的日志段 优点 合并段更加高效，即使文件大于可用内存。类似于归并排序算法中使用的方法。并发读取多个输入段文件，比较每个文件的第一个键，把最小的键拷贝到输出文件，并重复。\n解决多个段文件重复：保留最新的值，因为每个段包含在某段时间内写入数据库的所有值，意味着肯定有一个值比其他所有值更新。\n基于键有序的特性可以采用稀疏索引避免内存中包含所有键的索引。\n将一定范围内的所有键存储到一个块中，便于需要请求范围内多个 key-value，降低磁盘 I/O。\n构建和维护 保证顺序 内存中痛哦红黑树或者 AVL 树支持任意顺序插入并以排序后的顺序读取它们。\n写入时，将其添加到内存中的平衡树数据结构中，成为内存表。 内存表大于某个阈值（MB级别），将其作为 SSTable 文件写入磁盘。写入同时，写入可以继续添加到一个新的内存表实例中。 处理请求顺序：首先从内存表中查找键 -\u0026gt; 最新的磁盘段文件 -\u0026gt; 次新磁盘段文件，以此类推。 后台进程周期性执行段合并与压缩，合并多个段文件并丢弃被覆盖或着删除的值。 崩溃处理 为了避免数据库崩溃最近的写入（在内存表中尚未写入磁盘）将会丢失的问题：\n在磁盘上保留单独的日志，每个写入都会立即追加到该日志。并且无需排序。 内存表写入 SSTable 时，丢弃相应的日志。 使用此技术的数据库 LevelDB RocksDB 类似的\nCassandra HBase ","permalink":"https://notes.0081800.xyz/notes/20210606103142-%E6%8E%92%E5%BA%8F%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%A8_sstables/","summary":"SSTables 通过按照键的顺序存储在日志段文件中来解决哈希索引面临的一些问题。它要求每个键在每个合并的段文件中只能出现一次（通过压缩确保）。\n对比哈希索引的日志段 优点 合并段更加高效，即使文件大于可用内存。类似于归并排序算法中使用的方法。并发读取多个输入段文件，比较每个文件的第一个键，把最小的键拷贝到输出文件，并重复。\n解决多个段文件重复：保留最新的值，因为每个段包含在某段时间内写入数据库的所有值，意味着肯定有一个值比其他所有值更新。\n基于键有序的特性可以采用稀疏索引避免内存中包含所有键的索引。\n将一定范围内的所有键存储到一个块中，便于需要请求范围内多个 key-value，降低磁盘 I/O。\n构建和维护 保证顺序 内存中痛哦红黑树或者 AVL 树支持任意顺序插入并以排序后的顺序读取它们。\n写入时，将其添加到内存中的平衡树数据结构中，成为内存表。 内存表大于某个阈值（MB级别），将其作为 SSTable 文件写入磁盘。写入同时，写入可以继续添加到一个新的内存表实例中。 处理请求顺序：首先从内存表中查找键 -\u0026gt; 最新的磁盘段文件 -\u0026gt; 次新磁盘段文件，以此类推。 后台进程周期性执行段合并与压缩，合并多个段文件并丢弃被覆盖或着删除的值。 崩溃处理 为了避免数据库崩溃最近的写入（在内存表中尚未写入磁盘）将会丢失的问题：\n在磁盘上保留单独的日志，每个写入都会立即追加到该日志。并且无需排序。 内存表写入 SSTable 时，丢弃相应的日志。 使用此技术的数据库 LevelDB RocksDB 类似的\nCassandra HBase ","title":"排序字符串表：SSTables"},{"content":" tags: Tree 日志结构合并树（Log-Structured Merge-Tree）：基于合并和压缩排序文件原理的存储引擎通常都被称为 LSM 存储引擎。\n压缩排序文件基于排序字符串表：SSTables。\nLSM-Tree 基本思想：保存在后台并合并的排序字符串表：SSTables。即使数据集远远大于可用内存，仍然能够正常工作。 基于有序的特性，可以有效的执行区间查询，并且由于磁盘是顺序写入，所以 LSM-Tree 可以支持非常高的写入吞吐量。\n性能优化 通过布隆过滤器优化 LSM-Tree 查找不存在的键性能低下的问题。 通过大小分级和分层压缩优化 SSTables 压缩和合并时的具体顺序和时机。 大小分级：较新和较小的 SSTables 被连续合并到较旧和较大的 SSTables。 分层压缩：键的范围分裂成多个更小的 SSTables，就数据被移动到单独的“层级”，这样压缩可以逐步进行并节省磁盘空间。 ","permalink":"https://notes.0081800.xyz/notes/20210606100317-lsm_tree/","summary":" tags: Tree 日志结构合并树（Log-Structured Merge-Tree）：基于合并和压缩排序文件原理的存储引擎通常都被称为 LSM 存储引擎。\n压缩排序文件基于排序字符串表：SSTables。\nLSM-Tree 基本思想：保存在后台并合并的排序字符串表：SSTables。即使数据集远远大于可用内存，仍然能够正常工作。 基于有序的特性，可以有效的执行区间查询，并且由于磁盘是顺序写入，所以 LSM-Tree 可以支持非常高的写入吞吐量。\n性能优化 通过布隆过滤器优化 LSM-Tree 查找不存在的键性能低下的问题。 通过大小分级和分层压缩优化 SSTables 压缩和合并时的具体顺序和时机。 大小分级：较新和较小的 SSTables 被连续合并到较旧和较大的 SSTables。 分层压缩：键的范围分裂成多个更小的 SSTables，就数据被移动到单独的“层级”，这样压缩可以逐步进行并节省磁盘空间。 ","title":"LSM-Tree"},{"content":"存储引擎 哈希索引 日志结构存储引擎：LSM-Tree 面向页的存储引擎：B-trees 对比 LSM-Tree 和 B-trees 项目 LSM-Tree B-trees 备注 性能 写入更快，吞吐更高 读取更快 具体场景上需要进行基准测试 存储 可变大小的段，通常 nMB 固定大小的页，传统 4KB 写入 追加，写入更多不利于 SSD 新的数据覆盖磁盘上旧的页 并发控制 后台合并进行原子替换 锁存器 其他索引结构 在索引中存储值\n多列索引\n全文索引和模糊索引\n在内存中保存所有内容\n优点：可以支持更复杂的数据结构，而无需考虑数据存储结构。\n事务处理与分析处理 事务处理：OLTP 分析处理：OLAP 对比 属性 OLTP OLAP 主要读属性 基于键，每次查询返回少量记录 对于大量记录进行汇总 主要写属性 随机访问，低延迟写入用户的输入 批量导入（ETL）或事件流 典型使用场景 终端用户，通过网络应用程序 内部分析师，为决策提供支持 数据表征 最新的数据状态（当前时间点） 随着事件而变化的所有事件历史 数据规模 GB 到 TB TB 到 PB 数据仓库 星型与雪花型分析模式 星型模型也称为维度建模。\n列式存储 列压缩 ","permalink":"https://notes.0081800.xyz/notes/20210606095514-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B8%8E%E6%A3%80%E7%B4%A2/","summary":"存储引擎 哈希索引 日志结构存储引擎：LSM-Tree 面向页的存储引擎：B-trees 对比 LSM-Tree 和 B-trees 项目 LSM-Tree B-trees 备注 性能 写入更快，吞吐更高 读取更快 具体场景上需要进行基准测试 存储 可变大小的段，通常 nMB 固定大小的页，传统 4KB 写入 追加，写入更多不利于 SSD 新的数据覆盖磁盘上旧的页 并发控制 后台合并进行原子替换 锁存器 其他索引结构 在索引中存储值\n多列索引\n全文索引和模糊索引\n在内存中保存所有内容\n优点：可以支持更复杂的数据结构，而无需考虑数据存储结构。\n事务处理与分析处理 事务处理：OLTP 分析处理：OLAP 对比 属性 OLTP OLAP 主要读属性 基于键，每次查询返回少量记录 对于大量记录进行汇总 主要写属性 随机访问，低延迟写入用户的输入 批量导入（ETL）或事件流 典型使用场景 终端用户，通过网络应用程序 内部分析师，为决策提供支持 数据表征 最新的数据状态（当前时间点） 随着事件而变化的所有事件历史 数据规模 GB 到 TB TB 到 PB 数据仓库 星型与雪花型分析模式 星型模型也称为维度建模。\n列式存储 列压缩 ","title":"数据存储与检索"},{"content":"数据模型 关系模型 突出数据之间的关联。\n文档模型 数据来自于包含文档，文档间关联很少。\n图状数据模型 针对所有数据都可能互相关联。\n数据查询语言 Web 上声明式查询 CSS 选择器。\nMapReduce 查询 MapReduce 是一种编程模型，用于在许多机器上批量处理海量数据。\nMongoDB 中的 MapReduce\ndb.observations.mapReduce( function map() { // 2 var year = this.observationTimestamp.getFullYear(); var month = this.obbservationTimestamp.getMonth() + 1; emit(year + \u0026#34;-\u0026#34; + month, this.numAnimals); // 3 }, function reduce(key, values) { // 4 return Array.sum(values); // 5 }, { query: {family: \u0026#34;Sharks\u0026#34;}, // 1 out: \u0026#34;monthlySharkReport\u0026#34; // 6 } ); 过滤器声明式执行鲨鱼种类（MongoDB 特有扩展）。 mapper：对于每个匹配的文档都会调用一次这个 JavaScript 函数。 mapper 发射一个「键-值」对，键是 “2013-12” 格式的字符串，值是动物的数量 mapper 发射的键值对按键分组，对于相同键的所有「键-值」对，调用 reduce 函数。 reducer 函数将特定月份的所有观察到的动物数量相加。 最终输出写入到 monthlySharkReport 集合中 ","permalink":"https://notes.0081800.xyz/notes/20210606095222-%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B%E4%B8%8E%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80/","summary":"数据模型 关系模型 突出数据之间的关联。\n文档模型 数据来自于包含文档，文档间关联很少。\n图状数据模型 针对所有数据都可能互相关联。\n数据查询语言 Web 上声明式查询 CSS 选择器。\nMapReduce 查询 MapReduce 是一种编程模型，用于在许多机器上批量处理海量数据。\nMongoDB 中的 MapReduce\ndb.observations.mapReduce( function map() { // 2 var year = this.observationTimestamp.getFullYear(); var month = this.obbservationTimestamp.getMonth() + 1; emit(year + \u0026#34;-\u0026#34; + month, this.numAnimals); // 3 }, function reduce(key, values) { // 4 return Array.sum(values); // 5 }, { query: {family: \u0026#34;Sharks\u0026#34;}, // 1 out: \u0026#34;monthlySharkReport\u0026#34; // 6 } ); 过滤器声明式执行鲨鱼种类（MongoDB 特有扩展）。 mapper：对于每个匹配的文档都会调用一次这个 JavaScript 函数。 mapper 发射一个「键-值」对，键是 “2013-12” 格式的字符串，值是动物的数量 mapper 发射的键值对按键分组，对于相同键的所有「键-值」对，调用 reduce 函数。 reducer 函数将特定月份的所有观察到的动物数量相加。 最终输出写入到 monthlySharkReport 集合中 ","title":"数据模型与查询语言"},{"content":"可靠性 故障与失效 故障（faults）或者错误：组件偏离其正常规格，可以提供容错（fault-tolerant）机制 失效（failure）意味系统作为一个整体停止 硬件故障 软件错误 人为失误 避免优化方式：\n以最小出错方式设计系统。抽象、提供管理界面，使“做正确的事很轻松”，防止限制过多。 分离最容易出错的地方，提供沙箱用以放心尝试。 充分测试。 提供快速恢复机制尽量减少故障影响：快速回滚，提供校验数据的工具。 设置详细而清晰的监控系统 培训和流程 可扩展性 描述负载 QPS 数据库写入比例 同时在线活动用户数 缓存命中率等。 描述性能 吞吐量（throughput）/每秒处理数据量 延迟（latency）/响应时间（response time）：延迟是处理时间，响应时间是客户端看到的。 最好通过百分位数来监控指标：p50/p80/p90/p95/p99/p999，p50 指标表示一半请求在这个指标之下，一半在这个指标之上。\n应对负载增加 无状态很方便扩容 但有状态的分布式面临一定的挑战 可维护性 可运维性：运维更轻松 监控、文档、自动化、良好的默认配置、可手动控制系统状态让系统自我修复（比如熔断机制）。\n简单性：简化复杂度 抽象！\n可演化性：易于改变 TDD 重构 ","permalink":"https://notes.0081800.xyz/notes/20210604221658-%E5%8F%AF%E9%9D%A0_%E5%8F%AF%E6%89%A9%E5%B1%95%E4%B8%8E%E5%8F%AF%E7%BB%B4%E6%8A%A4%E7%9A%84%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F/","summary":"可靠性 故障与失效 故障（faults）或者错误：组件偏离其正常规格，可以提供容错（fault-tolerant）机制 失效（failure）意味系统作为一个整体停止 硬件故障 软件错误 人为失误 避免优化方式：\n以最小出错方式设计系统。抽象、提供管理界面，使“做正确的事很轻松”，防止限制过多。 分离最容易出错的地方，提供沙箱用以放心尝试。 充分测试。 提供快速恢复机制尽量减少故障影响：快速回滚，提供校验数据的工具。 设置详细而清晰的监控系统 培训和流程 可扩展性 描述负载 QPS 数据库写入比例 同时在线活动用户数 缓存命中率等。 描述性能 吞吐量（throughput）/每秒处理数据量 延迟（latency）/响应时间（response time）：延迟是处理时间，响应时间是客户端看到的。 最好通过百分位数来监控指标：p50/p80/p90/p95/p99/p999，p50 指标表示一半请求在这个指标之下，一半在这个指标之上。\n应对负载增加 无状态很方便扩容 但有状态的分布式面临一定的挑战 可维护性 可运维性：运维更轻松 监控、文档、自动化、良好的默认配置、可手动控制系统状态让系统自我修复（比如熔断机制）。\n简单性：简化复杂度 抽象！\n可演化性：易于改变 TDD 重构 ","title":"可靠、可扩展与可维护的应用系统"},{"content":" tags: 读书笔记,Bigdata,分布式,数据库 数据系统基础 可靠、可扩展与可维护的应用系统 数据模型与查询语言 数据存储与检索 数据编码与演化 分布式数据系统 目的：扩展性、容错和高可用、延迟考虑（多机房）\n扩展：\n垂直扩展：提升单机性能 水平扩展：无共享结构，由软件实现核心逻辑 复制与分区：\n复制：多节点冗余 分区：数据库拆分 分片：分区分配给不同的节点 数据复制 数据分区 事务 分布式系统挑战 一致性与共识 派生数据 记录系统：真实数据系统，拥有数据的权威版本。 派生数据系统：从另一个数据系统获取，丢失可以根据数据源重建，如缓存等。 批处理系统 流处理系统 ","permalink":"https://notes.0081800.xyz/notes/20210604221412-%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/","summary":" tags: 读书笔记,Bigdata,分布式,数据库 数据系统基础 可靠、可扩展与可维护的应用系统 数据模型与查询语言 数据存储与检索 数据编码与演化 分布式数据系统 目的：扩展性、容错和高可用、延迟考虑（多机房）\n扩展：\n垂直扩展：提升单机性能 水平扩展：无共享结构，由软件实现核心逻辑 复制与分区：\n复制：多节点冗余 分区：数据库拆分 分片：分区分配给不同的节点 数据复制 数据分区 事务 分布式系统挑战 一致性与共识 派生数据 记录系统：真实数据系统，拥有数据的权威版本。 派生数据系统：从另一个数据系统获取，丢失可以根据数据源重建，如缓存等。 批处理系统 流处理系统 ","title":"《数据密集型应用系统设计》读书笔记"},{"content":" tags: 技术随想 几何结构 mobius Klein Trefoil knot Penrose triangle 植物 bonsai broccoli 科幻 tardis dalek 消灭 神话 ","permalink":"https://notes.0081800.xyz/notes/20210525113247-%E9%A1%B9%E7%9B%AE%E4%BB%A3%E5%8F%B7/","summary":" tags: 技术随想 几何结构 mobius Klein Trefoil knot Penrose triangle 植物 bonsai broccoli 科幻 tardis dalek 消灭 神话 ","title":"项目代号"},{"content":" tags: macOS,macOS Cheatsheet 通常你沟通苹果的官方支持一般都会给你三板斧：\n重启：按住电源键 10 秒中，然后等几秒钟后再开机 重置 SMC：关机然后按住：Ctrl + Option + 右侧Shift + 电源键 7 秒钟关机，等待几秒钟后开机。 ","permalink":"https://notes.0081800.xyz/notes/20210322145956-macos_%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E4%B8%89%E6%9D%BF%E6%96%A7/","summary":" tags: macOS,macOS Cheatsheet 通常你沟通苹果的官方支持一般都会给你三板斧：\n重启：按住电源键 10 秒中，然后等几秒钟后再开机 重置 SMC：关机然后按住：Ctrl + Option + 右侧Shift + 电源键 7 秒钟关机，等待几秒钟后开机。 ","title":"macOS 问题解决三板斧"},{"content":" tags: macOS 查看 TimeMachine 日志：\nprintf \u0026#39;\\e[3J\u0026#39; \u0026amp;\u0026amp; log show --predicate \u0026#39;subsystem == \u0026#34;com.apple.TimeMachine\u0026#34;\u0026#39; --debug --last 6m ","permalink":"https://notes.0081800.xyz/notes/20210322145854-macos_timemachine_%E6%97%A5%E5%BF%97/","summary":" tags: macOS 查看 TimeMachine 日志：\nprintf \u0026#39;\\e[3J\u0026#39; \u0026amp;\u0026amp; log show --predicate \u0026#39;subsystem == \u0026#34;com.apple.TimeMachine\u0026#34;\u0026#39; --debug --last 6m ","title":"macOS TimeMachine 日志"},{"content":" tags: Learning English 一些通用的规则：\n音标后面的 ː 提示拖长音。 元音 大而圆 音标 中文 发音技巧 常见单词 拼读规则 /​æ​/ 爱 张大嘴发中文的「爱」,发音短促有力。 bag map dad sad a /​e​/ 爱 音同 /​æ​/ 但是嘴形要小一些。 get let pen yes e /​ɔː​/ 哦 嘴巴轮圆了发音，并拖长音 floor door store sport oor,ore,or /​ɔ​/ 哦 /​ɔː​/ 的短音 lot dog hot shop o 扁扁扁 音标 中文 发音技巧 常见单词 拼读规则 /iː​/ 一 相比一嘴要扁一些，稍稍更用力一些 see meet he she ee, e /​i​/ 一 /iː​/ 短音 happy daddy honey 词尾的 y 或 ey /​I​/ 一 用 /​e​/ 的嘴形发 /​i​/ this give it city i /əː​/ 呃 相比中文嘴要扁一些，稍稍更用力一些 work girl dirt sir or, ir /​ə​/ 呃 /əː​/ 的短音 again a father weather 单独的 a 及词尾的 er 需要额外注意的：\nworker 前面是 /əː​/ 后面是 /​ə​/ 。 合起来 音标 中文 发音技巧 常见单词 拼读规则 /​ei/ 诶 /​e​/ 和 /​i​/ 连起来，将嘴形压扁，含有下压的过程 name mate late say ay 或以 e 结尾（e 不发音）a 发 /​ei/ /​iə​/ 两个音快速的合起来读，没有真正的合并（双元音） hear bear dear really ear eer ea /​ɔi​/ 两个音快速的合起来读，没有真正的合并（双元音） boy soy noise toy oy oi /​ɛə​/ 两个音快速的合起来读，没有真正的合并（双元音） their hair pair fair eir air name 中 a 发 /​ei/ 的这种发音属于「软化」。 大而后 音标 中文 发音技巧 常见单词 拼读规则 /​aː​/ 啊 张大嘴，发音靠后，拖长 car far class ask ar /​ʌ​/ /​aː​/ 的短音，发音靠喉咙挤压（泰山压顶） love but come some u /​ai​/ 对比 /​æ​/ 发音柔和且稍稍拖长 hi time like five i /​əu​/ 嗷 发音靠后，柔和饱满 /​au​/ 嗷 需要张大嘴，且发音靠后 now house how about ou ow 字母 i 发 /​i​/ （/​ɪ​/）时，通常不直接作为词尾，而是会有一个辅音垫在后面 字母 i 发 /​ai​/ 时，即可直接作为词尾，也可不作词尾。当词尾为不发音的 e 时，字母 i 通常发 /​ai​/，即「软化」 辅音 类母语 辅音和元音合并发音时，以下辅音可视为和汉语拼音发音类同！\n/​p​/ /​t​/ /​k​/ /​f​/ /​s​/ /​h​/ /​d​/ /​g​/ /​z​/ /​r​/ /​w​/ /​m​/ /​n​/ /​l​/\n而且这些辅音音标还是和字母基本对应。\n音标 中文 发音技巧 常见单词 拼读规则 /​j​/ yes your year /​ʃ​/ sh she shy shoe /tʃ​/ ch chair cheer cheap 读一半 辅音元音无法组合发音，辅音单独发音的时候“只读一半音”。读一半就是去掉元音之后的发音。 发音要点：发音较轻，不拖。\n清辅音 通过吐气来替代声带，叫做“清辅音”。\n音标 中文 发音技巧 常见单词 拼读规则 /​p​/ map hope deep /​t​/ get yet /​k​/ book break /​f​/ half if /​s​/ yes ice /​ʃ​/ fish wish /tʃ​/ each teach 浊辅音 并非凸起就能完成，需要轻微震动声代，称为“浊辅音”。\n音标 中文 发音技巧 常见单词 拼读规则 /​g​/ big bad leg /​b​/ lab job /​d​/ dad side /​z​/ noise is /​m​/ some room /​n​/ man son /​l​/ 不发音，而只是一个动作：舌头前半部分往上颚上台 tall ball milk /​j​/ /​w​/ /​r​/ /​w​/ 在现在英语中不单独存在。\n","permalink":"https://notes.0081800.xyz/notes/20210317141647-english_ipa/","summary":"tags: Learning English 一些通用的规则：\n音标后面的 ː 提示拖长音。 元音 大而圆 音标 中文 发音技巧 常见单词 拼读规则 /​æ​/ 爱 张大嘴发中文的「爱」,发音短促有力。 bag map dad sad a /​e​/ 爱 音同 /​æ​/ 但是嘴形要小一些。 get let pen yes e /​ɔː​/ 哦 嘴巴轮圆了发音，并拖长音 floor door store sport oor,ore,or /​ɔ​/ 哦 /​ɔː​/ 的短音 lot dog hot shop o 扁扁扁 音标 中文 发音技巧 常见单词 拼读规则 /iː​/ 一 相比一嘴要扁一些，稍稍更用力一些 see meet he she ee, e /​i​/ 一 /iː​/ 短音 happy daddy honey 词尾的 y 或 ey /​I​/ 一 用 /​e​/ 的嘴形发 /​i​/ this give it city i /əː​/ 呃 相比中文嘴要扁一些，稍稍更用力一些 work girl dirt sir or, ir /​ə​/ 呃 /əː​/ 的短音 again a father weather 单独的 a 及词尾的 er 需要额外注意的：","title":"English IPA"},{"content":"","permalink":"https://notes.0081800.xyz/topics/20210317141621-learning_english/","summary":"","title":"Learning English"},{"content":" tags: Algorithm,Data Structures,Binary Search Tree 分为三种：前序、后序和中序，其中最容易用栈改写的是后序。\n前序(Preorder)：Root -\u0026gt; Left -\u0026gt; Right class Solution { public: void processPreorderTraversal(TreeNode* root, vector\u0026lt;int\u0026gt; \u0026amp; collector) { if (root == nullptr) { return; } processPreorderTraversal(root-\u0026gt;left, collector); collector.push_back(root-\u0026gt;val); processPreorderTraversal(root-\u0026gt;right, collector); } vector\u0026lt;int\u0026gt; inorderTraversal(TreeNode* root) { vector\u0026lt;int\u0026gt; ret; if (root == nullptr) { return ret; } processPreorderTraversal(root, ret); return ret; } }; 中序(Inorder): Left -\u0026gt; Root -\u0026gt; Right class Solution { public: void processInorderTraversal(TreeNode* root, vector\u0026lt;int\u0026gt; \u0026amp; collector) { if (root == nullptr) { return; } processInorderTraversal(root-\u0026gt;left, collector); collector.push_back(root-\u0026gt;val); processInorderTraversal(root-\u0026gt;right, collector); } vector\u0026lt;int\u0026gt; inorderTraversal(TreeNode* root) { vector\u0026lt;int\u0026gt; ret; if (root == nullptr) { return ret; } processInorderTraversal(root, ret); return ret; } }; 后序(Postorder)：Left -\u0026gt; Right -\u0026gt; Root class Solution { public: void processPostorderTraversal(TreeNode* root, vector\u0026lt;int\u0026gt; \u0026amp; collector) { if (root == nullptr) { return; } processPostorderTraversal(root-\u0026gt;left, collector); processPostorderTraversal(root-\u0026gt;right, collector); collector.push_back(root-\u0026gt;val); } vector\u0026lt;int\u0026gt; postorderTraversal(TreeNode* root) { vector\u0026lt;int\u0026gt; ret; if (root == nullptr) { return ret; } processPostorderTraversal(root, ret); return ret; } }; 非递归遍历 【刷题】二叉树非递归遍历 ","permalink":"https://notes.0081800.xyz/notes/20210220203210-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/","summary":"tags: Algorithm,Data Structures,Binary Search Tree 分为三种：前序、后序和中序，其中最容易用栈改写的是后序。\n前序(Preorder)：Root -\u0026gt; Left -\u0026gt; Right class Solution { public: void processPreorderTraversal(TreeNode* root, vector\u0026lt;int\u0026gt; \u0026amp; collector) { if (root == nullptr) { return; } processPreorderTraversal(root-\u0026gt;left, collector); collector.push_back(root-\u0026gt;val); processPreorderTraversal(root-\u0026gt;right, collector); } vector\u0026lt;int\u0026gt; inorderTraversal(TreeNode* root) { vector\u0026lt;int\u0026gt; ret; if (root == nullptr) { return ret; } processPreorderTraversal(root, ret); return ret; } }; 中序(Inorder): Left -\u0026gt; Root -\u0026gt; Right class Solution { public: void processInorderTraversal(TreeNode* root, vector\u0026lt;int\u0026gt; \u0026amp; collector) { if (root == nullptr) { return; } processInorderTraversal(root-\u0026gt;left, collector); collector.","title":"二叉树的遍历"},{"content":" tags: Taking Notes, Org Mode 方案一：通过 Emacs 批处理模式 emacs file.org --batch -f org-hugo-export-wim-to-md --kill --batch 默认不启用配置文件，可以使用 -l\nemacs file.org --batch -l ~/.emacs.d/init.el -f org-hugo-export-wim-to-md --kill 方案二：通过 LISP 遍历 (mapc (lambda (x) (with-current-buffer (find-file-noselect x) (org-hugo-export-wim-to-md t))) (directory-files \u0026#34;/Users/wh/codes/notes/roam-research-notes-hugo/journal\u0026#34; nil \u0026#34;^[0-9]+$\u0026#34; t)) ","permalink":"https://notes.0081800.xyz/notes/20210220175534-ox_hugo_%E6%89%B9%E9%87%8F%E5%AF%BC%E5%87%BA_markdown/","summary":" tags: Taking Notes, Org Mode 方案一：通过 Emacs 批处理模式 emacs file.org --batch -f org-hugo-export-wim-to-md --kill --batch 默认不启用配置文件，可以使用 -l\nemacs file.org --batch -l ~/.emacs.d/init.el -f org-hugo-export-wim-to-md --kill 方案二：通过 LISP 遍历 (mapc (lambda (x) (with-current-buffer (find-file-noselect x) (org-hugo-export-wim-to-md t))) (directory-files \u0026#34;/Users/wh/codes/notes/roam-research-notes-hugo/journal\u0026#34; nil \u0026#34;^[0-9]+$\u0026#34; t)) ","title":"OX-HUGO 批量导出 Markdown"},{"content":" tags: 技术，技术概念 中间件可以对系统进行解耦，比如上层系统对下层系统进行网络请求，考虑下面结构\n- U - / | \\ /--- | ---\\ / | \\ A B C 如果下层系统增加节点的话就需要重启 U。\n引入 HAProxy 或者 Nginx 之类的中间件可以对两层系统进行解耦：\nU | +------+ | HA | +------+ / | \\ /--- | ---\\ / | \\ A B C 这样上层和下层系统都依赖中间件，但是系统之间不再强耦合，下层系统可以依赖中间件随意的进行所扩容而不用被上层系统感知。 这时候中间件只要保证中间件稳定即可，可以在中间件上进行热重启。\n","permalink":"https://notes.0081800.xyz/notes/20210220165816-%E4%B8%AD%E9%97%B4%E4%BB%B6/","summary":"tags: 技术，技术概念 中间件可以对系统进行解耦，比如上层系统对下层系统进行网络请求，考虑下面结构\n- U - / | \\ /--- | ---\\ / | \\ A B C 如果下层系统增加节点的话就需要重启 U。\n引入 HAProxy 或者 Nginx 之类的中间件可以对两层系统进行解耦：\nU | +------+ | HA | +------+ / | \\ /--- | ---\\ / | \\ A B C 这样上层和下层系统都依赖中间件，但是系统之间不再强耦合，下层系统可以依赖中间件随意的进行所扩容而不用被上层系统感知。 这时候中间件只要保证中间件稳定即可，可以在中间件上进行热重启。","title":"中间件"},{"content":" 项目代号 技术概念 ","permalink":"https://notes.0081800.xyz/notes/20210220165806-%E6%8A%80%E6%9C%AF%E9%9A%8F%E6%83%B3/","summary":" 项目代号 技术概念 ","title":"技术随想"},{"content":" tags: C/C++ source: All about thread-local storage ","permalink":"https://notes.0081800.xyz/notes/20210219200958-c_c_thread_local_storage/","summary":" tags: C/C++ source: All about thread-local storage ","title":"C/C++ thread-local storage"},{"content":" tags: macOS fix \u0026ldquo;Too many open files in system\u0026rdquo; error\n","permalink":"https://notes.0081800.xyz/notes/20210125174343-macos_max_open_files/","summary":"tags: macOS fix \u0026ldquo;Too many open files in system\u0026rdquo; error","title":"macOS max open files"},{"content":" tags: GDB thread apply all bt ","permalink":"https://notes.0081800.xyz/notes/20210118114707-gdb_%E6%89%93%E5%87%BA%E6%89%80%E6%9C%89%E7%BA%BF%E7%A8%8B%E7%9A%84_backtrace/","summary":" tags: GDB thread apply all bt ","title":"GDB 打出所有线程的 Backtrace"},{"content":" tags: C/C++,Programming Tools ","permalink":"https://notes.0081800.xyz/topics/20210118114626-gdb/","summary":" tags: C/C++,Programming Tools ","title":"GDB"},{"content":" tags: Emacs,LSP,C/C++,CMake 通过如下命令生成 clangd 识别的编译配置文件\nmkdir build cd build cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 .. mv compile_commands.json ../ 然后重启 M-x lsp-restart-workspace RET 即可。\n","permalink":"https://notes.0081800.xyz/notes/20210114175011-lsp/","summary":"tags: Emacs,LSP,C/C++,CMake 通过如下命令生成 clangd 识别的编译配置文件\nmkdir build cd build cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 .. mv compile_commands.json ../ 然后重启 M-x lsp-restart-workspace RET 即可。","title":"C++ LSP"},{"content":" tags: Translate,Incomplete,Python Python 幕后 #2: CPython 编译器如何工作 今天的主题（Today\u0026rsquo;s subject） 在本系列的第一篇文章中我们研究了 Python 虚拟机。我们学了解到它通过执行一系列叫做字节码（bytecode）的指令。 我们也看到 Python 字节码没有完全描述代码片段的行为。这也是为什么存在一个代码对象（code object）的概念。 执行诸如函数或模块的代码块也就是执行对应的代码对象。代码对象包含了代码块的字节码，包含代码中使用的常量和变量名， 还有代码块的一些属性。\n通常，一个 Python 程序员不用编写字节码，并且也不用创建代码对象，而是编写正常的 Python 代码。所有 CPython 必须 能够将源代码转换成代码对象。CPython 编译器就负责这部分工作。我们将通过这部分内容探索它是如何工作的。\nNote: 本文参考 CPython 3.9。一些实现细节将必然会随着 CPython 的演进而改变。 我将会尝试关注一些重要的改变并添加更新备注。\n什么是 CPython 编译器（What CPython compiler is） 我们已经了解了 CPython 编译器的职责，但是在我们进入到它是如何实现的之前，让我们首先来搞清楚为什么我们称之为编译器？\n在通常情况加，编译器是一个将一个程序语言翻译到另一个与之等价的程序语言的程序。编译器有许多种类，但是通常情况下我们 讨论的都是静态编译：将一个高级语言的程序翻译成机器码。CPython 编译器也是这样吗？要回答这个问题，我们先看一下静态编 译器的传统三阶段设计（three-stage design）。\n编译器前端（frontend）将源代码转换成一种中间语言（IR,intermediate representation）。然后优化器（optimzer）拿到中间语言 对其进行优化并把优化过的中间语言传递给编译器后端生成机器码。如果我们选择一种源语言和目标机器无关的中间语言，我们就 得到了三阶段设计的关键益处：对于一个编译器来说，支持一种新的源语言仅仅需要新增一个对应的编译器前端，支持一种新的目标机器 仅仅需要新增一个对应的编译器后端。\nLLVM 工具集（toolchain）就是这个模型的一个很好的成功的例子。有很多编译器前端如 C、Rust、Swift 等其他很多编程语言基于 LLVM 提供给编译器更加复杂的部分。LLVM 的创建者 Chris Latter 提供了一个很好的 LLVM 架构概览。\nCPython 尽管不需要支持多个源语言和目标机器，尔仅仅需要支持 Python 代码和 CPython 虚拟机。不过，CPython 同样实现了三阶段设计。 如果想知道为什么，我们需要更加详细的解释编译器的三阶段的每个阶段。\n上面图片表示了一个典型的编译器模型。现在将之与下面 CPython 编译器架构的图片进行对比。\n是不是看起来很像？这里的关键点是任何之前学过编译器的人都应该熟悉 CPython 编译器的结构。如果你没有学过相关知识，著名的龙书（Dragon Book） 是一个非常好的构建编译器的理论引导。这本书很长，但是即使阅读前几章你也会收获巨大。\n我们的对比需要一些进一步的解释。首先，从 CPython 3.9 默认使用了一个新的解析器直接输入 AST（抽象语法树，Abstract Syntax Tree）， 不再需要任何中间部署来构建解析树。因此 CPython 编译器模型得到进一步简化。其次，与静态编译器相比，CPython 的一些前置阶段工作很少 也许会让人认为 CPython 编译器更加像一个编译器前端。我们不会采用硬核编译器编写者的这种观点。\n编译器架构概述（Overview of the compiler\u0026rsquo;s architecture） 上面的图很好，但是它们隐藏了很多细节会造成误导，所以让我们花费一些时间讨论 CPython 编译器的整体设计。\nCPython 编译器的两个主要部分是：\n编译器前端；和 编译器后端 编译器前端接受 Python 代码产生 AST。编译器后端接受 AST 产生代码对象。贯穿整个 Python 源代码， 术语解析器（parser）和编译器分别代表编译器前端和后端。这里的编译器（compiler）代表另外一个意思。 它应该被称为其他的名字比如代码对象生成器，但是我们依然坚持使用编译器，因为它似乎不会造成太多麻烦。\n解析器（parser）的职责是检查输入的 Python 代码语法是否正确。如果不正确，解析器会报告一个像下面这样的错误：\nx = y = = 12 ^ SyntaxError: invalid syntax 如果输入正确，解析器会根据文法（grammar）规则对它进行组织。文法（grammar）定义了一个语言的语法（syntax）1。 我认为形式文法（formal grammar）的概念之于我们的讨论非常关键，我们需要需要稍微注意一下它的形式定义 2。\n根据传统定义，一个公式是一个包含四个项目的元组：\n\\(\\sum\\) - 有限的端点符号集，或简称端点（通常用小写字母表示）。 \\(N\\) - 有限的非端点符号集，或简称非端点（通常用大写字母表示）。 \\(P\\) - 有限的产生式规则集。在无文法上下文的情况（包括 Python 的文法），一个产生式的规则只是一个将一个非端点符号映射成 无序的端点和非端点序列，就像 \\(A \\rightarrow aB\\) \\(S\\) - 开始符号 文法定义了语言，其中包含可以通过应用产生式规则生成的所有端点序列。要生成序列，以符号 \\(S\\) 开头，根据产生式规则将每个 非端点递归替换为一个序列，直到整个序列由端点组成。使用已建立的符号约定，列出产生式规则以指定文法就够了。例如， 这是一个简单的文法生成交替的 1 和 0 的序列：\n$S → 10S|10 $\n我们将会在解析器部分继续更深入的讨论文法。\n抽象语法树（Abstract syntax tree） 解析器的最终目的是产生 AST。AST 是一个提供源代码高层抽象的树结构。下面是一段代码通过使用 ast 标准库 dump 出来的对应的 AST：\nx = 123 f(x) $ python -m ast example.py Module( body=[ Assign( targets=[ Name(id=\u0026#39;x\u0026#39;, ctx=Store())], value=Constant(value=123)), Expr( value=Call( func=Name(id=\u0026#39;f\u0026#39;, ctx=Load()), args=[ Name(id=\u0026#39;x\u0026#39;, ctx=Load())], keywords=[]))], type_ignores=[]) AST 节点的类型使用抽象语法描述语言（ASDL）进行定义。ASDL 是一个简单的声明式语言用来描述中间语言（IRs），也就是 AST。 这里是 Parser/Python.asdl 中 Assign 和 Expr 节点的定义：\nstmt = ... | Assign(expr* targets, expr value, string? type_comment) | ... expr = ... | Call(expr func, expr* args, keyword* keywords) | ... ASDL 规范能够让我们快速的直观了解 Python AST。但是解析器需要使用 C 代码来表示 AST。幸好，通过 ASDL 的描述可以非常简单的生成 C 结构体。 下面是 CPython 的实现，结果如下：\nstruct _stmt { enum _stmt_kind kind; union { // ... other kinds of statements struct { asdl_seq *targets; expr_ty value; string type_comment; } Assign; // ... other kinds of statements } v; int lineno; int col_offset; int end_lineno; int end_col_offset; }; struct _expr { enum _expr_kind kind; union { // ... other kinds of expressions struct { expr_ty func; asdl_seq *args; asdl_seq *keywords; } Call; // ... other kinds of expressions } v; // ... same as in _stmt }; AST 是一种易于使用的表示形式。它可以表示程序做了什么，隐藏一些不必要的信息，如缩进、标点和其他一些 Python 语法特性。\nAST 表示主要的受益者是编译器，编译器可以以一个相对简单的方式遍历 AST 然后生成字节码。除了编译器，还有其他很多 Python 工具 使用 AST 来处理 Python 代码。比如，pytest 在 assert 失败时会通过修改 AST 来提供一些有用的信息（当 assert 的表达式返回 False 时assert 自身除了抛出 AssertionError 以外并没有多任何事情）。另外一个例子就是 bandit 通过分析 AST 来发现 Python 代码中的一些常见的安全问题。\n现在，我们已经学习了一点 Python AST 相关的支持，我们的目光现在可以转向解析器如何从源码构建它的了。\n从源代码生成 AST（From source code to AST） 实际上，就像我前面提到的，从 CPython 3.9 开始 CPython 不在只有一个解析器，而是两个，新的解析器被默认使用。通过传递 -X oldparser 选项依然可以使用就的解析器。但是在 CPython 3.10 中旧的解析器将会被彻底的移除。\n两个解析器区别很大。我们将会集中在新的解析器上，但是在这之前我们先来看看就的解析器。\n旧解析器（old parser） 很长时间以来 Python 的语法是通过生成文法（generative grammar）来正式定义的。它是我们前面讨论过的文法中一种。它告诉我们如何 生成属于该语言的序列。生成文法的问题是它不能直接对应与能够解析那些序列的解析算法。幸好，聪明的人能够区分生成文法的类型并建 立相应的解析器。这些包括 上下文无关(context free)、LL(k)、LR(k)、LALR 和其他许多类型的文法。Python 的文法是 LL(1)。它指定 使用 扩展巴科斯范式（EBNF, Extended Backus–Naur Form）。3要想知道它如何描述 Python 语法的，让我们来看一下 while 语句的规则。\nfile_input: (NEWLINE | stmt)* ENDMARKER stmt: simple_stmt | compound_stmt compound_stmt: ... | while_stmt | ... while_stmt: \u0026#39;while\u0026#39; namedexpr_test \u0026#39;:\u0026#39; suite [\u0026#39;else\u0026#39; \u0026#39;:\u0026#39; suite] suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT ... CPython 通过以下功能扩展了传统的符号：\n选择分组（grouping of alternatives）： (a | b) 可选部分： [a] 零个或多个和一个或多个重复： a* 和 a+ 我们可以参见 why Guido van Rossum chose to use regular expressions。它们允许编程语言的语法表现的更加的自然（对一个程序员来说）。 我们可以仅仅写 \\(A \\rightarrow a+\\) 来代替 \\(A \\rightarrow aA|a\\) 。这个选择是有代价的：CPython 需要开发一个方法支持扩展的符号。\nLL(1) 文法解析是一个已解决的问题。解决方案是下推自动机（PDA, Pushdown automaton）作为自上而下的解析器。PDA 使用栈通过模拟生成来 操作输入字符串。要解析一些输入，它在栈上以开始符号为起点。然后它从输入查找第一个符号，猜测应该对开始符号应用哪一个规则然后用规则 右边的部分对它进行替换。如果栈顶的符号是一个端点匹配输入的下一个符号，PDA 将会从栈顶将之弹出并跳过已匹配的符号。如果栈顶符号是非 端点，PDA 尝试猜测规则根据输入的中符号去替换它。这个过程一直重复，直到整个输入都被扫描或者 PDA 通过输入中的下一个符号在栈上无法 匹配一个端点：导致错误。\nCPython 因为编写了产生式规则所以无法直接使用这个方法，所以需要开发新的方法。要支持扩展符号，旧的解析器通过确定有限状态自动机（DFA, Deterministic Finite Automaton） 表示文法中的每一个规则，其以和正则表达式等效而闻名。解析器自身是一个像 PDA 一样的基于栈的自动机，但是不将符号压入栈，而是替代的压入 DFA 的状态。 这里是旧解析器使用的关键的数据结构：\ntypedef struct { int s_state; /* State in current DFA */ const dfa *s_dfa; /* Current DFA */ struct _node *s_parent; /* Where to add next node */ } stackentry; typedef struct { stackentry *s_top; /* Top entry */ stackentry s_base[MAXSTACK];/* Array of stack entries */ /* NB The stack grows down */ } stack; typedef struct { stack p_stack; /* Stack of parser states */ grammar *p_grammar; /* Grammar to use */ // basically, a collection of DFAs node *p_tree; /* Top of parse tree */ // ... } parser_state; 还有 Parser/parser.c 中的注释总结方法：\nA parsing rule is represented as a Deterministic Finite-state Automaton (DFA). A node in a DFA represents a stabte of the parser; an arc represents a transition. Transitions are either labeled with terminal symbols or with nonterminals. When the parser decides to follow an arc labeled with a nonterminal, it is invoked recursively with the DFA representing the parsing rule for that as its initial state; when that DFA accepts, the parser that invoked it continues. The parse tree constructed by the recursively called parser is inserted as a child in the current parse tree.\nDFA 代表解析规则。DFA 中节点代表解析器中的状态，arc 表示过渡。过渡用端点或非端点标记。当解析器决定跟随一个 arc 标记的非端点，它是以该解析规则的 DFA 作为它的初始状态递归调用；当 DFA 接受时，调用它的解析器将继续。通过递归的调用构建的解析树作为子树插入当前的解析树中。\n在解析输入的过程中，解析器构建了解析树，也被称作具体语法树（Concrete Syntax Tree，CST）。对比 AST，解析树直接对应输入时对应的规则。解析树的所有节点通过 node 结构体表示：\ntypedef struct _node { short n_type; char *n_str; int n_lineno; int n_col_offset; int n_nchildren; struct _node *n_child; int n_end_lineno; int n_end_col_offset; } node; 但是，解析树并不是编译器所需要的。它必须转换成 AST。这部分工作由 Python/ast.c 来完成。这部分算法递归的遍历解析树然后将解析树的节点翻译成 AST 的节点。 几乎没人发现这几近 6000 的代码是多么令人兴奋啊。\n标记器（tokenizer）\n从语法的角度来说 Python 并不是一门简单的语言。尽管 Python 的文法看起来很简单并且包含在注释在内也就 200 行。这是因为文法的符号都是标记而非单独的字符。 一个标记通过类型表示，比如 NUMBER 、 NAME 、 NEWLINE ， 对应的值和位置在源码中。 CPython 在 Grammar/Tokens 中列出了 63 种不同类型的标记。 我们可以使用标注库 tokenize 来看一个标记过的程序：\ndef x_plus(x): if x \u0026gt;= 0: return x return 0 $ python -m tokenize example2.py 0,0-0,0: ENCODING \u0026#39;utf-8\u0026#39; 1,0-1,3: NAME \u0026#39;def\u0026#39; 1,4-1,10: NAME \u0026#39;x_plus\u0026#39; 1,10-1,11: OP \u0026#39;(\u0026#39; 1,11-1,12: NAME \u0026#39;x\u0026#39; 1,12-1,13: OP \u0026#39;)\u0026#39; 1,13-1,14: OP \u0026#39;:\u0026#39; 1,14-1,15: NEWLINE \u0026#39;\\n\u0026#39; 2,0-2,4: INDENT \u0026#39; \u0026#39; 2,4-2,6: NAME \u0026#39;if\u0026#39; 2,7-2,8: NAME \u0026#39;x\u0026#39; 2,9-2,11: OP \u0026#39;\u0026gt;=\u0026#39; 2,12-2,13: NUMBER \u0026#39;0\u0026#39; 2,13-2,14: OP \u0026#39;:\u0026#39; 2,14-2,15: NEWLINE \u0026#39;\\n\u0026#39; 3,0-3,8: INDENT \u0026#39; \u0026#39; 3,8-3,14: NAME \u0026#39;return\u0026#39; 3,15-3,16: NAME \u0026#39;x\u0026#39; 3,16-3,17: NEWLINE \u0026#39;\\n\u0026#39; 4,4-4,4: DEDENT \u0026#39;\u0026#39; 4,4-4,10: NAME \u0026#39;return\u0026#39; 4,11-4,12: NUMBER \u0026#39;0\u0026#39; 4,12-4,13: NEWLINE \u0026#39;\\n\u0026#39; 5,0-5,0: DEDENT \u0026#39;\u0026#39; 5,0-5,0: ENDMARKER \u0026#39;\u0026#39; 这就是解析器如何看待程序的。当解析器需要一个标记时，它将通过标记器来获得。标记器每次从缓冲区读取一个字符然后尝试进行前缀匹配一些类型的标记。 标记器如何处理不同的编码？它是基于 io 模块。首先，标记器检测编码。如果没有指定编码则默认 UTF-8 ，然后标记器通过等价于 Python 的 open(fd, mode='r', encoding=enc) 的 C 调用打开文件 ，然后通过调用 readline 读取内容。这个函数返回 unicode 字符串。 标记器读取的字符仅仅是该字符的 UTF-8 编码的字节码（或者 EOF）。\n我们可以在文法中直接定义数字或名称，尽管它会变得更加复杂。我们无法做的是在语法中表达缩进的重要性，而又不使上下文敏感，并因此不适合解析。 标记器通过提供 INDENT 和 DEDENT 标记让解析器的工作更加简单。它们和像 C 语言中的大括号具有相同的意义。标记器足够强大去处理缩进是因为 它有状态。当前缩进通过栈顶保存，并会随着层级增加而进行压栈，随着层级减少而出栈。\n旧的解析器是 CPython 代码中的重要部分。文法的 DFA 规则自动生成，但是解析器的其他部分则是手动实现。这与新解析器相反，新的解析器似乎是解决解析 Python 代码问题的更优雅的方案。\n新解析器（new parser） 新解析器带来了新的文法。这个文法是解析表达文法（Parsing Expression Grammar，PEG）。要理解 PEG 最重要是一点就是不仅仅是一组文法。它是另一种定义 文法的方法。PEG 作为一个工具描述编程语言并基于描述生成解析器在 2004 年由布莱恩·福特（Bryan Ford）推出。PEG 区别于传统形式文法的地方在于它的规则 将非端点映射到解析表达式，而不仅仅是符号序列。这也是 CPython 的精神。解析表达式是归纳定义的。 如果 e，\\(e_1\\) 和 \\(e_2\\) 是解析表达式，那么：\n空字符串 任意端点 任意非端点 \\(e_{1}e_{2}\\) ：序列 $e_1 | e_2 $ ：优先选择 \\(e*\\) ：零个或多个重复 \\(!e\\) : 非 PEG 是分析文法，也就是说它们被设计不仅仅生成语言同时也可以分析语言。\n脚注 grammar 和 syntax 都有语法的意思，这里将 grammar 翻译成文法以区分。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n参见维基百科 Terminal and nonterminal symbols 、形式语言和形式文法。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n递归下降解析\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://notes.0081800.xyz/notes/20201015182827-python_behind_the_scenes_2_how_the_cpython_compiler_works/","summary":"tags: Translate,Incomplete,Python Python 幕后 #2: CPython 编译器如何工作 今天的主题（Today\u0026rsquo;s subject） 在本系列的第一篇文章中我们研究了 Python 虚拟机。我们学了解到它通过执行一系列叫做字节码（bytecode）的指令。 我们也看到 Python 字节码没有完全描述代码片段的行为。这也是为什么存在一个代码对象（code object）的概念。 执行诸如函数或模块的代码块也就是执行对应的代码对象。代码对象包含了代码块的字节码，包含代码中使用的常量和变量名， 还有代码块的一些属性。\n通常，一个 Python 程序员不用编写字节码，并且也不用创建代码对象，而是编写正常的 Python 代码。所有 CPython 必须 能够将源代码转换成代码对象。CPython 编译器就负责这部分工作。我们将通过这部分内容探索它是如何工作的。\nNote: 本文参考 CPython 3.9。一些实现细节将必然会随着 CPython 的演进而改变。 我将会尝试关注一些重要的改变并添加更新备注。\n什么是 CPython 编译器（What CPython compiler is） 我们已经了解了 CPython 编译器的职责，但是在我们进入到它是如何实现的之前，让我们首先来搞清楚为什么我们称之为编译器？\n在通常情况加，编译器是一个将一个程序语言翻译到另一个与之等价的程序语言的程序。编译器有许多种类，但是通常情况下我们 讨论的都是静态编译：将一个高级语言的程序翻译成机器码。CPython 编译器也是这样吗？要回答这个问题，我们先看一下静态编 译器的传统三阶段设计（three-stage design）。\n编译器前端（frontend）将源代码转换成一种中间语言（IR,intermediate representation）。然后优化器（optimzer）拿到中间语言 对其进行优化并把优化过的中间语言传递给编译器后端生成机器码。如果我们选择一种源语言和目标机器无关的中间语言，我们就 得到了三阶段设计的关键益处：对于一个编译器来说，支持一种新的源语言仅仅需要新增一个对应的编译器前端，支持一种新的目标机器 仅仅需要新增一个对应的编译器后端。\nLLVM 工具集（toolchain）就是这个模型的一个很好的成功的例子。有很多编译器前端如 C、Rust、Swift 等其他很多编程语言基于 LLVM 提供给编译器更加复杂的部分。LLVM 的创建者 Chris Latter 提供了一个很好的 LLVM 架构概览。\nCPython 尽管不需要支持多个源语言和目标机器，尔仅仅需要支持 Python 代码和 CPython 虚拟机。不过，CPython 同样实现了三阶段设计。 如果想知道为什么，我们需要更加详细的解释编译器的三阶段的每个阶段。","title":"Python behind the scenes #2: how the CPython compiler works"},{"content":" tags: Emacs\nM-x straight-thaw-versions RET 恢复到锁定的版本\nM-x straight-pull-all RET 更新所有包\nM-x straight-freeze-versions RET 锁定当前版本\nDuplicated with straight.el 更新所有已安装的包\n","permalink":"https://notes.0081800.xyz/notes/20201006200745-straight_el_%E6%9B%B4%E6%96%B0/","summary":"tags: Emacs\nM-x straight-thaw-versions RET 恢复到锁定的版本\nM-x straight-pull-all RET 更新所有包\nM-x straight-freeze-versions RET 锁定当前版本\nDuplicated with straight.el 更新所有已安装的包","title":"straight.el 命令"},{"content":" straight-thaw-versions straight-pull-all straight-freeze-versions ","permalink":"https://notes.0081800.xyz/notes/20201006200745-straight_el_%E6%9B%B4%E6%96%B0%E6%89%80%E6%9C%89%E5%B7%B2%E5%AE%89%E8%A3%85%E7%9A%84%E5%8C%85/","summary":" straight-thaw-versions straight-pull-all straight-freeze-versions ","title":"straight.el 更新所有已安装的包"},{"content":" tags: Emacs source: https://www.gnu.org/software/emacs/manual/html%5Fnode/emacs/Uniquify.html ","permalink":"https://notes.0081800.xyz/notes/20200927170116-emacs_buffer_%E5%90%8D%E5%AD%97%E5%8E%BB%E9%87%8D/","summary":" tags: Emacs source: https://www.gnu.org/software/emacs/manual/html%5Fnode/emacs/Uniquify.html ","title":"Emacs Buffer 名字去重"},{"content":"具有“长度”概念的函数。在线性代数、泛函分析等相关数学领域，是一个函数，其为向量空间内所有向量赋予非零的正长度或大小。\n","permalink":"https://notes.0081800.xyz/notes/20200912102351-%E8%8C%83%E6%95%B0/","summary":"具有“长度”概念的函数。在线性代数、泛函分析等相关数学领域，是一个函数，其为向量空间内所有向量赋予非零的正长度或大小。","title":"范数（norm）"},{"content":"\\[MAE(X,h) = \\frac{1}{m}\\sum_{i=1}^{m}\\left\\lvert h(x^{(i)} - y ^{i})\\right\\rvert\\]\n","permalink":"https://notes.0081800.xyz/notes/20200912101549-mae_%E5%B9%B3%E5%9D%87%E7%BB%9D%E5%AF%B9%E8%AF%AF%E5%B7%AE/","summary":"\\[MAE(X,h) = \\frac{1}{m}\\sum_{i=1}^{m}\\left\\lvert h(x^{(i)} - y ^{i})\\right\\rvert\\]","title":"MAE（平均绝对误差）"},{"content":"测量预测过程中的预测错误的标准差。\n公式\n\\[RMSE(X,h)=\\sqrt{\\frac{1}{m}\\sum_{i=1}^{m}(h(x^{(i)}) - y^{(i)})^2}\\]\nm 是你在测量 RMSE 时，所使用的数据集中实例的数量 \\(x^{(i)}\\) 是数据集中第 \\(i\\) 个实例的所有特征值的向量（标签特征除外），\\(y{(i)}\\) 是标签（也就是我们期待该实例的输出值） X 是数据集中所有实例所有特征值的矩阵（标记特征除外）。每个实例一行，也就是说第 \\(i\\) 行等于 \\(x^{(i)}\\) 的转置矩阵1，记作 \\((x^{(i)})^T\\) h 是系统的预测函数，也称为一个假设。当给定系统一个实例的特征向量 \\(x^{(i)}\\) ，他会输出一个预测值 \\(\\hat{y}=h(x^{(i)})\\) RMSE(X,h) 是使用假设 h 在示例上测量的成本函数。 转置运算符会将列向量转换成行向量。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://notes.0081800.xyz/notes/20200912094544-rmse_%E5%9D%87%E6%96%B9%E6%A0%B9%E8%AF%AF%E5%B7%AE/","summary":"测量预测过程中的预测错误的标准差。\n公式\n\\[RMSE(X,h)=\\sqrt{\\frac{1}{m}\\sum_{i=1}^{m}(h(x^{(i)}) - y^{(i)})^2}\\]\nm 是你在测量 RMSE 时，所使用的数据集中实例的数量 \\(x^{(i)}\\) 是数据集中第 \\(i\\) 个实例的所有特征值的向量（标签特征除外），\\(y{(i)}\\) 是标签（也就是我们期待该实例的输出值） X 是数据集中所有实例所有特征值的矩阵（标记特征除外）。每个实例一行，也就是说第 \\(i\\) 行等于 \\(x^{(i)}\\) 的转置矩阵1，记作 \\((x^{(i)})^T\\) h 是系统的预测函数，也称为一个假设。当给定系统一个实例的特征向量 \\(x^{(i)}\\) ，他会输出一个预测值 \\(\\hat{y}=h(x^{(i)})\\) RMSE(X,h) 是使用假设 h 在示例上测量的成本函数。 转置运算符会将列向量转换成行向量。\u0026#160;\u0026#x21a9;\u0026#xfe0e;","title":"RMSE（均方根误差）"},{"content":"公式 RMSE（均方根误差） MAE（平均绝对误差） 概念 标准差（Std Dev） 范数 方差 皮尔逊相关系数（标准相关系数） 线性相关性 ","permalink":"https://notes.0081800.xyz/notes/20200912093811-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%B6%89%E5%8F%8A%E6%95%B0%E5%AD%A6%E6%A6%82%E5%BF%B5/","summary":"公式 RMSE（均方根误差） MAE（平均绝对误差） 概念 标准差（Std Dev） 范数 方差 皮尔逊相关系数（标准相关系数） 线性相关性 ","title":"机器学习涉及数学概念"},{"content":" tags: Translate,Python 原文链接：Python behind the scenes #1: how the CPython VM works。\nPython 幕后 #1: CPython 虚拟机如何工作 介绍（Introduction） 你是否曾经好奇过当你运行 Python 代码时 python 做了些什么？\n$ python script.py 这篇文章将开启一个系列来尝试解答这个问题。我们将深入 Python 最流行的实现 CPython 的内部。 通过深入 CPython 的内部我们将更深一层的去理解这门编程语言本身。这也是我们这个系列的最主要的目标。 如果你熟悉 Python 并且可以阅读 C 代码，但是对 CPython 源码本身没有太多的经验， 那么你可能非常适合本系列，并且对本系列感兴趣。\n什么是 CPython 并且为什么有人想学习它（What CPython is and why anyone would want to study it） 我们首先来说明一些众所周知的事情。CPython 是用 C 编写的 Python 解析器。他是 Python 语言的众多实现 的一种，其他还有诸如 PyPy、Jython、IronPython 等。CPython 的独特之处在于它是 Python 的起源、维护时间最长也是最受欢迎的。\nCPython 实现了 Python，但是 Python 是什么？最简单的一个答案可能是：Python 是一门编程语言。 当正确问相同的问题，那么答案将会更加明确：什么定义了 Python？Python 不像 C 语言有正式的规范， 但是与之相近的是 Python 语言参考（Python Language Reference），它以如下内容开始：\n我希望尽可能地保证内容精确无误，但还是选择使用自然词句进行描述，正式的规格定义仅用于句法和词法解析。这样应该能使文档对于普通人来说更易理解，但也可能导致一些歧义。因此，如果你是来自火星并且想凭借这份文档把 Python 重新实现一遍，也许有时需要自行猜测，实际上最终大概会得到一个十分不同的语言。而在另一方面，如果你正在使用 Python 并且想了解有关该语言特定领域的精确规则，你应该能够在这里找到它们。如果你希望查看对该语言更正式的定义，也许你可以花些时间自己写上一份 \u0026mdash; 或者发明一台克隆机器 :-)\n所以 Python 不仅仅通过语言参考定义，说 Python 是通过语言参考定义的实现或者说是 CPython 都是错误的， 因为其中的一些实现细节并不是语言的一部分。一个基于引用计数的垃圾回收器就是例子。由于没有一个来说法是正确的， 我们可以说 Python 的一部分是由 Python 语言参考（Python Language Reference）定义， 一部分是它的主要实现 CPython 定义。\n这样的结论似乎很古怪，但是我认为这对我们弄清我们要学习的主题至关重要。我们可能依然困惑我们为什么需要学习它。 除了好奇心，我认为还有如下理由：\n拥有完整的视角可以更深入的理解这门语言。如果了解一些 Python 的细节那么就更容易掌握一些 Python 特性。 在实践中实现细节很重要。当想要了解语言适用性及其局限性、评估性能或检测效率低下时，了解对象如何存储， 垃圾回收器如何工作，以及如何协调多个线程将是非常重要的。 CPython 提供了 Python/C API 来允许我们用 C 扩展 Python 或者在 C 中嵌入 Python。 程序员需要很好的理解 CPython 如何工作才能高效的使用这些 API。 了解 CPython 如果工作需要做些什么（What it takes to understand how CPython works） CPython 被设计成易于维护。一个新人完全可以阅读源代码并理解代码做了些什么。但是，这可能需要一些时间。 通过这个系列我希望能帮助你缩短这个时间。\n这个系列如何推进（How this series is laid out） 我选择采取自上而下的方法。在这个部分我们将探索 CPython 虚拟机的核心概念。接下来，我们将看到 CPython 如何编译一个程序到 VM 可以执行的内容。再然后，我们将熟悉源代码，并通过执行一个程序 来学习解释器的主要部分。最后，我们可以挑选语言不同的方面来一个接一个的去看看它们是如何实现的。 这是我的一个大概的想法，并不是一个严格的计划。\nNote: 本文参考 CPython 3.9。一些实现细节将必然会随着 CPython 的演进而改变。 我将会尝试关注一些重要的改变并添加更新备注。\n鸟瞰（The big picture） 执行一个 Python 程序大概经过三个阶段：\n初始化（Initialization） 编译（Compilation） 解释（Interpretation） 在初始化阶段，CPython 初始化运行 Python 所需要的数据结构。同时也准备一些诸如 内建类型、配置和加载内建模块，初始化导入系统（import system）和一些其他的事情。 这是一个非常重要的阶段，但是由于其功能性质这个阶段也是常被 CPython 的探索者忽略的一个阶段。\n接下来是编译阶段。CPython 在某种意义上是一个解释器而不是编译器，因为它不输出机器码。 但是解释器通常会在执行之前把源代码翻译成一种中间语言（intermediate representation）。 CPython 也是如此。这个翻译阶段和一个典型的编译器做同样的事情：解析源代码然后构建 AST（Abstract Syntax Tree）、 通过 AST 生成字节码、甚至执行一些字节码优化的操作。\n在进入下一阶段之前，我们需要理解什么是字节码（bytecode）。字节码是一系列的指令。 每一个指令由两个字节组成：一个为 opcode，一个为参数（argument）。看如下例子：\ndef g(x): return x + 3 CPython 将函数定义 g 翻译成一个字节序列：[124, 0, 100, 1, 23, 0, 83, 0]。 如果我们运行标准库 dis 1去反汇编它，我们将会得到如下内容：\n2 0 LOAD_FAST 0 (x) 2 LOAD_CONST 1 (3) 4 BINARY_ADD 6 RETURN_VALUE 字节 124 表示 opcode LOAD_FAST 并且有一个参数 0 。字节 100 表示 opcode LOAD_CONST 并且有一个参数 1 。 BINARY_ADD 和 RETURN_VALUE 指令不需要参数所以总是被编码成 (23, 0) 和 (83, 0) 。\nCPython 的核心就是一个运行字节码的虚拟机。通过查看上面例子你可能已经猜到它是如何工作的拉。 CPython 虚拟机一个基于栈的。也就意味这它执行指令并通过栈存储和获取数据。 LOAD_FAST 指令将局部变量压入栈， LOAD_CONST 压入一个常量， BINARY_ADD 从栈中弹出两个对象，然后进行相加并将结果放回栈。 最好 RETURN_VALUE 从栈弹出任意值然后将结果返回给调用者。\n当有指令需要运行时字节码运行在一个巨大的执行循环中， yield 一个值或者发生错误将导致它停止。\n这样一个简短概述引发了很多问题：\n参数对 opcode LOAD_FAST 和 LOAD_CONST 的意义是什么？他们是索引吗？他们如何索引？ VM 会在栈上放置值或者对象的引用吗？ CPython 如何知道 x 是一个局部变量。 如果参数太大无法放到一个字节内怎么办？ 连接两个字符串和两个数字相加是同一个指令吗？如果是，VM 如何处理这些操作之间的差异？ 要回答这些和其他一些有趣的问题我们需要先看一下 CPython VM 的一些核心概念。\n代码对象、函数对象、帧（Code objects, function objects, frames） 代码对象 我们已经看过一个简单的函数的字节码是什么样子的。但是一个典型的 Python 程序要复杂的多。 VM 如何执行一个包含程序定义和函数调用的模块（module）？\n考虑如下程序：\ndef f(x): return x + 1 print(f(1)) 它的字节码什么样子？让我们分析这个程序做了什么来解答这个问题。它定义了一个函数 f ， 通过一个参数 1 调用函数 f 然后打印结果。无论函数 f 做了什么都不会包含在模块字节码中。 我们可以通过运行一个反汇编来证明我们自己：\n1 0 LOAD_CONST 0 (\u0026lt;code object f at 0x10bffd1e0, file \u0026#34;example.py\u0026#34;, line 1\u0026gt;) 2 LOAD_CONST 1 (\u0026#39;f\u0026#39;) 4 MAKE_FUNCTION 0 6 STORE_NAME 0 (f) 4 8 LOAD_NAME 1 (print) 10 LOAD_NAME 0 (f) 12 LOAD_CONST 2 (1) 14 CALL_FUNCTION 1 16 CALL_FUNCTION 1 18 POP_TOP 20 LOAD_CONST 3 (None) 22 RETURN_VALUE 第一行通过从一些叫做代码对象（code object）的东西创建一个函数并绑定名字为 f 来定义函数 f 。 我们没有看到函数 f 用来返回一个自增的参数的字节码。\n被作为单一执行单元的代码片段如一个模块或者一个函数体被称为代码块。 CPython 存储关于代码块的信息的结构体就是代码对象（code object）。 它包含字节码和一些其他的比如代码块使用的变量名列表。运行一个模块或者调用一个函数意味着开始 执行相应的代码对象。\n函数对象（function object） 但是，函数不仅仅是代码对象。它必须包含一些额外的信息比如名字、文档字符串（docstring）、 默认参数和定义在闭包作用域中的变量的值。这些信息连同代码对象存储在一个函数对象里。 MAKE_FUNCTION 指令用于创建函数对象。CPython 中定义函数对象的源码前置了如下注释：\nFunction objects and code objects should not be confused with each other:\nFunction objects are created by the execution of the \u0026lsquo;def\u0026rsquo; statement. They reference a code object in their code attribute, which is a purely syntactic object, i.e. nothing more than a compiled version of some source code lines. There is one code object per source code \u0026ldquo;fragment\u0026rdquo;, but each code object can be referenced by zero or many function objects depending only on how many times the \u0026lsquo;def\u0026rsquo; statement in the source was executed so far.\n函数对象和代码对象不应互相混淆：\n函数对象通过执行 \u0026lsquo;def\u0026rsquo; 语句创建。它们通过他们的 code 属性引用一个代码对象，这个代码对象 是一些源代码编译后纯语法对象。每一个代码“片段（fragment）”都对应一个代码对象， 但是每一个代码对象都可以被零个或多个函数对象引用，取决于源码中的 \u0026lsquo;def\u0026rsquo; 语句目前为止被执行了多少次。\n多个函数对象如何饮用一个代码对象？这里有个例子：\ndef make_add_x(x): def add_x(y): return x + y return add_x add_4 = make_add_x(4) add_5 = make_add_x(5) make_add_x 函数的字节码包含了一个 MAKE_FUNCTION 指令。函数 add_4 和 add_5 是通过同一个 代码对象作为参数调用这个指令产生的结果，但是其参数 x 的值不相同。 每一个函数拥有自己的变量单元的机制允许我们创建如 add_4 和 add_5 的闭包函数。\n我们继续下一个主题之前推荐你看一下定义函数对象的代码：\nstruct PyCodeObject { PyObject_HEAD int co_argcount; /* #arguments, except *args */ int co_posonlyargcount; /* #positional only arguments */ int co_kwonlyargcount; /* #keyword only arguments */ int co_nlocals; /* #local variables */ int co_stacksize; /* #entries needed for evaluation stack */ int co_flags; /* CO_..., see below */ int co_firstlineno; /* first source line number */ PyObject *co_code; /* instruction opcodes */ PyObject *co_consts; /* list (constants used) */ PyObject *co_names; /* list of strings (names used) */ PyObject *co_varnames; /* tuple of strings (local variable names) */ PyObject *co_freevars; /* tuple of strings (free variable names) */ PyObject *co_cellvars; /* tuple of strings (cell variable names) */ Py_ssize_t *co_cell2arg; /* Maps cell vars which are arguments. */ PyObject *co_filename; /* unicode (where it was loaded from) */ PyObject *co_name; /* unicode (name, for reference) */ /* ... more members ... */ }; typedef struct { PyObject_HEAD PyObject *func_code; /* A code object, the __code__ attribute */ PyObject *func_globals; /* A dictionary (other mappings won\u0026#39;t do) */ PyObject *func_defaults; /* NULL or a tuple */ PyObject *func_kwdefaults; /* NULL or a dict */ PyObject *func_closure; /* NULL or a tuple of cell objects */ PyObject *func_doc; /* The __doc__ attribute, can be anything */ PyObject *func_name; /* The __name__ attribute, a string object */ PyObject *func_dict; /* The __dict__ attribute, a dict or NULL */ PyObject *func_weakreflist; /* List of weak references */ PyObject *func_module; /* The __module__ attribute, can be anything */ PyObject *func_annotations; /* Annotations, a dict or NULL */ PyObject *func_qualname; /* The qualified name */ vectorcallfunc vectorcall; } PyFunctionObject; 帧对象（frame object） 当执行一个代码对象时，VM 需要一直跟踪变量的值并不断的更新值栈（value stack）。 同时还需要记住在什么地方停止运行当前代码对象然后去运行其他的代码对象，并且在哪里返回。 CPython 在一个帧对象里存储这些信息，或者简单的说成帧。一个帧提供了一个哪个代码对象可以被执行的状态。 由于我们已经开始习惯源代码，所以这里我贴出帧对象的定义：\nstruct _frame { PyObject_VAR_HEAD struct _frame *f_back; /* previous frame, or NULL */ PyCodeObject *f_code; /* code segment */ PyObject *f_builtins; /* builtin symbol table (PyDictObject) */ PyObject *f_globals; /* global symbol table (PyDictObject) */ PyObject *f_locals; /* local symbol table (any mapping) */ PyObject **f_valuestack; /* points after the last local */ PyObject **f_stacktop; /* Next free slot in f_valuestack. ... */ PyObject *f_trace; /* Trace function */ char f_trace_lines; /* Emit per-line trace events? */ char f_trace_opcodes; /* Emit per-opcode trace events? */ /* Borrowed reference to a generator, or NULL */ PyObject *f_gen; int f_lasti; /* Last instruction if called */ /* ... */ int f_lineno; /* Current line number */ int f_iblock; /* index in f_blockstack */ char f_executing; /* whether the frame is still executing */ PyTryBlock f_blockstack[CO_MAXBLOCKS]; /* for try and loop blocks */ PyObject *f_localsplus[1]; /* locals+stack, dynamically sized */ }; 第一个帧被创建用来执行模块的代码对象。任何时候需要执行另外一个代码对象 CPython 都会创建创建新的 帧去执行该代码对象。每一个帧都有一个引用指向前一个帧。从而，帧形成了一个栈被称为调用栈，当前帧位于 顶部。当一个函数被调用，一个新的帧被压到栈上。当从当前执行帧返回时，CPython 通过记录的最后处理的指令 来继续执行前一个帧。某种意义上 CPython 除了执行帧其他什么也没做。但是接下来我们马上看到这个总结 善意的隐藏了某些细节。\n线程、解释器、运行时（Threads, interpreters, runtime） 我们已经讨论过三个重要的主题：\n代码对象 函数对象，和 帧对象 CPython 还有三个重要的主题：\n线程状态（thread stage） 解释器状态（interpreter state），和 运行时状态（runtime state） 线程状态 线程状态是一个包含线程特定数据栈数据结构，其中包含调用栈、异常状态和调试设置。 不应将其和系统线程（OS thread）混淆，尽管它们联系紧密。考虑当时使用标准库 threading 在一个单独的线程运行一个函数发生了什么：\nfrom threading import Thread def f(): \u0026#34;\u0026#34;\u0026#34;Perform an I/O-bound task\u0026#34;\u0026#34;\u0026#34; pass t = Thread(target=f) t.start() t.join() t.start 实际上创建通过系统调用（类 Unix 系统中通过 pthread_create ，Windows 通过 _beginthreadex ）了一个新的系统线程。新建的线程调用在 _thread 模块中的函数负责调 用相应的目标函数。这个函数不仅仅接收目标函数和目标函数的参数，同时一个新的线程状态 被用在了新建的系统线程上。系统线程通过它自己的线程状态进入执行循环，并一直持有。\n这里我们可能记得阻止多线程同时陷入执行循环的著名的 GIL（Global Interpreter Lock）。 主要原因是为了在不引入更多细粒度的锁的情况下保护 CPython 状态免受损坏。 Python C/API 参考清晰的解释了 GIL：\nThe Python interpreter is not fully thread-safe. In order to support multi-threaded Python programs, there’s a global lock, called the global interpreter lock or GIL, that must be held by the current thread before it can safely access Python objects. Without the lock, even the simplest operations could cause problems in a multi-threaded program: for example, when two threads simultaneously increment the reference count of the same object, the reference count could end up being incremented only once instead of twice.\nPython 解释器不是完全的线程安全。为了支持 Python 多线程程序，引入一个称为全局解释器锁或者 GILI 的全局锁， 当前线程必须持有该锁才能安全的访问 Python 对象。如果没有持有该锁，就连最简单的操作都会在多线程程序中引发 问题：比如，当两个线程同时增加同一个对象的引用计数，引用计数最终可能只被增加了一次。\n要管理多线程，就需要一个比线程状态更高层级的数据结构。\n解释器状态和运行时状态（interpreter and runtime states） 实际上，这是两个状态：解释器状态和运行时状态。两者的需求区分看起来似乎不明显。但是，任何程序 的执行都需要各个状态的最少一个实例，并且有合理的原因。\n解释器状态是一组线程以及该组相关的数据。线程共享诸如加载的模块（sys.modules）、内建对象（builtins.__dict__） 和导入系统（importlib）。\n运行时状态是一个全局变量。保存着进程相关的数据。包含 CPython 状态（是否初始化）和 GIL。\n通常情况下，一个进程的所有线程都属于同一个解释器。但是，有一些罕见的情况比如有人想创建一个子解释器来隔离一组线程。 比如 mod_wsgi 使用不同的解释器来运行 WSGI 程序。最明显的隔离效果是各组线程拥有它们自己版本的模块，包括 __main__ ， 也就是隔离全局命名空间（global namespace）。\nCPython 没有提供像 threading 模块那样简单的方式创建新的解释器。这个特性仅仅通过 Python/C API 提供支持， 但是未来有可能改善。\n架构摘要（Architecture summary） 让我们来快速总结 CPython 的架构来看看这一切是如何组织在一块的。解释器可以被看作分层结构（layer structure）。 这些层级概括为：\n运行时（Runtime）：进程的全局 CPython 状态；包含 GIL 和内存分配机制。 解释器（Interpreter）：一组线程和它们共享的数据，如导入的模块。 线程（Thread）：特定于单个系统线程的数据；包含调用栈。 帧（Frame）：调用栈的元素；提供执行一个代码对象的状态。 执行循环（Evalution loop）：执行一个代码对象（描述代码块做了什么，包含字节码、变量名字） 我们已经看到不同的层级通过相应的数据结构来表示。在某些情况下它们很难等效。比如，内存分配机制 通过使用全局变量来实现。这不是运行时状态的一部分，但是绝对是 CPython 运行时层级的一部分。\n总结（Conclusion） 在这一部分我们已经大体描述了 python 在执行一个 Python 程序时做了什么。我们已经看到它工作在三个状态：\n初始化 Python 运行时 编译源代码到一个模块代码对象；然后 执行代码对象的字节码。 解释器中负责执行字节码的部分称为虚拟机（VM，virtual machine）。CPython VM 包含一些特别重要的概念： 代码对象（code object）、帧对象（frame object）、线程状态（thread state）、解释器状态（interpreter state）和 运行时（runtime）。这些数据结构构成了 CPython 架构的核心。\n我们还有很多内容没有涉及到。我们避免陷入到源代码中。初始化和编译阶段完全超出了我们的范围。 相反，我们从虚拟机的概述开始。通过这种方式，我认为，我们可以更好的看到每个阶段所负责的内容。 现在我们知道 CPython 将源代码编译成了什么 \u0026ndash; 代码对象（code object）。 接下来我们将看到它是如何做到的。\n如果你有任何问题、评论或者建议，随时通过 victor@tenthousandmeters.com 联系原作者。\nUpdate 4 September 2020: I\u0026rsquo;ve made a list of resources that I\u0026rsquo;ve used to learn about CPython internals\n译注： python -c \u0026quot;import dis;dis.dis('''def g(x): return x + 3''')\u0026quot;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://notes.0081800.xyz/notes/20200908103647-python_behind_the_scenes_1_how_the_cpython_vm_works/","summary":"tags: Translate,Python 原文链接：Python behind the scenes #1: how the CPython VM works。\nPython 幕后 #1: CPython 虚拟机如何工作 介绍（Introduction） 你是否曾经好奇过当你运行 Python 代码时 python 做了些什么？\n$ python script.py 这篇文章将开启一个系列来尝试解答这个问题。我们将深入 Python 最流行的实现 CPython 的内部。 通过深入 CPython 的内部我们将更深一层的去理解这门编程语言本身。这也是我们这个系列的最主要的目标。 如果你熟悉 Python 并且可以阅读 C 代码，但是对 CPython 源码本身没有太多的经验， 那么你可能非常适合本系列，并且对本系列感兴趣。\n什么是 CPython 并且为什么有人想学习它（What CPython is and why anyone would want to study it） 我们首先来说明一些众所周知的事情。CPython 是用 C 编写的 Python 解析器。他是 Python 语言的众多实现 的一种，其他还有诸如 PyPy、Jython、IronPython 等。CPython 的独特之处在于它是 Python 的起源、维护时间最长也是最受欢迎的。","title":"Python behind the scenes #1: how the CPython VM works"},{"content":"将数据分成两部分：训练集和测试集，通常使用 80% 的数据进行训练，20% 的数据用来测试。\n验证集 单独分出来一个保留集合作为验证集，防止调整模型和超参数拟合测试集的最佳模型。\n交叉验证 为避免验证集浪费太多数据，交叉验证将训练集分成若干个互补子集，然后每个模型都通过这些子集的不同组合来 训练，之后用剩余的子集进行验证。\n","permalink":"https://notes.0081800.xyz/notes/20200907081217-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%B5%8B%E8%AF%95%E4%B8%8E%E9%AA%8C%E8%AF%81/","summary":"将数据分成两部分：训练集和测试集，通常使用 80% 的数据进行训练，20% 的数据用来测试。\n验证集 单独分出来一个保留集合作为验证集，防止调整模型和超参数拟合测试集的最佳模型。\n交叉验证 为避免验证集浪费太多数据，交叉验证将训练集分成若干个互补子集，然后每个模型都通过这些子集的不同组合来 训练，之后用剩余的子集进行验证。","title":"机器学习测试与验证"},{"content":"训练数据的数量不足 训练数据不具代表性 质量差的数据 无关特征 特征工程 一个成功的机器学习项目，关键部分是提取一组好的用了训练的特征集，这个过程叫做特征工程。\n特征选择 特征提取 通过手机数据创造新的特征 训练数据过度拟合 在模型的训练数据上表现良好，但是泛化时却不尽人如意。\n解决方法\n简化模型 收集更多的训练数据 减少训练数据中的噪声（修复数据错误和消除异常值） 正则化 通过约束模型使其更简单，并降低过度拟合风险。\n超参数 通过调整超参数来调整应用正则化的程度。调整超参数是构建机器学习系统的非常重要的组成部分。\n训练数据拟合不足 解决方法：\n选择一个带有更多参数、更强大的模型 给学习算法提供更好的特征集 减少模型中的约束（如减少正则化超参数） ","permalink":"https://notes.0081800.xyz/notes/20200907080323-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E4%B8%BB%E8%A6%81%E6%8C%91%E6%88%98/","summary":"训练数据的数量不足 训练数据不具代表性 质量差的数据 无关特征 特征工程 一个成功的机器学习项目，关键部分是提取一组好的用了训练的特征集，这个过程叫做特征工程。\n特征选择 特征提取 通过手机数据创造新的特征 训练数据过度拟合 在模型的训练数据上表现良好，但是泛化时却不尽人如意。\n解决方法\n简化模型 收集更多的训练数据 减少训练数据中的噪声（修复数据错误和消除异常值） 正则化 通过约束模型使其更简单，并降低过度拟合风险。\n超参数 通过调整超参数来调整应用正则化的程度。调整超参数是构建机器学习系统的非常重要的组成部分。\n训练数据拟合不足 解决方法：\n选择一个带有更多参数、更强大的模型 给学习算法提供更好的特征集 减少模型中的约束（如减少正则化超参数） ","title":"机器学习的主要挑战"},{"content":"监督式/无监督式学习 监督式学习 定义 训练数据经过标注包含素所需解决方案（标签或标记）\n相关算法 K-邻近算法 线性回归 逻辑回归：广泛用于分类，输出“属于某个给定类别的概率”的值 支持向量机 决策树和随机森林 神经网络 适应场景 分类任务 预测变量 无监督式学习 定义 训练数据未经标注\n相关算法 聚类算法 K-平均算法 分层聚类分析 最大期望算法 可视化和降维 主成分分析 核主成分分析 局部线性嵌入 t-分布随机临近嵌入 关联规则学习 Apriori Eclat 适应场景 通过聚类算法检测相似（层次聚类算法精度更高，可以再次细分） 可视化算法 降维：不丢失太多信息的前提下简化数据，方法之一是合并特征，过程叫做特征提取 异常检测：判断新的输入是正常还是异常，数据初筛、防作弊等 关联规则学习：发现属性之间有趣的联系 半监督式学习 大量未标记数据和少量标记数据进行学习。\n强化学习 观察环境、作出选择、执行操作、并获得回报（负值则为惩罚）。\n批量学习和在线学习 在数据流中进行增量学习。\n批量学习 在线学习 在线学习也称为增量学习，同时支持恢复到上一状态，便于检测到性能下降及时中断和回滚。\n核外学习 超大数据集超出一台计算机的主存储器，每次加载部分数据并不断重复直至完成训练。\n学习率 学习率高系统迅速适应新数据，同时快速忘记老数据，学习率低则反之。\n基于实例和基于模型的学习 基于实例的学习 系统完全记住学习示例，然后通过某种相似度度量方式将其泛化到新的实例。\n基于模型的学习 模型选择 观察数据得出模型的过程。\n衡量模型表现 定义效用函数（或适应度函数）来衡量模型有多好 定义成本函数来衡量模型有多差 线性回归通常选择成本函数来衡量线性模型的预测和训练实例之间的差距。\n线性回归算法的意义所在：通过你提供的训练样本，找出最符合所提供数据的线性模型的参数，这就是训练过程。\n","permalink":"https://notes.0081800.xyz/notes/20200907074200-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E7%A7%8D%E7%B1%BB/","summary":"监督式/无监督式学习 监督式学习 定义 训练数据经过标注包含素所需解决方案（标签或标记）\n相关算法 K-邻近算法 线性回归 逻辑回归：广泛用于分类，输出“属于某个给定类别的概率”的值 支持向量机 决策树和随机森林 神经网络 适应场景 分类任务 预测变量 无监督式学习 定义 训练数据未经标注\n相关算法 聚类算法 K-平均算法 分层聚类分析 最大期望算法 可视化和降维 主成分分析 核主成分分析 局部线性嵌入 t-分布随机临近嵌入 关联规则学习 Apriori Eclat 适应场景 通过聚类算法检测相似（层次聚类算法精度更高，可以再次细分） 可视化算法 降维：不丢失太多信息的前提下简化数据，方法之一是合并特征，过程叫做特征提取 异常检测：判断新的输入是正常还是异常，数据初筛、防作弊等 关联规则学习：发现属性之间有趣的联系 半监督式学习 大量未标记数据和少量标记数据进行学习。\n强化学习 观察环境、作出选择、执行操作、并获得回报（负值则为惩罚）。\n批量学习和在线学习 在数据流中进行增量学习。\n批量学习 在线学习 在线学习也称为增量学习，同时支持恢复到上一状态，便于检测到性能下降及时中断和回滚。\n核外学习 超大数据集超出一台计算机的主存储器，每次加载部分数据并不断重复直至完成训练。\n学习率 学习率高系统迅速适应新数据，同时快速忘记老数据，学习率低则反之。\n基于实例和基于模型的学习 基于实例的学习 系统完全记住学习示例，然后通过某种相似度度量方式将其泛化到新的实例。\n基于模型的学习 模型选择 观察数据得出模型的过程。\n衡量模型表现 定义效用函数（或适应度函数）来衡量模型有多好 定义成本函数来衡量模型有多差 线性回归通常选择成本函数来衡量线性模型的预测和训练实例之间的差距。\n线性回归算法的意义所在：通过你提供的训练样本，找出最符合所提供数据的线性模型的参数，这就是训练过程。","title":"机器学习系统的种类"},{"content":"概览 机器学习系统的种类 机器学习的主要挑战 机器学习测试与验证 模型是观察的简化。\n相关数学概念 机器学习涉及数学概念 ","permalink":"https://notes.0081800.xyz/notes/20200905075701-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/","summary":"概览 机器学习系统的种类 机器学习的主要挑战 机器学习测试与验证 模型是观察的简化。\n相关数学概念 机器学习涉及数学概念 ","title":"《机器学习实战》读书笔记"},{"content":" scikit-learn 提供一些常见的机器学习算法 逻辑回归(Logistic Regression aka LR) 线性分类器 XGBoost 提供随机森林解决逻辑回归特征不明显的问题 ","permalink":"https://notes.0081800.xyz/notes/20200903180214-machine_learning/","summary":" scikit-learn 提供一些常见的机器学习算法 逻辑回归(Logistic Regression aka LR) 线性分类器 XGBoost 提供随机森林解决逻辑回归特征不明显的问题 ","title":"Machine Learning"},{"content":" tags: Rust,Learning English\nunwinding\n","permalink":"https://notes.0081800.xyz/notes/20200829081145-rust_obscure_words_for_non_native_english_speakers/","summary":"tags: Rust,Learning English\nunwinding","title":"Rust Obscure Words for non-native English speakers"},{"content":" tags: Rust Future async fn 将一个代码块转换为一个 Future 对象， Future 对象维护一个状态机 Future 对象必须运行在一个 Executor 上 Executor futures::executor::block_on 阻塞当前线程直到 future 完成\n// `block_on` blocks the current thread until the provided future has run to // completion. Other executors provide more complex behavior, like scheduling // multiple futures onto the same thread. use futures::executor::block_on; async fn hello_world() { println!(\u0026#34;hello, world!\u0026#34;); } fn main() { let future = hello_world(); // Nothing is printed block_on(future); // `future` is run and \u0026#34;hello, world!\u0026#34; is printed } await await 异步的等待 future 完成，不阻塞当前线程，可以配合 futures::join! 可以同时 await 多个 future futures::try_join! 如果其中一个子 future 返回错误则立即返回（join! 需要等所有 future 全部返回） futures::select! 任意一个 future 完成则立即返回 async fn learn_and_sing() { // Wait until the song has been learned before singing it. // We use `.await` here rather than `block_on` to prevent blocking the // thread, which makes it possible to `dance` at the same time. let song = learn_song().await; sing_song(song).await; } async fn async_main() { let f1 = learn_and_sing(); let f2 = dance(); // `join!` is like `.await` but can wait for multiple futures concurrently. // If we\u0026#39;re temporarily blocked in the `learn_and_sing` future, the `dance` // future will take over the current thread. If `dance` becomes blocked, // `learn_and_sing` can take back over. If both futures are blocked, then // `async_main` is blocked and will yield to the executor. futures::join!(f1, f2); } fn main() { block_on(async_main()); } ","permalink":"https://notes.0081800.xyz/notes/20200828160809-rust_asynchronous_programming/","summary":"tags: Rust Future async fn 将一个代码块转换为一个 Future 对象， Future 对象维护一个状态机 Future 对象必须运行在一个 Executor 上 Executor futures::executor::block_on 阻塞当前线程直到 future 完成\n// `block_on` blocks the current thread until the provided future has run to // completion. Other executors provide more complex behavior, like scheduling // multiple futures onto the same thread. use futures::executor::block_on; async fn hello_world() { println!(\u0026#34;hello, world!\u0026#34;); } fn main() { let future = hello_world(); // Nothing is printed block_on(future); // `future` is run and \u0026#34;hello, world!","title":"Rust Asynchronous Programming"},{"content":" tags: Go 目标 当跟随这篇文章完成后将产出如下内容：\n代码 http://gitlab.17zuoye.net/vgo/go-swagger-example 文档 http://swagger.17zuoye.net/?url=http%3A%2F%2F10.200.242.61%3A9090%2Fswagger.json 准备 Go1.14 及以上版本 安装 go-swagger ：参见 官方文档。 接下来使用 gin 框架作为示例，如果之前没接触过可以先了解下该框架 创建一个项目 $ mkdir go-swagger-example $ cd go-swagger-example/ $ go mod init gitlab.17zuoye.net/vgo/go-swagger-example 开始使用 首先在你的 `main.go` 定义 go generate 像下面这样：\n//go:generate swagger generate spec -o ./swagger.yml package main func main() { println(\u0026#34;Hello world!\u0026#34;); } 此时如果运行 go generate 在项目目录下就会生成一个 swagger.yml 文件：\npaths: {} swagger: \u0026#34;2.0\u0026#34; 使用单独的包托管 swagger 相关定义 在之前实践的过程中发现，如果在多个包中定义了相同名称的结构体会到只一个结构体覆盖另外一个结构体的定义。 所以为了解决这个问题，我把所有 swagger 相关的定义都放在同一个包下来避免相同名字的结构体。\n创建 swagger/swagger.go 填充如下内容：\n// Package swagger defines API documentation. // // Swagger 演示后端接口 // // Schemes: http // Host: 10.200.242.35:8080 // BasePath: /api/ // Version: 0.1.0 // Contact: 王会\u0026lt;hui.wang.a@17zuoye.com\u0026gt; // // Consumes: // - application/json // // Produces: // - application/vnd.17zuoye.v1+json // // swagger:meta package swagger 上面文件通过注释来定义了一些接口相关的信息，包括：\nSchemes 定义可用的协议 Host 定义接口地址 BasePath 定义接口基础路径 Consumes 定义复杂请求的类型（可以覆盖） Produces 定义接口响应类型（可以覆盖） 还有一些其他的信息，比如联系人等。 通过 swagger:meta 来结束声明。\n此时我们再次运行 go generate 将会得到如下 swagger.yml 定义：\nbasePath: /api/ consumes: - application/json host: 10.200.242.35:8080 info: contact: email: hui.wang.a@17zuoye.com name: 王会 description: Swagger 演示后端接口 title: defines API documentation. version: 0.1.0 paths: {} produces: - application/vnd.17zuoye.v1+json schemes: - http swagger: \u0026#34;2.0\u0026#34; 编写接口文档 准备 service 包 我们打算将接口实现相关代码放在 service 包下，首先来创建 service/service.go ：\npackage service import ( \u0026#34;github.com/gin-gonic/gin\u0026#34; ) var Engine = gin.Default() var Router = Engine.Group(\u0026#34;/api\u0026#34;) func init() { // Mount handlers to gin here } POST 提交信息 假设我们编写一个创建用户信息的接口，需要名字和年龄两个参数。我们在 service 包下创建 user.go\npackage service import ( \u0026#34;github.com/gin-gonic/gin\u0026#34; ) func CreateUser(c *gin.Context) { } func init() { // swagger:route POST /users users-create // // 创建用户。 // // Responses: // default: DefaultResponse // 201: UserResponse Router.POST(\u0026#34;/users\u0026#34;, CreateUser) } 通过上面代码中的注释我们创建了一个 Swagger 中的 route 其 ID 是 users-create 。 我们在注释中也声明了响应，但是我们目前还没有定义参数和对应的响应。\nGo Swagger 的参数定义是反向的，意思就是你需要定义一个 parameter 然后指明用在哪个 route 或 operation 上（通过对应的 ID）。下面就让我们一起来看一看，我们来创建 swagger/user.go ：\npackage swagger // UserCreateForm 用于创建用户的表单，可以供 gin 使用 type UserCreateForm struct { Username string `json:\u0026#34;username\u0026#34;` Age int `json:\u0026#34;age\u0026#34;` } // UserCreateParams 声明 Swagger 参数生成文档 // swagger:parameters users-create type UserCreateParams struct { // in: body Body UserCreateForm } // UserEntity user entity to respond type UserEntity struct { ID uint64 `json:\u0026#34;id\u0026#34;` Username string `json:\u0026#34;username\u0026#34;` Age int `json:\u0026#34;age\u0026#34;` } // UserResponse 声明 Swagger 响应用于文档生成 // swagger:response type UserResponse struct { // in: body Body UserEntity } 接下来调整 swagger/swagger.go 定义 DefaultResponse:\n// Package swagger defines API documentation. // // Swagger 演示后端接口 // // Schemes: http // Host: 10.200.242.35:8080 // BasePath: /api/ // Version: 0.1.0 // Contact: 王会\u0026lt;hui.wang.a@17zuoye.com\u0026gt; // // Consumes: // - application/json // // Produces: // - application/vnd.17zuoye.v1+json // // swagger:meta package swagger // Default default entity type Default struct { Code int `json:\u0026#34;code\u0026#34;` Message string `json:\u0026#34;msg\u0026#34;` } // DefaultResponse 默认响应，用于 Swagger 文档生成 // swagger:response type DefaultResponse struct { // in: body Body Default } 现在我们运行 go generate 将会生成如下 swagger.yml\nbasePath: /api/ consumes: - application/json definitions: Default: description: Default default entity properties: code: format: int64 type: integer x-go-name: Code msg: type: string x-go-name: Message type: object x-go-package: gitlab.17zuoye.net/vgo/go-swagger-example/swagger UserEntity: description: UserEntity user entity to respond properties: age: format: int64 type: integer x-go-name: Age id: format: uint64 type: integer x-go-name: ID username: type: string x-go-name: Username type: object x-go-package: gitlab.17zuoye.net/vgo/go-swagger-example/swagger UserCreateForm: description: UserCreateForm 用于创建用户的表单，可以供 gin 使用 properties: age: format: int64 type: integer x-go-name: Age username: type: string x-go-name: Username type: object x-go-package: gitlab.17zuoye.net/vgo/go-swagger-example/swagger host: 10.200.242.35:8080 info: contact: email: hui.wang.a@17zuoye.com name: 王会 description: Swagger 演示后端接口 title: defines API documentation. version: 0.1.0 paths: /users: post: operationId: users-create parameters: - in: body name: Body schema: $ref: \u0026#39;#/definitions/UserCreateForm\u0026#39; responses: \u0026#34;201\u0026#34;: $ref: \u0026#39;#/responses/UserResponse\u0026#39; default: $ref: \u0026#39;#/responses/DefaultResponse\u0026#39; summary: 创建用户。 produces: - application/vnd.17zuoye.v1+json responses: DefaultResponse: description: DefaultResponse 默认响应，用于 Swagger 文档生成 schema: $ref: \u0026#39;#/definitions/Default\u0026#39; UserResponse: description: UserResponse 声明 Swagger 响应用于文档生成 schema: $ref: \u0026#39;#/definitions/UserEntity\u0026#39; schemes: - http swagger: \u0026#34;2.0\u0026#34; 运行 swagger serve -F swagger swagger.yml 可查看文档。\n查询参数 接下来我们来编写查询接口文档，这次和上面创建稍有不同，参数通过 Query 进行传递， 编辑 service/user.go\npackage service import ( \u0026#34;github.com/gin-gonic/gin\u0026#34; ) func CreateUser(c *gin.Context) { } func QueryUsers(c *gin.Context) { } func init() { // swagger:route POST /users users-create // // 创建用户。 // // Responses: // default: DefaultResponse // 201: UserResponse Router.POST(\u0026#34;/users\u0026#34;, CreateUser) // swagger:route GET /users users-query // // 查询用户。 // // Respones: // default: DefaultResponse // 200: UsersResponse Router.GET(\u0026#34;/users\u0026#34;, QueryUsers) } 接下来调整 swagger/user.go 定义参数和响应：\npackage swagger // UserCreateForm 用于创建用户的表单，可以供 gin 使用 type UserCreateForm struct { Username string `json:\u0026#34;username\u0026#34;` Age int `json:\u0026#34;age\u0026#34;` } // UserCreateParams 声明 Swagger 参数生成文档 // swagger:parameters users-create type UserCreateParams struct { // in: body Body UserCreateForm } // UserEntity user entity to respond type UserEntity struct { ID uint64 `json:\u0026#34;id\u0026#34;` Username string `json:\u0026#34;username\u0026#34;` Age int `json:\u0026#34;age\u0026#34;` } // UserResponse 声明 Swagger 响应用于文档生成 // swagger:response type UserResponse struct { // in: body Body UserEntity } // UserQueryParams 声明 Swagger 参数生成文档 // swagger:parameters users-query type UserQueryParams struct { // json tag 用于 swagger // in: query Username string `json:\u0026#34;username\u0026#34; form:\u0026#34;username\u0026#34;` } // UsersResponse 用户列表响应 // swagger:response type UsersResponse struct { // in: body Body struct { Page int `json:\u0026#34;page\u0026#34;` PerPage int `json:\u0026#34;perPage\u0026#34;` Total int `json:\u0026#34;total\u0026#34;` Users []UserEntity `json:\u0026#34;users\u0026#34;` } } 运行 go generate \u0026amp;\u0026amp; swagger serve -F swagger swagger.yml 可查看效果。\nURL 中 Path 参数 如果我们要更新用户信息，按照 RESTful 的设计方式，请求的方式应该是 PATCH /api/users/:id ， 此时 route 已经无法满足，需要借助 operation 编写一些原始的 YAML 来实现，下面是调整 后的 service/user.go:\npackage service import ( \u0026#34;github.com/gin-gonic/gin\u0026#34; ) func CreateUser(c *gin.Context) { } func QueryUsers(c *gin.Context) { } func UpdateUser(c *gin.Context) { } func init() { // swagger:route POST /users users-create // // 创建用户。 // // Responses: // default: DefaultResponse // 201: UserResponse Router.POST(\u0026#34;/users\u0026#34;, CreateUser) // swagger:route GET /users users-query // // 查询用户。 // // Responses: // default: DefaultResponse // 200: UsersResponse Router.GET(\u0026#34;/users\u0026#34;, QueryUsers) // swagger:operation PATCH /users/{userId} users-update // // 更新用户信息。 // // --- // parameters: // - in: path // name: userId // type: int // description: 用户 ID // - in: body // name: Body // schema: // \u0026#34;$ref\u0026#34;: \u0026#34;#/definitions/UserCreateForm\u0026#34; // respones: // \u0026#34;200\u0026#34;: // \u0026#34;$ref\u0026#34;: \u0026#34;#/responses/UserResponse\u0026#34; // \u0026#34;default\u0026#34;: // \u0026#34;$ref\u0026#34;: \u0026#34;#/responses/DefaultResponse\u0026#34; Router.PATCH(\u0026#34;/users/:id\u0026#34;, UpdateUser) } 部署 可以通过 CI/CD 生成 swagger.yml 进行部署，然后将对应的 JSON 地址结合公司 http://swagger.17zuoye.net/ 进行部署查看。\n相关示例可以参考 http://gitlab.17zuoye.net/vgo/go-swagger-example\n","permalink":"https://notes.0081800.xyz/notes/20200828104706-go_swagger/","summary":"tags: Go 目标 当跟随这篇文章完成后将产出如下内容：\n代码 http://gitlab.17zuoye.net/vgo/go-swagger-example 文档 http://swagger.17zuoye.net/?url=http%3A%2F%2F10.200.242.61%3A9090%2Fswagger.json 准备 Go1.14 及以上版本 安装 go-swagger ：参见 官方文档。 接下来使用 gin 框架作为示例，如果之前没接触过可以先了解下该框架 创建一个项目 $ mkdir go-swagger-example $ cd go-swagger-example/ $ go mod init gitlab.17zuoye.net/vgo/go-swagger-example 开始使用 首先在你的 `main.go` 定义 go generate 像下面这样：\n//go:generate swagger generate spec -o ./swagger.yml package main func main() { println(\u0026#34;Hello world!\u0026#34;); } 此时如果运行 go generate 在项目目录下就会生成一个 swagger.yml 文件：\npaths: {} swagger: \u0026#34;2.0\u0026#34; 使用单独的包托管 swagger 相关定义 在之前实践的过程中发现，如果在多个包中定义了相同名称的结构体会到只一个结构体覆盖另外一个结构体的定义。 所以为了解决这个问题，我把所有 swagger 相关的定义都放在同一个包下来避免相同名字的结构体。\n创建 swagger/swagger.","title":"Go Swagger 实现代码即文档"},{"content":" tags: MySQL 启动 mysqld 时加上 --skip-grant-tables 参数可以无密码进入 MySQL。\n","permalink":"https://notes.0081800.xyz/notes/20200827195950-mysql_forget_password/","summary":"tags: MySQL 启动 mysqld 时加上 --skip-grant-tables 参数可以无密码进入 MySQL。","title":"MySQL forget password"},{"content":" tags: MySQL https://liuzhengyang.github.io/2017/04/18/innodb-mvcc/ 来自《高性能 MySQL》：\nInnoDB 在每一行都隐式的多存储两个字段：\n事务更新版本 事务删除版本 当事务开始时记录这两个版本，在读取的时候根据 Undo Log 和 Redo Log 来实现隔离级别的控制。序列化隔离级别下只能通过行锁来保证。\n在可重复读隔离级别下：\n首先判断事务更新版本是否大于事务开始前的版本 如果大于则根据 Undo Log 进行回退实现可重复读，这样在同一事务下不管读多少遍读取到的内容都是一样的。 可重复读隔离即便下无法避免幻读：即一开始没有读取到，随着其他插入事务的提交在同一事务里执行查询又能读取到的情况。\n","permalink":"https://notes.0081800.xyz/notes/20200827195823-mvcc/","summary":"tags: MySQL https://liuzhengyang.github.io/2017/04/18/innodb-mvcc/ 来自《高性能 MySQL》：\nInnoDB 在每一行都隐式的多存储两个字段：\n事务更新版本 事务删除版本 当事务开始时记录这两个版本，在读取的时候根据 Undo Log 和 Redo Log 来实现隔离级别的控制。序列化隔离级别下只能通过行锁来保证。\n在可重复读隔离级别下：\n首先判断事务更新版本是否大于事务开始前的版本 如果大于则根据 Undo Log 进行回退实现可重复读，这样在同一事务下不管读多少遍读取到的内容都是一样的。 可重复读隔离即便下无法避免幻读：即一开始没有读取到，随着其他插入事务的提交在同一事务里执行查询又能读取到的情况。","title":"MVCC"},{"content":" tags: MySQL,Network https://stackoverflow.com/a/38389851/2873718\nMySQL 授权用户子网段需要使用:\n172.16.0.0/255.240.0.0 而不能使用\n172.16.0.0/12 ","permalink":"https://notes.0081800.xyz/notes/20200827195621-mysql_grant_subnet/","summary":" tags: MySQL,Network https://stackoverflow.com/a/38389851/2873718\nMySQL 授权用户子网段需要使用:\n172.16.0.0/255.240.0.0 而不能使用\n172.16.0.0/12 ","title":"MySQL grant subnet"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20200827180638-network/","summary":"","title":"Network"},{"content":"位移产生的空白填上 0，会导致有符号的负数变成正数。\n","permalink":"https://notes.0081800.xyz/notes/20200802165502-%E9%80%BB%E8%BE%91%E5%8F%B3%E7%A7%BB/","summary":"位移产生的空白填上 0，会导致有符号的负数变成正数。","title":"逻辑右移"},{"content":"位移的产生的空白填上符号位。\n","permalink":"https://notes.0081800.xyz/notes/20200802165150-%E7%AE%97%E6%95%B0%E5%8F%B3%E7%A7%BB/","summary":"位移的产生的空白填上符号位。","title":"算数右移"},{"content":" tags: Computer Systems,《深入理解计算机系统》读书笔记 程序编码 $ gcc -Og -S mstore.c # outputs mstore.s $ gcc -Og -c mstore.c # outptus mstore.o $ objdump -d mstore.o 所有以 ‘.’ 开头额行都是指导汇编器和链接器工作额伪指令。\n数据格式 C 声明 Intel 数据类型 汇编代码后缀 大小（字节） char 字节 b 1 short 字 w 2 int 双字 l 4 long 四字 q 8 char* 四字 q 8 float 单精度 l 4 double 双精度 q 8 访问信息 寄存器 一个 x86-64 的中央处理单元（CPU）包含一组 16 个存储 64 位值的 通用目的寄存器 。\n四字 双字 字 字节 用途 %rax %eax %ax %al 返回值 %rbx %ebx %bx %bl 被调用者保存 %rcx %ecx %cx %cl 第四个参数 %rdx %edx %dx %dl 第三个参数 %rsi %esi %si %sil 第二个参数 %rdi %edi %di %dil 第一个参数 %rbp %ebp %bp %bpl 被调用者保存 %rsp %esp %sp %spl 栈指针 %r8 %r8d %r8w %r8b 第五个参数 %r9 %r9d %r9w %r9b 第六个参数 %r10 %r10d %r10w %r10b 调用者保存 %r11 %r11d %r11w %r11b 调用者保存 %r12 %r12d %r12w %r11b 被调用者保存 %r13 %r13d %r13w %r13b 被调用者保存 %r14 %r14d %r14w %r14 被调用者保存 %r15 %r15d %r15w %r15 被调用者保存 相关规则：\n生成 1 字节和 2 字节数字的指令会保持剩下的字节不变 生成 4 字节的数字的指令会把高位 4 个字节设置为 0 寄存器的使用有一组编程规范控制着如何来管理栈、传递参数、从函数返回值，以及存储局部和临时数据。 %rsp 用来指明运行时栈的结束位置。\n操作数指示符 分为几类：\n立即数（字面量） 寄存器 内存引用（支持多种寻址模式） 假设寄存器是一个数组 R，内存是一个大的字节数组，寻址方式为索引，如 M[0] 就是访问内存的第一个字节。\n类型 格式 操作数值 名称 例子 立即数 $Imm Imm 立即数寻址 $0x08 寄存器 \\(r_a\\) \\(R[r_a]\\) 寄存器寻址 %rdx 存储器 Imm M[Imm] 绝对寻址 0x80 存储器 (\\(r_a\\)) M[R[\\(r_a\\)]] 间接寻址 (%rdx) 存储器 Imm(\\(r_b\\)) M[Imm+R[\\(r_b\\)]] （基址 + 偏移量）寻址 0x08(%rdx) 存储器 (\\(r_b\\),\\(r_i\\)) M[R[\\(r_b\\)] + R[\\(r_i\\)]] 变址寻址 (%rdx,%rdx) 存储器 Imm(\\(r_b\\),\\(r_i\\)) M[Imm + R[\\(r_b\\)] + R[\\(r_i\\)]] 变址寻址 0x08(%rdx,%rdx) 存储器 (,\\(r_i\\),s) M[R[\\(r_i\\)] * s] 比例变址寻址 (,%rdx,0x08) 存储器 Imm(,\\(r_i\\),s) M[Imm + R[\\(r_i\\)] * s] 比例变址寻址 0x08(,%rdx,0x08) 存储器 (\\(r_b\\),\\(r_i\\),s) M[R[\\(r_b\\)]+R[\\(r_i\\)] * s] 比例变址寻址 (%rdx,%rdx,0x08) 存储器 Imm(\\(r_b\\),\\(r_i\\),s) M[Imm + R[\\(r_b\\)]+R[\\(r_i\\)] * s] 比例变址寻址 0x08(%rdx,%rdx,0x08) 数据传送指令 指令 变体 效果 描述 备注 MOV S,D movb/movw/movl/movq D\u0026lt;-S 传送 MOVABSQ 1,R R\u0026lt;-1 传送绝对的四字 MOVZ S,R movzbw/movzbl/movzwl/movzbq/movzwq R\u0026lt;-零扩展(S) 以零扩展进行传送 目标只能是寄存器，后缀 bw 表示字节传送到字 MOVS S,R movsbw/movsbl/movswl/movsbq/movswq/movslq R\u0026lt;-符号扩展(S) 以符号扩展进行传送 同上 cltq %rax\u0026lt;-符号扩展(%eax) 把 %eax 符号扩展到 %rax 压入和弹出栈数据 指令 效果 描述 pushq S R[%rsp]\u0026lt;-R[%rsp]-0x08; M[R[%rsp]]\u0026lt;-R 将四字压入栈 popq D D\u0026lt;-M[R[%rsp]];R[%rsp]\u0026lt;-R[%rsp]+0x08 将四字弹出栈 算数和逻辑操作 分类 指令 效果 描述 leaq leaq S,D D\u0026lt;-\u0026amp;S 加载有效地址 一元 INC D D \u0026lt;- D + 1 加 1 DEC D D \u0026lt;- D - 1 减 1 NEG D D \u0026lt;- -D 取负 NOT D D \u0026lt;- ~D 取补 二元 ADD S,D D \u0026lt;- D + S SUB S,D D \u0026lt;- D - S IMUL S,D D \u0026lt;- D * S XOR S,D D \u0026lt;- D ^ S OR S,D D \u0026lt;- D ｜ S AND S,D D \u0026lt;- D \u0026amp; S 位移 SAL k,D D \u0026lt;- D \u0026lt;\u0026lt; k SHL k,D D \u0026lt;- D \u0026lt;\u0026lt; k SAR k,D D \u0026lt;- D \u0026gt;\u0026gt; k 算数右移 SHR k,D D \u0026lt;- D \u0026gt;\u0026gt; k 逻辑右移 特殊 imulq S R[%rdx]: R[%rax] \u0026lt;- S x R[%rax] 有符号全乘法（支持两个 64 位的数字全 128 位乘积，用两个寄存器表示 8 字） mulq R[%rdx]: R[%rax] \u0026lt;- S x R[%rax] 无符号全乘法 cqto R[%rdx]: R[%rax] \u0026lt;- 符号扩展(R[%rax]) 转换为 8 字 idivq S R[%rdx] \u0026lt;- R[%rdx]: R[%rax] mod S 有符号除法 R[%rdx] \u0026lt;- (R[%rdx]: R[%rax]) / S divq S 同上 无符号除法 leaq 将计算出的有效地址写入到目标寄存器，可以根据比例变址寻址进行复杂的数值计算。\nlong t = x + 4 * y + 12 * z\n; x in %rdi, y in %rsi, z in %rdx scale: leaq (%rdi,%rsi,4), %rax ; x + 4*y leaq (%rdx,%rdx,2), %rdx ; z + 2*z = 3 * z leaq (%rax,%rdx,4), %rax ; (x + 4*y) + 4*(3*z) = x + 4*y + 12*z 控制 测试数据值，然后根据测试的结果来改变控制流或者数据流。jump 指令可以指定控制应该被传递到程序的某个其他部分。\n条件码 条件码寄存器存储了单个位的条件码来描述最近的算术或者逻辑操作的属性。常用的条件码有：\nCF：进位标志。最近的操作使最高位产生了进位。用来检查无符号操作的溢出。 ZF：零标志。最近操作得出的结果为 0。 SF：符号标志。最近的操作结果为负数。 OF：溢出标志。最近的操作导致一个补码溢出 \u0026ndash; 正溢出或负溢出。 leaq 不改变任何条件码。\n","permalink":"https://notes.0081800.xyz/notes/20200802155053-%E6%B1%87%E7%BC%96/","summary":"tags: Computer Systems,《深入理解计算机系统》读书笔记 程序编码 $ gcc -Og -S mstore.c # outputs mstore.s $ gcc -Og -c mstore.c # outptus mstore.o $ objdump -d mstore.o 所有以 ‘.’ 开头额行都是指导汇编器和链接器工作额伪指令。\n数据格式 C 声明 Intel 数据类型 汇编代码后缀 大小（字节） char 字节 b 1 short 字 w 2 int 双字 l 4 long 四字 q 8 char* 四字 q 8 float 单精度 l 4 double 双精度 q 8 访问信息 寄存器 一个 x86-64 的中央处理单元（CPU）包含一组 16 个存储 64 位值的 通用目的寄存器 。","title":"汇编"},{"content":" tags: Computer Systems,《深入理解计算机系统》读书笔记 浮点数小数表示形式 .0111 = \\(0x2^{-1}+2^{-2}+2^{-3}+2^{-4}\\)\nIEEE 浮点数表示形式 \\[ V=(-1)^s X M X 2^E \\]\ns = 0 表示负数， s = 1 表示正数 M 是二进制表示的小数 E 是阶码 浮点数二进制组成 一个单独符号位 s 表吗符合 k 位阶码字段 exp 编码阶码 E n 位小数字段 frac 编码尾数 M 两种常见的格式 float s = 1 k = 8 n = 23 double s = 1 k = 11 n = 52 三种计算方式 前置的一些值\ne 是 exp 位表示的无符号数 f 是 frac 位表示的小数 \\(Bias = 2^{k-1} -1\\) 规格化的值 规则：阶码字段 exp 的位模式即不全为 0，也不全为 1（单精度 255，双精度 2047） 计算方式 \\(E = e - Bias\\) $M = 1 + f $ 非规格化的值 规则：阶码字段 exp 全是 0（用于表示 0） 计算方式 \\(E = 1 - Bias\\) \\(M = f\\) 可以表示 +0 和 -0。\n特殊值 阶码字段 exp 全是 1 小数字段全 0 表示：无穷（s = 0 负无穷，s = 1 正无穷） 小数字段非全 0 表示：NaN（Not a Number） ","permalink":"https://notes.0081800.xyz/notes/20200802151523-ieee_%E6%B5%AE%E7%82%B9%E6%95%B0/","summary":"tags: Computer Systems,《深入理解计算机系统》读书笔记 浮点数小数表示形式 .0111 = \\(0x2^{-1}+2^{-2}+2^{-3}+2^{-4}\\)\nIEEE 浮点数表示形式 \\[ V=(-1)^s X M X 2^E \\]\ns = 0 表示负数， s = 1 表示正数 M 是二进制表示的小数 E 是阶码 浮点数二进制组成 一个单独符号位 s 表吗符合 k 位阶码字段 exp 编码阶码 E n 位小数字段 frac 编码尾数 M 两种常见的格式 float s = 1 k = 8 n = 23 double s = 1 k = 11 n = 52 三种计算方式 前置的一些值\ne 是 exp 位表示的无符号数 f 是 frac 位表示的小数 \\(Bias = 2^{k-1} -1\\) 规格化的值 规则：阶码字段 exp 的位模式即不全为 0，也不全为 1（单精度 255，双精度 2047） 计算方式 \\(E = e - Bias\\) $M = 1 + f $ 非规格化的值 规则：阶码字段 exp 全是 0（用于表示 0） 计算方式 \\(E = 1 - Bias\\) \\(M = f\\) 可以表示 +0 和 -0。","title":"IEEE 浮点数"},{"content":"内存模型 硬件内存模型 编程语言内存模型 ","permalink":"https://notes.0081800.xyz/topics/20200802151319-computer_systems/","summary":"内存模型 硬件内存模型 编程语言内存模型 ","title":"Computer Systems"},{"content":" tags: Rust source: Choosing a Rust web framework, 2020 edition ","permalink":"https://notes.0081800.xyz/notes/20200710101214-web/","summary":" tags: Rust source: Choosing a Rust web framework, 2020 edition ","title":"Choosing a Rust web framework, 2020 edition"},{"content":"SSH Port Forwarding -L 将远端机器的端口映射到本地 -R 将本地端口映射到远端 ","permalink":"https://notes.0081800.xyz/notes/20200707214623-ssh/","summary":"SSH Port Forwarding -L 将远端机器的端口映射到本地 -R 将本地端口映射到远端 ","title":"SSH"},{"content":" tags: Rust 原文链接：https://blog.rust-lang.org/2015/04/10/Fearless-Concurrency.html ","permalink":"https://notes.0081800.xyz/notes/20200703104039-fearless_concurrency_with_rust/","summary":" tags: Rust 原文链接：https://blog.rust-lang.org/2015/04/10/Fearless-Concurrency.html ","title":"Fearless Concurrency with Rust"},{"content":" tags: Translate,Rust,Rust Wrapper Types 原文链接：Rust Means Never Having to Close a Socket\nRust 最酷的特性之一就是它可以自动地帮助你管理资源，同时在仍能保持安全（没有段错误）和高性能。\n这是因为 Rust 是一门与众不同地编程语言，要理解我说的可能有点困难，让我来更近一步说明：\nRust 就像带垃圾回收的编程语言，你无需手动释放内存 Rust 不同于其他带垃圾回收的编程语言，你无需1手动关闭或者释放像文件、套接字和锁这样的资源 Rust 达到以上这些特性不附带任何运行时开销（垃圾回收或者引用计数），并且不牺牲安全性。 如果你曾经造成过一个套接字或者文件泄漏，或者使用过一些抽象方法造成了这些资源的泄漏，那么你就会知道这有多重要。\n你可能已经期望通过“使用后释放”来避免内存问题，而与此同时你并没有考虑到没有明确地关闭套接字可能出现类似的错误。我在这里告诉你，还有更好地办法。\n如果你使用的是带垃圾回收的编程语言，则应密切关注本文提到的资源管理方面的内容。如果你使用的是像 C/C++ 这样底层编程语言，你可能会对安全方面更加感兴趣。\nRust 的许多特性都是从其他语言借鉴而来。Rust 之所以变得有趣是因为它把所有的这些特性放在了一起，并且在编程语言层面实现了更严格地保证。 实际上，这种编程语言层面的保证让这些特性更加实用。\n所有权系统（The Ownership System） 让这种保证工作的方式是通过 Rust 的「所有权（ownership）」系统。不管任何时候你创建一个新的对象，都被创建它的「作用域（scope）」所拥有。\n让我们通过一个例子来进一步说明：我们定义一个函数，函数拷贝输入文件到临时文件去处理它，然后拷贝输入文件到输出文件。\nfn process(from: \u0026amp;Path, to: \u0026amp;Path) -\u0026gt; IoResult\u0026lt;()\u0026gt; { // creates a new tempdir with the specified suffix let tempdir = try!(TempDir::new(\u0026#34;skylight\u0026#34;)); // open the input file let mut from_file = try!(File::open(from)); // create a temporary file inside the tempdir let mut tempfile = try!(File::create(\u0026amp;tempdir.path().join(\u0026#34;tmp1\u0026#34;))); // copy the input file into the tempfile try!(io::util::copy(\u0026amp;mut from_file, \u0026amp;mut tempfile)); // use an external program to process the tmpfile in place // after processing, copy the tempfile into the output file let mut out = try!(File::create(to)); io::util::copy(\u0026amp;mut tempfile, \u0026amp;mut out) } 在这个例子中，函数 process 的作用域再第一行创建了 TempDir 是其初始拥有者。在这个例子中， process 函数从未放弃所有权，所以当函数完成调用， 它就会自动被丢弃（dropped），也就是会删除 Tempfile 。\n这就是一个关于自动资源管理的例子。 TempDir 对象不仅仅是一片内存，它还代表被管理的资源。一旦程序不在使用该资源，那么它的清理逻辑将会被调用。\n另外：在这 C++ 中被称为 「RAII」（Resource Acquistion Is Initialization）：资源获取即初始化，它是编程中最容易混淆但是有用的命名。\n对我来说很有趣地是，能最大效率地减轻程序员手动管理内存的技术往往也最难成功和有效地减轻程序员手动地管理资源。 在高级语言中，我们从不需要释放内存，但是我们通常需要关闭套接字、文件和释放锁。\n在实际中，在带有垃圾回收机制的编程语言中泄漏这些资源的情况令人震惊，所以我真的很享受这样一个事实， 在 Rust 中忘记关闭套接字不是一个大问题，就像在 Rust 忘记释放内存一样。并且在 Rust 中， 你可以免受防御涉及资源的“释放后使用”错误，就像你免受防御涉及内存的“释放后使用”错误一样。\n这听起来很神奇，所以你可能会有一些问题关于它实际上是如何工作的。\n首先，这个系统基于事实上一个对象在同一时间只能有一个所有者。我该如何确保我没有错误地在多个地方引用 TempDir ？ 答案是所有权系统不是建议性的。在 Rust 中，对象被创建其的作用域所拥有。它可以将所有权转移到其他作用域，或者在完成执行后保留所有权。 当一个作用域完成时，Rust 将销毁它所拥有地所有对象。\n因为一个对象同时只能归一个作用域所有，你可以通过查看就知道执行结束时有哪些对象将被销毁。\nstruct Person { first: String, last: String } fn hello() { let yehuda = Person { first: \u0026#34;Yehuda\u0026#34;.to_string(), last: \u0026#34;Katz\u0026#34;.to_string() }; // `yehuda` is transferred to `name_size`, so it cannot be // used anymore in this function, and it will not be destroyed // when this function returns. It is up to `name_size`, // or possibly a future owner, to destroy it. let size = name_size(yehuda); let tom = Person { first: \u0026#34;Tom\u0026#34;.to_string(), last: \u0026#34;Dale\u0026#34;.to_string() }; // `tom` wasn\u0026#39;t transferred, so it will be // destroyed when this function returns. } fn name_size(person: Person) -\u0026gt; uint { let Person { first, last } = person; first.len() + last.len() // this function owns Person, so the Person is destroyed when `name_size` returns } 仅仅通过逐一查看这两个函数，你可以看到 yehuda 被转移到了 name_size 函数，但是 tom 则没有。 通过查看 name_size 函数，你可以看到它一直拥有它的 person 参数直到它返回。仅仅通过查看这两个函数， 你就可以直接确定哪个对象（如果有）将会在它们执行完毕被销毁。\n但是如何解释临时文件的例子？如果你查看 process 函数的第三行代码，你可以看到 TempDir 上的方法 tempdir.path() 被调用。 难道这不是意味着我创建了第二个引用，并且理论上有两个所有者？或者意味着我们将所有权转移到了 path 方法，也就是当该方法返回时会立即销毁这个目录？ 显然这两个答案都行不通。\n借用和借出（Borrowing and Lending） 要理解这里发生了什么，我们需要看一下 path 方法的方法签名。\nfn path(\u0026amp;self) -\u0026gt; \u0026amp;Path 可以通过如下方式念出这个方法签名：\npath 方法「借用（borrows）」self 并返回「借用的（borrowed）」Path。\n一个函数借用一个对象并不会取的对象的所有权，并且在返回时不会销毁该对象。它只能在函数调用期间使用借用的对象，它不能，比如，创建线程并在线程中使用借用的对象。 换句话说，借用的对象必须不能在超出借出它的函数的作用域外存活。\n这意味着 Rust 编译器会检查所有函数调用并且在编译期得知代码是否尝试获取所有权。一旦一个对象的所有权被转移，那么原所有者会被拒绝访问该对象。\nstruct Person { first: String, last: String, age: uint } fn hello() { let person = Person { first: \u0026#34;Yehuda\u0026#34;.to_string(), last: \u0026#34;Katz\u0026#34;.to_string(), age: 32 }; let thirties = is_thirties(person); println!(\u0026#34;{}, thirties: {}\u0026#34;, person, thirties); } // This function tries to take ownership of `Person`; it does not // ask to borrow it by taking \u0026amp;Person fn is_thirties(person: Person) { person.age \u0026gt;= 30 \u0026amp;\u0026amp; person.age \u0026lt; 40 } 如果我尝试编译这段代码，我会得到下面的编译错误（略有删节）：\nmove.rs:16:34: 16:40 error: use of moved value: `person` move.rs:16 println!(\u0026#34;{}, thirties: {}\u0026#34;, person, thirties); ^~\\~~~~ move.rs:15:32: 15:38 note: `person` moved here move.rs:15 let thirties = is_thirties(person); ^~\\~~~~ 错误的意思是 hello 函数的作用域是 Person 的初始所有者，但是当调用 is_thirties 时，它把所有权转移到了 is_thirties 函数的作用域。 作为新的所有者，当 is_thirties 返回，它就会释放 Person 占据的内存。\n作为替代你会想使用「借用和借出」写这个程序：\nfn hello() { let person = Person { first: \u0026#34;Yehuda\u0026#34;.to_string(), last: \u0026#34;Katz\u0026#34;.to_string(), age: 32 }; // lend the person -- don\u0026#39;t transfer ownership let thirties = is_thirties(\u0026amp;person); // now this scope still owns the person println!(\u0026#34;{}, thirties: {}\u0026#34;, person, thirties); } fn is_thirties(person: \u0026amp;Person) { person.age \u0026gt;= 30 \u0026amp;\u0026amp; person.age \u0026lt; 40 } 从根本上讲，这意味着经过验证地所有权是你函数接口的一部分。 Rust 开发者有时将其称为“借用检查器（borrow checker）”，但是却恰当好处。\n实际上，这些大部分时间可以正常工作的原因是，函数获得它们值的方式是通过“借用（borrowing）”。它们获得值、通过这些值处理一些逻辑然后返回。 长时间保持该值（比如通过使用线程）既不常见，又是时候该考虑一下正在发生的什么。\n当我们开始编写一个新的函数时应该借用所需参数，而不是尝试获取其所有权。经过一段时间的 Rust 编程之后这将不会增加认知成本，只是默认这样做。 如果编译器抱怨（随着你掌握这些规则将它们变成习惯（second nature）这样的情况将越来越少），这意味着你正在做含有潜在危险地事情，那就需要你思考一下了。\n从一个借用对象中返回一个借用字段（Returning a Borrowed Field from a Borrowed Object） 在前面我们检查了如下方法签名：\nfn path(\u0026amp;self) -\u0026gt; \u0026amp;Path 这个签名可能让你困惑。我之前说过当一个函数借用了一个对象，它必须只能在函数调用期间使用这个值，并且在此之后就不能使用。 难道返回对象的其中一部分没有违反这个规则？\n这个之所以没问题是因为 path 的调用者明显有权使用 Tempfile 并通过参数将之借给 path 。 在这个案例中，Rust 编译器将会保证返回的 Path 没有在超出拥有 Tempfile 的作用域之外存活。\n实际上，这意味着你可以返回从上游借来的内容，然后 Rust 将处理好跟踪该内容的原容器。\n让我们通过一个例子来举例说明：\nfn hello() -\u0026gt; \u0026amp;str { let person = Person { first: \u0026#34;Yehuda\u0026#34;.to_string(), last: \u0026#34;Katz\u0026#34;.to_string(), age: 32 }; first_name(\u0026amp;person) } fn first_name(person: \u0026amp;Person) -\u0026gt; \u0026amp;str { // as_slice borrows a slice \u0026#34;view\u0026#34; out of a string person.first.as_slice() } 如果你仔细观察，你可以立即看到问题所在。函数 hello 试图返回一个借用的 \u0026amp;str ，但是拥有包含被返回的字节的原 Person 的所有权在 hello 中。 一旦 hello 返回，那么 Person 将不复存在，导致借用的内容（字符串切片）指向了无效地地址。\n如果试图编译这段代码，你将得到如下报错：\nmove.rs:8:15: 8:19 error: missing lifetime specifier [E0106] move.rs:8 fn hello() -\u0026gt; \u0026amp;str { ^~\\~~ 这个有点混乱地错误信息表示我们正尝试返回借用的字节，但是函数的调用者没有借给我们借用字节的来源 Person 。 Rust 正在向我们征询如果返回值不属于调用者作用域那么应该归属于那个「生命周期（lifetime）」。\n通常情况下，Rust 会将返回值的作用域绑定到借用参数的作用域。这在里，我们没有借用的参数，所以 Rust 要求我们进行显式地定义。\n实际情况下，这表示一个函数可以轻松地通过借用的方式返回借用参数中的内容。否则，你需要给该返回值找到一个调用者可以访问的存储位置， 或者克隆（clone）该值让调用者拥有一份自己的拷贝。\n易用性（Ergonomics） 咋一看，所有权这些机制让人感觉很复杂，并且看起来可能会对使用 Rust 的易用性产生重大影响。可以肯定的是，一开始确实会有这种感觉。\n但是有几个因素会让 Rust 的所有权变得比远看上去更加易用。\n首先，大量的实际代码适用于借用/借出模式。随着我写了越来越多的 Rust 代码，我逐渐意识到用 Ruby 编写的程序遵循类似的模式： 函数创建一些对象并将它们传递给子函数执行某些任务，然后子函数返回新值。\n当然，这是递归的，因此仅当差异（在于函数调用期间使用参数，以及延长参数的使用周期）在 Rust 中被显式区分时，它才能变得显而易见。 只有通过函数签名进行区分和全面覆盖，并检查错误，我们才能获得 Rust 提供的保证。\n相反，C++ 只对部分情况进行了明显地区分，并且没有错误检查。带有垃圾回收机制的语言通常会隐藏“转移（transferred）”和“借出（lent）”参数。\n如我上面所说，这意味着 Rust 程序员快速学习将借用作为默认行为去编写函数来减轻许多系统认知负担。\n其次，随着使用一段时间 Rust 之后，大部分人意识到借用检查器错误和警告他们的都是真实地、严重地和比较难以发觉的错误。 一段时间以后，借用检查器自然地将您推入编程模式并且减少出现此类难以发觉地错误的影响。\n再次，我个人发现，对所有权的清晰了解可以大大提高我对程序进行推理地能力，同时避免意外引入后面会花费大量地时间跟踪排查的内存泄漏问题。\n最后，自动资源管理具有真正地易用性优势，既可以防止资源泄漏（当我懒惰时），又可以防止额外地样板代码和缩进（当我谨慎时）。\n除 C++ 之外，很少程序员经历过自动资源管理为标准的编程环境，打开大脑的“blub”部分并认为它没有那么大的作用是非常非常容易的。 Rust 改变了这个领域中的传统权衡，我建议您将脑中告诉自己「我不需要它在《我选择的编程语言》，它有多重要？ ？」的小声音暂时先放回去。\n引用计数（和垃圾回收） 你可能已经注意到 Rust 已经有引用计数指针（并且计划未来实现 GC）。\n它是如何在所有权系统中工作的呢？\n以我的经验，一旦习惯了所有权范式，你会很少想要使用 Rc 指针。例如，整个 Cargo 代码库中没有使用引用计数指针的实例， 只使用了一次原子计数指针（用于在并行构建的代码的线程之间共享锁）。\n我认为这是由于所有权非常明确，并且切实地改善了本地推理。如果你检查任意使用正常 Rust 引用的函数， 则可以轻易地知道一旦函数返回哪些内存（和资源）仍将存活，而哪些不会。例如，如果你使用闭包， 则可以立即判断它是否存活于当前函数作用域外，如果它确实存活于当前函数作用域外，你还可以知道闭包拥有哪些对象。\n我也认为所有权和借出概念可以很好地映射到实际地编程模式。有一些事情你不可以做，但是大部分情况下，略微调整代码结构就可以通过编译。 作为交换，内存和资源泄漏都很少发生，并且代码清晰度得到了提高。\n如果不是这种情况，我怀疑即使是经验丰富地 Rust 开发人员也会更频繁地使用 Rc 。\n综上所述，在某些情况下，引用计数甚至垃圾回收也可以正常的在所有权系统下工作。 Rust 的 “智能指针” 系统允许 Rc 指针在相同地所有权和借用系统内透明地运行， 并且当引用计数减小到 0 时运行析构函数（伴随明显地本地推理和运行时性能上的成本）。\n其他语言的机制（Facilities in Other Languages） 带有垃圾回收机制的语言通常会提供一些机器辅助程序员手动管理资源。在大部分现代编程语言中，你不用显式的调用 close ， 但是你需要调整语言结构将资源与词法作用域联系在一起，然后在完成后进行释放。\n让我们观察一些例子，然后我会讨论这些方法的缺点。\n在 Ruby 中，你可以使用一个块标识你将在指定的作用域里使用资源。一旦块返回，资源将会被清理。\nFile.open(\u0026#34;/etc/passwd\u0026#34;) do |file| # use the file end 在 Python 中，一个特殊的语言关键字 with 用来创建一个协议进行资源获取，然后在代码块结束后释放资源：\nwith open(\u0026#34;/etc/passwd\u0026#34;) as file: # use the file Ruby 和 Python 都使用了通过调整语言结构和创建新协议的方法抽象了特定于资源关闭的机制。用户永远不知道关闭什么样子， 但是他们必须使用特殊的抽象来确保资源关闭被调用。\n在 Go 中， defer 关键字允许程序员在原始创建逻辑之后提供清理逻辑来管理资源：\nfile, error := os.Open(\u0026#34;/etc/passwd\u0026#34;) if err != nil { return; } defer file.Close() // use the file 这种方式比 try/catch/finally 有好一些，因为它保持清理逻辑紧跟资源获取逻辑，但是没有抽象关闭逻辑。\n所有这些方法都有一系列的问题。再次，我建议你远离大脑中的很可能会告诉您这些问题“在实践中不会变得很重要”的“blub”中心。\n向已经使用中的结构后面添加资源释放逻辑是不可能的，因为他们的使用者（clients）将会使用正常的对象创建 API。 这会导致在更高层对象中抽象资源更加困难，因为资源管理需要暴漏到公共 API。 基于块的方法（Ruby 和 Python，不包含 Go）引入向右漂移。每次你想要使用一个资源，你都被强制创建一个新的作用域范围。 这在 Ruby（有很好的块）和 Python（使用语言层面的结构）中相当烦人，在 JavaScript 中还有一个严重地问题，即引入新的作用域会阻止你返回或者摆脱当前循环。 这些方法（包含 Go 的 defer ）需要你在给定的词法作用域内使用资源。当你想要将资源传递给多个函数时将会引发尴尬（或不可能的）编程风格。 实际上，它迫使语言使用一个不地道的基于作用域的所有权系统模型进行对象管理。 一旦你开始使用资源调用其他函数，则可能意外地创建“释放后使用” 的 bug，如函数绑定在资源上（如闭包中），并在调用者关闭资源后尝试使用它。 Rust 中的自动资源管理可缓解所有这些问题：\n资源管理对象可以定义一个析构器（destructor）抽象释放逻辑。通过正常创建一个对象就可以让析构器在正确的时间调用。 对象可以在被使用之后添加析构函数而无需修改客户端代码。\n注意 Rust 中的析构器不同于带 GC 的语言中的析构器。它们总是在对象不在被使用后执行，并且一定会被执行，除了运行析构器本身不附带任何运行时开销。 由于资源管理和自动内存管理通过相同的方式工作，这将消除恼人的缩进并且不需要包围额外的代码。\n在 Rust 中，你可以像传递其他类型的对象一样传递资源。如果你将所有权转移到其他作用域，资源将会在新作用域完成时被关闭。 除此之外，借用系统将还会像保证内存一样保证资源不存在“释放后使用”。\n简而言之，使用同一系统进行内存和资源管理确实有好处。\n我不会说 Rust 所有权系统像垃圾回收一样不用耗费任何心力。 但是，Rust 已经做了很多非常聪明的事情来弥补，正如我们所看到的在某些情况下的易用性甚至超过了带垃圾回收机制的语言。\n作为交换，你将获得一种非常快速的语言，并且可以绝对安全地直接控制内存。\n因此，它开启了一个高级语言用户都可以编写低级代码的时代，这确实让我感到兴奋。同时在社区也可以找到很多人互相学习。\n当我说“无需”，我的意思是绝大部分都不需要。在带有垃圾回收的语言中，有时你最终还是会直接管理内存， 同样的在 Rust 中你最终还是会直接管理资源。重要的是在两种情况下，主要的编程模型是编程语言替你管理资源。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://notes.0081800.xyz/notes/20200629181735-rust_means_never_having_to_close_a_socket/","summary":"tags: Translate,Rust,Rust Wrapper Types 原文链接：Rust Means Never Having to Close a Socket\nRust 最酷的特性之一就是它可以自动地帮助你管理资源，同时在仍能保持安全（没有段错误）和高性能。\n这是因为 Rust 是一门与众不同地编程语言，要理解我说的可能有点困难，让我来更近一步说明：\nRust 就像带垃圾回收的编程语言，你无需手动释放内存 Rust 不同于其他带垃圾回收的编程语言，你无需1手动关闭或者释放像文件、套接字和锁这样的资源 Rust 达到以上这些特性不附带任何运行时开销（垃圾回收或者引用计数），并且不牺牲安全性。 如果你曾经造成过一个套接字或者文件泄漏，或者使用过一些抽象方法造成了这些资源的泄漏，那么你就会知道这有多重要。\n你可能已经期望通过“使用后释放”来避免内存问题，而与此同时你并没有考虑到没有明确地关闭套接字可能出现类似的错误。我在这里告诉你，还有更好地办法。\n如果你使用的是带垃圾回收的编程语言，则应密切关注本文提到的资源管理方面的内容。如果你使用的是像 C/C++ 这样底层编程语言，你可能会对安全方面更加感兴趣。\nRust 的许多特性都是从其他语言借鉴而来。Rust 之所以变得有趣是因为它把所有的这些特性放在了一起，并且在编程语言层面实现了更严格地保证。 实际上，这种编程语言层面的保证让这些特性更加实用。\n所有权系统（The Ownership System） 让这种保证工作的方式是通过 Rust 的「所有权（ownership）」系统。不管任何时候你创建一个新的对象，都被创建它的「作用域（scope）」所拥有。\n让我们通过一个例子来进一步说明：我们定义一个函数，函数拷贝输入文件到临时文件去处理它，然后拷贝输入文件到输出文件。\nfn process(from: \u0026amp;Path, to: \u0026amp;Path) -\u0026gt; IoResult\u0026lt;()\u0026gt; { // creates a new tempdir with the specified suffix let tempdir = try!(TempDir::new(\u0026#34;skylight\u0026#34;)); // open the input file let mut from_file = try!","title":"Rust Means Never Having to Close a Socket"},{"content":"并发 std::marker::Send 允许跨线程转移所有权 Send 标记特性用于标识实现该特性的类型的所有权可以在线程中间转移，几乎所有 Rust 类型都实现了 Send ，但是也有一些例外如：\nRc\u0026lt;T\u0026gt; ，如果克隆后在多个线程中转移所有权可能会多个线程同时增加计数器，可以使用 Arc\u0026lt;T\u0026gt; 替代 如果一个新的类型组合的类型都实现了 Send 那么该类型也自动实现了 Send ，几乎所有原始类型都实现了 Send .\nstd::marker::Sync 允许多个线程同时访问 Sync 标记特性用于标识实现该特性的类型可以在多个线程中引用，任何类型 T 是 Sync 并且 T 的引用 \u0026amp;T 是 Send 则意味着引用可以安全的发送给其他线程。\n同 Send 类似，几乎所有原始类型都实现了 Sync ，组合了所有类型都是 Sync 的类型自动实现 Sync 。\n以下只能指针没有实现 Sync\nRc\u0026lt;T\u0026gt; 同样没有实现 Sync RcCell\u0026lt;T\u0026gt; 和 Cell\u0026lt;T\u0026gt; 自己实现 Sync 和 Send 是不安全的 ","permalink":"https://notes.0081800.xyz/notes/20200629180709-rust_%E5%B9%B6%E5%8F%91/","summary":"并发 std::marker::Send 允许跨线程转移所有权 Send 标记特性用于标识实现该特性的类型的所有权可以在线程中间转移，几乎所有 Rust 类型都实现了 Send ，但是也有一些例外如：\nRc\u0026lt;T\u0026gt; ，如果克隆后在多个线程中转移所有权可能会多个线程同时增加计数器，可以使用 Arc\u0026lt;T\u0026gt; 替代 如果一个新的类型组合的类型都实现了 Send 那么该类型也自动实现了 Send ，几乎所有原始类型都实现了 Send .\nstd::marker::Sync 允许多个线程同时访问 Sync 标记特性用于标识实现该特性的类型可以在多个线程中引用，任何类型 T 是 Sync 并且 T 的引用 \u0026amp;T 是 Send 则意味着引用可以安全的发送给其他线程。\n同 Send 类似，几乎所有原始类型都实现了 Sync ，组合了所有类型都是 Sync 的类型自动实现 Sync 。\n以下只能指针没有实现 Sync\nRc\u0026lt;T\u0026gt; 同样没有实现 Sync RcCell\u0026lt;T\u0026gt; 和 Cell\u0026lt;T\u0026gt; 自己实现 Sync 和 Send 是不安全的 ","title":"Rust 并发"},{"content":"三种宏 自定义 #[derive] 属性行为（attribute-like）宏，Rust 属性宏解析 函数行为（function-like）宏 宏 实现元编程，代码生成代码，必须带入当前命名空间内才能使用（不能使用 mod::sub::macro! 这种方式调用）。\n#[macro_export] macro_rules! vec { ( $($x:expr), *) =\u0026gt; { // $() 用于捕捉值，$x:expr 匹配 Rust 表达式并绑定到 $x，逗号（,）表明一个逗号可能出现在表达式后面，* 表明表达式匹配一次或多次 { let mut temp_vec = Vec::new(); ${ temp_vec.push($x); }* temp_vec } }; } 调用宏用于从属性生成代码 有点像编译期的装饰器：\nuse proc_macro; #[some_attribute] pub fn some_name(input: TokenStream) -\u0026gt; TokenStream { // --snip-- } ","permalink":"https://notes.0081800.xyz/notes/20200629180623-rust_%E5%AE%8F/","summary":"三种宏 自定义 #[derive] 属性行为（attribute-like）宏，Rust 属性宏解析 函数行为（function-like）宏 宏 实现元编程，代码生成代码，必须带入当前命名空间内才能使用（不能使用 mod::sub::macro! 这种方式调用）。\n#[macro_export] macro_rules! vec { ( $($x:expr), *) =\u0026gt; { // $() 用于捕捉值，$x:expr 匹配 Rust 表达式并绑定到 $x，逗号（,）表明一个逗号可能出现在表达式后面，* 表明表达式匹配一次或多次 { let mut temp_vec = Vec::new(); ${ temp_vec.push($x); }* temp_vec } }; } 调用宏用于从属性生成代码 有点像编译期的装饰器：\nuse proc_macro; #[some_attribute] pub fn some_name(input: TokenStream) -\u0026gt; TokenStream { // --snip-- } ","title":"Rust 宏"},{"content":"智能指针 表现的像一个指针，拥有数据并允许在对数据进行维护。\n通常通过 struct 实现并实现两个特性 Deref 和 Drop\nDeref 允许智能指针实例行为像一个引用，让代码可以同时处理引用和智能指针 Drop 允许自定义智能指针超出作用域的行为。 标准库常见的智能指针\nBox\u0026lt;T\u0026gt; 用于在堆分配值 Rc\u0026lt;T\u0026gt; 引用计数类型，允许多个拥有者 Ref\u0026lt;T\u0026gt; 和 RefMut\u0026lt;T\u0026gt; 和通过 RefCell\u0026lt;T\u0026gt; 访问，运行时取代编译期强制检查借用规则 Box\u0026lt;T\u0026gt; 场景：\n编译期未知大小的类型（递归类型（自己包含自己类型的类型，如链表）编译期无法确定大小）\n// 递归类型 enum List { Cons(i32, Box\u0026lt;List\u0026gt;), Nil, } fn main() { let b = Box::new(5); println!(\u0026#34;b = {}\u0026#34;, b); let list = Cons(1, Box::new(Cons(2, Box::new(Cons(3, Box::new(Nil)))))); } 避免大量数据转移所有权时发生拷贝\n拥有一个实现特定特性的值（不关心具体类型）的所有权\nDeref 用于自定义解引用操作符（ * ） 的行为，智能指针通过实现该特性来模拟普通引用的行为。\n对比\nfn main() { let x = 5; let y = \u0026amp;x; assert_eq!(5, x); assert_eq!(5, *y); // must dereference } 和\nfn main() { let x = 5; let y = Box::new(x); assert_eq!(5, x); assert_eq!(5, *y); } Box\u0026lt;T\u0026gt; 的实现大体如下\nuse std::ops::Deref; struct MyBox\u0026lt;T\u0026gt;(T); impl\u0026lt;T\u0026gt; Deref for MyBox\u0026lt;T\u0026gt; { type Target = T; fn new(x: T) -\u0026gt; MyBox\u0026lt;T\u0026gt; { MyBox(x) } fn deref(\u0026amp;self) -\u0026gt; \u0026amp;T { \u0026amp;self.0 } } deref 让编译器知道如何通过 \u0026amp; 获取一个引用，然后就可以正确的解引用，实际展开的代码如下：\n*(y.deref()) 这样做的原因是如果 deref 不返回引用而是返回值，那么就会发生所有权转移，这是智能指针所不允许的。\n如果一个类型实现了 Deref ，当传递给函数或方法的类型不满足时，编译器会自动进行隐式转换（可能时多次）以满足需求。 还有 DerefMut 处理可变解引用。\n当 T: Deref\u0026lt;Target=U\u0026gt; 时，从 \u0026amp;T 变为 \u0026amp;U 当 T: DerefMut\u0026lt;Target=U\u0026gt; 时，从 \u0026amp;mut T 变为 \u0026amp;mut U 当 T: Deref\u0026lt;Target=U\u0026gt; 时，从 \u0026amp;mut T 变为 \u0026amp;U ","permalink":"https://notes.0081800.xyz/notes/20200629180545-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/","summary":"智能指针 表现的像一个指针，拥有数据并允许在对数据进行维护。\n通常通过 struct 实现并实现两个特性 Deref 和 Drop\nDeref 允许智能指针实例行为像一个引用，让代码可以同时处理引用和智能指针 Drop 允许自定义智能指针超出作用域的行为。 标准库常见的智能指针\nBox\u0026lt;T\u0026gt; 用于在堆分配值 Rc\u0026lt;T\u0026gt; 引用计数类型，允许多个拥有者 Ref\u0026lt;T\u0026gt; 和 RefMut\u0026lt;T\u0026gt; 和通过 RefCell\u0026lt;T\u0026gt; 访问，运行时取代编译期强制检查借用规则 Box\u0026lt;T\u0026gt; 场景：\n编译期未知大小的类型（递归类型（自己包含自己类型的类型，如链表）编译期无法确定大小）\n// 递归类型 enum List { Cons(i32, Box\u0026lt;List\u0026gt;), Nil, } fn main() { let b = Box::new(5); println!(\u0026#34;b = {}\u0026#34;, b); let list = Cons(1, Box::new(Cons(2, Box::new(Cons(3, Box::new(Nil)))))); } 避免大量数据转移所有权时发生拷贝\n拥有一个实现特定特性的值（不关心具体类型）的所有权\nDeref 用于自定义解引用操作符（ * ） 的行为，智能指针通过实现该特性来模拟普通引用的行为。\n对比\nfn main() { let x = 5; let y = \u0026amp;x; assert_eq!","title":"智能指针"},{"content":"迭代器 所有的迭代器都实现了 Iterator 特性：\npub trait Iterator { type Item; // 关联类型 fn next(\u0026amp;mut self) -\u0026gt; Option\u0026lt;Self::Item\u0026gt;; // 返回 None 结束循环 } ","permalink":"https://notes.0081800.xyz/notes/20200629180506-%E8%BF%AD%E4%BB%A3%E5%99%A8/","summary":"迭代器 所有的迭代器都实现了 Iterator 特性：\npub trait Iterator { type Item; // 关联类型 fn next(\u0026amp;mut self) -\u0026gt; Option\u0026lt;Self::Item\u0026gt;; // 返回 None 结束循环 } ","title":"迭代器"},{"content":"生命周期 Rust 中的每一个引用都有其生命周期：引用有效的作用域。 大部分情况下生命周期都是隐式和自举的，在无法完成的情况下就需要我们通过生命周期泛型参数帮助编译器进行注解。 生命周期的主要目标是避免悬空指针。 生命周期泛型参数定义各个引用之间（参数和参数、参数和返回值）的关系，并不改变（延长）变量原本的生命周期 \u0026amp;i32 // a reference \u0026amp;\u0026#39;a i32 // a reference with an explicit lifetime \u0026amp;\u0026#39;a mut i32 // a mutable reference with an explicit lifetime 参考以下代码\nfn longest\u0026lt;\u0026#39;a\u0026gt;(x: \u0026amp;\u0026#39;a str, y: \u0026amp;\u0026#39;a str) -\u0026gt; \u0026amp;\u0026#39;a str { if x.len() \u0026gt; y.len() { x } else { y } } 以上代码\n标注生命周期 'a 函数有两个引用参数，都使用生命周期 'a 表示两个参数的生命周期必须一致（存活的周期一样长） 函数返回一个引用，并且存活的时间和生命周期 'a 一致 以上指定不改变任何传入的引用的生命周期，我们只是要求借用检查器（borrow checker）检查这些约束。 也就是说借用检查器要检查传入的两个引用的生命周期必须一致，返回的引用的存活周期不能超过传入的引用的存活周期 思考 当函数返回一个引用时，返回值的生命周期注解要和参数的其中之一相匹配，否则那么引用就是指向里函数内创建的值（不能返回）。 也就是说返回引用时，引用的声明周期必须和参数（其一）相关。如果想要返回函数内创建的值最好返回一个有所有权的值类型。\n结构体生命周期 如果结构体需要持有引用，需要在定义结构体时给每一个引用都加上生命周期注解。\n如果结构体声明了生命周期参数，那么 impl 同样也要声明。\nstruct ImportantExcerpt\u0026lt;\u0026#39;a\u0026gt; { part: \u0026amp;\u0026#39;a str, } impl\u0026lt;\u0026#39;a\u0026gt; ImportantExcerpt\u0026lt;\u0026#39;a\u0026gt; { fn announce_and_return_part(\u0026amp;self, announcement: \u0026amp;str) -\u0026gt; \u0026amp;str { println!(\u0026#34;Attention please: {}\u0026#34;, announcement); self.part } } 生命周期省略（elision）规则 函数参数的生命周期为输入生命周期 函数返回值的生命周期为输出生命周期 3 个规则用于 fn 和 impl ：\n函数的每个引用参数都有一个生命周期： fn foo\u0026lt;'a, 'b\u0026gt;(x: \u0026amp;'a i32, y: \u0026amp;'b i32) 如果只有一个引用参数，那么将输入的生命周期注解将应用到所有输出上 如果有多个参数，但包含一个 \u0026amp;self 或 \u0026amp;mut self 那么 self 的生命周期将分配到所有输出参数上。 扩展文章 Rust Borrow and Lifetimes ","permalink":"https://notes.0081800.xyz/notes/20200629180413-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/","summary":"生命周期 Rust 中的每一个引用都有其生命周期：引用有效的作用域。 大部分情况下生命周期都是隐式和自举的，在无法完成的情况下就需要我们通过生命周期泛型参数帮助编译器进行注解。 生命周期的主要目标是避免悬空指针。 生命周期泛型参数定义各个引用之间（参数和参数、参数和返回值）的关系，并不改变（延长）变量原本的生命周期 \u0026amp;i32 // a reference \u0026amp;\u0026#39;a i32 // a reference with an explicit lifetime \u0026amp;\u0026#39;a mut i32 // a mutable reference with an explicit lifetime 参考以下代码\nfn longest\u0026lt;\u0026#39;a\u0026gt;(x: \u0026amp;\u0026#39;a str, y: \u0026amp;\u0026#39;a str) -\u0026gt; \u0026amp;\u0026#39;a str { if x.len() \u0026gt; y.len() { x } else { y } } 以上代码\n标注生命周期 'a 函数有两个引用参数，都使用生命周期 'a 表示两个参数的生命周期必须一致（存活的周期一样长） 函数返回一个引用，并且存活的时间和生命周期 'a 一致 以上指定不改变任何传入的引用的生命周期，我们只是要求借用检查器（borrow checker）检查这些约束。 也就是说借用检查器要检查传入的两个引用的生命周期必须一致，返回的引用的存活周期不能超过传入的引用的存活周期 思考 当函数返回一个引用时，返回值的生命周期注解要和参数的其中之一相匹配，否则那么引用就是指向里函数内创建的值（不能返回）。 也就是说返回引用时，引用的声明周期必须和参数（其一）相关。如果想要返回函数内创建的值最好返回一个有所有权的值类型。\n结构体生命周期 如果结构体需要持有引用，需要在定义结构体时给每一个引用都加上生命周期注解。","title":"生命周期"},{"content":"let add_one = | num | { num + 1 }; 由于闭包和当前上下文相关联，所以 Rust 可以进行类型推导，类型注解也就不是必要的，但是依然可以自己添加：\nlet add_one = | num: i32 | { num + 1 }; fn add_one_v1 (x: u32) -\u0026gt; u32 { x + 1 } let add_one_v2 = |x: u32| -\u0026gt; u32 { x + 1 }; let add_one_v3 = |x| { x + 1 }; let add_one_v4 = |x| x + 1 ; 使用 Fn 存储闭包类型\nstruct Cacher\u0026lt;T\u0026gt; where T: Fn(u32) -\u0026gt; u32 { calculation: T, value: Option\u0026lt;u32\u0026gt;, } impl Cacher\u0026lt;T\u0026gt; where T: Fn(u32) -\u0026gt; u32 { fn new(calculation: T) -\u0026gt; Cacher\u0026lt;T\u0026gt; { Cacher { calculation, value: None, } } fn value(\u0026amp;mut self, arg: u32) -\u0026gt; u32 { if let Some(value) = self.value { value } else { let value = (self.calculation)(arg); self.value = Some(value); value } } } 闭包和函数的区别：闭包会捕捉当前环境，但是函数不会。\n三种不同 Fn trait\nFnOnce 定义时获取引用环境的变量的所有权，并只能调用一次（不能多次获得环境变量的所有权） Fn 立即从所在环境借用值 FnMut 可以改变引用环境的引用值 如果想要强制取得使用的所在环境变量的所有权，可以使用 move 关键字\nfn main() { let x = vec![1, 2, 3]; let euqal_to_x = move |z| z == x; // x has move to closure, so can\u0026#39;t use it anymore. } ","permalink":"https://notes.0081800.xyz/notes/20200629180436-%E9%97%AD%E5%8C%85/","summary":"let add_one = | num | { num + 1 }; 由于闭包和当前上下文相关联，所以 Rust 可以进行类型推导，类型注解也就不是必要的，但是依然可以自己添加：\nlet add_one = | num: i32 | { num + 1 }; fn add_one_v1 (x: u32) -\u0026gt; u32 { x + 1 } let add_one_v2 = |x: u32| -\u0026gt; u32 { x + 1 }; let add_one_v3 = |x| { x + 1 }; let add_one_v4 = |x| x + 1 ; 使用 Fn 存储闭包类型\nstruct Cacher\u0026lt;T\u0026gt; where T: Fn(u32) -\u0026gt; u32 { calculation: T, value: Option\u0026lt;u32\u0026gt;, } impl Cacher\u0026lt;T\u0026gt; where T: Fn(u32) -\u0026gt; u32 { fn new(calculation: T) -\u0026gt; Cacher\u0026lt;T\u0026gt; { Cacher { calculation, value: None, } } fn value(\u0026amp;mut self, arg: u32) -\u0026gt; u32 { if let Some(value) = self.","title":"闭包"},{"content":"Traits 定义行为在多个类型中共享。 可以定义默认行为在实现者中间共享。 可以用于定义参数的行为，同样可以定义返回值行为，当用 trait 限定返回值类型时，不能同时（if/else）返回多种实现了该 trait 的类型。 pub trait Summary { fn summarize(\u0026amp;self) -\u0026gt; String; } pub struct Article{ pub title: String, } impl Summary for Article { fn summarize(\u0026amp;self) -\u0026gt; String { format!(\u0026#34;{}\u0026#34;, self.title) } } pub fn notify(item: impl Summary) { println!(\u0026#34;{}\u0026#34;, item.summarize()); } // trait bound 语法糖版本 pub fn notify\u0026lt;T: Summary\u0026gt;(item: T) { println!(\u0026#34;{}\u0026#34;, item.summarize()); } 定义参数行为 通过 impl ： fn notify(item: impl TraitName) ，用于简单明了的场景，比如一个参数 通过 trait bound ： fn notify\u0026lt;T: TraitName\u0026gt; (item: T) ，用于更复杂的场景，比如多个参数用于减少代码 可以通过 + 连接： fn notify(T: TraitName + Display) (item: T)\n可以通过 where 子句\nfn some_function\u0026lt;T: Display + Clone, U: Clone + Debug\u0026gt;(t: T, u: U) -\u0026gt; i32 { // vs fn some_function\u0026lt;T, U\u0026gt;(t: T, u: U) -\u0026gt; i32 where T: Display + Clone, U: Clone + Debug { Trait Objects 对比泛型：\n泛型会在编译期展开：将确定的类型替换泛型参数展开成非泛型的实现。方法调用在编译期就能确定。 \u0026ndash; 静态分配 Trait Object 在编译期确定方法调用。 \u0026ndash; 动态分配 只能使用 对象安全（object-safe） 的特性作为 Trait Object 。对象安全的特性定义的所以方法必须满足如下规则：\n所有方法返回类型不能是 Self 所有方法不包含泛型形参 黄金规则：我们必须将一些动态大小的类型的值放在指针后面，通过指针引用。\n每一个 trait 都是一个动态大小的类型，如果要将 trait 当作对象使用必须通过指针引用，如：\n\u0026amp;dyn Trait Box\u0026lt;dyn Trait\u0026gt; Rc\u0026lt;dyn Trait\u0026gt; Sized 特性用于标志类型大小是否编译期可知，并且在编译期自动为所有内容都实现。\nfn generic\u0026lt;T\u0026gt;(t: T) { // --snip-- } // 等于 fn generic\u0026lt;T: Sized\u0026gt;(t: T) { // --snip-- } 可以通过 ?Sized 来避免这种默认行为：\nfn generic\u0026lt;T: ?Sized\u0026gt;(t: \u0026amp;T) { // --snip-- } ","permalink":"https://notes.0081800.xyz/notes/20200629180345-traits/","summary":"Traits 定义行为在多个类型中共享。 可以定义默认行为在实现者中间共享。 可以用于定义参数的行为，同样可以定义返回值行为，当用 trait 限定返回值类型时，不能同时（if/else）返回多种实现了该 trait 的类型。 pub trait Summary { fn summarize(\u0026amp;self) -\u0026gt; String; } pub struct Article{ pub title: String, } impl Summary for Article { fn summarize(\u0026amp;self) -\u0026gt; String { format!(\u0026#34;{}\u0026#34;, self.title) } } pub fn notify(item: impl Summary) { println!(\u0026#34;{}\u0026#34;, item.summarize()); } // trait bound 语法糖版本 pub fn notify\u0026lt;T: Summary\u0026gt;(item: T) { println!(\u0026#34;{}\u0026#34;, item.summarize()); } 定义参数行为 通过 impl ： fn notify(item: impl TraitName) ，用于简单明了的场景，比如一个参数 通过 trait bound ： fn notify\u0026lt;T: TraitName\u0026gt; (item: T) ，用于更复杂的场景，比如多个参数用于减少代码 可以通过 + 连接： fn notify(T: TraitName + Display) (item: T)","title":"Traits"},{"content":"enum Result\u0026lt;T, E\u0026gt; { Ok(T), Err(E), } ? 操作符 对比\nuse std::io; use std::io::Read; use std::fs::File; fn read_username_from_file() -\u0026gt; Result\u0026lt;String, io::Error\u0026gt; { let f = File::open(\u0026#34;hello.txt\u0026#34;); let mut f = match f { Ok(file) =\u0026gt; file, Err(e) =\u0026gt; return Err(e), }; let mut s = String::new(); match f.read_to_string(\u0026amp;mut s) { Ok(_) =\u0026gt; Ok(s), Err(e) =\u0026gt; Err(e), } } 和\nuse std::io; use std::io::Read; use std::fs::File; fn read_username_from_file() -\u0026gt; Result\u0026lt;String, io::Error\u0026gt; { let mut f = File::open(\u0026#34;hello.txt\u0026#34;)?; let mut s = String::new(); f.read_to_string(\u0026amp;mut s)?; Ok(s) } 和\nuse std::io; use std::io::Read; use std::fs::File; fn read_username_from_file() -\u0026gt; Result\u0026lt;String, io::Error\u0026gt; { let mut s = String::new(); File::open(\u0026#34;hello.txt\u0026#34;)?.read_to_string(\u0026amp;mut s)?; Ok(s) } ? 操作符用于返回 Result\u0026lt;T,E\u0026gt; 的表达式后面 ? 操作符只能用于返回 Result\u0026lt;T,E\u0026gt; 的函数内部 ? 操作符执行如下操作 如果表达式返回 Ok 则返回 Ok 内的值，并且继续执行代码 如果表达式返回 Err 则直接返回整个函数，并调用 From trait 定义的 from 函数将错误转换为返回定义的错误类型 ","permalink":"https://notes.0081800.xyz/notes/20200629180301-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/","summary":"enum Result\u0026lt;T, E\u0026gt; { Ok(T), Err(E), } ? 操作符 对比\nuse std::io; use std::io::Read; use std::fs::File; fn read_username_from_file() -\u0026gt; Result\u0026lt;String, io::Error\u0026gt; { let f = File::open(\u0026#34;hello.txt\u0026#34;); let mut f = match f { Ok(file) =\u0026gt; file, Err(e) =\u0026gt; return Err(e), }; let mut s = String::new(); match f.read_to_string(\u0026amp;mut s) { Ok(_) =\u0026gt; Ok(s), Err(e) =\u0026gt; Err(e), } } 和\nuse std::io; use std::io::Read; use std::fs::File; fn read_username_from_file() -\u0026gt; Result\u0026lt;String, io::Error\u0026gt; { let mut f = File::open(\u0026#34;hello.","title":"错误处理"},{"content":"let some_u8_value = Some(0u8); // Without `if let` match some_u8_value { Some(3) =\u0026gt; println!(\u0026#34;three\u0026#34;); - =\u0026gt; (), } // With `if let` if let Some(3) = some_u8_value { println!(\u0026#34;three\u0026#34;); } ","permalink":"https://notes.0081800.xyz/notes/20200629180202-if_let/","summary":"let some_u8_value = Some(0u8); // Without `if let` match some_u8_value { Some(3) =\u0026gt; println!(\u0026#34;three\u0026#34;); - =\u0026gt; (), } // With `if let` if let Some(3) = some_u8_value { println!(\u0026#34;three\u0026#34;); } ","title":"if let"},{"content":"包、crate 和模块 Cargo.toml 表示一个包\n包含 0 个或 1 个库 crate（ src/lib.rs ） 包含 0 个或多个可执行 crate （ src/main.rs src/bin/*.rs ） 可以同时包含以上两种 模块化系统\n模块，一种组织代码和控制路径隐私的方法\n所有的项（函数，方法，结构体，枚举，模块和常量）默认私有 不允许使用私有的子模块的代码 可以使用父模块和同级模块的代码 路径，一种命名项的方法\nuse , 一个将路径带到当前作用域的关键字\npub ，一个将项公开的关键字\nas ，一个将带到当前作用域项重命名的关键字\nsuper , 一个相当于文件系统里 .. 作用的关键字\n* ，通配符用于使用制定路径下的所有项\npub use 用于重新暴露可以访问的模块\n模块可以放在一个文件，也可以按照一定规则拆分到不同文件下\n使用同一个 use 清理嵌套的 use\nuse std::cmp::Ordering; use std::io; use std::{cmp::Ordering, io}; use std::io; use std::io::Write; use std::{self, Write}; mod sound { pub mod instrument { pub mod woodwind { pub fn clarinet() { super::breathe_in(); } } fn breathe_in() { } } mod voice { } } fn main() { // 绝对路径以 crate 开始，crate 表示根 crate::sound::instrument::woodwind::clarinet(); // 相对路径 sound::instrument::woodwind::clarinet(); } 上面例子 sound 模块并非公开，但是由于 main 和 sound 定义在同一模块下，所以允许在 main 中引用 sound 。\n","permalink":"https://notes.0081800.xyz/notes/20200629180233-%E6%A8%A1%E5%9D%97%E5%8C%96/","summary":"包、crate 和模块 Cargo.toml 表示一个包\n包含 0 个或 1 个库 crate（ src/lib.rs ） 包含 0 个或多个可执行 crate （ src/main.rs src/bin/*.rs ） 可以同时包含以上两种 模块化系统\n模块，一种组织代码和控制路径隐私的方法\n所有的项（函数，方法，结构体，枚举，模块和常量）默认私有 不允许使用私有的子模块的代码 可以使用父模块和同级模块的代码 路径，一种命名项的方法\nuse , 一个将路径带到当前作用域的关键字\npub ，一个将项公开的关键字\nas ，一个将带到当前作用域项重命名的关键字\nsuper , 一个相当于文件系统里 .. 作用的关键字\n* ，通配符用于使用制定路径下的所有项\npub use 用于重新暴露可以访问的模块\n模块可以放在一个文件，也可以按照一定规则拆分到不同文件下\n使用同一个 use 清理嵌套的 use\nuse std::cmp::Ordering; use std::io; use std::{cmp::Ordering, io}; use std::io; use std::io::Write; use std::{self, Write}; mod sound { pub mod instrument { pub mod woodwind { pub fn clarinet() { super::breathe_in(); } } fn breathe_in() { } } mod voice { } } fn main() { // 绝对路径以 crate 开始，crate 表示根 crate::sound::instrument::woodwind::clarinet(); // 相对路径 sound::instrument::woodwind::clarinet(); } 上面例子 sound 模块并非公开，但是由于 main 和 sound 定义在同一模块下，所以允许在 main 中引用 sound 。","title":"模块化"},{"content":"#[derive(Debug)] enum UsState { Alabama, Alaska, } enum Coin { Penny, Nickel, Dime, Quarter(UsState), } fn value_cents(coin: Coin) -\u0026gt; u8 { match coin { Coin::Peny =\u0026gt; { println!(\u0026#34;Lucy penny!\u0026#34;); 1 }, Coin::Nickel =\u0026gt; 5, Coin::Dime =\u0026gt; 10, Coin::Quarter(state) =\u0026gt; { println!(\u0026#34;State quarter from {:?}!\u0026#34;, state); 25 }, } } // Option fn plus_one(x: Option\u0026lt;i32\u0026gt;) -\u0026gt; Option\u0026lt;i32\u0026gt; { match x { None =\u0026gt; None, Some(i) =\u0026gt; Some(i + 1), } } let five = Some(5); let six = plus_one(five); let none = plus_one(None); 编译器会检查 match 覆盖所有情况， _ 可以用于所有未覆盖的情况。\n","permalink":"https://notes.0081800.xyz/notes/20200629180131-%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/","summary":"#[derive(Debug)] enum UsState { Alabama, Alaska, } enum Coin { Penny, Nickel, Dime, Quarter(UsState), } fn value_cents(coin: Coin) -\u0026gt; u8 { match coin { Coin::Peny =\u0026gt; { println!(\u0026#34;Lucy penny!\u0026#34;); 1 }, Coin::Nickel =\u0026gt; 5, Coin::Dime =\u0026gt; 10, Coin::Quarter(state) =\u0026gt; { println!(\u0026#34;State quarter from {:?}!\u0026#34;, state); 25 }, } } // Option fn plus_one(x: Option\u0026lt;i32\u0026gt;) -\u0026gt; Option\u0026lt;i32\u0026gt; { match x { None =\u0026gt; None, Some(i) =\u0026gt; Some(i + 1), } } let five = Some(5); let six = plus_one(five); let none = plus_one(None); 编译器会检查 match 覆盖所有情况， _ 可以用于所有未覆盖的情况。","title":"模式匹配"},{"content":" 多种类型的集合体，一个类型的变量可以存储多种类型的值，枚举的每一项都是该枚举类型的变体：\nenum IpAddrKind { V4, V6, } fn main() { route(IpAddrKind::V4); route(IpAddrkind::V6); } fn route(kind: IpAddrKind) { // ... } 枚举的每一个变体都可以直接包含数据，并且每一个变体可以包含不同的数据类型和不同的数量，甚至可以直接放结构体（也可以是匿名的）。\nstruct Ipv4Addr { // --snip-- } enum IpAddr { V4(Ipv4Addr), V6(String), } let home = IpAddr::V4(127, 0, 0, 1); let loopback = IpAddr::V6(String::from(\u0026#34;::1\u0026#34;)); struct Message { Quit, Move{ x: i32, y: i32 }, // anonymous struct Write(String), ChangeColor(i32, i32, i32), // three i32 values } 枚举也可以通过 impl 实现方法\nimpl Message { fn call(\u0026amp;self) { match self { // ... } } } let m = Message::Write(String::from(\u0026#34;hello\u0026#34;)); m.call(); Option\nenum Option\u0026lt;T\u0026gt; { Some(T), None, } 由于 Option 很重要，所以已经在 prelude 包含，也就是说无需使用 Option:: 前缀就可以直接使用 Some 和 None\nlet some_number = Some(5); let some_number: Option\u0026lt;i32\u0026gt; = Some(5); let some_number: Option\u0026lt;i32\u0026gt; = Option\u0026lt;i32\u0026gt;::Some(5); let some_number: Option\u0026lt;i32\u0026gt; = None; let some_number: Option\u0026lt;i32\u0026gt; = Option::None; ","permalink":"https://notes.0081800.xyz/notes/20200629180041-%E6%9E%9A%E4%B8%BE/","summary":"多种类型的集合体，一个类型的变量可以存储多种类型的值，枚举的每一项都是该枚举类型的变体：\nenum IpAddrKind { V4, V6, } fn main() { route(IpAddrKind::V4); route(IpAddrkind::V6); } fn route(kind: IpAddrKind) { // ... } 枚举的每一个变体都可以直接包含数据，并且每一个变体可以包含不同的数据类型和不同的数量，甚至可以直接放结构体（也可以是匿名的）。\nstruct Ipv4Addr { // --snip-- } enum IpAddr { V4(Ipv4Addr), V6(String), } let home = IpAddr::V4(127, 0, 0, 1); let loopback = IpAddr::V6(String::from(\u0026#34;::1\u0026#34;)); struct Message { Quit, Move{ x: i32, y: i32 }, // anonymous struct Write(String), ChangeColor(i32, i32, i32), // three i32 values } 枚举也可以通过 impl 实现方法","title":"枚举"},{"content":"结构体 元组结构体（tuple struct） 用于命名元组并和其他元组进行区分：\nstruct Color(i32, i32, i32); struct Point(i32, i32, i32); let black = Color(0, 0, 0); let origin = Point(0, 0, 0); 由于定义了元组结构体所有 black 和 origin 是两个不同的类型。\n没有字段的结构体：类单元（Unit-Like）结构体 没有任何字段的结构体和单元类型 () 类似，用于实现一些特性（trait）但是没有任何数据。\n方法语法 self 占有所有权\n\u0026amp;self 不可变借用\n\u0026amp;mut self 可变借用\n自动引用和解引用\n在 Rust 中进行方法调用，如 object.something ，Rust 会自动添加 \u0026amp; \u0026amp;mut 或者 * , 用以自动匹配方法签名。以下是等价的：\np1.distance(\u0026amp;p2); (\u0026amp;p1).distance(\u0026amp;p2); 方法如果不声明 self 行参则是一个关联方法（静态方法），通过 :: 调用\nstruct Rectangle { width: u32, height: u32, } impl Rectangle { fn square(size: u32) -\u0026gt; Rectangle { Rectangle{ width: size, height: size } } } let r = Rectangle::square(10); 每一个结构体可以有多个 impl 块。\n","permalink":"https://notes.0081800.xyz/notes/20200629175956-%E7%BB%93%E6%9E%84%E4%BD%93/","summary":"结构体 元组结构体（tuple struct） 用于命名元组并和其他元组进行区分：\nstruct Color(i32, i32, i32); struct Point(i32, i32, i32); let black = Color(0, 0, 0); let origin = Point(0, 0, 0); 由于定义了元组结构体所有 black 和 origin 是两个不同的类型。\n没有字段的结构体：类单元（Unit-Like）结构体 没有任何字段的结构体和单元类型 () 类似，用于实现一些特性（trait）但是没有任何数据。\n方法语法 self 占有所有权\n\u0026amp;self 不可变借用\n\u0026amp;mut self 可变借用\n自动引用和解引用\n在 Rust 中进行方法调用，如 object.something ，Rust 会自动添加 \u0026amp; \u0026amp;mut 或者 * , 用以自动匹配方法签名。以下是等价的：\np1.distance(\u0026amp;p2); (\u0026amp;p1).distance(\u0026amp;p2); 方法如果不声明 self 行参则是一个关联方法（静态方法），通过 :: 调用\nstruct Rectangle { width: u32, height: u32, } impl Rectangle { fn square(size: u32) -\u0026gt; Rectangle { Rectangle{ width: size, height: size } } } let r = Rectangle::square(10); 每一个结构体可以有多个 impl 块。","title":"结构体"},{"content":" 类型前置 \u0026amp; 表示引用，引用允许变量指向一个值但是不发生所有权转移。 引用不占有所有权，所以变量超出作用域之后不会触发 drop 调用。 引用作为函数形参被成为借用（borrowing） 可变引用 针对特定作用域下的特定数据只能创建一个可变引用。如果要创建多个可变引用可以通过大括号创建新的作用域\nlet mut s = String::from(\u0026#34;hello\u0026#34;); { let s1 = mut \u0026amp;s; } let s2 = mut \u0026amp;s; 当已经存在不可变引用时，则无法再创建可变引用，下面代码无法编译通过\nlet mut s = String::from(\u0026#34;hello\u0026#34;); let s1 = \u0026amp;s; // OK let s2 = \u0026amp;s; // OK let s3 = mut \u0026amp;s; // BIG PROBLEM 悬空引用 以下代码是不允许的，无法编译通过\nfn main() { let s = dangling_string(); } fn dangling_string() -\u0026gt; \u0026amp;String { let s = String::from(\u0026#34;hello\u0026#34;); \u0026amp;s } 上面代码 s 在函数内部分配，那么在函数执行完成后 s 将被释放，所以返回 s 的引用会造成悬空引用。\n引用的规则 任何时间针对一个变量，只能有多个不可变引用或者一个可变引用 引用必须一直有效（生命周期） 分片 分片数据类型没有所有权。分片引用一片连续的序列的集合。\n字符串分片 字符串分片是一个引用指向 String 的一部分。\nlet s = String::from(\u0026#34;Hello world!\u0026#34;) let hello = \u0026amp;s[0..5]; let world = \u0026amp;s[6..11]; 字符串字面量（\u0026amp;str）是个指向二进制程序一块区域的字符串分片，所以函数声明字符串参数使用 \u0026amp;str 会更通用：\nfn main() { let s = String::from(\u0026#34;hello world\u0026#34;); let word = first_word(\u0026amp;s[..]); let sl = \u0026#34;hello world\u0026#34;; let w1 = first_word(\u0026amp;sl[..]); let w2 = first_word(sl); } fn first_word(s: \u0026amp;str) -\u0026gt; \u0026amp;str { \u0026amp;s[..] } 其他分片 let a = [1, 2, 3, 4, 5]; let a1 = \u0026amp;a[..]; 相关博文 Rust Means Never Having to Close a Socket ","permalink":"https://notes.0081800.xyz/notes/20200629174943-%E5%BC%95%E7%94%A8%E5%92%8C%E5%80%9F%E7%94%A8/","summary":"类型前置 \u0026amp; 表示引用，引用允许变量指向一个值但是不发生所有权转移。 引用不占有所有权，所以变量超出作用域之后不会触发 drop 调用。 引用作为函数形参被成为借用（borrowing） 可变引用 针对特定作用域下的特定数据只能创建一个可变引用。如果要创建多个可变引用可以通过大括号创建新的作用域\nlet mut s = String::from(\u0026#34;hello\u0026#34;); { let s1 = mut \u0026amp;s; } let s2 = mut \u0026amp;s; 当已经存在不可变引用时，则无法再创建可变引用，下面代码无法编译通过\nlet mut s = String::from(\u0026#34;hello\u0026#34;); let s1 = \u0026amp;s; // OK let s2 = \u0026amp;s; // OK let s3 = mut \u0026amp;s; // BIG PROBLEM 悬空引用 以下代码是不允许的，无法编译通过\nfn main() { let s = dangling_string(); } fn dangling_string() -\u0026gt; \u0026amp;String { let s = String::from(\u0026#34;hello\u0026#34;); \u0026amp;s } 上面代码 s 在函数内部分配，那么在函数执行完成后 s 将被释放，所以返回 s 的引用会造成悬空引用。","title":"引用和借用"},{"content":"规则 每个值都有一个变量叫做所有者（owner） 同一时间只能有一个所有者 当所有者超出作用域则值被销毁 变量作用域 作用域是一个变量有效的范围 当变量超出作用域范围自动调用对象的 drop 方法进行内存归还操作 变量相互作用：所有权转移（Move） 对于所有在栈上分配的值（固定大小），在进行赋值操作时都对值进行拷贝：\nlet x = 5; ley y = x; // copy 5 to y 但是对于在堆上分配的，变量保存的是指向内存的指针，所以在赋值时拷贝的也是指向该内存的指针：\nlet s1 = String::from(\u0026#34;hello\u0026#34;); let s2 = s1; 为了保证内存安全，防止 s1 和 s2 超出作用域范围调用两次 drop 造成重复的内存回收，Rust 会让 s1 不再有效，来避免对 s1 进行回收。继续使用 s1 会导致编译错误。这种情况叫做所有权转移（move）。\n变量相互作用：克隆（Clone） 克隆用于深度拷贝变量：\nlet s1 = String::from(\u0026#34;hello\u0026#34;); let s2 = s1.clone(); println!(s1); 变量项目作用：拷贝（Copy） 如果数据类型的大小在编译期能够确定都将存储在栈上，这种情况下能够进行快速的拷贝。\nCopy 特性（trait）注解用于将值存贮在栈栈上 Copy 特性注解不能和 Drop 特性注解混用 Copy 特性注解使用规则如下 所有的数字类型 所有的布尔型 所有的浮点型 字符类型 所有元素都实现了 Copy 特性注解的元祖 所有权和函数 函数传递实参的规则和变量类似，传递变量到一个函数将为发生所有权转移或者拷贝。\n返回值和作用域 返回值可以转移所有权 将一个值赋给其他变量会产生所有权转移 一个包含堆分配的变量超出作用域将会被 drop 清理，除非所有权被转移到其他变量。 ","permalink":"https://notes.0081800.xyz/notes/20200629174911-%E6%89%80%E6%9C%89%E6%9D%83/","summary":"规则 每个值都有一个变量叫做所有者（owner） 同一时间只能有一个所有者 当所有者超出作用域则值被销毁 变量作用域 作用域是一个变量有效的范围 当变量超出作用域范围自动调用对象的 drop 方法进行内存归还操作 变量相互作用：所有权转移（Move） 对于所有在栈上分配的值（固定大小），在进行赋值操作时都对值进行拷贝：\nlet x = 5; ley y = x; // copy 5 to y 但是对于在堆上分配的，变量保存的是指向内存的指针，所以在赋值时拷贝的也是指向该内存的指针：\nlet s1 = String::from(\u0026#34;hello\u0026#34;); let s2 = s1; 为了保证内存安全，防止 s1 和 s2 超出作用域范围调用两次 drop 造成重复的内存回收，Rust 会让 s1 不再有效，来避免对 s1 进行回收。继续使用 s1 会导致编译错误。这种情况叫做所有权转移（move）。\n变量相互作用：克隆（Clone） 克隆用于深度拷贝变量：\nlet s1 = String::from(\u0026#34;hello\u0026#34;); let s2 = s1.clone(); println!(s1); 变量项目作用：拷贝（Copy） 如果数据类型的大小在编译期能够确定都将存储在栈上，这种情况下能够进行快速的拷贝。\nCopy 特性（trait）注解用于将值存贮在栈栈上 Copy 特性注解不能和 Drop 特性注解混用 Copy 特性注解使用规则如下 所有的数字类型 所有的布尔型 所有的浮点型 字符类型 所有元素都实现了 Copy 特性注解的元祖 所有权和函数 函数传递实参的规则和变量类似，传递变量到一个函数将为发生所有权转移或者拷贝。","title":"所有权"},{"content":"Rust 区分语句和表达式， Rust 是基于表达式的语言：\n语句：执行动作并且不返回值\n使用 let 声明变量是语句，所以 let 语句不返回值，也就不能像 Python 那样将 let 语句赋值给其他变量 函数声明也是语句 表达式：计算并返回值，不以分号（;）结尾\n5 + 6 是一个表达式，计算并返回值 11\n表达式可以作为语句的一部分\n函数调用是表达式\n宏调用是表达式\n用 {} 创建的块也是表达式\nlet x = { let y = 6; y + 5 } if loop while for 是表达式\n在表达式后面增加分号（;）可以将一个表达式转为语句。\n","permalink":"https://notes.0081800.xyz/notes/20200629174820-%E8%AF%AD%E5%8F%A5%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F/","summary":"Rust 区分语句和表达式， Rust 是基于表达式的语言：\n语句：执行动作并且不返回值\n使用 let 声明变量是语句，所以 let 语句不返回值，也就不能像 Python 那样将 let 语句赋值给其他变量 函数声明也是语句 表达式：计算并返回值，不以分号（;）结尾\n5 + 6 是一个表达式，计算并返回值 11\n表达式可以作为语句的一部分\n函数调用是表达式\n宏调用是表达式\n用 {} 创建的块也是表达式\nlet x = { let y = 6; y + 5 } if loop while for 是表达式\n在表达式后面增加分号（;）可以将一个表达式转为语句。","title":"语句和表达式"},{"content":" tags: C/C++ 如果类成员属性是值类型或者引用类型则需要改对象有无参数构造方法，否则类无法实例化， 这是因为这类成员属性在构造函数调用之前就需要进行初始化。\n下面代码无法通过编译\nclass Foo { public: Foo(int n) : n {n} { }; ~Foo() { }; private: int n; }; class Bar { public: Bar(int n) { this-\u0026gt;foo = Foo(n); }; ~Bar(); private: Foo \u0026amp; foo; }; ","permalink":"https://notes.0081800.xyz/notes/20200628183417-member_initialize/","summary":" tags: C/C++ 如果类成员属性是值类型或者引用类型则需要改对象有无参数构造方法，否则类无法实例化， 这是因为这类成员属性在构造函数调用之前就需要进行初始化。\n下面代码无法通过编译\nclass Foo { public: Foo(int n) : n {n} { }; ~Foo() { }; private: int n; }; class Bar { public: Bar(int n) { this-\u0026gt;foo = Foo(n); }; ~Bar(); private: Foo \u0026amp; foo; }; ","title":"Member initialize"},{"content":" tags: C/C++ 容器类实现 begin 和 end 方法返回 Iterator class 的实例， Iterator class 通过实现友元类可以直接访问容器类的私有属性， Iterator class 通过重载 ++/==/* 等操作符实现对容器类的访问并通过自己的私有属性记录当前位置。\nIterator class 重载的操作符：\n++ 移动容器元素位置 == 判断两个容器位置是否相等（容器是否一个，位置是否一个） * 解引用返回当前位置指向的容器的值 ","permalink":"https://notes.0081800.xyz/notes/20200628183227-iterator_class/","summary":" tags: C/C++ 容器类实现 begin 和 end 方法返回 Iterator class 的实例， Iterator class 通过实现友元类可以直接访问容器类的私有属性， Iterator class 通过重载 ++/==/* 等操作符实现对容器类的访问并通过自己的私有属性记录当前位置。\nIterator class 重载的操作符：\n++ 移动容器元素位置 == 判断两个容器位置是否相等（容器是否一个，位置是否一个） * 解引用返回当前位置指向的容器的值 ","title":"Iterator class"},{"content":" tags: Computer Systems,C/C++,优化,High Performance 部分 intel CPU 支持向量指令集同时进行多路整数和浮点数计算，以此来进行对相关算法进行优化，这里整理相关链接：\n编译器支持相关封装避免编写汇编代码，官方指南：Intrinsics Guide 基于 sse_mathfun 的 avx_mathfun 封装相关宏和函数 mp3 库 lame 中的 SSE 加速实现 libmp3lame/vector/xmm_quantize_sub.c AVX512 VNNI https://en.wikichip.org/wiki/x86/avx512_vnni ","permalink":"https://notes.0081800.xyz/notes/20200628182211-avx512/","summary":" tags: Computer Systems,C/C++,优化,High Performance 部分 intel CPU 支持向量指令集同时进行多路整数和浮点数计算，以此来进行对相关算法进行优化，这里整理相关链接：\n编译器支持相关封装避免编写汇编代码，官方指南：Intrinsics Guide 基于 sse_mathfun 的 avx_mathfun 封装相关宏和函数 mp3 库 lame 中的 SSE 加速实现 libmp3lame/vector/xmm_quantize_sub.c AVX512 VNNI https://en.wikichip.org/wiki/x86/avx512_vnni ","title":"SSE/AVX/AVX2/AVX512"},{"content":" AVX512 ","permalink":"https://notes.0081800.xyz/notes/20200628182150-%E4%BC%98%E5%8C%96/","summary":" AVX512 ","title":"优化"},{"content":" tags: Translate,Incomplete 原文链接：https://superorganizers.substack.com/p/surgical-reading-how-to-read-12-books\n手术阅读法：如何同时阅读 12 本书 译者注：这篇文章让我想起了《如何阅读一本书》这本书，文章中的大部分技巧都能在这本书中找出来，阅读是一门需要学习的技能。\n当有人问我如何阅读时我总是会有点尴尬，因为我一般都是同时阅读十几本书。\n但是我这样阅读并不是为了炫耀 \u0026ndash; 我这么做是因为我觉得这种阅读方式更好，最起码对我来说。\n这是一个我开发一个叫做 手术阅读法（surgical reading） 的过程，它意味着当我读一本非小说的书籍时，我会专注于尽可能快的从书中找到最有价值的部分并将之剔除。 这样允许我在一个主题上同时阅读许多不同的书籍，并从多个角度来观察这一主题。我的目标是快速地找到有价值的知识，并使用现实中获得的信息去解决问题。\n这种方法有很多隐藏的好处。首先，我可以快速了解自己对一本书是否有兴趣，并因此去花更多的时间读我真正感兴趣书籍。当我对一本书不感兴趣时我就可以将其放下并转到其他事情上，因为我知道我将它放回去是有原因的。 阅读不应该是将书籍在 ToDo 事项完成，而是应该解释什么吸引了你。\n其次，我可以从多个角度观察一个主题，并真正理解问题。我可以看到有多少不同的人讨论同一个时间和想法，而不是依靠一位作者的陈述。 这使我对当前感兴趣的的任何主题都有更细微的了解。\n最后，它将书籍转变为更主动和更积极的事物。我的书架（library）已经不再是死板的存储空间，而是一个与我不断互动的鲜活的事物。\n当然，当我找到一本我真正喜欢的书（现在也越来越频繁），我也可以充分的利用它。\n我是谁（Who I Am） 我的名字是 Brian Tobal，我耗费了我的大部分时间来思考如何学习。在过去 15 年，我在教育界获得了很多头衔（hats）。 我曾是一名小学科学老师、一家教育公司的研究员、六家教育科技初创公司的产品负责人，本人也是一些初创公司的创始人， 包括我于 2018 年出售的一家名为 Hickory 的公司。\n我喜欢初创公司。从学习角度来看，它们使你可以完全沉浸于新的领域，并根据其性质迫使你解决实际问题。 这为我自己的学习方法和阅读方法提供了动力。我不是为了仅仅积累知识来建立知识库，通常我建立它是为了尽快使用它。\n手术阅读法就是设计用来帮助我这么做的。\n所以你准备好试一试了吗？请从书架上拿出一些已经搁置了一段时间的书，希望您还没有读过。跟着我，亲眼看看手术阅读法的感觉。\n让我们开始吧！\n把书当作其自身的地图（Use the Book Itself as a Map） 以下是一份我如何阅读一本书的步骤分解：\n了解一本书 通过封面评判这本书 索引（index）包含了一切 把目录（TOC）当作骨架 通过前言（preface）进行预览 此过程的重点是获得在大约 15 分钟内对任何书籍进行“地图绘制”的能力。你希望对有价值的知识位于何处、什么地方打动你以及要花费多少时间来阅读它有基本的了解。\n下面，我们将逐步完成从一本书中提取要点（或者说知识块）的过程，如何增加阅读一本书的价值，以及如何结合所有内容以便您可以轻松的一次提取多本书。\n了解一本书（Approaching a Book ） 当我开始阅读一本非小说的书籍之前，我会话费 5-10 分钟的时间尝试去了解他对我具有什么价值以及它的结构。当我们决定要阅读此书时我们可以通过很多方式做到这一点。 也许通过亚马逊阅读一些评论和反馈或者随机浏览其中一部分。我更喜欢使用这本书本身。\n同样，我通常对从头到尾阅读一本书籍不感兴趣，所以我需要删除我需要的信息，当然需要先找找它。我想要的是一本关于本书内容的地图（无论是思维上的还是书面上的）。 你可以使用大脑记忆、记事本、Google Doc 或某些精美的笔记记录系统作为记录机制 \u0026ndash; 根据你自己的喜好就行。\n通过书籍的封面进行品评（Judge a Book by its Cover） 首先，给标题和副标题一些想法。 我知道这听起来很平凡，但是作者花了很多时间思考这些问题，通常它们代表一种观点。\n比如《美国简史》和《美国人历史》，作者强调“人”而不是“简”是什么意思？再比如\n","permalink":"https://notes.0081800.xyz/articles/20200628134657-surgical_reading_how_to_read_12_books_at_once/","summary":"tags: Translate,Incomplete 原文链接：https://superorganizers.substack.com/p/surgical-reading-how-to-read-12-books\n手术阅读法：如何同时阅读 12 本书 译者注：这篇文章让我想起了《如何阅读一本书》这本书，文章中的大部分技巧都能在这本书中找出来，阅读是一门需要学习的技能。\n当有人问我如何阅读时我总是会有点尴尬，因为我一般都是同时阅读十几本书。\n但是我这样阅读并不是为了炫耀 \u0026ndash; 我这么做是因为我觉得这种阅读方式更好，最起码对我来说。\n这是一个我开发一个叫做 手术阅读法（surgical reading） 的过程，它意味着当我读一本非小说的书籍时，我会专注于尽可能快的从书中找到最有价值的部分并将之剔除。 这样允许我在一个主题上同时阅读许多不同的书籍，并从多个角度来观察这一主题。我的目标是快速地找到有价值的知识，并使用现实中获得的信息去解决问题。\n这种方法有很多隐藏的好处。首先，我可以快速了解自己对一本书是否有兴趣，并因此去花更多的时间读我真正感兴趣书籍。当我对一本书不感兴趣时我就可以将其放下并转到其他事情上，因为我知道我将它放回去是有原因的。 阅读不应该是将书籍在 ToDo 事项完成，而是应该解释什么吸引了你。\n其次，我可以从多个角度观察一个主题，并真正理解问题。我可以看到有多少不同的人讨论同一个时间和想法，而不是依靠一位作者的陈述。 这使我对当前感兴趣的的任何主题都有更细微的了解。\n最后，它将书籍转变为更主动和更积极的事物。我的书架（library）已经不再是死板的存储空间，而是一个与我不断互动的鲜活的事物。\n当然，当我找到一本我真正喜欢的书（现在也越来越频繁），我也可以充分的利用它。\n我是谁（Who I Am） 我的名字是 Brian Tobal，我耗费了我的大部分时间来思考如何学习。在过去 15 年，我在教育界获得了很多头衔（hats）。 我曾是一名小学科学老师、一家教育公司的研究员、六家教育科技初创公司的产品负责人，本人也是一些初创公司的创始人， 包括我于 2018 年出售的一家名为 Hickory 的公司。\n我喜欢初创公司。从学习角度来看，它们使你可以完全沉浸于新的领域，并根据其性质迫使你解决实际问题。 这为我自己的学习方法和阅读方法提供了动力。我不是为了仅仅积累知识来建立知识库，通常我建立它是为了尽快使用它。\n手术阅读法就是设计用来帮助我这么做的。\n所以你准备好试一试了吗？请从书架上拿出一些已经搁置了一段时间的书，希望您还没有读过。跟着我，亲眼看看手术阅读法的感觉。\n让我们开始吧！\n把书当作其自身的地图（Use the Book Itself as a Map） 以下是一份我如何阅读一本书的步骤分解：\n了解一本书 通过封面评判这本书 索引（index）包含了一切 把目录（TOC）当作骨架 通过前言（preface）进行预览 此过程的重点是获得在大约 15 分钟内对任何书籍进行“地图绘制”的能力。你希望对有价值的知识位于何处、什么地方打动你以及要花费多少时间来阅读它有基本的了解。\n下面，我们将逐步完成从一本书中提取要点（或者说知识块）的过程，如何增加阅读一本书的价值，以及如何结合所有内容以便您可以轻松的一次提取多本书。\n了解一本书（Approaching a Book ） 当我开始阅读一本非小说的书籍之前，我会话费 5-10 分钟的时间尝试去了解他对我具有什么价值以及它的结构。当我们决定要阅读此书时我们可以通过很多方式做到这一点。 也许通过亚马逊阅读一些评论和反馈或者随机浏览其中一部分。我更喜欢使用这本书本身。\n同样，我通常对从头到尾阅读一本书籍不感兴趣，所以我需要删除我需要的信息，当然需要先找找它。我想要的是一本关于本书内容的地图（无论是思维上的还是书面上的）。 你可以使用大脑记忆、记事本、Google Doc 或某些精美的笔记记录系统作为记录机制 \u0026ndash; 根据你自己的喜好就行。","title":"Surgical Reading: How to Read 12 Books at Once"},{"content":"Python vendor package 之前一直在找 Python 类似 go mod vendor 部署的解决方案，今天在看 PySpark 的时候找到了，主要现存两种解决方案：\nConda 生态可以使用 conda-pack 原生 CPython 生态可以依托 venv-pack pex 对比\n时间 项目 活跃开发 贡献人数 提交数量 2021-08-28 venv-pack 否 2 30 conda-pack 是 15 246 pex 是 87 940 IPython EIN import numpy, math, matplotlib.pyplot as plt %matplotlib inline x = numpy.linspace(0, 2 * math.pi) plt.plot(x, numpy.sin(x)) Python Dark Magic Writing Python Extensions in Assembly 对应版本 manylinux2014 存在但是装不上 参见：PEP 599 \u0026ndash; The manylinux2014 Platform Tag\nCentOS 需要满足 glibc 版本为 2.17，参见 Platform Detection for Installers。\n","permalink":"https://notes.0081800.xyz/topics/20200628133616-python/","summary":"Python vendor package 之前一直在找 Python 类似 go mod vendor 部署的解决方案，今天在看 PySpark 的时候找到了，主要现存两种解决方案：\nConda 生态可以使用 conda-pack 原生 CPython 生态可以依托 venv-pack pex 对比\n时间 项目 活跃开发 贡献人数 提交数量 2021-08-28 venv-pack 否 2 30 conda-pack 是 15 246 pex 是 87 940 IPython EIN import numpy, math, matplotlib.pyplot as plt %matplotlib inline x = numpy.linspace(0, 2 * math.pi) plt.plot(x, numpy.sin(x)) Python Dark Magic Writing Python Extensions in Assembly 对应版本 manylinux2014 存在但是装不上 参见：PEP 599 \u0026ndash; The manylinux2014 Platform Tag","title":"Python"},{"content":" tags: C/C++,Programming Tools\n安装的头文件必须包含在目标的源代码中，否则构建如 iOS 的 Framework 时无法正确包含头文件\nADD_LIBRARY(test test.h) CMake 生成 C++ LSP 配置文件\n","permalink":"https://notes.0081800.xyz/notes/20200628123035-cmake/","summary":"tags: C/C++,Programming Tools\n安装的头文件必须包含在目标的源代码中，否则构建如 iOS 的 Framework 时无法正确包含头文件\nADD_LIBRARY(test test.h) CMake 生成 C++ LSP 配置文件","title":"CMake"},{"content":" CMake ","permalink":"https://notes.0081800.xyz/notes/20200628122958-build_system/","summary":" CMake ","title":"Build System"},{"content":" tags: Emacs 生成 terminfo\n$ cat \u0026lt;\u0026lt;EOF \u0026gt; terminfo-24bits.src # Use semicolon separators. xterm-24bits|xterm with 24-bit direct color mode, use=xterm-256color, Tc, setb24=\\E[48;2;%p1%{65536}%/%d;%p1%{256}%/%{255}%\u0026amp;%d;%p1%{255}%\u0026amp;%dm, setf24=\\E[38;2;%p1%{65536}%/%d;%p1%{256}%/%{255}%\u0026amp;%d;%p1%{255}%\u0026amp;%dm,]] EOF $ tic -x -o ~/.terminfo terminfo-24bits.src 通过 xterm-24bits 启动 Emacs\n$ env TERM=xterm-24bits emacs Emacs 通过 list-color-display 查看效果。\n","permalink":"https://notes.0081800.xyz/notes/20200603103943_tmux_256_colors/","summary":"tags: Emacs 生成 terminfo\n$ cat \u0026lt;\u0026lt;EOF \u0026gt; terminfo-24bits.src # Use semicolon separators. xterm-24bits|xterm with 24-bit direct color mode, use=xterm-256color, Tc, setb24=\\E[48;2;%p1%{65536}%/%d;%p1%{256}%/%{255}%\u0026amp;%d;%p1%{255}%\u0026amp;%dm, setf24=\\E[38;2;%p1%{65536}%/%d;%p1%{256}%/%{255}%\u0026amp;%d;%p1%{255}%\u0026amp;%dm,]] EOF $ tic -x -o ~/.terminfo terminfo-24bits.src 通过 xterm-24bits 启动 Emacs\n$ env TERM=xterm-24bits emacs Emacs 通过 list-color-display 查看效果。","title":"Emacs Tmux 256 colors"},{"content":" tags: Rust 动态大小类型（DST）和 Sized 特性 str （非 \u0026amp;str ）就是一个 DST，我们不能在运行时得知 str 的大小。 \u0026amp;str 是一个指针类型，大小是已知的。\nDST：拥有额外的元数据存储动态大小的信息。\n每一个特性都是一个是个 DST，使用 Trait Object 必须是像 \u0026amp;dyn Trait 和 Box\u0026lt;dyn Trait\u0026gt; （或 Rc\u0026lt;dyn Trait\u0026gt; ）的指针类型。\ndyn 关键字 dyn 关键字用于将 Trait Object 指针和普通的结构体指针区分开来。\nSized vs ?Sized Rust 有一个特定的特性叫做 Sized 去判断一个类型的大小是否是编译期可知的，并且自动在编译期为所有已知大小的类型实现， 同时 Rust 隐式的为泛型函数的类型参数加上 Sized 的限制（bound），下面这样的泛型函数：\nfn generic\u0026lt;T\u0026gt;(t: T) { // --snip-- } 实际上相当于像下面这样硬编码：\nfn generic\u0026lt;T: Sized\u0026gt;(t: T) { // --snip-- } 也可以通过下面特定的语法取消这个限制：\nfn geneic\u0026lt;T: ?Sized\u0026gt;(t: \u0026amp;T) { // --snip-- } ","permalink":"https://notes.0081800.xyz/notes/20200329204833_rust_trait_object/","summary":" tags: Rust 动态大小类型（DST）和 Sized 特性 str （非 \u0026amp;str ）就是一个 DST，我们不能在运行时得知 str 的大小。 \u0026amp;str 是一个指针类型，大小是已知的。\nDST：拥有额外的元数据存储动态大小的信息。\n每一个特性都是一个是个 DST，使用 Trait Object 必须是像 \u0026amp;dyn Trait 和 Box\u0026lt;dyn Trait\u0026gt; （或 Rc\u0026lt;dyn Trait\u0026gt; ）的指针类型。\ndyn 关键字 dyn 关键字用于将 Trait Object 指针和普通的结构体指针区分开来。\nSized vs ?Sized Rust 有一个特定的特性叫做 Sized 去判断一个类型的大小是否是编译期可知的，并且自动在编译期为所有已知大小的类型实现， 同时 Rust 隐式的为泛型函数的类型参数加上 Sized 的限制（bound），下面这样的泛型函数：\nfn generic\u0026lt;T\u0026gt;(t: T) { // --snip-- } 实际上相当于像下面这样硬编码：\nfn generic\u0026lt;T: Sized\u0026gt;(t: T) { // --snip-- } 也可以通过下面特定的语法取消这个限制：\nfn geneic\u0026lt;T: ?Sized\u0026gt;(t: \u0026amp;T) { // --snip-- } ","title":"Rust Trait Object"},{"content":" tags: Rust,Translate,Rust Wrapper Types 原文链接：Rust Borrow and Lifetimes。\nRust 是一门处于往 1.0 活跃开发的新语言（译注：1.0 早已发布，目前最新稳定版本 1.42）。 我必须再写一篇关于我为什么觉得 Rust 牛逼的新博客，但是今天我将关注在它的借用（borrow） 和生命周期（lifetimes）系统，这也是常常让包括我在内的 Rust 新手陷入困境的地方。这篇文章假设 你基本了解 Rust，如果还没推荐你先阅读指南和指针指南。\n资源所有权和借用 Rust 通过一个难缠的（sophisticated）借用系统在不用 GC 的情况下达到内存安全。对于任何资源 （栈内存、堆内存、文件句柄等），他们都对应一个唯一的所有者（owner）在需要的情况下处理资源回收。 你可以通过 \u0026amp; 或者 \u0026amp;mut 创建一个新的绑定指向该资源，这被称之为借用或可变借用。编译器确保 所有的所有者（owners）和借用者（borrowers）行为正确。\n拷贝和转移（Copy and move） 在我们开始进入借用系统之前，我们需要知道 Rust 如何处理拷贝和转移。这个 StackOverflow 答案非常值得一读。 基本上，在赋值和函数调用上：\n如果值是可拷贝的（copyable）（仅涉及原始（primitive）类型，不涉及如内存或文件句柄的资源），编译器默认进行拷贝。 其他情况，编译器转移（moves）所有权（ownership）并使原来的绑定无效。 简而言之，POD（Plan Old Data） =\u0026gt; 拷贝，Non-POD（线性类型（linear types））=\u0026gt; 转移。\n以下是一些额外的注释供你参考：\nRust 拷贝像 C。每一个按值（by-value）使用一个值都是字节拷贝（通过 memcpy 浅拷贝），而不是语义上的拷贝或克隆。 如果想要让一个 POD 结构体变成不可拷贝的，你可以使用一个 NoCopy 标记，或者实现 Drop 特性（trait）。 转移之后，所有权就转移到了下一个所有者那。\n资源回收 Rust 会在任何资源的所有权消失后立刻释放该资源，就这些，当：\n所有者超出作用域，或 正在持有的所有者改变绑定（原始绑定变成 void）。 所有者和借用者的权限（privileges）和限制 这一节基于 Rust Guide 在权限（privileges）一部分提到拷贝和转移。\n所有者有一些权限。它可以：\n控制资源回收。 借出资源，不可变的（可多次借用）或可变的（只能独占），和 交出所有权（通过转移） 同时所有者也存在一些限制：\n不可变借用期间，所有者不能\na. 改变资源，或者\nb. 以可变的方式借出资源。\n可变借用期间所有者不能\na. 访问该资源，或者\nb. 再次借出该资源。\n借用者同时也有一些权限。除了访问或者更改借用的资源外，借用者也可以进一步借出（share the borrow）：\n不可变借用者可以借出（拷贝）不可变借用（译注：再次以不可变借用借出） 可变借用者可以交出（转移）可变借用。（可变引用默认使用转移。） 代码示例 关于借用我们已经聊的够多了，让我们一起来看一些代码吧（你可以通过 https://play.rust-lang.org 运行这些 Rust 代码。） 在下面所有的例子中，我们将使用不可拷贝的 struct Foo ，因为它包含了一个装箱（boxed）（堆分配）值。 使用不可拷贝资源可以限制相关操作，让我们更好的学习。\n对于每一个代码示例，我们还提供了一个“作用域图表”（scope chart）来展示所有者和借用者的作用域。 图表第一行的大括号和代码中的大括号一一对应。\n所有者在可变借用期间不能访问资源 如果我们将代码中的 println! 解除注释，代码将不能编译：\nstruct Foo { f: Box\u0026lt;int\u0026gt;, } fn main() { let mut a = Foo { f: box 0 }; // mutable borrow let x = \u0026amp;mut a; // error: cannot borrow `a.f` as immutable because `a` is also borrowed as mutable // println!(\u0026#34;{}\u0026#34;, a.f); } { a x * } owner a |_____| borrower x |___| x = \u0026amp;mut a access a.f | error 这违反了所有者限制 #2(a)。如果我们将 let x = \u0026amp;mut a; 在一个嵌套的代码块里：借用 在 println! 之前结束，这段代码将能正常工作：\nfn main() { let mut a = Foo { f: box 0 }; { // mutable borrow let x = \u0026amp;mut a; // mutable borrow ends here } println!(\u0026#34;{}\u0026#34;, a.f); } { a { x } * } owner a |_________| borrower x |_| x = \u0026amp;mut a access a.f | OK 借用者可以转移可变借用到一个新的借用者 这段代码展示借用者的权限 #2: 可变借用 x 可以将所有权转移可变借用到一个新的借用者 y 。\nfn main() { let mut a = Foo { f: box 0 }; // mutable borrow let x = \u0026amp;mut a; // move the mutable borrow to new borrower y let y = x; // error: use of moved value: `x.f` // println!(\u0026#34;{}\u0026#34;, x.f); } { a x y * } owner a |_______| borrower x |_| x = \u0026amp;mut a borrower y |___| y = x access x.f | error 转移之后，原始的借用者 x 不再能访问借用的资源。\n借用作用域（Borrow scope） 如果我们开始传递引用（ \u0026amp; 和 \u0026amp;mut）事情就开始变得有趣，同时也是 Rust 新手们开始困惑的地方。\n生命周期（Lifetime） 在整个借用过程中，知道借用者的借用什么时候开始和结束非常重要。在生命周期指南中是这样定义生命周期的：\nA lifetime is a static approximation of the span of execution during which the pointer is valid: it always corresponds to some expression or block within the program.\n生命周期是指针有效范围的静态近似值：它始终对应程序中的某些表达式或代码块。\n然而，我更喜欢使用 借用作用域（borrow scope） 这个术语去描述借用生效的作用域。请注意它不同于上面生命周期的定义。 （我第一次见到这个术语是在一个 Rust RFC 讨论 中，尽管我的定义可能会有所不同。）我会在稍后给出我为什么避免使用生命周期的原因。 现在我们先把生命周期放在一边。\n\u0026amp; = borrow 一些关于借用的事情：\n首先，只需要记住 \u0026amp; = 借用， \u0026amp;mut = 可变借用。任何地方你看到一个 \u0026amp; ，那就是一个借用。\n其次，当一个 \u0026amp; 出现在任何结构体中（在它的字段中）或者函数_闭包（返回值或者捕获的引用），结构体_函数/闭包就是一个借用者， 并且应用所有的借用规则。\n再次，对于每一个借用，都存在一个所有者和一个或多个借用者。\n扩展借用作用域 一些关于借用作用域的事情：\n首先，一个借用作用域：\n是一个借用生效的范围，并且 不一定是借用者的词法作用域，因为借用者可以扩展借用作用域（参见下面）。 其次，借用者在赋值或者函数调用中可以通过拷贝（不可变借用）或者转移（可变借用）扩展借用作用域。 接收者（receiver）（可以是新的绑定、结构体、函数或者闭包）变成新的借用者。\n再次，借用作用域是所有借用者作用域的并集，并且被借用的资源必须在整个借用作用域里有效。\n借用公式 根据最后一点，我们得到一个借用公式：\n资源作用域 \u0026gt;= 借用作用域 = 所有借用者作用域的并集。\n代码示例 让我们看一些扩展作用域的代码示例。结构体 struct Foo 和前面的一样：\nfn main() { let mut a = Foo { f: box 0 }; let y: \u0026amp;Foo; if false { // borrow let x = \u0026amp;a; // share the borrow with new borrower y, hence extend the borrow scope y = x; } // error: cannot assign to `a.f` because it is borrowed // a.f = box 1; } { a { x y } * } resource a |___________| borrower x |___| x = \u0026amp;a borrower y |_____| y = x borrow scope |=======| mutate a.f | error 即使借用发生在 if 代码块之内并且借用者 x 在 if 代码块之后超出作用域，它已经通过赋值 y=x; 扩展了借用作用域， 所以存在两个借用者： x 和 y 。根据借用公式：借用作用域是借用者 x 和借用者 y 作用域的并集： 范围开始第一次借用于 let x = \u0026amp;a; 直到 main 代码块的结尾。（注意绑定 y 在 y=x; 之前不是借用者。）\n你可能注意到了由于条件永远是 false if 代码块永远不会执行，但是编译器始终拒绝资源所有者 a 去访问 它的资源。这是因为所有的借用检查发生在编译期，这样程序运行时就不需要做任何事情。\n借用多个资源 目前为止我们只关注借用单个资源。借用者可以借用多个资源吗？当然！比如一个函数可以接受两个引用然后 基于一些情况返回其中一个，e.g. 其中字段值比较大的那一个。\nfn max(x: \u0026amp;Foo, y: \u0026amp;Foo) -\u0026gt; \u0026amp;Foo max 函数返回一个 \u0026amp; 指针，因此它是一个借用者。返回的结果可以是输入参数的任意一个，所以它借用了 两鞥额资源。\n命名借用作用域（Named borrow scope） 当存在多个 \u0026amp; 指针作为输入，我们需要使用 命名生命周期（named lifetimes） 指定它们之间的关系， 参见 Lifetimes Guide。但现在，让我们叫它们 命名借用作用域（named borrow scopes） 。\n上面的代码没有使用 命名生命周期 指定它们之间的关系是不会通过编译器的，i.e. 哪些借用者 分组（grouped） 到哪个借用作用域。下面的实现是合法的：\nfn max\u0026lt;\u0026#39;a\u0026gt;(x: \u0026amp;\u0026#39;a Foo, y: \u0026amp;\u0026#39;a Foo) -\u0026gt; \u0026amp;\u0026#39;a Foo { if x.f \u0026gt; y.f { x } else { y } } (All resources and borrowers are grouped in borrow scope \u0026#39;a.) max( { } ) resource *x \u0026lt;--------------\u0026gt; resource *y \u0026lt;--------------\u0026gt; borrow scope \u0026#39;a \u0026lt;==============\u0026gt; borrower x |___| borrower y |___| return value |___| pass to the caller 在这个函数中，我们有一个借用作用域 'a 和三个借用者：两个输入参数和函数返回结果。 前面提到的借用公式依然生效，但是现在每个被借用的资源必须满足公式。参见下面的例子：\n代码示例 在接下来的代码中，我们来使用上面的 max 函数在 a 和 b 之间选择一个更大 Foo ：\nfn main() { let a = Foo { f: box 1 }; let y: \u0026amp;Foo; if false { let b = Foo { f: box 0 }; let x = max(\u0026amp;a, \u0026amp;b); // error: `b` does not live long enough // y = x; } } { a { b x ( ) y } } resource a |________________| pass resource b |__________| fail borrow scope |==========| temp borrower |_| \u0026amp;a temp borrower |_| \u0026amp;b borrower x |________| x = max(\u0026amp;a, \u0026amp;b) borrower y |___| y = x 直到 let x = max(\u0026amp;a, \u0026amp;b) 都一些正常，因为 \u0026amp;a 和 \u0026amp;b 都是尽在表达式中有效的临时引用， 并且第三个借用 x 借用了两个资源（不管最终是 a 或 b ，对于借用检查器而言它都借用了）直到 if 块结束，所以借用作用域是从 let x = max(\u0026amp;a, \u0026amp;b); 到 if 块结尾。两个资源 a 和 b 在整个借用作用域 都有效,因此满足借用公式。\n现在如果我们解除最后一个赋值 y = x; 的注释， y 变成第四个借用者，然后借用作用域被扩展到 main 块的结尾，导致资源 b 不能满足公式。\n结构体作为借用者 除了函数和闭包之外，一个结构体也可以通过其字段存储多个引用来借用多个资源。我们通过下面的一些例子 来看看借用公式如何生效的。我们来使用 Link 结构体来保存一个引用（不可变借用）：\nstruct Link\u0026lt;\u0026#39;a\u0026gt; { link: \u0026amp;\u0026#39;a Foo, } 结构体借用多个资源 即使只有一个字段，结构体 Link 也可以借用多个资源：\nfn main() { let a = Foo { f: box 0 }; let mut x = Link { link: \u0026amp;a }; if false { let b = Foo { f: box 1 }; // error: `b` does not live long enough // x.link = \u0026amp;b; } } { a x { b * } } resource a |___________| pass resource b |___| fail borrow scope |=========| borrower x |_________| x.link = \u0026amp;a borrower x |___| x.link = \u0026amp;b 在上面例子中，借用者 x 从所有者 a 借用资源，借用作用域到 main 块的结尾。So far so good。 如果我们解除最后一个赋值 x.link = \u0026amp;b; 的注释， x 也尝试从所有者 b 借用资源，这会让资源 b 不能满足借用公式。\n没有返回值的函数扩展借用作用域 一个没有返回值的函数同样也可以通过输出参数能扩展借用作用域。例如，这个函数 store_foo 接受一个 Link 的可变引用，然后存储一个引用（不可变借用）到 Foo 里：\nfn store_foo\u0026lt;\u0026#39;a\u0026#39;\u0026gt;(x: \u0026amp;mut Link\u0026lt;\u0026#39;a\u0026gt;, y: \u0026amp;\u0026#39;a Foo) { x.link = y; } 在接下来的代码中，被 a 所有的资源是被借用资源； Link 结构体被借用者 x 可变的引用着（i.e. *x 是借用者）； 借用作用域直到 main 块的结尾。\nfn main() { let a = Foo { f: box 0 }; let x = \u0026amp;mut Link { link: \u0026amp;a }; if false { let b = Foo { f: box 1 }; // store_foo(x, \u0026amp;b); } } { a x { b * } } resource a |___________| pass resource b |___| fail borrow scope |=========| borrower *x |_________| x.link = \u0026amp;a borrower *x |___| x.link = \u0026amp;b 如果我们解除最后一个函数调用 store_foo(x, \u0026amp;b); ,这个函数将会尝试将 \u0026amp;b 存储到 x.link ， 将资源 b 作为另外一个被借用的资源，由于 b 的作用域没有覆盖整个借用作用域，导致不满足借用公式。\n多个借用作用域 一个函数中可以存在多个借用作用域。例如：\nfn superstore_foo\u0026lt;\u0026#39;a, \u0026#39;b\u0026gt;(x: \u0026amp;mut Link\u0026lt;\u0026#39;a\u0026gt;, y: \u0026amp;\u0026#39;a Foo, x2: \u0026amp;mut Link\u0026lt;\u0026#39;b\u0026gt;, y2: \u0026amp;\u0026#39;b Foo) { x.link = y; x2.link = y2; } 这个的函数（可能不是特别有用）中，涉及两个不同的借用作用域。每个借用作用域都有它们自己的作用域公式要满足。\n为什么生命周期会造成困惑 最后，我想解释一下为什么我认为 Rust 借用系统使用 生命周期 术语会造成困惑（同时避免在这片博文中使用它）。\n当我们讨论借用时会涉及到不同类型的“生命周期”：\nA. 资源所有者的生命周期（或者 被所有/被借用 资源 B. 被借用的生命周期，i.e. 从开始借用到最后返还 C. 每一个独立的借用者或被借用的指针的生命周期\n当有人说“生命周期”，它可以指上面的任何一个。如果涉及多个资源和借用者就会变的更加困惑。 比如，在函数或者结构体生命中一个“命名的生命周期”指哪个？是 A、B 或者 C？\n在我们的前一个 max 函数中：\nfn max\u0026lt;\u0026#39;a\u0026gt;(x: \u0026amp;\u0026#39;a Foo, y: \u0026amp;\u0026#39;a Foo) -\u0026gt; \u0026amp;\u0026#39;a Foo { if x.f \u0026gt; y.f { x } else { y } } 生命周期 'a 的意义是什么？它不应该是 A，因为涉及两个资源并且他们有不同的生命周期。也不可能是 C， 因为有三个借用者： x 、 y 和函数的返回值，并且他们也都有不同的生命周期。它是 B 吗？可能。 但是整个借用作用域并不是一个具体的对象，它怎么能有一个“生命周期”呢？称它为生命周期就会造成困惑。\n另一种说法是它意味着对被借用资源的最小生命周期要求。一定程度上是有道理的， 但是我们怎么称呼最小生命周期要求“生命周期”？\n所有权/借用概念自身已经够复杂了。我会说：对术语“生命周期”的困惑对学习这个概念造成了更多的莫名其妙。\nP.S. 使用上面定义的 A、B 和 C，借用公式变成：\nA \u0026gt;= B = C_1,UC_2U\u0026hellip;UC_n\n学习 Rust 是值得的！ 尽管借用和所有权可能让你花一些时间来掌握（to grok），但是是一个非常有趣的学习。Rust 尝试不用 GC 来实现内存安全，并且目前来看做的非常好。一些人说他们通过学习 Haskell 改变了他们编程的方式。 我认为Rust 同样也值得你学习。\n希望这篇博文能提供一些帮助。\n","permalink":"https://notes.0081800.xyz/articles/20200325182450_rust_borrow_and_lifetimes/","summary":"tags: Rust,Translate,Rust Wrapper Types 原文链接：Rust Borrow and Lifetimes。\nRust 是一门处于往 1.0 活跃开发的新语言（译注：1.0 早已发布，目前最新稳定版本 1.42）。 我必须再写一篇关于我为什么觉得 Rust 牛逼的新博客，但是今天我将关注在它的借用（borrow） 和生命周期（lifetimes）系统，这也是常常让包括我在内的 Rust 新手陷入困境的地方。这篇文章假设 你基本了解 Rust，如果还没推荐你先阅读指南和指针指南。\n资源所有权和借用 Rust 通过一个难缠的（sophisticated）借用系统在不用 GC 的情况下达到内存安全。对于任何资源 （栈内存、堆内存、文件句柄等），他们都对应一个唯一的所有者（owner）在需要的情况下处理资源回收。 你可以通过 \u0026amp; 或者 \u0026amp;mut 创建一个新的绑定指向该资源，这被称之为借用或可变借用。编译器确保 所有的所有者（owners）和借用者（borrowers）行为正确。\n拷贝和转移（Copy and move） 在我们开始进入借用系统之前，我们需要知道 Rust 如何处理拷贝和转移。这个 StackOverflow 答案非常值得一读。 基本上，在赋值和函数调用上：\n如果值是可拷贝的（copyable）（仅涉及原始（primitive）类型，不涉及如内存或文件句柄的资源），编译器默认进行拷贝。 其他情况，编译器转移（moves）所有权（ownership）并使原来的绑定无效。 简而言之，POD（Plan Old Data） =\u0026gt; 拷贝，Non-POD（线性类型（linear types））=\u0026gt; 转移。\n以下是一些额外的注释供你参考：\nRust 拷贝像 C。每一个按值（by-value）使用一个值都是字节拷贝（通过 memcpy 浅拷贝），而不是语义上的拷贝或克隆。 如果想要让一个 POD 结构体变成不可拷贝的，你可以使用一个 NoCopy 标记，或者实现 Drop 特性（trait）。 转移之后，所有权就转移到了下一个所有者那。\n资源回收 Rust 会在任何资源的所有权消失后立刻释放该资源，就这些，当：","title":"Rust Borrow and Lifetimes"},{"content":" tags: Rust ","permalink":"https://notes.0081800.xyz/notes/20200325165657_rust_wrapper_types/","summary":" tags: Rust ","title":"Rust Wrapper Types"},{"content":" tags: 读书笔记,系统架构 第一遍粗读 三个编程范式：结构化编程、面向对象编程、函数式编程\n每个编程范式都是增加限制：\n结构化编程限制了 goto 面向对象编程限制了函数指针 函数式编程限制可变变量（变量不可修改） 设计原则：SOLID\n","permalink":"https://notes.0081800.xyz/notes/20200323104907_%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/","summary":"tags: 读书笔记,系统架构 第一遍粗读 三个编程范式：结构化编程、面向对象编程、函数式编程\n每个编程范式都是增加限制：\n结构化编程限制了 goto 面向对象编程限制了函数指针 函数式编程限制可变变量（变量不可修改） 设计原则：SOLID","title":"《架构整洁之道》读书笔记"},{"content":"SRP: Single Responsibility Principle 浅显的解释是软件模块只提供单一功能\n更进一步任何一个软件模块都应该有且只有一个被修改的原因\n再更进一步这个原则是关于人（Actor）的\n任何一个软件模块都应该只对一个用户或系统利益相关者负责。\n最终就是任何一个软件模块都应该只对某一类行为负责\nOCP：Open/Closed Principle 设计良好的软件应该易于扩展，同时抗拒修改。也就是说一个软件模块应该允许在不修改源码的情况下扩展它的行为。\n可以通过组合 SRP（代码分组）和调整依赖关系实现（DIP）。如果 A 组件不想被 B 组件上发生的修改所影响，那么就应该让 B 组件依赖于 A 组件。\nLSP：Liskov Substitution Principle 里氏替换原则：多态。\n每个类型是 S 的对象 o1 都存在一个类型为 T 的对象 o2，能使操作 T 类型的程序 P 在用 o2 替换 o1 时行为保持不变，我们就可以将 S 称为 T 的子类型。\npublic class LiskovSub { public static main(String[] args) { T o1 = new S(); T o2 = new T(); P(o1); // ok P(o2); // ok } public static P(T o) { o.doSomeThing(); } } 正长方形问题\npublic class NonLiskovSub { public static main(String[] args) { Rectangle r = new Sqaure(); r.setW(5); r.setH(2); assert(r.area() == 10); // 不成立 } public static class Reactangle { private int w = 0; private int h = 0; public void setW(int w) { this.w = w; } public void setH(int h) { this.h = h; } public int area() { return w * h; } } public static class Square extends Rectangle { @Override public void setW(int w) { setSide(w); } @Override public void setH(int h) { setSide(h); } public void setSide(int s) { this.w = s; this.h = s; } } } ISP: Interface-Segregation Principle 用户应该不依赖它不是用的方法。臃肿的方法拆分成更小更具体的角色接口。\nDIP: Dependency Inversion Principle 如果想要设计一个灵活的系统，在源代码层面的依赖关系中就应该多引用抽象类行，而非具体实现。\n这一原则不针对已经稳定不变的部分，而是针对那些经常 变动的(volatile) 模块。\n应在代码中多使用抽象接口，尽量避免使用那些多变的具体实现类 。同时应使用抽象工厂严格限制对象的创建过程。 不要再具体实现类上创建衍生类 。静态语言中继承依赖最强且最难被修改。 不要覆盖（override）包含具体实现的函数 。通过创建一个抽象函数，然后再为该函数提供多种具体实现。 应避免在代码中写入与任何具体实现相关的名字，或者是其他容易变动的事物的名字 。 工厂模式之于非常重要。\n","permalink":"https://notes.0081800.xyz/notes/20200323101418_solid/","summary":"SRP: Single Responsibility Principle 浅显的解释是软件模块只提供单一功能\n更进一步任何一个软件模块都应该有且只有一个被修改的原因\n再更进一步这个原则是关于人（Actor）的\n任何一个软件模块都应该只对一个用户或系统利益相关者负责。\n最终就是任何一个软件模块都应该只对某一类行为负责\nOCP：Open/Closed Principle 设计良好的软件应该易于扩展，同时抗拒修改。也就是说一个软件模块应该允许在不修改源码的情况下扩展它的行为。\n可以通过组合 SRP（代码分组）和调整依赖关系实现（DIP）。如果 A 组件不想被 B 组件上发生的修改所影响，那么就应该让 B 组件依赖于 A 组件。\nLSP：Liskov Substitution Principle 里氏替换原则：多态。\n每个类型是 S 的对象 o1 都存在一个类型为 T 的对象 o2，能使操作 T 类型的程序 P 在用 o2 替换 o1 时行为保持不变，我们就可以将 S 称为 T 的子类型。\npublic class LiskovSub { public static main(String[] args) { T o1 = new S(); T o2 = new T(); P(o1); // ok P(o2); // ok } public static P(T o) { o.","title":"SOLID"},{"content":"","permalink":"https://notes.0081800.xyz/topics/20200323104645_%E6%8A%80%E6%9C%AF/","summary":"","title":"技术"},{"content":" tags: 技术 设计原则 SOLID\n好的架构 我认为好的架构 能够无心智障碍的编写运行单元测试 从一起作业看好的架构 应该能够让任何开发人员方便的随时上线和回滚 面对上线对基础设施没有心理压力 完备的监控 ","permalink":"https://notes.0081800.xyz/notes/20200322143810_%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/","summary":" tags: 技术 设计原则 SOLID\n好的架构 我认为好的架构 能够无心智障碍的编写运行单元测试 从一起作业看好的架构 应该能够让任何开发人员方便的随时上线和回滚 面对上线对基础设施没有心理压力 完备的监控 ","title":"系统架构"},{"content":"需要熟悉股市相关概念进行扫盲。\n粗读要点 树立安全边际，跟随格雷厄姆 寻找好的困难股，降低触底难度，加大触底区间，预测底部区间，分 5 档抄底，最好在 1-3 档就能完成抄底 每次只买总资产的 1% 盈利后可以将本金提出，只留底仓等待顶峰信号后抛出赚取高额利润的前提下保障本金 总是留 25%-40% 的现金 做长线 分析财报看毛利、营收增长率、负债率可以确定一个好股，然后就等一些情况下这只股遇到困难触底 看行业处于哪个周期：萌发、成长啥的 不做重仓 复读要点完善 安全边际 跟随格雷厄姆\n偏离：更保守或更激进 大赚小赔不如小赚不赔：不亏钱 困境好企 做有把握的事，不啃硬骨头，广撒网，多捞鱼，选取一批困境好企来实现从小盘大稳定增长股\n行业中的好企业标准\n行业很关键\n需求无限，供给有限\n关注行业周期\n大周期：新生-\u0026gt;成长-\u0026gt;成熟-\u0026gt;衰落-\u0026gt;消亡 小周期：大周期各个过程中的景气与萧条（一两年、三五年甚至一二十年）\n消亡之前会有死灰复燃，大周期中成长阶段会有萧条，注意区分。\n门槛高，竞争少\n只有少数寡头，估值会高\n唯一或第一\n成熟行业比较简单，成长行业比较困难。\n通过企业原则、经营原则、财务原则和市场原则衡量。- P28 生活经验活常识也很重要。\n落难好企\n行业顺境，某些原因导致的猜疑导致股价下跌 行业遭遇整体困境：偶然事件，反转时间比好把握 个股困境，主打产品破灭：有无法度过的风险 财务数据衡量困境好企能否度过难关 - P32\n负债率越低越好：不能超过 50% 资产中的现金越多越好：高于股东权益的 1/3，刚上市的好过上市很久的老企业（把钱折腾光了） 产品的毛利率越高越好：市场有需求 应收账款越少越好：钱可能收不回来 通过季报发现反转时机\n季报时间长，抗短期干扰，一季度定调、二季度（半年）纠偏或修正、三季度出结果（更好或更差）、四季度（年报）成果汇报和新的起点用于比较第一季度。\n一季度和半年狠重要。\n通过 营业收入 发现转机。困境表现为净利润增速下滑，之前是好企可能会市盈率过高。\n容错寻底 不亏钱的情况下寻找极限底部，保障安全、带来最大利润、带来良好心态\n变种“不破买价”：买入的价格很难再跌回原来的位置\n变成左侧交易者，不追涨\n大盘底与个股底的关系\n同步性：大盘筑底个股也在筑底，大盘达到最低位时，个股也先后到达最低位\n差异性\n大盘下跌蓝筹股先跌到位，大盘下跌过程中小盘成长股与稳定增长股少许跟跌或逆市上扬。 市场反弹小盘成长股与稳定增长股开始杀跌。\n耦合性：大盘底出现时次新股出现底部的概率大，老股形成底部可能需要好几年 \u0026ndash; P56\n容错寻底\n容错：底部是一个区间，20%～30%\n降低触底难度，加大触底区间，预测底部区间。\n市场长期下跌导致困境好企出现底部\n反转财务标志出现也可能出现底部。\n次新股同步大盘好预测底部\n根据市净率作为估值依据\n多种情况（P61）：\n次新股 1.5 ～ 2 形成极限底部。 老股 0.5 ～ 1.5。\n五档买入 价格宽度在 10%-20%，一档接底较好，二、三档接底完美，突破五档失败被套\n缓解焦虑，平衡心态\n技巧\n第一档很关键，应当尽量触底 三档拉开区间（小盘和稳定2～1PB，困境反转和周期波动 1.5～0.5PB） 五档提供精神支持，修正三档 每档只买账户总值的 1% 学会避雷实践安全边际\n分 5 档抄底，最好在 1-3 档就能完成抄底\n每次只买总资产的 1% 盈利后可以将本金提出，只留底仓等待顶峰信号后抛出专区高额利润的前提下保障本金 总是留 25%-40% 的现金 做长线 分析财报看毛利、营收增长率、负债率可以确定一个好股，然后就等一些情况下这只股遇到困难触底 看行业处于哪个周期：萌发、成长啥的 不做重仓 ","permalink":"https://notes.0081800.xyz/notes/20200320180837_%E7%99%BE%E7%AE%AD%E7%A9%BF%E6%9D%A8/","summary":"需要熟悉股市相关概念进行扫盲。\n粗读要点 树立安全边际，跟随格雷厄姆 寻找好的困难股，降低触底难度，加大触底区间，预测底部区间，分 5 档抄底，最好在 1-3 档就能完成抄底 每次只买总资产的 1% 盈利后可以将本金提出，只留底仓等待顶峰信号后抛出赚取高额利润的前提下保障本金 总是留 25%-40% 的现金 做长线 分析财报看毛利、营收增长率、负债率可以确定一个好股，然后就等一些情况下这只股遇到困难触底 看行业处于哪个周期：萌发、成长啥的 不做重仓 复读要点完善 安全边际 跟随格雷厄姆\n偏离：更保守或更激进 大赚小赔不如小赚不赔：不亏钱 困境好企 做有把握的事，不啃硬骨头，广撒网，多捞鱼，选取一批困境好企来实现从小盘大稳定增长股\n行业中的好企业标准\n行业很关键\n需求无限，供给有限\n关注行业周期\n大周期：新生-\u0026gt;成长-\u0026gt;成熟-\u0026gt;衰落-\u0026gt;消亡 小周期：大周期各个过程中的景气与萧条（一两年、三五年甚至一二十年）\n消亡之前会有死灰复燃，大周期中成长阶段会有萧条，注意区分。\n门槛高，竞争少\n只有少数寡头，估值会高\n唯一或第一\n成熟行业比较简单，成长行业比较困难。\n通过企业原则、经营原则、财务原则和市场原则衡量。- P28 生活经验活常识也很重要。\n落难好企\n行业顺境，某些原因导致的猜疑导致股价下跌 行业遭遇整体困境：偶然事件，反转时间比好把握 个股困境，主打产品破灭：有无法度过的风险 财务数据衡量困境好企能否度过难关 - P32\n负债率越低越好：不能超过 50% 资产中的现金越多越好：高于股东权益的 1/3，刚上市的好过上市很久的老企业（把钱折腾光了） 产品的毛利率越高越好：市场有需求 应收账款越少越好：钱可能收不回来 通过季报发现反转时机\n季报时间长，抗短期干扰，一季度定调、二季度（半年）纠偏或修正、三季度出结果（更好或更差）、四季度（年报）成果汇报和新的起点用于比较第一季度。\n一季度和半年狠重要。\n通过 营业收入 发现转机。困境表现为净利润增速下滑，之前是好企可能会市盈率过高。\n容错寻底 不亏钱的情况下寻找极限底部，保障安全、带来最大利润、带来良好心态\n变种“不破买价”：买入的价格很难再跌回原来的位置\n变成左侧交易者，不追涨\n大盘底与个股底的关系\n同步性：大盘筑底个股也在筑底，大盘达到最低位时，个股也先后到达最低位\n差异性\n大盘下跌蓝筹股先跌到位，大盘下跌过程中小盘成长股与稳定增长股少许跟跌或逆市上扬。 市场反弹小盘成长股与稳定增长股开始杀跌。\n耦合性：大盘底出现时次新股出现底部的概率大，老股形成底部可能需要好几年 \u0026ndash; P56","title":"《百箭穿杨》读书笔记"},{"content":" tags: Programming Language ","permalink":"https://notes.0081800.xyz/topics/20200320171108_c/","summary":" tags: Programming Language ","title":"C/C++"},{"content":" tags: Bigdata,Dataflow Model,Streaming ","permalink":"https://notes.0081800.xyz/projects/20200320100601_flink/","summary":" tags: Bigdata,Dataflow Model,Streaming ","title":"Flink"},{"content":" tags: Bigdata 相关知识点 概念组成 Producer 消息产生者，往指定 Topic 的指定 Partition 发送消息\nConsumer Group 消费指定 Topic 的消息\nConsumer 消费指定 Topic 下某一分区的消息 Topic 区分不同消息主题\nPartition 保证同一分区的有序性 Connector\n消息可被不同的 Consumer Group 重复消费（广播或订阅）。同一 Consumer Group 下的不同 Consumer 分别消费不同的 Partition，Consumer 数量不能超过 Partition 数量。\n数据被持久化并分片成功后发送 ACK 保证里数据不被丢失。\n设计 持久化 基于文件系统\n基于队列是顺序的和磁盘的顺序访问要比内存的随机访问要快（参见 The Pathologies of Big Data）， Kafka 采用在磁盘文件系统上尾部写头部读的方式。 Kafka 没有采用 BTree 存储数据因为 BTree 的操作是 O(log N) ，而且对磁盘的 seek 操作要慢，且同时只能进行一次限制了并行，所以实际操作比 O(log N) 要慢 基于磁盘的顺序访问进行在尾部写和头部读，可以实现读写都是 O(1) 的时间复杂度，并且读写互不干扰 基于以上实现，Kafka 可以不必在消息一经消费就删除，而是可以保留消息一段相对较长的时间（比如一周） 高效\n并且采用统一的日志格式，可以方便的使用 sendfile 避免字节拷贝以在各个组件之间高效的交换日志文件\nLinks page-cache-centric design The Pathologies of Big Data 集群管理 查看消费状况 kafka-consumer-groups.sh --bootstrap-server 192.168.1.111:9092 --group cabbage --describe 重置消费 # 查看重置到最晚 kafka-consumer-groups.sh --bootstrap-server 192.168.1.111:9092 --group cabbage --topic xxx.topic --reset-offsets --to-latest --dry-run # 执行重置到最晚 kafka-consumer-groups.sh --bootstrap-server 192.168.1.111:9092 --group cabbage --topic xxx.topic --reset-offsets --to-latest --execute # 当前（最早） kafka-consumer-groups.sh --bootstrap-server 192.168.1.111:9092 --group cabbage --topic xxx.topic --reset-offsets --to-current --dry-run kafka-consumer-groups.sh --bootstrap-server 192.168.1.111:9092 --group cabbage --topic xxx.topic --reset-offsets --to-current --execute ","permalink":"https://notes.0081800.xyz/notes/20200320172022_kafka/","summary":"tags: Bigdata 相关知识点 概念组成 Producer 消息产生者，往指定 Topic 的指定 Partition 发送消息\nConsumer Group 消费指定 Topic 的消息\nConsumer 消费指定 Topic 下某一分区的消息 Topic 区分不同消息主题\nPartition 保证同一分区的有序性 Connector\n消息可被不同的 Consumer Group 重复消费（广播或订阅）。同一 Consumer Group 下的不同 Consumer 分别消费不同的 Partition，Consumer 数量不能超过 Partition 数量。\n数据被持久化并分片成功后发送 ACK 保证里数据不被丢失。\n设计 持久化 基于文件系统\n基于队列是顺序的和磁盘的顺序访问要比内存的随机访问要快（参见 The Pathologies of Big Data）， Kafka 采用在磁盘文件系统上尾部写头部读的方式。 Kafka 没有采用 BTree 存储数据因为 BTree 的操作是 O(log N) ，而且对磁盘的 seek 操作要慢，且同时只能进行一次限制了并行，所以实际操作比 O(log N) 要慢 基于磁盘的顺序访问进行在尾部写和头部读，可以实现读写都是 O(1) 的时间复杂度，并且读写互不干扰 基于以上实现，Kafka 可以不必在消息一经消费就删除，而是可以保留消息一段相对较长的时间（比如一周） 高效","title":"Kafka"},{"content":" tags: Learning,Algorithm ","permalink":"https://notes.0081800.xyz/notes/20200320172132_leetcode/","summary":" tags: Learning,Algorithm ","title":"LeetCode"},{"content":" tags: LeetCode ","permalink":"https://notes.0081800.xyz/notes/20200320172219_leetcode_trapping_tain_water/","summary":" tags: LeetCode ","title":"LeetCode: Trapping Tain Water"},{"content":" tags: Linux 原文连接：Linux Virtual Memory Management Chapter 2 Describing Physical Memory：描述物理内存 独立于平台架构的方式描述内存 — 更好的支持多平台\n本章包含描述存储器、内存页的结构体（structures）和一些影响 VM 行为的标识位（flags）\nVM 中普遍（prevlent）认为第一重要（principal）的概念是 NUMA。\n大型机器中内存访问速度取决于 CPU 到内存的距离。比如一组（bank）内存分配给每一个处理器或者一组内存非常适合靠近的 DMA 设备卡。\n这里的每组（bank）内存被称为节点（node）并且这个概念在 Linux 中通过 struct pglist_data（typedef pg_data_t) 表示，即使在 UMA 架构下也是如此。每一个节点是一个由 NULL 结尾的链表，通过 pg_data_t-\u0026gt;next_node 指向下一个节点。\n每一个节点都被分割成多个块（block）称为分区（zone）用于表示内存中的范围。分区使用 struct zone_struct(typedef zone_t) 结构体描述，每一个分区都是以下三种类型的一种\nZONE_DMA 开始 16MB 内存，供 ISA 设备使用 ZONE_NORMAL 16MB - 896MB，由内核直接映射到线性地址空间的上部区域（将在第四章讨论） ZONE_HIGHMEM 896MB - END，剩余不由内核直接映射的系统可用内存， 大部分内核操作都只能使用这种类型的分区，所以这里也是这里也是最关键的性能区域（most performance critical zone） 每一个物理页帧（physical page frame）都使用结构体 struct page 表示，所有的结构体都保存在全局数组 mem_map 中，mem_map 通常存储在 ZONE_NORMAL 的开始处；\n结构体之间的关系\n内存节点 Linux 在分配内存页的时候采用 本地节点分配策略（node-local allocation policy） 通过最靠近当前运行 CPU 的节点去分配内存。同时进程也会趋向于采用同一 CPU 运行。\n节点的结构体定义在 \u0026lt;linux/memzone.h\u0026gt; 下\ntypedef struct pglist_data { // 当前节点包含的分区：ZONE_HIGHMEM,ZONE_NORMAL,ZONE_DMA zone_t node_zones[MAX_NR_ZONES]; // 定义的顺序决定分配优先采用的分区 zonelist_t node_zonelists[GFP_ZONEMASK+1]; // 当前节点包含的分区数量，1 到 3 之间，不一定全有，比如一个 CPU Bank 可能没有 ZONE_DMA int nr_zones; // 节点上每一个物理的帧的页数组的第一个元素（第一页），会在某个地方被全局 mem_map 数组替换 struct page *node_mem_map; // 位图（bitmap）表示节点中没有内存的“洞（holes）”，仅用在 Sparc 和 Sparc64 架构 unsigned long *valid_addr_bitmap; // 第五章关于启动内存分配器 struct bootmem_data *bdata; // 当前节点的起始物理地址 unsigned long node_start_paddr; // 用于全局 mem_map 设置页偏移量，用于计算全局 mem_map 和当前节点（lmem_map）之间的页数 unsigned long node_start_mapnr; // 当前分区的总页数 unsigned long node_size; // 从 0 开始的节点 id int node_id; // 指向下一个节点，NULL 表示结尾 struct pglist_data *node_next; } pg_data_t; 系统中的所有节点都维护在 pgdat_list 中。\n分区 用于跟踪信息，如\n页请用情况 可用区域 锁，等 定义在 \u0026lt;linux/memzone.h\u0026gt;\ntypedef struct zone_struct { // 自旋锁用于保护并发访问 spinlock_t lock; // 全部可用页数 unsigned long free_pages; // 分区水印（watermarks） unsigned long pages_min, pages_low, pages_high; // 标识位用于告知换页（pageout）守护 kswapd 平衡当前分区（当获取任意水印后则需要进行平衡） int need_balance; // 可用区域位图用于其他分配器（buddy allocator） free_area_t free_area[MAX_ORDER]; // 进程等待页被释放的 Hash table 实现的等待队列， wait_queue_head_t * wait_table; // Hash 表中等待队列的数量（2的次方） unsigned long wait_table_size; // 用 long 定义上面大小减去二进制对数位的数量 unsigned long wait_table_shift; // 指向父 struct pglist_data *zone_pgdat; // 当前分区指向的全局 mem_map 的第一页 struct page *zone_mem_map; // 同 node_start_paddr unsigned long zone_start_paddr; // 同 node_start_mapnr unsigned long zone_start_mapnr; // 字符串名字，如 “DMA”, “Norma” or “HighMem” char *name; // 当前分区包含的页数 unsigned long size; } zone_t; 分区水印 当系统可用内存非常少时会唤醒换页守护 kswapd 释放内存页。如果压力过大 kswapd 会进行同步释放内存，有时被称为直接回收（direct-reclaim）路径。\n每个分区有三个水印\npages_low，当阈值达到这个值则唤醒 kswapd 释放内存页 pages_min，通过 free_area_init_core 根据分区大小页数比（ZoneSizeInPages / 128）初始化，最小 20 页（x86 80K），最大 255 页（x86 1MB ），阈值达到这个值触发 kswapd 同步方式（fashion）工作 pages_high，不会触发 kswapd 平衡内存页，并使 kswapd 陷入休眠 计算分区大小 PFN(Page Frame Number) 是一个包含物理内存映射的偏移量用于内存页计数，第一个 PFN被系统使用\nmin\\_low\\_pfn 用于定位第一页加载内核镜像的后的开始 max_fpn 指示系统中最后一个内存页帧 max_low_pfn 标记 ZONE_NORMAL 结尾， 内存少的机器 max_pfn 和 max_low_pfn 一致 通过上面三个值可以直接计算出高区内存的开始和结束。\n分区等待队列表 当 IO 在一页内存上开始执行时（page-in or page-out）会进行锁定防止获取到不一致的数据。\n进程使用页时调用 wait_on_page 加入到一个等待队列 IO 完成后调用 UnlockPage 解锁 唤醒所有等待的进程 每次换页都会有一个等待队列，且代价非常昂贵，通过分离许多队列进行优化，等待队列存在 zone_t 中。\n如果一个分区仅有一个等待队列就会产生惊群效应（thundering herd）。为了解决这个问题会有多个等待队列存储在哈希表 zone_t-\u0026gt;wait_table 中（极少的哈希碰撞依然会导致不必要的进程被唤醒）。\n分区初始化 内核页完全初始化后（paging_init）后开始初始化分区，可以预见的是（perdictably）各个平台实现不一致，但是确定（determine）发送给 free_area_init 的参数的逻辑是一致的，支持以下参数\nnid 分区所属节点的逻辑 ID pgdat 初始化的所属节点的 pg_data_t ，UMA 下则为 contig_page_data pmap 指向分配给节点的本地数组 lmem_map 的开始，稍后由 free_area_core 初始化 zones_sizes 一个包含内存页中所有分区大小的数组 zone_start_paddr 第一个分区的起始物理地址 *zone_holes 包含分区内内存段（memory holes）总大小的数组 free_area_init_core 负责使用相应的信息填充 zone_t 并为节点分配 mem_map 数组。\n初始化 mem_map me_map 会在系统启动中以两种方式（fashions）之一进行创建\nNUMA：当作一个起始于 PAGE_OFFSET ，调用 free_area_init_node 初始化这个数组中分配的系统中每一个活跃的节点 UMA： free_area_init 使用 contig_page_data 作为当前节点，使用全局 mem_map 作为当前节点的“本地” mem_map 两个函数的调用关系如下图所示\n页 每页物理页帧在系统中都通过 struct page 关联，用于跟踪状态。\n声明在 \u0026lt;linux/mm.h\u0026gt; 中\ntypedef struct page { // 页可能归属于多个列表，此字段用于存放所属链表的表头（多个），也用于将多个（blocks）空闲的表连接在一起 struct list_head list; // 用于当文件或设备映射到内存后关联 inode // 如果页属于文件则指向当前地址空间（address space） // 如果是匿名页但被设置则说明是 swap 地址空间 struct address_space *mapping; // 意义取决于页的状态 // 1. 页是文件映射的一部分表示文件的偏移量（offset） // 2. 页是 swap 缓存的一部分表示 address_space 对 swap 地址空间的偏移量 unsigned long index; // 作为文件映射一部分的页的 inode 和偏移量的哈希，将共享同一个哈希桶（hash_bucket）的页连接在一起 struct page *next_hash; // 当前页的引用计数，变成 0 表示可能被释放，否则就被一个或多个进程使用或用于内核 IO 等待 atomic_t count; // 定义页的状态，见下表 unsigned long flags; // 用于页替换策略 struct list_head lru; // 配合 next_hash 实现类似双端链表的操作 struct page **pprev_hash; // 1. 块设备用于跟踪 buffer_head // 2. 由进程映射的匿名页如果支持交换文件可能关联一个 buffer_head，如果页必须以底层文件系统定义的大小的块和支持的存储同步则有必要 struct buffer_head * buffers; #if defined(CONFIG_HIGHMEM) || defined(WANT_PAGE_VIRTUAL) // ZONE_HIGHMEM 的虚拟地址 void *virtual; #endif /* CONFIG_HIGMEM || WANT_PAGE_VIRTUAL */ } mem_map_t; 映射页到分区 page-\u0026gt;zone 内核版本 2.4.18 之前 struct page 通过 page-\u0026gt;zone 引用所属的分区 page-\u0026gt;flags 内核版本 2.4.18 之后通过顶部 ZONE_SHIFT (8 in x86) 个位替代 page-\u0026gt;zone 来计算页所属的分区。 映射过程\n在 mm/page_alloc.c 中初始化 zone_table\n33 zone_t *zone_table[MAX_NR_ZONES*MAX_NR_NODES]; 34 EXPORT_SYMBOL(zone_table); MAX_NR_ZONE 定义一个内存节点中的最大分区数量 MAX_NR_NODES 定义最大可存在的内存节点数量 EXPORT_SYMBOL() 使 zone_table 可被可加载模块（loadable modules）访问。 这个表将被当作一个多维数组对待。\n在 free_area_init_core 中初始化内存节点中所有的页\n设置分区表(zone table)的值\n733 zone_table[nid * MAX_NR_ZONES + j] = zone; nid \u0026ndash; 当前内存节点 ID j \u0026ndash; 分区（ struct zone_t ）索引 调用 set_page_zone\n788 set_page_zone(page, nid * MAX_NR_ZONES + j); page 分区内被初始的页，所以 zone_table 的索引存储在页中 High Memory 内核支持 High Memory 用于解决内核可使用的地址空间不足的情况（目前 64 位平台下基本上所有内存都可以映射到内核，所以基本不会存在这种情况）。\n32 位 x86 系统关于 High Memory 存在两个阈值\n4GiB：32 位物理地址最大可寻址大小，内核 通过 kmap() 临时将内存页从 High Memory 映射到 ZONE_NORMAL 用于访问 1GiB 到 4GiB 的内存 64GiB：Intel 发明的 PAE（Physical Address Extension）允许 32 位系统下使用更多内存，通过增加额外的 4 位用于内存寻址最大可以支持 2 的 36 次方个字节（64GiB)的内存寻址 缺陷\n理论上 PAE 允许处理器最大可寻址 64GiB，但是由于 Linux 的虚拟地址空间最大仅支持 4GiB，所以进程依然不能使用这么多内存。 PAE 同时也不允许内核本身使用这么多内存：描述 1GiB 内存需要消耗 11MiB 内核内存（每个 struct page 需要在内核虚拟地址空间中（ZONE_NORMAL）消耗 44 字节），16GiB 需要 176MiB，这样会给 ZONE_NORMAL 造成很大的压力 2.6 中的变更 描述内存节点的 pg_data_t\nnode_start_fpn 替换了 node_start_paddr，用于适配 PAE 架构可以突破 32 位寻址解决通过旧字段无法访问 4GiB 之后的内存节点 kswapd_wait 用于 kswapd 的新的等待队列替换之前的全局等待队列。2.6 中每一个内存节点都有一个对应的 kswapdN（N 对应内存节点的 ID），同时每一个 kswapd 也通过此字段用于自己的等待队列 node_size 字段被以下两个字段替代，引入这一变化主要是认识到节点中可能有 “holes” 导致没有物理内存支持寻址这一事实。\nnode_present_pages 内存节点中存在的总物理页数 node_spanned_pages 被当前内存节点寻址的总区域，包括任意可能存在的 \u0026ldquo;holes\u0026rdquo; zone_t 改为 struct zone ，同时 LRU 列表由全局改为存储再 struct zone 中（LRU 用于确定内存页释放或切出的顺序）\n相关链接 ","permalink":"https://notes.0081800.xyz/notes/20200320174700_linux_virtual_memory_management/","summary":"tags: Linux 原文连接：Linux Virtual Memory Management Chapter 2 Describing Physical Memory：描述物理内存 独立于平台架构的方式描述内存 — 更好的支持多平台\n本章包含描述存储器、内存页的结构体（structures）和一些影响 VM 行为的标识位（flags）\nVM 中普遍（prevlent）认为第一重要（principal）的概念是 NUMA。\n大型机器中内存访问速度取决于 CPU 到内存的距离。比如一组（bank）内存分配给每一个处理器或者一组内存非常适合靠近的 DMA 设备卡。\n这里的每组（bank）内存被称为节点（node）并且这个概念在 Linux 中通过 struct pglist_data（typedef pg_data_t) 表示，即使在 UMA 架构下也是如此。每一个节点是一个由 NULL 结尾的链表，通过 pg_data_t-\u0026gt;next_node 指向下一个节点。\n每一个节点都被分割成多个块（block）称为分区（zone）用于表示内存中的范围。分区使用 struct zone_struct(typedef zone_t) 结构体描述，每一个分区都是以下三种类型的一种\nZONE_DMA 开始 16MB 内存，供 ISA 设备使用 ZONE_NORMAL 16MB - 896MB，由内核直接映射到线性地址空间的上部区域（将在第四章讨论） ZONE_HIGHMEM 896MB - END，剩余不由内核直接映射的系统可用内存， 大部分内核操作都只能使用这种类型的分区，所以这里也是这里也是最关键的性能区域（most performance critical zone） 每一个物理页帧（physical page frame）都使用结构体 struct page 表示，所有的结构体都保存在全局数组 mem_map 中，mem_map 通常存储在 ZONE_NORMAL 的开始处；","title":"Linux Virtual Memory Management"},{"content":"","permalink":"https://notes.0081800.xyz/topics/20200320170914_programming_language/","summary":"","title":"Programming Language"},{"content":" tags: 技术 ","permalink":"https://notes.0081800.xyz/topics/20200320174417_%E5%88%86%E5%B8%83%E5%BC%8F/","summary":" tags: 技术 ","title":"分布式"},{"content":" tags: Algorithm 状态转移方程 无后效性 如果给定某一阶段的状态，则在这一阶段以后过程的发展不受这阶段以前各段状态的影响。\n一旦 \\(f(n)\\) 确定，“我们如何凑出 \\(f(n)\\) ”就再也用不着了：\n要求出 \\(f(15)\\)，只需要知道 \\(f(14)\\),\\(f(10)\\),\\(f(4)\\) 的值， 而 \\(f(14)\\),\\(f(10)\\),\\(f(4)\\) 是如何算出来的，对之后的问题没有影响。 “未来与过去无关”，这就是无后效性。\n最优子结构 大问题的最优解可以由小问题的最优解推出，这个性质叫做“最优子结构性质”：\n\\(f(n)\\) 的定义需要蕴含“最优”，利用 \\(f(14)\\),\\(f(10)\\),\\(f(4)\\) 的最优解，我们即可算出 \\(f(15)\\) 的最优解。\n能将大问题拆成几个小问题，且满足无后效性、最优子结构性质。 DP 思路 参见 LeetCode 讨论：\n先写出穷举的方法 找出不必要的重复计算 写出 DP 练习 0x00 硬币找零 描述 假设有几种硬币，如1、3、5，并且数量无限。请找出能够组成某个数目的找零所使用最少的硬币数。\n状态转移公式 公式 \\(f(n)=min\\{f(n-1),f(n-3),f(n-5)\\} + 1\\)\n检查是否满足上面提到的两个特性：\n无后效性：对于 \\(n\\)，一旦 \\(f(n)\\) 确定，以后只关心 \\(f(n)\\) 的值，不关心怎么计算的； 最优子结构：对于 \\(n\\)，只要 \\(n - 1\\) \\(n - 3\\) \\(n - 5\\) 能是最优解，那么就能计算出 n; 推导过程 假设找零 15：\n若优先使用 5 元硬币 \\(cost = f(10) + 1 = 2 + 1 = 3\\)\n使用 5 元： \\(f(10)=f(5) + 1\\)\n\\(f(5)=1\\) 使用 3 元： \\(f(10)=f(7) + 1\\)\n\\(f(7)=f(4) + 1 = 2 + 1 = 3\\) \\(f(4)= 1 + 1\\) 若优先使用 3 元硬币 \\(cost = f(12) + 1 = 4 + 1 = 5\\)\n\\(f(12)=f(7) + 1\\) \u0026ndash; 上面已经算出 \\(f(7)=3\\) 若优先使用 1 元硬币 \\(cost = f(14) + 1\\)\n\\(f(14)=f(13)+1\\) \\(f(13)=f(12) + 1 = 4 + 5\\) (上面已经算出 \\(f(12)=4\\)） 将上述过程反过来就可以一步步推出结果。\n实现 package dp //　假设有几种硬币，如1、3、5，并且数量无限。请找出能够组成某个数目的找零所使用最少的硬币数。 func getCoinNumber(total int) int { f := make([]int, total + 1, total + 1) for i := 1; i \u0026lt;= total; i++ { if i - 5 \u0026gt;= 0 { f[i] = f[i - 5] + 1 } else if i - 3 \u0026gt;= 0 { f[i] = f[i - 3] + 1 } else if i - 1 \u0026gt;= 0 { f[i] = f[i - 1] + 1 } } return f[total] } 上面算法实现有一个问题，就是每次计算时只优先考虑采用最大面值（类似贪心算法），无法应对某些情况，对比下面代码\npackage dp import \u0026#34;math\u0026#34; func min(x, y int) int { if x \u0026lt; y { return x } return y } //　假设有几种硬币，如1、3、5，并且数量无限。请找出能够组成某个数目的找零所使用最少的硬币数。 func getCoinNumber(total int) int { f := make([]int, total + 1, total + 1) for i := 1; i \u0026lt;= total; i++ { cost := math.MaxInt32 if i - 1 \u0026gt;= 0 { cost = min(cost, f[i - 1] + 1) } if i - 3 \u0026gt;= 0 { cost = min(cost, f[i - 3] + 1) } if i - 5 \u0026gt;= 0 { cost = min(cost, f[i - 5] + 1) } if cost == math.MaxInt32 { panic(\u0026#34;error\u0026#34;) } f[i] = cost } return f[total] } 0x01单路取苹果 描述 一个矩形区域被划分为 \\(N*M\\) 个小矩形格子，在格子(i,j)中有A[i][j]个苹果。现在从左上角的格子(1,1)出发，要求每次只能向右走一步或向下走一步，最后到达(N,M)，每经过一个格子就把其中的苹果全部拿走。请找出能拿到最多苹果数的路线。\n思路 这题是 0x00 的扩展，格子 A[N][M] 的苹果数量为 \\(max\\{A[N-1][M],A[N][M-1]\\}+A[N][M]\\)\nLeetCode 真题 See also https://www.zhihu.com/question/23995189 ","permalink":"https://notes.0081800.xyz/notes/20200320171538_%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/","summary":"tags: Algorithm 状态转移方程 无后效性 如果给定某一阶段的状态，则在这一阶段以后过程的发展不受这阶段以前各段状态的影响。\n一旦 \\(f(n)\\) 确定，“我们如何凑出 \\(f(n)\\) ”就再也用不着了：\n要求出 \\(f(15)\\)，只需要知道 \\(f(14)\\),\\(f(10)\\),\\(f(4)\\) 的值， 而 \\(f(14)\\),\\(f(10)\\),\\(f(4)\\) 是如何算出来的，对之后的问题没有影响。 “未来与过去无关”，这就是无后效性。\n最优子结构 大问题的最优解可以由小问题的最优解推出，这个性质叫做“最优子结构性质”：\n\\(f(n)\\) 的定义需要蕴含“最优”，利用 \\(f(14)\\),\\(f(10)\\),\\(f(4)\\) 的最优解，我们即可算出 \\(f(15)\\) 的最优解。\n能将大问题拆成几个小问题，且满足无后效性、最优子结构性质。 DP 思路 参见 LeetCode 讨论：\n先写出穷举的方法 找出不必要的重复计算 写出 DP 练习 0x00 硬币找零 描述 假设有几种硬币，如1、3、5，并且数量无限。请找出能够组成某个数目的找零所使用最少的硬币数。\n状态转移公式 公式 \\(f(n)=min\\{f(n-1),f(n-3),f(n-5)\\} + 1\\)\n检查是否满足上面提到的两个特性：\n无后效性：对于 \\(n\\)，一旦 \\(f(n)\\) 确定，以后只关心 \\(f(n)\\) 的值，不关心怎么计算的； 最优子结构：对于 \\(n\\)，只要 \\(n - 1\\) \\(n - 3\\) \\(n - 5\\) 能是最优解，那么就能计算出 n; 推导过程 假设找零 15：","title":"动态规划"},{"content":" tags: 技术 ","permalink":"https://notes.0081800.xyz/topics/20200320100519_%E5%A4%A7%E6%95%B0%E6%8D%AE/","summary":" tags: 技术 ","title":"大数据"},{"content":" tags: Algorithm,Sorting Wikipedia: 归并排序\n","permalink":"https://notes.0081800.xyz/notes/20200320173033_%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/","summary":"tags: Algorithm,Sorting Wikipedia: 归并排序","title":"归并排序"},{"content":" alias: Algorithm ","permalink":"https://notes.0081800.xyz/notes/20200320171501_%E7%AE%97%E6%B3%95/","summary":" alias: Algorithm ","title":"算法"},{"content":" tags: Over the Wall,HTTPs 这里以新增 vd.linuxzen.com 为例。\n新增 DNS 解析 通过 DNSPOD 新增 DNS 解析 A 记录 调整 Nginx 新增 HTTP 站点 Nginx 参考配置\nserver { listen 80; server_name vd.linuxzen.com; include /etc/nginx/snippets/letsencrypt-acme-challenge.conf; } 新增签发证书 $ acme.sh --force --issue -d linuxzen.com -d www.linuxzen.com -d cwiki.linuxzen.com -d monitor.linuxzen.com -d v.linuxzen.com -d vd.linuxzen.com -d d.linuxzen.com -d piwik.linuxzen.com -d t.linuxzen.com -d wiki.linuxzen.com -d note.linuxzen.com -w /var/www/letsencrypt/ 安装证书\n$ acme.sh --install-cert -d linuxzen.com --cert-file /etc/nginx/certs/linuxzen.com/cert.pem --key-file /etc/nginx/certs/linuxzen.com/privkey.pem --fullchain-file /etc/nginx/certs/linuxzen.com/fullchain.pem --reloadcmd \u0026#34;sudo service nginx reload \u0026amp;\u0026amp; docker restart ipsec-vpn-ssl \u0026amp;\u0026amp; docker restart v2ray \u0026amp;\u0026amp; docker restart v2ray2\u0026#34; 调整 Nginx 配置文件应用证书 server { listen 80; server_name vd.linuxzen.com; return 301 https://$server_name$request_uri; } server { listen 443 http2 ssl fastopen=3 reuseport; server_name vd.linuxzen.com; ssl_certificate /etc/nginx/certs/linuxzen.com/fullchain.pem; ssl_certificate_key /etc/nginx/certs/linuxzen.com/privkey.pem; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; ssl_dhparam /etc/ssl/certs/dhparam.pem; ssl_ciphers \u0026#39;ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA\u0026#39;; ssl_session_timeout 1d; ssl_session_cache shared:SSL:50m; ssl_stapling on; ssl_stapling_verify on; add_header Strict-Transport-Security max-age=15768000; access_log /var/log/nginx/vd.linuxzen.com.log; location / { root /srv/www/vd.linuxzen.com; index index.html index.htm; } location /passport { proxy_redirect off; proxy_pass http://v2ray; proxy_http_version 1.1; proxy_read_timeout 300s; proxy_send_timeout 300s; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \u0026#34;Upgrade\u0026#34;; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } include /etc/nginx/snippets/letsencrypt-acme-challenge.conf; } ","permalink":"https://notes.0081800.xyz/notes/20200319221212_let_s_encrypt/","summary":"tags: Over the Wall,HTTPs 这里以新增 vd.linuxzen.com 为例。\n新增 DNS 解析 通过 DNSPOD 新增 DNS 解析 A 记录 调整 Nginx 新增 HTTP 站点 Nginx 参考配置\nserver { listen 80; server_name vd.linuxzen.com; include /etc/nginx/snippets/letsencrypt-acme-challenge.conf; } 新增签发证书 $ acme.sh --force --issue -d linuxzen.com -d www.linuxzen.com -d cwiki.linuxzen.com -d monitor.linuxzen.com -d v.linuxzen.com -d vd.linuxzen.com -d d.linuxzen.com -d piwik.linuxzen.com -d t.linuxzen.com -d wiki.linuxzen.com -d note.linuxzen.com -w /var/www/letsencrypt/ 安装证书\n$ acme.sh --install-cert -d linuxzen.com --cert-file /etc/nginx/certs/linuxzen.","title":"Let's Encrypt"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20200319224041_%E7%BF%BB%E5%A2%99/","summary":"","title":"Over the Wall"},{"content":" tags: Over the Wall,Tools 架构 Client -\u0026gt; DIDIYun(HAProxy) -\u0026gt; HK\n滴滴云 HAPorxy 配置 117.51.146.119\nfrontend v_linuxzen_com bind *:6697 option tcplog mode tcp default_backend v_linuxzen_com_nodes backend v_linuxzen_com_nodes mode tcp balance roundrobin option ssl-hello-chk server webserver1 45.115.36.35:443 check 客户端改动 需要调整 hosts\n$ echo \u0026#39;117.51.146.119 v.linuxzen.com\u0026#39; | sudo tee -a /etc/hosts HK V2Ray Docker 启动 $ docker run -d -p 127.0.0.1:25001:25001 --name v2ray --restart always -v /etc/v2ray:/etc/v2ray v2ray/official HK Let\u0026rsquo;s Encrypt 证书 $ acme.sh --issue -d linuxzen.com -d www.linuxzen.com -d cwiki.linuxzen.com -d monitor.linuxzen.com -d v.linuxzen.com -d d.linuxzen.com -d piwik.linuxzen.com -d t.linuxzen.com -d wiki.linuxzen.com -d note.linuxzen.com -w /var/www/letsencrypt/ $ acme.sh --install-cert -d linuxzen.com --cert-file /etc/nginx/certs/linuxzen.com/cert.pem --key-file /etc/nginx/certs/linuxzen.com/privkey.pem --fullchain-file /etc/nginx/certs/linuxzen.com/fullchain.pem --reloadcmd \u0026#34;sudo service nginx reload \u0026amp;\u0026amp; docker restart ipsec-vpn-ssl \u0026amp;\u0026amp; docker restart v2ray \u0026amp;\u0026amp; docker restart v2ray2\u0026#34; HK V2Ray 配置 { \u0026#34;log\u0026#34;: { \u0026#34;loglevel\u0026#34;: \u0026#34;debug\u0026#34;, \u0026#34;access\u0026#34;: \u0026#34;/var/log/v2ray/access.log\u0026#34;, \u0026#34;error\u0026#34;: \u0026#34;/var/log/v2ray/error.log\u0026#34; }, \u0026#34;inbounds\u0026#34;: [ { \u0026#34;port\u0026#34;: 25001, \u0026#34;listen\u0026#34;:\u0026#34;0.0.0.0\u0026#34;, \u0026#34;protocol\u0026#34;: \u0026#34;vmess\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;clients\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;1fde12b8-0cfd-11ea-a4b3-acde48001122\u0026#34;, \u0026#34;alterId\u0026#34;: 64 } ] }, \u0026#34;streamSettings\u0026#34;: { \u0026#34;network\u0026#34;: \u0026#34;ws\u0026#34;, \u0026#34;wsSettings\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;/passport\u0026#34; } } } ], \u0026#34;outbounds\u0026#34;: [ { \u0026#34;protocol\u0026#34;: \u0026#34;freedom\u0026#34;, \u0026#34;settings\u0026#34;: {} } ] } HK Nginx 配置 server { listen 80; server_name v.linuxzen.com; return 301 https://$server_name$request_uri; } upstream v2ray { server 127.0.0.1:25001; server 127.0.0.1:25002; } server{ listen 443 http2 ssl fastopen=3 reuseport; # listen 80; server_name v.linuxzen.com; ssl_certificate /etc/nginx/certs/linuxzen.com/fullchain.pem; ssl_certificate_key /etc/nginx/certs/linuxzen.com/privkey.pem; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; ssl_dhparam /etc/ssl/certs/dhparam.pem; ssl_ciphers \u0026#39;ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA\u0026#39;; ssl_session_timeout 1d; ssl_session_cache shared:SSL:50m; ssl_stapling on; ssl_stapling_verify on; add_header Strict-Transport-Security max-age=15768000; access_log /var/log/nginx/v.linuxzen.com.log; location / { root /srv/www/v.linuxzen.com; index index.html index.htm; } location /passport { proxy_redirect off; proxy_pass http://v2ray; proxy_http_version 1.1; proxy_read_timeout 300s; proxy_send_timeout 300s; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \u0026#34;Upgrade\u0026#34;; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } include /etc/nginx/snippets/letsencrypt-acme-challenge.conf; } 新增一个域名用于单独的滴滴云加速 使用一个单独的域名 vd.linuxzen.com 用于滴滴云加速，参见Let\u0026rsquo;s Encrypt。\n","permalink":"https://notes.0081800.xyz/notes/20200319215535_v2ray/","summary":"tags: Over the Wall,Tools 架构 Client -\u0026gt; DIDIYun(HAProxy) -\u0026gt; HK\n滴滴云 HAPorxy 配置 117.51.146.119\nfrontend v_linuxzen_com bind *:6697 option tcplog mode tcp default_backend v_linuxzen_com_nodes backend v_linuxzen_com_nodes mode tcp balance roundrobin option ssl-hello-chk server webserver1 45.115.36.35:443 check 客户端改动 需要调整 hosts\n$ echo \u0026#39;117.51.146.119 v.linuxzen.com\u0026#39; | sudo tee -a /etc/hosts HK V2Ray Docker 启动 $ docker run -d -p 127.0.0.1:25001:25001 --name v2ray --restart always -v /etc/v2ray:/etc/v2ray v2ray/official HK Let\u0026rsquo;s Encrypt 证书 $ acme.","title":"V2Ray"},{"content":" tags: Over the Wall,Network xinetd 代理 SMTP 和 IMAP 通过 xinetd 代理 SMTP 和 IMAP 实现 gmail 翻墙。\n配置服务端\nservice imap { type = UNLISTED port = 993 bind = 0.0.0.0 socket_type = stream wait = no user = nobody redirect = imap.gmail.com 993 per_source = UNLIMITED cps = 100 2 } service smtp-465 { type = UNLISTED port = 465 bind = 0.0.0.0 socket_type = stream wait = no user = nobody redirect = smtp.gmail.com 465 per_source = UNLIMITED cps = 100 2 } service smtp-587 { type = UNLISTED port = 587 bind = 0.0.0.0 socket_type = stream wait = no user = nobody redirect = smtp.gmail.com 587 per_source = UNLIMITED cps = 100 2 } 本机修改 hosts\necho \u0026#39;45.115.36.35 smtp.gmail.com\u0026#39; | sudo tee -a /etc/hosts echo \u0026#39;45.115.36.35 imap.gmail.com\u0026#39; | sudo tee -a /etc/hosts 通过滴滴云穿透和加速 gmail 代理 通过在滴滴云上配置\nservice imap { type = UNLISTED port = 993 bind = 0.0.0.0 socket_type = stream wait = no user = nobody redirect = 45.115.36.35 993 per_source = UNLIMITED cps = 100 2 } service smtp-465 { type = UNLISTED port = 465 bind = 0.0.0.0 socket_type = stream wait = no user = nobody redirect = 45.115.36.35 465 per_source = UNLIMITED cps = 100 2 } service smtp-587 { type = UNLISTED port = 587 bind = 0.0.0.0 socket_type = stream wait = no user = nobody redirect = 45.115.36.35 587 per_source = UNLIMITED cps = 100 2 } 调整本地 hosts\necho \u0026#39;117.51.146.119 smtp.gmail.com\u0026#39; | sudo tee -a /etc/hosts echo \u0026#39;117.51.146.119 imap.gmail.com\u0026#39; | sudo tee -a /etc/hosts ","permalink":"https://notes.0081800.xyz/notes/20200319223026_xinetd/","summary":"tags: Over the Wall,Network xinetd 代理 SMTP 和 IMAP 通过 xinetd 代理 SMTP 和 IMAP 实现 gmail 翻墙。\n配置服务端\nservice imap { type = UNLISTED port = 993 bind = 0.0.0.0 socket_type = stream wait = no user = nobody redirect = imap.gmail.com 993 per_source = UNLIMITED cps = 100 2 } service smtp-465 { type = UNLISTED port = 465 bind = 0.0.0.0 socket_type = stream wait = no user = nobody redirect = smtp.","title":"xinetd"},{"content":"股分类 个股：投资资金来自个人的股票（还有国家股、法人股）\n蓝筹股：明星股\n小盘\n市值比较低的股票\n小盘价值股：格低于价值的股票，被低估的股票，长期看来值得投资的股票。 小盘成长股：成长潜力很大，公司发展处于较快阶段，但不确定性也比较高，业绩波动可能会很大。 稳定增长股：小盘具有一定品牌效应后的快销品，达到一定统治地位，最好在行业的繁荣周期顶峰卖出\n周期股\n相关指标 市盈率（P/E 或 PER）= 每股市值 / 每股盈余\n每股市价处于每股盈余（EPS），评估股价是昂贵还是便宜。市盈率越低代表投资者能够以相对较低的价格购入股票。\nWikipedia: https://zh.wikipedia.org/wiki/%E5%B8%82%E7%9B%88%E7%8E%87\n市净率（PBR，P/B） = 总市值 / 净资产\n评估高风险企业，企业资产大量为实物资产的企业时收到重视。\n市销率（PSR，P/S） = 总市值 / 营收\n公司市值除以上一财年（或季度）的营业收入，或等价地，以公司股价除以每股营利收入，越小（小于 1）通常被认为投资价值越高。可以付出比单位营收更少的钱购买股票。 Wikipedia: https://zh.wikipedia.org/zh-hans/%E5%B8%82%E9%94%80%E7%8E%87\n相关链接\n简单直观的解释一下市盈率和市净率的意思 ","permalink":"https://notes.0081800.xyz/notes/20200318160435_%E8%82%A1%E5%B8%82%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/","summary":"股分类 个股：投资资金来自个人的股票（还有国家股、法人股）\n蓝筹股：明星股\n小盘\n市值比较低的股票\n小盘价值股：格低于价值的股票，被低估的股票，长期看来值得投资的股票。 小盘成长股：成长潜力很大，公司发展处于较快阶段，但不确定性也比较高，业绩波动可能会很大。 稳定增长股：小盘具有一定品牌效应后的快销品，达到一定统治地位，最好在行业的繁荣周期顶峰卖出\n周期股\n相关指标 市盈率（P/E 或 PER）= 每股市值 / 每股盈余\n每股市价处于每股盈余（EPS），评估股价是昂贵还是便宜。市盈率越低代表投资者能够以相对较低的价格购入股票。\nWikipedia: https://zh.wikipedia.org/wiki/%E5%B8%82%E7%9B%88%E7%8E%87\n市净率（PBR，P/B） = 总市值 / 净资产\n评估高风险企业，企业资产大量为实物资产的企业时收到重视。\n市销率（PSR，P/S） = 总市值 / 营收\n公司市值除以上一财年（或季度）的营业收入，或等价地，以公司股价除以每股营利收入，越小（小于 1）通常被认为投资价值越高。可以付出比单位营收更少的钱购买股票。 Wikipedia: https://zh.wikipedia.org/zh-hans/%E5%B8%82%E9%94%80%E7%8E%87\n相关链接\n简单直观的解释一下市盈率和市净率的意思 ","title":"股市相关概念"},{"content":" 适合人群：穷人、笨人、忙人、好人\n为什么\n通胀太高，股票战胜通胀的重要工具 绝大多数人不具备择时能力 避免高点买入 核心逻辑：放弃择时，持续小额买入，降低成本\n缺点：在市场上涨、高位震荡过程中，虽然盈利大幅提高，但持仓成本也在快速提高。一旦市场转向熊市，整体会迅速亏本。\n单边上涨：定投盈利少于一次性投资 先震荡后上涨：定投盈利少于一次性投资 先上涨后下跌：定投亏损多于一次性投资 单边下跌：定投亏损少于一次性投资 震荡：定投与一次性投资持平 先下跌再震荡：定投亏损少于一次性投资 除了坚持，还在于止盈策略，牛市中成本不断提高，需要及时止盈，防止下跌时候的亏损 错误理念\n定投不是万能，需要防止“倒微笑曲线周期” 巴菲特说指数基金难以超越仅限于美股，A 股与之相反 定投组合包含债券基金：定投适合波动较大的权益类资产（股票、商品），债卷等固定收益类产品本身波动小，一次性买入和定投基本没区别 月定投不够还要周定投：基本没差别 定投是懒人投资，坚持即可：还需要主动管理，如定投的标的不再适合定投，该换要换。 一次性投资止损不止赢，定投止赢不止损。 定投只买开放式基金：还可以宽基指数基金、主题指数基金、行业指数基金、风格指数基金、策略指数基金、QDII 指数基金、商品指数基金。此外，还有折价的封闭式基金、定增基金，适当的配置会非常好玩。 策略\n定投买入，止盈不止损： 需要在可能出现的“倒微笑曲线周期”及时止盈。 制订量化估值标准 技术分析\n通过MA、MACD、RSI等各种技术指标，判断目前市场从长期看，是相对低位还是高位\n趋势上涨原则：MA(30)\u0026gt;MA(60)\u0026gt;MA(120)； 趋势下跌原则：MA(30)\u0026lt;MA(60)\u0026lt;MA(120)。 均线偏离法：根据指数价格对均线偏离的程度决定投资额度的多少。\nP\u0026gt;MA(120)：正偏离，减少投资额度； P\u0026lt;MA(120)：负偏离，增加投资额度。 基本面分析\n根据指数相关基本面指标，判断股市处于高估或者低估。如市盈率、市净率、整体ROI等地。在股市高估时，降低投资额度，在股市低估时，增加投资额度。\n定期不定额策略\n在上述策略的基础上，如目前市场明显在历史地点，原来每个月投1000的，这时不妨投2000。如市场明显高估，每个月投1000的可以投500。如果涨的都害怕了，可以不投甚至卖出一部分。\n产品池管理\n构建“核心——卫星”组合\n技巧\n部分基金可以场内购买（炒股账号购买），交易时间短手续费低 Links 基金定投，看这篇就够了 ","permalink":"https://notes.0081800.xyz/notes/20200311093314_%E5%9F%BA%E9%87%91%E5%AE%9A%E6%8A%95/","summary":" 适合人群：穷人、笨人、忙人、好人\n为什么\n通胀太高，股票战胜通胀的重要工具 绝大多数人不具备择时能力 避免高点买入 核心逻辑：放弃择时，持续小额买入，降低成本\n缺点：在市场上涨、高位震荡过程中，虽然盈利大幅提高，但持仓成本也在快速提高。一旦市场转向熊市，整体会迅速亏本。\n单边上涨：定投盈利少于一次性投资 先震荡后上涨：定投盈利少于一次性投资 先上涨后下跌：定投亏损多于一次性投资 单边下跌：定投亏损少于一次性投资 震荡：定投与一次性投资持平 先下跌再震荡：定投亏损少于一次性投资 除了坚持，还在于止盈策略，牛市中成本不断提高，需要及时止盈，防止下跌时候的亏损 错误理念\n定投不是万能，需要防止“倒微笑曲线周期” 巴菲特说指数基金难以超越仅限于美股，A 股与之相反 定投组合包含债券基金：定投适合波动较大的权益类资产（股票、商品），债卷等固定收益类产品本身波动小，一次性买入和定投基本没区别 月定投不够还要周定投：基本没差别 定投是懒人投资，坚持即可：还需要主动管理，如定投的标的不再适合定投，该换要换。 一次性投资止损不止赢，定投止赢不止损。 定投只买开放式基金：还可以宽基指数基金、主题指数基金、行业指数基金、风格指数基金、策略指数基金、QDII 指数基金、商品指数基金。此外，还有折价的封闭式基金、定增基金，适当的配置会非常好玩。 策略\n定投买入，止盈不止损： 需要在可能出现的“倒微笑曲线周期”及时止盈。 制订量化估值标准 技术分析\n通过MA、MACD、RSI等各种技术指标，判断目前市场从长期看，是相对低位还是高位\n趋势上涨原则：MA(30)\u0026gt;MA(60)\u0026gt;MA(120)； 趋势下跌原则：MA(30)\u0026lt;MA(60)\u0026lt;MA(120)。 均线偏离法：根据指数价格对均线偏离的程度决定投资额度的多少。\nP\u0026gt;MA(120)：正偏离，减少投资额度； P\u0026lt;MA(120)：负偏离，增加投资额度。 基本面分析\n根据指数相关基本面指标，判断股市处于高估或者低估。如市盈率、市净率、整体ROI等地。在股市高估时，降低投资额度，在股市低估时，增加投资额度。\n定期不定额策略\n在上述策略的基础上，如目前市场明显在历史地点，原来每个月投1000的，这时不妨投2000。如市场明显高估，每个月投1000的可以投500。如果涨的都害怕了，可以不投甚至卖出一部分。\n产品池管理\n构建“核心——卫星”组合\n技巧\n部分基金可以场内购买（炒股账号购买），交易时间短手续费低 Links 基金定投，看这篇就够了 ","title":"基金定投"},{"content":" tags: AI What is the Difference Between CNN and RNN? ","permalink":"https://notes.0081800.xyz/notes/20200310093014_deep_learning/","summary":" tags: AI What is the Difference Between CNN and RNN? ","title":"Deep Learning"},{"content":" Machine Learning Deep Learning 《机器学习实战》读书笔记 How to Train Really Large Models on Many GPUs? ","permalink":"https://notes.0081800.xyz/notes/20200309112015_ai/","summary":" Machine Learning Deep Learning 《机器学习实战》读书笔记 How to Train Really Large Models on Many GPUs? ","title":"AI"},{"content":" tags: Learning,Learning English ","permalink":"https://notes.0081800.xyz/topics/20200309112105_translate/","summary":" tags: Learning,Learning English ","title":"Translate"},{"content":" tags: Translate,Deep Learning,AI,Incomplete 原文链接：Deep Learning Algorithms : The Complete Guide。\n深度学习正在影响整个世界。\n深度学习的炒作始于 2012 年：一个神经网络（Neural Network）在图片识别任务上表现出超人的性能，并且只有少数人能预测将会发生什么。\n在过去 10 年，越来越多的算法落地到我们生活中。越来越多的公司开始将其加入到日常业务中。\n这里，我尝试覆盖近几年各种应用如计算机视觉和自然语言处理（Natural Language Processing）中所涉及的所有最重要的算法和构思。\n其中有一些算法比其他一些使用的更加频繁并且每一种都有其自身的优点和缺点。\n我的主要目标是给你一个当前领域通用的思路去帮助你理解每一种情况应该使用什么算法。 因我知道它看起来会对一些从零开始的人造成一定程度的混乱。\n但是通过阅读这份指南，我有信心你会认识到什么是什么并且你可以准备好去立即使用他们。\n所以如果你正在寻找一份深度学习真正的完整指南，那就让我们开始吧。\nContents 但是什么是深度学习?\n神经网络\n前馈神经网络（FNN）\n卷积神经网络（CNN）\n循环神经网络（RNN）\n递归神经网络（Recurisive Neural Network）\n自编码器（AutoEncoders）\n深度信念网络 (Deep belief network)和受限玻尔兹曼机 (Restricted Boltzmann machine)\n生成对抗网络（GAN）\nTransformers\n图神经网络（GNN）\n自然语言处理中的深度学习\n词嵌入 (Word embedding) 序列建模（Sequence Modeling） 计算机视觉中的机器学习\n本地化和物体识别 单发探测器（Single shot detectors） 语义分割（Semantic Segmentation） 姿势估计（Pose Estimation） 深度学习在科学和企业界取得了疯狂的人气。从 2012，卷积神经网络（CNN）在图像识别竞赛（ ImageNet Large Scale Visual Recognition Challenge）中获得了惊人的准确性，每年都出现了越来越多的研究论文并且越来越多的企业将神经网络收录到他们的业务中。据估计，深度学习目前的市场规模为 25 亿，预计到 2023 年将达到 181.6 亿。\n但是什么是深度学习? 根据维基百科：「深度学习（英語：deep learning）是机器学习的分支，是一種以人工神經網路為架構，對資料進行表徵學習的算法。」\n在我看来， 深度学习是一系列启发于人脑在处理数据和创建用于决策的模式方面的工作的算法的集合，这是对成为人工神经网络（Artificial Neural Network）得单一模型架构的思想的扩展和改进。\n神经网络 神经网络（Neural Networks）就像人脑一样由神经元组成。每一个神经元接收信号作为输入，用权重相乘，对它们求和并应用非线性函数。这些神经元彼此相邻堆叠并分层组织。\n但是通过这些我们能做些什么呢？\n事实证明，神经网络是出色的 函数逼近器（function approximators） 。\n我们可以假设每一个行为和系统可以最终被表示为一个数学函数（可能会异常复杂）。如何我们设法找到该函数，那么我们就可以从本质上理解系统的所有内容。但是找到该函数可能非常困难。因此，我们需要对其进行估算。输入神经网络。\n反向传播（Backpropagation） 神经网络可以使用大量数据和被称为 backpropagation 的算法学习描述函数。我们将数据输入到网络，它生产输出，我们将该输出与所需的输出进行对比（使用损失函数（loss function）），然后我们根据差异再调整权重。\n然后一直重复。使用称为随机梯度下降（stochastic gradient descent）的非线性优化技术执行权重的调整。\n一段时间之后，网络将在生产输出上变的足够好。因此，训练接结束了。因此，我们设法接近我们的函数。如果我们将输出未知的输入传递给网络，它会基于近似函数（approximated function）给我们一个答案。\n让我们通过一个例子让其更容易理解。比如基于一些原因我们想鉴别一张图片中是否有树。我们将任意类型的图片输入到网络然后网络产生输出。由于我们知道一张图片是否包含树，我们可以对比网络输出和事实并调整网络。\n通过越来越多的图片输入到网络，网络将会越来越精准。现在我们输入一张未知的图片，然后它就会告诉我们图片中是否包含树。很酷对吧？\n多年来，研究人员对原始想法进行了惊人的改进。每种新架构都针对特定问题实现了更高的准确性和速度。我们将所有这些新模型归为特定的类别：\n前馈神经网络（FNN） FNN 通常是全部连接的（fully connected），也就是说层中的每一个神经元都与下一层中其他神经元相连。所描述的结构被称为多层感知器 (Multilayer Perceptron)，起源于 1958。单层感知器只能学习线性可分离模式，但是一个多层感知器可以学习数据间的非线性关系。\n它们在分类和回归等任务上表现的异常的好。与其他机器学习算法相反，它们并不那么容易收敛。它们拥有的数据越多，其准确性就越高。\n卷积神经网络（CNN） CNN 采用了一个叫做卷积（convolution）的函数。\n循环神经网络（RNN） 递归神经网络 自编码器（AutoEncoders） 深度信念网络 (Deep belief network)和受限玻尔兹曼机 (Restricted Boltzmann machine) 生成对抗网络（GAN） Transformers 图神经网络（GNN） 自然语言处理中的深度学习 词嵌入 (Word embedding) 序列建模（Sequence Modeling） 计算机视觉中的机器学习 本地化和物体识别 单发探测器（Single shot detectors） 语义分割（Semantic Segmentation） 姿势估计（Pose Estimation） ","permalink":"https://notes.0081800.xyz/articles/20200309112133_deep_learning_algorithms/","summary":"tags: Translate,Deep Learning,AI,Incomplete 原文链接：Deep Learning Algorithms : The Complete Guide。\n深度学习正在影响整个世界。\n深度学习的炒作始于 2012 年：一个神经网络（Neural Network）在图片识别任务上表现出超人的性能，并且只有少数人能预测将会发生什么。\n在过去 10 年，越来越多的算法落地到我们生活中。越来越多的公司开始将其加入到日常业务中。\n这里，我尝试覆盖近几年各种应用如计算机视觉和自然语言处理（Natural Language Processing）中所涉及的所有最重要的算法和构思。\n其中有一些算法比其他一些使用的更加频繁并且每一种都有其自身的优点和缺点。\n我的主要目标是给你一个当前领域通用的思路去帮助你理解每一种情况应该使用什么算法。 因我知道它看起来会对一些从零开始的人造成一定程度的混乱。\n但是通过阅读这份指南，我有信心你会认识到什么是什么并且你可以准备好去立即使用他们。\n所以如果你正在寻找一份深度学习真正的完整指南，那就让我们开始吧。\nContents 但是什么是深度学习?\n神经网络\n前馈神经网络（FNN）\n卷积神经网络（CNN）\n循环神经网络（RNN）\n递归神经网络（Recurisive Neural Network）\n自编码器（AutoEncoders）\n深度信念网络 (Deep belief network)和受限玻尔兹曼机 (Restricted Boltzmann machine)\n生成对抗网络（GAN）\nTransformers\n图神经网络（GNN）\n自然语言处理中的深度学习\n词嵌入 (Word embedding) 序列建模（Sequence Modeling） 计算机视觉中的机器学习\n本地化和物体识别 单发探测器（Single shot detectors） 语义分割（Semantic Segmentation） 姿势估计（Pose Estimation） 深度学习在科学和企业界取得了疯狂的人气。从 2012，卷积神经网络（CNN）在图像识别竞赛（ ImageNet Large Scale Visual Recognition Challenge）中获得了惊人的准确性，每年都出现了越来越多的研究论文并且越来越多的企业将神经网络收录到他们的业务中。据估计，深度学习目前的市场规模为 25 亿，预计到 2023 年将达到 181.","title":"译：深度学习算法：完整指南"},{"content":"积累财富首先要改变思维，学习复利的力量。\n粗读要点 实践 10/50 懒人储蓄投资自己，工资 10% 奖金 50% 存储单独的账户用户投资自己 开辟单独基金用于存放房租、孩子学费和自我投资 不懂不投，宁愿错过，不犯过错 画出自己的财富水池 为自己购买保险规避风险（大病和死亡），完成家庭保险配置 理清房贷还款计划，怎么将还款金额降低到收入到 1/3 （9000）以下，可以考虑先提前还房贷减轻房贷利息压力 ","permalink":"https://notes.0081800.xyz/notes/20200307114151_%E5%B7%B4%E6%AF%94%E4%BC%A6%E5%AF%8C%E7%BF%81%E6%96%B0%E8%A7%A3/","summary":"积累财富首先要改变思维，学习复利的力量。\n粗读要点 实践 10/50 懒人储蓄投资自己，工资 10% 奖金 50% 存储单独的账户用户投资自己 开辟单独基金用于存放房租、孩子学费和自我投资 不懂不投，宁愿错过，不犯过错 画出自己的财富水池 为自己购买保险规避风险（大病和死亡），完成家庭保险配置 理清房贷还款计划，怎么将还款金额降低到收入到 1/3 （9000）以下，可以考虑先提前还房贷减轻房贷利息压力 ","title":"《巴比伦富翁新解》读书笔记"},{"content":"反映与居民生活有关的产品及劳务价格统计出来的物价变动指标，衡量通货膨胀的主要指标之一：\n超过 3% 为通货膨胀 超过 5% 就是比较严重的通货膨胀 Links 消费者物价指数 ","permalink":"https://notes.0081800.xyz/notes/20200224133304_cpi/","summary":"反映与居民生活有关的产品及劳务价格统计出来的物价变动指标，衡量通货膨胀的主要指标之一：\n超过 3% 为通货膨胀 超过 5% 就是比较严重的通货膨胀 Links 消费者物价指数 ","title":"CPI"},{"content":" tags: Emacs 'foo vs #'foo https://emacs.stackexchange.com/a/10943\n#\u0026rsquo; on symbols will cause the byte-compiler to emit a warning if the function is not defined.\n","permalink":"https://notes.0081800.xyz/notes/20200225192204_elisp/","summary":"tags: Emacs 'foo vs #'foo https://emacs.stackexchange.com/a/10943\n#\u0026rsquo; on symbols will cause the byte-compiler to emit a warning if the function is not defined.","title":"ELisp"},{"content":"Emacs 插入断页符^L C-q C-l 或 M-x quoted-insert RET C-l。\n可以通过 page-break-lines 这个扩展包来显示一个分隔符。\n部分 Orgmode 中 awesome-tray 不生效 部分 Orgmode 中 awesome-tray 设置的 0.1 height mode-line 不生效。\n","permalink":"https://notes.0081800.xyz/topics/20200218120634/","summary":"Emacs 插入断页符^L C-q C-l 或 M-x quoted-insert RET C-l。\n可以通过 page-break-lines 这个扩展包来显示一个分隔符。\n部分 Orgmode 中 awesome-tray 不生效 部分 Orgmode 中 awesome-tray 设置的 0.1 height mode-line 不生效。","title":"Emacs"},{"content":" 基金 基金定投 股市相关概念 相关书籍 《巴比伦富翁新解》读书笔记 《百箭穿杨》读书笔记 To Read 《布雷迪报告》 ","permalink":"https://notes.0081800.xyz/notes/20200224132507/","summary":" 基金 基金定投 股市相关概念 相关书籍 《巴比伦富翁新解》读书笔记 《百箭穿杨》读书笔记 To Read 《布雷迪报告》 ","title":"Financial Management"},{"content":" tags: Programming Language 柯里化 func max(a, b int) int { if a \u0026gt; b { return a } return b } func currying(a int) func(int) int { return func(b int) int { return max(a, b) } } ","permalink":"https://notes.0081800.xyz/notes/20200218115725/","summary":" tags: Programming Language 柯里化 func max(a, b int) int { if a \u0026gt; b { return a } return b } func currying(a int) func(int) int { return func(b int) int { return max(a, b) } } ","title":"Go"},{"content":" tags: Go Channel Directions func demo(readOnlyStream \u0026lt;-chan bool, writeOnlyStream chan\u0026lt;- bool) { } ","permalink":"https://notes.0081800.xyz/notes/20200218115740_go_channel/","summary":" tags: Go Channel Directions func demo(readOnlyStream \u0026lt;-chan bool, writeOnlyStream chan\u0026lt;- bool) { } ","title":"Go Channel"},{"content":" tags: Emacs 如何从历史跳到其他命令列表 Key binds C-o\nSee also: https://emacs.stackexchange.com/questions/18173/how-to-jump-from-emacs-command-history-to-emacs-commands-in-helm\n","permalink":"https://notes.0081800.xyz/notes/20200218122103_helm/","summary":"tags: Emacs 如何从历史跳到其他命令列表 Key binds C-o\nSee also: https://emacs.stackexchange.com/questions/18173/how-to-jump-from-emacs-command-history-to-emacs-commands-in-helm","title":"Helm"},{"content":"Links A Makefile for Emacs Packages ","permalink":"https://notes.0081800.xyz/notes/20200218174830_makefile/","summary":"Links A Makefile for Emacs Packages ","title":"Makefile"},{"content":" tags: Emacs 快捷键 C-c C-o 打开当前光标下的链接 C-c C-l 插入链接 C-c C-' 插入代码块 Snippets [[http://www.gnu.org/software/emacs/][GNU Emacs]] 转义代码块 https://stackoverflow.com/a/7462884/2873718\n","permalink":"https://notes.0081800.xyz/topics/20200218120643_org_mode/","summary":"tags: Emacs 快捷键 C-c C-o 打开当前光标下的链接 C-c C-l 插入链接 C-c C-' 插入代码块 Snippets [[http://www.gnu.org/software/emacs/][GNU Emacs]] 转义代码块 https://stackoverflow.com/a/7462884/2873718","title":"Org Mode"},{"content":" tags: Programming Language ","permalink":"https://notes.0081800.xyz/topics/20200307191429_rust/","summary":" tags: Programming Language ","title":"Rust"},{"content":" Makefile SSH macOS max open files macOS TimeMachine 日志 macOS 问题解决三板斧 ","permalink":"https://notes.0081800.xyz/notes/20200218174814/","summary":" Makefile SSH macOS max open files macOS TimeMachine 日志 macOS 问题解决三板斧 ","title":"Unix"},{"content":"将资金交给投资经理人进行投资盈利跑赢 CPI 或赚取更多利润。\n分类 交易方式划分：\n开放式基金（活期） 封闭式基金（死期） 投资对象划分:\n货币基金：余额宝 股票型、债卷型：依靠基金经理管理基金的能力 指数型：被动型基金，依靠大盘指数，美股属于长牛短熊型能跑赢主动型，A 股属于短牛长熊跑赢主动型比较困难。 股票 VS 基金 股票：想一夜暴富（也可能一夜暴亏） 基金：财富增值，门槛低，风险低 如何选基 市场研判 股市走熊：债卷基金 牛市初中：股票基金和指数基金 自身情况 稳健型 激进型 技巧 基金评级 国外渠道\n晨星 国内渠道\n银河证劵 海通证劵 济安金信 招商证劵 历史业绩 将基金收益与股票大盘走势进行比较； 将基金收益与其他同类基金的收益进行比较； 将基金的当期收益与历史收益进行比较。 一些指标 夏普比率 \u0026gt; 0 基金报酬大于风险，\u0026lt; 0 风险大过报酬 标准差越小，投资风险越低 天天基金网等三方平台上都能看，晨星网上更全。天天基金网的特色数据一栏可以看，晨星网的基金工具里包括阿尔法系数等指标都有标识。\nLinks 〈如何买基金？基金入门，学会这几招就够了〉 ","permalink":"https://notes.0081800.xyz/notes/20200224132645_/","summary":"将资金交给投资经理人进行投资盈利跑赢 CPI 或赚取更多利润。\n分类 交易方式划分：\n开放式基金（活期） 封闭式基金（死期） 投资对象划分:\n货币基金：余额宝 股票型、债卷型：依靠基金经理管理基金的能力 指数型：被动型基金，依靠大盘指数，美股属于长牛短熊型能跑赢主动型，A 股属于短牛长熊跑赢主动型比较困难。 股票 VS 基金 股票：想一夜暴富（也可能一夜暴亏） 基金：财富增值，门槛低，风险低 如何选基 市场研判 股市走熊：债卷基金 牛市初中：股票基金和指数基金 自身情况 稳健型 激进型 技巧 基金评级 国外渠道\n晨星 国内渠道\n银河证劵 海通证劵 济安金信 招商证劵 历史业绩 将基金收益与股票大盘走势进行比较； 将基金收益与其他同类基金的收益进行比较； 将基金的当期收益与历史收益进行比较。 一些指标 夏普比率 \u0026gt; 0 基金报酬大于风险，\u0026lt; 0 风险大过报酬 标准差越小，投资风险越低 天天基金网等三方平台上都能看，晨星网上更全。天天基金网的特色数据一栏可以看，晨星网的基金工具里包括阿尔法系数等指标都有标识。\nLinks 〈如何买基金？基金入门，学会这几招就够了〉 ","title":"基金"},{"content":"Wikipedia: https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%88%A9\n","permalink":"https://notes.0081800.xyz/notes/20200307114233_%E5%A4%8D%E5%88%A9/","summary":"Wikipedia: https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%88%A9","title":"复利"},{"content":"它是用来衡量金融资产绩效基金表现的一个指标，核心思想就是选择收益率相近的基金承担的风险越小越好，选择风险水平相同的基金则收益率越高越好。总之，夏普比率越大，说明这只基金的绩效越好。\n\u0026gt; 0 基金报酬大于风险 \u0026lt; 0 基金风险大过报酬 ","permalink":"https://notes.0081800.xyz/notes/20200224140348_/","summary":"它是用来衡量金融资产绩效基金表现的一个指标，核心思想就是选择收益率相近的基金承担的风险越小越好，选择风险水平相同的基金则收益率越高越好。总之，夏普比率越大，说明这只基金的绩效越好。\n\u0026gt; 0 基金报酬大于风险 \u0026lt; 0 基金风险大过报酬 ","title":"夏普比率"},{"content":"又称标准偏差、均方差，数学符号 sigma。概率统计中最常使用作为测量一组数值的离散程度。\n定义：为方差开算数平方根，反应组内个体间的离散程度。\n用在基金上反映了基金总回报率的波动幅度大小，数值越大，表明波动程度越厉害，稳定度越小，投资风险就越高。\n越小，投资风险越低 越大，投资风险越高 ","permalink":"https://notes.0081800.xyz/notes/20200224141925_/","summary":"又称标准偏差、均方差，数学符号 sigma。概率统计中最常使用作为测量一组数值的离散程度。\n定义：为方差开算数平方根，反应组内个体间的离散程度。\n用在基金上反映了基金总回报率的波动幅度大小，数值越大，表明波动程度越厉害，稳定度越小，投资风险就越高。\n越小，投资风险越低 越大，投资风险越高 ","title":"标准差（Standard Deviation）"},{"content":"","permalink":"https://notes.0081800.xyz/topics/20200307114122_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/","summary":"","title":"正在读的书"},{"content":":Tags: Financial Management\n消费者物价指数 ","permalink":"https://notes.0081800.xyz/notes/20200224133214/","summary":":Tags: Financial Management\n消费者物价指数 ","title":"CPI"},{"content":" tags: 正在读的书,读书笔记,DDD 前言和目录 好的软件需要控制复杂性，好的领域模型可以帮助控制复杂性。\n什么样的项目需要 DDD？尝试型的小型项目应该不需要 DDD，但是一旦上了规模考虑后续迭代则需要 DDD。\n本书组织方式：\n领域建模 领域建模的过程就是消化知识的过程，这个过程应该贯穿整个开发过程，需要持续学习。\n模型用来描绘人们所关注的实现或想法的某个方面，比如地图就是模型。\n模型是一种简化，是对实现的解释：把与解决问题密切相关的方面抽象出来，而忽略无关的细节。\n软件问题建模的区域就是软件的领域\n物质世界的领域：机票预订程序涉及的飞机乘客。 无形的领域：会计程序的金融领域。 领域涉及知识信息超载的问题，模型这种知识对知识进行了选择性的简化和有意的结构化。\n领域模型将领域专家头脑中的支持严格的组织且有选择的抽象，并不是尽可能建立一个符合“现实”的模型。\n模型表示 关联 规定一个遍历方向：存在双向联结时（地址 -\u0026gt; 人 或 人 -\u0026gt; 地址）尽量只用一种，并避免互相关联 添加一个限定符，以便有效减少多重关联 消除不必要的关联 表示方式 领域模式 实践 MODEL-DRIVEN DESIGN 隔离领域：引入应用层 应用 LAYERED ARCHITECTURE 把领域层划分出来，通过应用层类来处理应用程序功能。应用层类是协调者，负责提问，领域层负责回答。\n将 ENTITY 和 VALUE OBJECT 区分开 依次考虑对象是必须跟踪的 ENTITY 还是表示一个 VALUE OBJECT。\nAGGREGATE 边界 识别模型中的 AGGREGATE 根和对应的边界。\n选择 REPOSITORY 为 AGGREGATE 根对象建立 REPOSITORY。\n场景走查 根据应用程序特性复核建模，进行场景走查，确保能够有效地解决应用问题。可以走查一些正常和异常业务场景进行复核。\n对象创建 如果对象复杂则创建单独的 FACTORY 类进行对象创建，简单对象可以直接在 AGGREGATE 根上通过 FACTORY METHOD 进行创建。\n停一下，重构 建模和设计需要经常进行重构：利用新知识来改进模型和设计。\nMODULE 划分 应该按照对象的意义来划分，其他任何划分方式都是错误的，包括：\n按模式划分 按照对象生命周期划分 通过重构发现深层模型 重构不应该停留在代码细节层面，还应当在模型设计层面随着对知识吸收的加深对模型进行重构，发现深层模型。\n深层模型能够穿过领域表象，清楚地表达出领域专家们的主要关注点以及相关的知识。\n深层模型/柔性设计 在不断重构的过程中，设计本身也需要支持重构所带来变化。设计自身的某些特性就可以使其易于修改和使用。 每次对模型和代码所进行的修改能够反映出对领域的新理解，不断的重构能给系统最需要修改的地方增添灵活性， 并能找到简单快捷的方式来实现普通的功能。\n「戴久的手套在手指关节处变得柔软；而其他部分已然硬实，可起到保护的作用。」反复的修改能让我们越来越接近柔性设计。\n柔性设计除了便于修改，还有助于改进模型本身。MODEL-DRIVEN DESIGN 需要以下两个方面支持：\n深层模型使设计更具表现力； 同时，当设计的灵活性可以让开发人员进行实验，而设计又能清晰的表达出领域含义时，能够将开发人员的深层理解反馈到整个模型发现的过程中。 这应该是构建系统的基础。\n发现过程 支持不断重构、借用别人已经建好的模式。\n突破 重构创造机遇 关注根本：不要强行突破 概念挖掘 倾听语言 倾听领域专家的语言，思考并表达，观察领域专家的表情，判断自己是否找到了正确的概念（对象）。\n检查不足之处 积极与领域专家沟通，寻找丢失的概念。（注意领域专家的表情）\n思考矛盾之处 矛盾可以合理存在，但是一定要仔细思考两种对立的看法是如何同时应用于同一个外部实现的，这会给我们带来启示。\n查阅书记 通过解释基本概念和传统思想的书籍来寻找概念。\n尝试，再尝试 为隐式概念建模 显式的约束 约束通常式隐含的，将它们显式的表现出来可以极大地提高设计质量。约束有时自然的存在于对象或方法中。\n将过程建模为领域对象 建模方式：\n通过 模式：SERVICE 显式表达。 通过 STRATEGY 表达选择过程：选择变成选择不同的对象，不同对象表示不同的 STRATEGY。 ","permalink":"https://notes.0081800.xyz/notes/20200320171301_%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/","summary":"tags: 正在读的书,读书笔记,DDD 前言和目录 好的软件需要控制复杂性，好的领域模型可以帮助控制复杂性。\n什么样的项目需要 DDD？尝试型的小型项目应该不需要 DDD，但是一旦上了规模考虑后续迭代则需要 DDD。\n本书组织方式：\n领域建模 领域建模的过程就是消化知识的过程，这个过程应该贯穿整个开发过程，需要持续学习。\n模型用来描绘人们所关注的实现或想法的某个方面，比如地图就是模型。\n模型是一种简化，是对实现的解释：把与解决问题密切相关的方面抽象出来，而忽略无关的细节。\n软件问题建模的区域就是软件的领域\n物质世界的领域：机票预订程序涉及的飞机乘客。 无形的领域：会计程序的金融领域。 领域涉及知识信息超载的问题，模型这种知识对知识进行了选择性的简化和有意的结构化。\n领域模型将领域专家头脑中的支持严格的组织且有选择的抽象，并不是尽可能建立一个符合“现实”的模型。\n模型表示 关联 规定一个遍历方向：存在双向联结时（地址 -\u0026gt; 人 或 人 -\u0026gt; 地址）尽量只用一种，并避免互相关联 添加一个限定符，以便有效减少多重关联 消除不必要的关联 表示方式 领域模式 实践 MODEL-DRIVEN DESIGN 隔离领域：引入应用层 应用 LAYERED ARCHITECTURE 把领域层划分出来，通过应用层类来处理应用程序功能。应用层类是协调者，负责提问，领域层负责回答。\n将 ENTITY 和 VALUE OBJECT 区分开 依次考虑对象是必须跟踪的 ENTITY 还是表示一个 VALUE OBJECT。\nAGGREGATE 边界 识别模型中的 AGGREGATE 根和对应的边界。\n选择 REPOSITORY 为 AGGREGATE 根对象建立 REPOSITORY。\n场景走查 根据应用程序特性复核建模，进行场景走查，确保能够有效地解决应用问题。可以走查一些正常和异常业务场景进行复核。\n对象创建 如果对象复杂则创建单独的 FACTORY 类进行对象创建，简单对象可以直接在 AGGREGATE 根上通过 FACTORY METHOD 进行创建。","title":"《领域驱动设计》读书笔记"},{"content":" tags: LeetCode 移除小写字母中重复的字母，让所有字母都只出现一次，并且结果是所有结果中按照字典序排序最小的那个。\nExample 1\nInput: \u0026ldquo;bcabc\u0026rdquo; Output: \u0026ldquo;abc\u0026rdquo; Example 2\nInput: \u0026ldquo;cbacdcbc\u0026rdquo; Output: \u0026ldquo;acdb\u0026rdquo; 解法之一:\n通过一个数组对每一个出现的字母进行计数 遍历每一个字母放入栈，并将该字母的计数减 1 查看栈底的字母有没有比当前字母大且该字母的计数不为 0 的（有比当前更小的字典序），从栈底弹出该字母 func removeDuplicateLetters(s string) string { var countOfEachLetter [26]int var visited [26]bool stack := make([]byte, 0) stackBottom := 0 bytesArr := []byte(s) for _, c := range bytesArr { countOfEachLetter[getIndex(c)]++ } for _, c := range bytesArr { index := getIndex(c) countOfEachLetter[index]-- if visited[index] { continue } // countOfEachLetter[getIndex(stack[stackBottom])] \u0026gt; 0 后面还有该字符 for len(stack[stackBottom:]) \u0026gt; 0 \u0026amp;\u0026amp; stack[stackBottom] \u0026gt; c \u0026amp;\u0026amp; countOfEachLetter[getIndex(stack[stackBottom])] \u0026gt; 0 { // 标记为未访问用于后面的字符加入结果 visited[getIndex(stack[stackBottom])] = false // 移动栈底 stackBottom++ } // 加入到结果栈 stack = append(stack, c) visited[index] = true } return string(stack[stackBottom:]) } func getIndex(b byte) int { return int(b - \u0026#39;a\u0026#39;) } 通过上面解法遇到如下错误：\ntestcase: \u0026lsquo;\u0026ldquo;bbcaac\u0026rdquo;\u0026rsquo; answer: \u0026ldquo;bca\u0026rdquo; expected_answer: \u0026ldquo;bac\u0026rdquo; 经过一番排查不应该从栈底查找，应该从栈顶开始，通过的代码如下：\nfunc removeDuplicateLetters(s string) string { var countOfEachLetter [26]int var visited [26]bool st := \u0026amp;stack{} bytesArr := []byte(s) for _, c := range bytesArr { countOfEachLetter[getIndex(c)]++ } for _, c := range bytesArr { index := getIndex(c) countOfEachLetter[index]-- if visited[index] { continue } // countOfEachLetter[getIndex(st.topChar())] \u0026gt; 0 后面还有该字符 for !st.empty() \u0026amp;\u0026amp; st.topChar() \u0026gt; c \u0026amp;\u0026amp; countOfEachLetter[getIndex(st.topChar())] \u0026gt; 0 { // 标记为未访问用于后面的字符加入结果 visited[getIndex(st.pop())] = false } // 加入到结果栈 st.push(c) visited[index] = true } return st.String() } func getIndex(b byte) int { return int(b - \u0026#39;a\u0026#39;) } type stack struct { top *stackItem bottom *stackItem } type stackItem struct { prev *stackItem next *stackItem c byte } func (s *stack) topChar() byte { return s.top.c } // 从栈顶弹出 func (s *stack) pop() byte { top := s.top s.top = s.top.prev if top == s.bottom { s.bottom = s.top } return top.c } func (s *stack) push(c byte) { new := \u0026amp;stackItem{ prev: s.top, c: c, } if s.bottom == nil { s.bottom = new } if s.top == nil { s.top = new } else { s.top.next = new s.top = new } } func (s *stack) empty() bool { return s.top == nil } func (s *stack) String() string { buf := make([]byte, 0, 10) current := s.bottom for current != nil { buf = append(buf, current.c) current = current.next } return string(buf) } ","permalink":"https://notes.0081800.xyz/notes/20200320172625_leetcode_316_remove_duplicate_letters/","summary":"tags: LeetCode 移除小写字母中重复的字母，让所有字母都只出现一次，并且结果是所有结果中按照字典序排序最小的那个。\nExample 1\nInput: \u0026ldquo;bcabc\u0026rdquo; Output: \u0026ldquo;abc\u0026rdquo; Example 2\nInput: \u0026ldquo;cbacdcbc\u0026rdquo; Output: \u0026ldquo;acdb\u0026rdquo; 解法之一:\n通过一个数组对每一个出现的字母进行计数 遍历每一个字母放入栈，并将该字母的计数减 1 查看栈底的字母有没有比当前字母大且该字母的计数不为 0 的（有比当前更小的字典序），从栈底弹出该字母 func removeDuplicateLetters(s string) string { var countOfEachLetter [26]int var visited [26]bool stack := make([]byte, 0) stackBottom := 0 bytesArr := []byte(s) for _, c := range bytesArr { countOfEachLetter[getIndex(c)]++ } for _, c := range bytesArr { index := getIndex(c) countOfEachLetter[index]-- if visited[index] { continue } // countOfEachLetter[getIndex(stack[stackBottom])] \u0026gt; 0 后面还有该字符 for len(stack[stackBottom:]) \u0026gt; 0 \u0026amp;\u0026amp; stack[stackBottom] \u0026gt; c \u0026amp;\u0026amp; countOfEachLetter[getIndex(stack[stackBottom])] \u0026gt; 0 { // 标记为未访问用于后面的字符加入结果 visited[getIndex(stack[stackBottom])] = false // 移动栈底 stackBottom++ } // 加入到结果栈 stack = append(stack, c) visited[index] = true } return string(stack[stackBottom:]) } func getIndex(b byte) int { return int(b - \u0026#39;a\u0026#39;) } 通过上面解法遇到如下错误：","title":"LeetCode: 316.Remove Duplicate Letters"},{"content":" tags: LeetCode 解法 1 找到中间节点依次往左右扩散：\n向左边扩散，如果左边的大于当前元素，那么当前元素即为最小值 向右边扩散，如果右边的小于当前元素，那么右边元素即为最小值 如果以上不成立则第一个元素为最小元素（未旋转），以下是代码\nfunc findMin(nums []int) int { length := len(nums) if length == 1 { return nums[0] } // 从中间开始确定方向 mid := length / 2 - 1 left, right := mid, mid for left - 1 \u0026gt;= 0 || right + 1 \u0026lt; length { if left - 1 \u0026gt;= 0 { if nums[left - 1] \u0026gt; nums[left] { return nums[left]; } left-- } if right + 1 \u0026lt; length { if nums[right] \u0026gt; nums[right + 1] { return nums[right + 1] } right++ } } return nums[0] } 优化 参考答案后可通过二分查找做如下优化，首先判断是否被旋转：\n如果数组尾部的元素大于首部的元素则表示数组未被旋转，可以直接返回第一个元素。 由于是从一个有序数组旋转的，所以以上条件可以保证。 然后再判断方向：\n如果所取中间元素大于数组的第一个元素则最小元素在右边 否则最小元素在左边 func findMin(nums []int) int { length := len(nums) if nums[0] \u0026lt;= nums[length - 1]{ return nums[0] } if length == 2 { return nums[1] } left, right := 0, length - 1 for left \u0026lt; right { mid := left + ((right - left) / 2) if nums[mid] \u0026gt; nums[mid + 1] { return nums[mid + 1] } if nums[mid - 1] \u0026gt; nums[mid] { return nums[mid] } if nums[mid] \u0026gt; nums[0] { left = mid + 1 } else { right = mid - 1 } } return -1 } ","permalink":"https://notes.0081800.xyz/notes/20200320172433_leetcode_153_find_minimum_in_rotated_sorted_array/","summary":"tags: LeetCode 解法 1 找到中间节点依次往左右扩散：\n向左边扩散，如果左边的大于当前元素，那么当前元素即为最小值 向右边扩散，如果右边的小于当前元素，那么右边元素即为最小值 如果以上不成立则第一个元素为最小元素（未旋转），以下是代码\nfunc findMin(nums []int) int { length := len(nums) if length == 1 { return nums[0] } // 从中间开始确定方向 mid := length / 2 - 1 left, right := mid, mid for left - 1 \u0026gt;= 0 || right + 1 \u0026lt; length { if left - 1 \u0026gt;= 0 { if nums[left - 1] \u0026gt; nums[left] { return nums[left]; } left-- } if right + 1 \u0026lt; length { if nums[right] \u0026gt; nums[right + 1] { return nums[right + 1] } right++ } } return nums[0] } 优化 参考答案后可通过二分查找做如下优化，首先判断是否被旋转：","title":"LeetCode: 153.Find Minimum in Rotated Sorted Array"},{"content":" tags: LeetCode 思路 这个是 LeetCode: 153.Find Minimum in Rotated Sorted Array 扩展，增加了以下几种边界情况：\n\u0026lsquo;[2, 2, 2, 2, 1]\u0026rsquo; \u0026lsquo;[3, 1, 3]\u0026rsquo; \u0026lsquo;[1, 1, 1]\u0026rsquo; \u0026lsquo;[10, 1, 10, 10, 10]\u0026rsquo; 但核心依然是判断最小值是在左边还是右边。假设如下数组：\n\u0026lsquo;[3, 3, 3, 1, 3]\u0026rsquo;\nleft[0]=3, right[4]=3, mid[2]=3, 这时候不确定最小值在哪边但是 right\u0026ndash; 是安全的，所以执行 right\u0026ndash;\nleft[0]=3, right[3]=1, mid[2]=3, 这时候 mid \u0026lt; right 说明最小值在 mid 的右边，所以调整 left = mid + 1\n左右两边索引一致终止循环\n实现 func findMin(nums []int) int { length := len(nums) left, right := 0, length - 1 for left \u0026lt; right { mid := (left + right) / 2 if nums[mid] \u0026gt; nums[right] { left = mid + 1 } else if nums[mid] \u0026lt; nums[right] { right = mid } else { right-- } } return nums[right] } ","permalink":"https://notes.0081800.xyz/notes/20200320172319_154_find_minimum_in_rotated_sorted_array_ii/","summary":" tags: LeetCode 思路 这个是 LeetCode: 153.Find Minimum in Rotated Sorted Array 扩展，增加了以下几种边界情况：\n\u0026lsquo;[2, 2, 2, 2, 1]\u0026rsquo; \u0026lsquo;[3, 1, 3]\u0026rsquo; \u0026lsquo;[1, 1, 1]\u0026rsquo; \u0026lsquo;[10, 1, 10, 10, 10]\u0026rsquo; 但核心依然是判断最小值是在左边还是右边。假设如下数组：\n\u0026lsquo;[3, 3, 3, 1, 3]\u0026rsquo;\nleft[0]=3, right[4]=3, mid[2]=3, 这时候不确定最小值在哪边但是 right\u0026ndash; 是安全的，所以执行 right\u0026ndash;\nleft[0]=3, right[3]=1, mid[2]=3, 这时候 mid \u0026lt; right 说明最小值在 mid 的右边，所以调整 left = mid + 1\n左右两边索引一致终止循环\n实现 func findMin(nums []int) int { length := len(nums) left, right := 0, length - 1 for left \u0026lt; right { mid := (left + right) / 2 if nums[mid] \u0026gt; nums[right] { left = mid + 1 } else if nums[mid] \u0026lt; nums[right] { right = mid } else { right-- } } return nums[right] } ","title":"LeetCode: 154.Find Minimum in Rotated Sorted Array II"},{"content":" tags: LeetCode 准备 动态规划\n实践 字符串 \u0026ldquo;abcabcbb\u0026rdquo;\n根据索引有如下关系\na b c a b c b b 0 1 2 3 4 5 6 7 \\(f(0,1)=f(0,0) + 1\\) \\(f(0,2)=f(0,1) + 2\\) 在所有字符都不重复的情况下有如下公式\n\\(f(s,e)=f(s,e-1) + e\\)\n若遇到重复的情况则，3 索引于当前字串 的 0 重复则表明当前字串已经到头，需要记录并偏移 s，s=1：\n\\(f(1,3)=f(1,2)+3\\) 假设：\ns - 开始字符索引 e - 结束字符索引 若遇到当前字符于前面 r 字符重复则： \\[ f(r,e)=f(s,e - 1) + e; s=r \\]\n解法 func lengthOfLongestSubstring(s string) int { if len(s) == 0 { return 0 } appearedIndexes := [256]int{} for i := 0; i \u0026lt; 256; i++{ appearedIndexes[i] = -1 } longest, start, end := 0, 0, 0 b := []byte(s) for cIndex, c := range b { index := int(c) appearedIndex := appearedIndexes[index] end = cIndex // 出现过需要截断 if appearedIndex != -1 { // 重置已出现的字符 for i := start; i \u0026lt;= appearedIndex; i++{ appearedIndexes[b[i]] = -1 } length := end - start if length \u0026gt; longest { longest = length } start = appearedIndex+1 } appearedIndexes[index] = cIndex } if end - start + 1 \u0026gt; longest { longest = end - start + 1 } return longest } ","permalink":"https://notes.0081800.xyz/notes/20200320172810_leetcode_3_longest_substring_without_repeating_characters/","summary":"tags: LeetCode 准备 动态规划\n实践 字符串 \u0026ldquo;abcabcbb\u0026rdquo;\n根据索引有如下关系\na b c a b c b b 0 1 2 3 4 5 6 7 \\(f(0,1)=f(0,0) + 1\\) \\(f(0,2)=f(0,1) + 2\\) 在所有字符都不重复的情况下有如下公式\n\\(f(s,e)=f(s,e-1) + e\\)\n若遇到重复的情况则，3 索引于当前字串 的 0 重复则表明当前字串已经到头，需要记录并偏移 s，s=1：\n\\(f(1,3)=f(1,2)+3\\) 假设：\ns - 开始字符索引 e - 结束字符索引 若遇到当前字符于前面 r 字符重复则： \\[ f(r,e)=f(s,e - 1) + e; s=r \\]\n解法 func lengthOfLongestSubstring(s string) int { if len(s) == 0 { return 0 } appearedIndexes := [256]int{} for i := 0; i \u0026lt; 256; i++{ appearedIndexes[i] = -1 } longest, start, end := 0, 0, 0 b := []byte(s) for cIndex, c := range b { index := int(c) appearedIndex := appearedIndexes[index] end = cIndex // 出现过需要截断 if appearedIndex !","title":"LeetCode: 3.Longest Substring Without Repeating Characters"},{"content":" tags: LeetCode 思路 归并排序\n代码 func findMedianSortedArrays(nums1 []int, nums2 []int) float64 { nums := mergeSort(nums1, nums2) length := len(nums) if length % 2 != 0 { return float64(nums[(length - 1) / 2]) } i := length / 2 return (float64(nums[i]) + float64(nums[i - 1])) / 2 } func mergeSort(nums1 []int, nums2 []int) []int { l1 := len(nums1) l2 := len(nums2) result := make([]int, 0, l1 + l2) i, j := 0, 0 for i \u0026lt; l1 \u0026amp;\u0026amp; j \u0026lt; l2 { if nums1[i] \u0026lt; nums2[j] { result = append(result, nums1[i]) i++ } else { result = append(result, nums2[j]) j++ } } result = append(result, nums1[i:]...) result = append(result, nums2[j:]...) return result } ","permalink":"https://notes.0081800.xyz/notes/20200320172945_leetcode_4_median_of_two_sorted_arrays/","summary":"tags: LeetCode 思路 归并排序\n代码 func findMedianSortedArrays(nums1 []int, nums2 []int) float64 { nums := mergeSort(nums1, nums2) length := len(nums) if length % 2 != 0 { return float64(nums[(length - 1) / 2]) } i := length / 2 return (float64(nums[i]) + float64(nums[i - 1])) / 2 } func mergeSort(nums1 []int, nums2 []int) []int { l1 := len(nums1) l2 := len(nums2) result := make([]int, 0, l1 + l2) i, j := 0, 0 for i \u0026lt; l1 \u0026amp;\u0026amp; j \u0026lt; l2 { if nums1[i] \u0026lt; nums2[j] { result = append(result, nums1[i]) i++ } else { result = append(result, nums2[j]) j++ } } result = append(result, nums1[i:].","title":"LeetCode: 4.Median of Two Sorted Arrays"},{"content":" tags: LeetCode \u0026gt; https://leetcode.com/problems/longest-palindromic-substring/description/\n思路 直接暴力往两边搜索\nfunc longestPalindrome(s string) string { buf := []byte(s) length := len(buf) if length == 0 { return s } start, end := 0, 0 for ci, _ := range buf { i, j := ci, ci // 无法处理 \u0026#34;aaaa\u0026#34; 和 \u0026#34;noon\u0026#34; 这种情况 for i \u0026gt; 0 \u0026amp;\u0026amp; j \u0026lt; length - 1 \u0026amp;\u0026amp; buf[i - 1] == buf[j + 1] { i-- j++ } // 考虑 \u0026#34;bba\u0026#34; 这种情况 if i == j \u0026amp;\u0026amp; ci \u0026gt; 0 \u0026amp;\u0026amp; buf[ci] == buf[ci - 1] { i, j = ci-1, ci } // 考虑 \u0026#34;abb\u0026#34; 这种情况 if i == j \u0026amp;\u0026amp; ci \u0026lt; length - 1 \u0026amp;\u0026amp; buf[ci] == buf[ci + 1] { i, j = ci, ci + 1 } if i != j \u0026amp;\u0026amp; j - i \u0026gt;= end - start { start, end = i, j } } return string(buf[start:end + 1]) } 上面代码无法处理 \u0026ldquo;aaaa\u0026rdquo; 和 \u0026ldquo;noon\u0026rdquo; 这种情况，只要把下面处理 \u0026ldquo;bba\u0026rdquo; 和 \u0026ldquo;abb\u0026rdquo; 情况的代码放到上面即可\nfunc longestPalindrome(s string) string { buf := []byte(s) length := len(buf) if length == 0 { return s } start, end := 0, 0 for ci, _ := range buf { i, j := ci, ci if i == j \u0026amp;\u0026amp; ci \u0026gt; 0 \u0026amp;\u0026amp; buf[ci] == buf[ci - 1] { i, j = ci-1, ci } if i == j \u0026amp;\u0026amp; ci \u0026lt; length - 1 \u0026amp;\u0026amp; buf[ci] == buf[ci + 1] { i, j = ci, ci + 1 } for i \u0026gt; 0 \u0026amp;\u0026amp; j \u0026lt; length - 1 \u0026amp;\u0026amp; buf[i - 1] == buf[j + 1] { i-- j++ } if i != j \u0026amp;\u0026amp; j - i \u0026gt;= end - start { start, end = i, j } } return string(buf[start:end + 1]) } 但上面又导致 \u0026ldquo;ccc\u0026rdquo; 无法处理，所以需要处理两种情况：\n以当前字符为中心向两边扩散 以当前字符和下一个字符为中心向两边扩散 对比以上两个结果取大的那个，调整后如下\nfunc longestPalindrome(s string) string { buf := []byte(s) length := len(buf) if length == 0 { return s } start, end := 0, 0 for ci, _ := range buf { i, j := ci, ci for i \u0026gt; 0 \u0026amp;\u0026amp; j \u0026lt; length - 1 \u0026amp;\u0026amp; buf[i - 1] == buf[j + 1] { i-- j++ } if i != j \u0026amp;\u0026amp; j - i \u0026gt;= end - start { start, end = i, j } i, j = ci, ci + 1 if j \u0026lt; length \u0026amp;\u0026amp; buf[i] == buf[j] { for i \u0026gt; 0 \u0026amp;\u0026amp; j \u0026lt; length - 1 \u0026amp;\u0026amp; buf[i - 1] == buf[j + 1] { i-- j++ } if i != j \u0026amp;\u0026amp; j - i \u0026gt;= end - start { start, end = i, j } } } return string(buf[start:end + 1]) } ","permalink":"https://notes.0081800.xyz/notes/20200320173438_leetcode_5_longest_palindromic_substring/","summary":"tags: LeetCode \u0026gt; https://leetcode.com/problems/longest-palindromic-substring/description/\n思路 直接暴力往两边搜索\nfunc longestPalindrome(s string) string { buf := []byte(s) length := len(buf) if length == 0 { return s } start, end := 0, 0 for ci, _ := range buf { i, j := ci, ci // 无法处理 \u0026#34;aaaa\u0026#34; 和 \u0026#34;noon\u0026#34; 这种情况 for i \u0026gt; 0 \u0026amp;\u0026amp; j \u0026lt; length - 1 \u0026amp;\u0026amp; buf[i - 1] == buf[j + 1] { i-- j++ } // 考虑 \u0026#34;bba\u0026#34; 这种情况 if i == j \u0026amp;\u0026amp; ci \u0026gt; 0 \u0026amp;\u0026amp; buf[ci] == buf[ci - 1] { i, j = ci-1, ci } // 考虑 \u0026#34;abb\u0026#34; 这种情况 if i == j \u0026amp;\u0026amp; ci \u0026lt; length - 1 \u0026amp;\u0026amp; buf[ci] == buf[ci + 1] { i, j = ci, ci + 1 } if i !","title":"LeetCode: 5.Longest Palindromic Substring"},{"content":" tags: LeetCode srouce: https://leetcode.com/problems/zigzag-conversion/description/ 先根据行数计算列数：\n\\(column=length / (row + 2) + bool(length \\mod (row + 2))\\)\n每一行必然有点的位置为：\n\\(i \\mod (row - 1)\\) 为 0\n","permalink":"https://notes.0081800.xyz/notes/20200320173548_leetcode_6_zigzag_conversion/","summary":"tags: LeetCode srouce: https://leetcode.com/problems/zigzag-conversion/description/ 先根据行数计算列数：\n\\(column=length / (row + 2) + bool(length \\mod (row + 2))\\)\n每一行必然有点的位置为：\n\\(i \\mod (row - 1)\\) 为 0","title":"LeetCode: 6.ZigZag Conversion"},{"content":"","permalink":"https://notes.0081800.xyz/notes/20200320173956_mysql/","summary":"","title":"MySQL"},{"content":" tags: 读书笔记,Rust\n语句和表达式\n所有权\n引用和借用\n结构体\n枚举\n模式匹配\nif let\n模块化\n错误处理\nTraits\n生命周期\n闭包\n迭代器\n智能指针\nRust 宏\nRust 并发\n函数指针 fn 区分闭包的 Fn 特性，函数指针都实现来三个闭包的特性。\nfn do(f: fn(i32) -\u0026gt; i32, arg: i32) -\u0026gt; i32 { f(arg) + f(arg) } ","permalink":"https://notes.0081800.xyz/notes/20200325165411_the_rust_programming_language/","summary":" tags: 读书笔记,Rust\n语句和表达式\n所有权\n引用和借用\n结构体\n枚举\n模式匹配\nif let\n模块化\n错误处理\nTraits\n生命周期\n闭包\n迭代器\n智能指针\nRust 宏\nRust 并发\n函数指针 fn 区分闭包的 Fn 特性，函数指针都实现来三个闭包的特性。\nfn do(f: fn(i32) -\u0026gt; i32, arg: i32) -\u0026gt; i32 { f(arg) + f(arg) } ","title":"《The Rust Programming Language》读书笔记"},{"content":"Email gary (at) linuxzen.com\nGPG Public Key $ gpg --keyserver hkp://keyserver.ubuntu.com --receive-keys 0x545B28D6B0C86C12 ","permalink":"https://notes.0081800.xyz/about/","summary":"About me","title":"About"}]