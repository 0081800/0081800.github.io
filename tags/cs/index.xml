<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cs on Taking Smart Notes With Org-mode</title>
    <link>https://www.linuxzen.com/notes/tags/cs/</link>
    <description>Recent content in cs on Taking Smart Notes With Org-mode</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 02 Aug 2020 15:50:00 +0800</lastBuildDate><atom:link href="https://www.linuxzen.com/notes/tags/cs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>汇编</title>
      <link>https://www.linuxzen.com/notes/notes/20200802155053-%E6%B1%87%E7%BC%96/</link>
      <pubDate>Sun, 02 Aug 2020 15:50:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200802155053-%E6%B1%87%E7%BC%96/</guid>
      <description>tags: Computer Systems,《深入理解计算机系统》读书笔记 程序编码 $ gcc -Og -S mstore.c # outputs mstore.s $ gcc -Og -c mstore.c # outptus mstore.o $ objdump -d mstore.o 所有以 ‘.’ 开头额行都是指导汇编器和链接器工作额伪指令。
数据格式 C 声明 Intel 数据类型 汇编代码后缀 大小（字节） char 字节 b 1 short 字 w 2 int 双字 l 4 long 四字 q 8 char* 四字 q 8 float 单精度 l 4 double 双精度 q 8 访问信息 寄存器 一个 x86-64 的中央处理单元（CPU）包含一组 16 个存储 64 位值的 通用目的寄存器 。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200802151319-computer_systems/&#34;&gt;Computer Systems&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220102072835-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/&#34;&gt;《深入理解计算机系统》读书笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;程序编码&#34;&gt;程序编码&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gcc -Og -S mstore.c  &lt;span style=&#34;color:#75715e&#34;&gt;# outputs mstore.s&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gcc -Og -c mstore.c  &lt;span style=&#34;color:#75715e&#34;&gt;# outptus mstore.o&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ objdump -d mstore.o
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所有以 ‘.’ 开头额行都是指导汇编器和链接器工作额伪指令。&lt;/p&gt;
&lt;h2 id=&#34;数据格式&#34;&gt;数据格式&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;C 声明&lt;/th&gt;
&lt;th&gt;Intel 数据类型&lt;/th&gt;
&lt;th&gt;汇编代码后缀&lt;/th&gt;
&lt;th&gt;大小（字节）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;char&lt;/td&gt;
&lt;td&gt;字节&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;short&lt;/td&gt;
&lt;td&gt;字&lt;/td&gt;
&lt;td&gt;w&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;双字&lt;/td&gt;
&lt;td&gt;l&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;long&lt;/td&gt;
&lt;td&gt;四字&lt;/td&gt;
&lt;td&gt;q&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;char*&lt;/td&gt;
&lt;td&gt;四字&lt;/td&gt;
&lt;td&gt;q&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;单精度&lt;/td&gt;
&lt;td&gt;l&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;td&gt;双精度&lt;/td&gt;
&lt;td&gt;q&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;访问信息&#34;&gt;访问信息&lt;/h2&gt;
&lt;h3 id=&#34;寄存器&#34;&gt;寄存器&lt;/h3&gt;
&lt;p&gt;一个 x86-64 的中央处理单元（CPU）包含一组 16 个存储 64 位值的 &lt;code&gt;通用目的寄存器&lt;/code&gt; 。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;四字&lt;/th&gt;
&lt;th&gt;双字&lt;/th&gt;
&lt;th&gt;字&lt;/th&gt;
&lt;th&gt;字节&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;%rax&lt;/td&gt;
&lt;td&gt;%eax&lt;/td&gt;
&lt;td&gt;%ax&lt;/td&gt;
&lt;td&gt;%al&lt;/td&gt;
&lt;td&gt;返回值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%rbx&lt;/td&gt;
&lt;td&gt;%ebx&lt;/td&gt;
&lt;td&gt;%bx&lt;/td&gt;
&lt;td&gt;%bl&lt;/td&gt;
&lt;td&gt;被调用者保存&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%rcx&lt;/td&gt;
&lt;td&gt;%ecx&lt;/td&gt;
&lt;td&gt;%cx&lt;/td&gt;
&lt;td&gt;%cl&lt;/td&gt;
&lt;td&gt;第四个参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%rdx&lt;/td&gt;
&lt;td&gt;%edx&lt;/td&gt;
&lt;td&gt;%dx&lt;/td&gt;
&lt;td&gt;%dl&lt;/td&gt;
&lt;td&gt;第三个参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%rsi&lt;/td&gt;
&lt;td&gt;%esi&lt;/td&gt;
&lt;td&gt;%si&lt;/td&gt;
&lt;td&gt;%sil&lt;/td&gt;
&lt;td&gt;第二个参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%rdi&lt;/td&gt;
&lt;td&gt;%edi&lt;/td&gt;
&lt;td&gt;%di&lt;/td&gt;
&lt;td&gt;%dil&lt;/td&gt;
&lt;td&gt;第一个参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%rbp&lt;/td&gt;
&lt;td&gt;%ebp&lt;/td&gt;
&lt;td&gt;%bp&lt;/td&gt;
&lt;td&gt;%bpl&lt;/td&gt;
&lt;td&gt;被调用者保存&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%rsp&lt;/td&gt;
&lt;td&gt;%esp&lt;/td&gt;
&lt;td&gt;%sp&lt;/td&gt;
&lt;td&gt;%spl&lt;/td&gt;
&lt;td&gt;栈指针&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%r8&lt;/td&gt;
&lt;td&gt;%r8d&lt;/td&gt;
&lt;td&gt;%r8w&lt;/td&gt;
&lt;td&gt;%r8b&lt;/td&gt;
&lt;td&gt;第五个参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%r9&lt;/td&gt;
&lt;td&gt;%r9d&lt;/td&gt;
&lt;td&gt;%r9w&lt;/td&gt;
&lt;td&gt;%r9b&lt;/td&gt;
&lt;td&gt;第六个参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%r10&lt;/td&gt;
&lt;td&gt;%r10d&lt;/td&gt;
&lt;td&gt;%r10w&lt;/td&gt;
&lt;td&gt;%r10b&lt;/td&gt;
&lt;td&gt;调用者保存&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%r11&lt;/td&gt;
&lt;td&gt;%r11d&lt;/td&gt;
&lt;td&gt;%r11w&lt;/td&gt;
&lt;td&gt;%r11b&lt;/td&gt;
&lt;td&gt;调用者保存&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%r12&lt;/td&gt;
&lt;td&gt;%r12d&lt;/td&gt;
&lt;td&gt;%r12w&lt;/td&gt;
&lt;td&gt;%r11b&lt;/td&gt;
&lt;td&gt;被调用者保存&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%r13&lt;/td&gt;
&lt;td&gt;%r13d&lt;/td&gt;
&lt;td&gt;%r13w&lt;/td&gt;
&lt;td&gt;%r13b&lt;/td&gt;
&lt;td&gt;被调用者保存&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%r14&lt;/td&gt;
&lt;td&gt;%r14d&lt;/td&gt;
&lt;td&gt;%r14w&lt;/td&gt;
&lt;td&gt;%r14&lt;/td&gt;
&lt;td&gt;被调用者保存&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%r15&lt;/td&gt;
&lt;td&gt;%r15d&lt;/td&gt;
&lt;td&gt;%r15w&lt;/td&gt;
&lt;td&gt;%r15&lt;/td&gt;
&lt;td&gt;被调用者保存&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;相关规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生成 1 字节和 2 字节数字的指令会保持剩下的字节不变&lt;/li&gt;
&lt;li&gt;生成 4 字节的数字的指令会把高位 4 个字节设置为 0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;寄存器的使用有一组编程规范控制着如何来管理栈、传递参数、从函数返回值，以及存储局部和临时数据。
%rsp 用来指明运行时栈的结束位置。&lt;/p&gt;
&lt;h3 id=&#34;操作数指示符&#34;&gt;操作数指示符&lt;/h3&gt;
&lt;p&gt;分为几类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;立即数（字面量）&lt;/li&gt;
&lt;li&gt;寄存器&lt;/li&gt;
&lt;li&gt;内存引用（支持多种寻址模式）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;假设寄存器是一个数组 R，内存是一个大的字节数组，寻址方式为索引，如 M[0] 就是访问内存的第一个字节。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;格式&lt;/th&gt;
&lt;th&gt;操作数值&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;例子&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;立即数&lt;/td&gt;
&lt;td&gt;$Imm&lt;/td&gt;
&lt;td&gt;Imm&lt;/td&gt;
&lt;td&gt;立即数寻址&lt;/td&gt;
&lt;td&gt;$0x08&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;寄存器&lt;/td&gt;
&lt;td&gt;\(r_a\)&lt;/td&gt;
&lt;td&gt;\(R[r_a]\)&lt;/td&gt;
&lt;td&gt;寄存器寻址&lt;/td&gt;
&lt;td&gt;%rdx&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;存储器&lt;/td&gt;
&lt;td&gt;Imm&lt;/td&gt;
&lt;td&gt;M[Imm]&lt;/td&gt;
&lt;td&gt;绝对寻址&lt;/td&gt;
&lt;td&gt;0x80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;存储器&lt;/td&gt;
&lt;td&gt;(\(r_a\))&lt;/td&gt;
&lt;td&gt;M[R[\(r_a\)]]&lt;/td&gt;
&lt;td&gt;间接寻址&lt;/td&gt;
&lt;td&gt;(%rdx)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;存储器&lt;/td&gt;
&lt;td&gt;Imm(\(r_b\))&lt;/td&gt;
&lt;td&gt;M[Imm+R[\(r_b\)]]&lt;/td&gt;
&lt;td&gt;（基址 + 偏移量）寻址&lt;/td&gt;
&lt;td&gt;0x08(%rdx)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;存储器&lt;/td&gt;
&lt;td&gt;(\(r_b\),\(r_i\))&lt;/td&gt;
&lt;td&gt;M[R[\(r_b\)] + R[\(r_i\)]]&lt;/td&gt;
&lt;td&gt;变址寻址&lt;/td&gt;
&lt;td&gt;(%rdx,%rdx)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;存储器&lt;/td&gt;
&lt;td&gt;Imm(\(r_b\),\(r_i\))&lt;/td&gt;
&lt;td&gt;M[Imm + R[\(r_b\)] + R[\(r_i\)]]&lt;/td&gt;
&lt;td&gt;变址寻址&lt;/td&gt;
&lt;td&gt;0x08(%rdx,%rdx)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;存储器&lt;/td&gt;
&lt;td&gt;(,\(r_i\),s)&lt;/td&gt;
&lt;td&gt;M[R[\(r_i\)] * s]&lt;/td&gt;
&lt;td&gt;比例变址寻址&lt;/td&gt;
&lt;td&gt;(,%rdx,0x08)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;存储器&lt;/td&gt;
&lt;td&gt;Imm(,\(r_i\),s)&lt;/td&gt;
&lt;td&gt;M[Imm + R[\(r_i\)] * s]&lt;/td&gt;
&lt;td&gt;比例变址寻址&lt;/td&gt;
&lt;td&gt;0x08(,%rdx,0x08)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;存储器&lt;/td&gt;
&lt;td&gt;(\(r_b\),\(r_i\),s)&lt;/td&gt;
&lt;td&gt;M[R[\(r_b\)]+R[\(r_i\)] * s]&lt;/td&gt;
&lt;td&gt;比例变址寻址&lt;/td&gt;
&lt;td&gt;(%rdx,%rdx,0x08)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;存储器&lt;/td&gt;
&lt;td&gt;Imm(\(r_b\),\(r_i\),s)&lt;/td&gt;
&lt;td&gt;M[Imm + R[\(r_b\)]+R[\(r_i\)] * s]&lt;/td&gt;
&lt;td&gt;比例变址寻址&lt;/td&gt;
&lt;td&gt;0x08(%rdx,%rdx,0x08)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;数据传送指令&#34;&gt;数据传送指令&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;变体&lt;/th&gt;
&lt;th&gt;效果&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;MOV S,D&lt;/td&gt;
&lt;td&gt;movb/movw/movl/movq&lt;/td&gt;
&lt;td&gt;D&amp;lt;-S&lt;/td&gt;
&lt;td&gt;传送&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MOVABSQ 1,R&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;R&amp;lt;-1&lt;/td&gt;
&lt;td&gt;传送绝对的四字&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MOVZ S,R&lt;/td&gt;
&lt;td&gt;movzbw/movzbl/movzwl/movzbq/movzwq&lt;/td&gt;
&lt;td&gt;R&amp;lt;-零扩展(S)&lt;/td&gt;
&lt;td&gt;以零扩展进行传送&lt;/td&gt;
&lt;td&gt;目标只能是寄存器，后缀 bw  表示字节传送到字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MOVS S,R&lt;/td&gt;
&lt;td&gt;movsbw/movsbl/movswl/movsbq/movswq/movslq&lt;/td&gt;
&lt;td&gt;R&amp;lt;-符号扩展(S)&lt;/td&gt;
&lt;td&gt;以符号扩展进行传送&lt;/td&gt;
&lt;td&gt;同上&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cltq&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;%rax&amp;lt;-符号扩展(%eax)&lt;/td&gt;
&lt;td&gt;把 %eax 符号扩展到 %rax&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;压入和弹出栈数据&#34;&gt;压入和弹出栈数据&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;效果&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;pushq S&lt;/td&gt;
&lt;td&gt;R[%rsp]&amp;lt;-R[%rsp]-0x08; M[R[%rsp]]&amp;lt;-R&lt;/td&gt;
&lt;td&gt;将四字压入栈&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;popq D&lt;/td&gt;
&lt;td&gt;D&amp;lt;-M[R[%rsp]];R[%rsp]&amp;lt;-R[%rsp]+0x08&lt;/td&gt;
&lt;td&gt;将四字弹出栈&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;算数和逻辑操作&#34;&gt;算数和逻辑操作&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;分类&lt;/th&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;效果&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;leaq&lt;/td&gt;
&lt;td&gt;leaq S,D&lt;/td&gt;
&lt;td&gt;D&amp;lt;-&amp;amp;S&lt;/td&gt;
&lt;td&gt;加载有效地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;一元&lt;/td&gt;
&lt;td&gt;INC D&lt;/td&gt;
&lt;td&gt;D &amp;lt;- D + 1&lt;/td&gt;
&lt;td&gt;加 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;DEC D&lt;/td&gt;
&lt;td&gt;D &amp;lt;- D - 1&lt;/td&gt;
&lt;td&gt;减 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;NEG D&lt;/td&gt;
&lt;td&gt;D &amp;lt;- -D&lt;/td&gt;
&lt;td&gt;取负&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;NOT D&lt;/td&gt;
&lt;td&gt;D &amp;lt;- ~D&lt;/td&gt;
&lt;td&gt;取补&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;二元&lt;/td&gt;
&lt;td&gt;ADD S,D&lt;/td&gt;
&lt;td&gt;D &amp;lt;- D + S&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;SUB S,D&lt;/td&gt;
&lt;td&gt;D &amp;lt;- D - S&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;IMUL S,D&lt;/td&gt;
&lt;td&gt;D &amp;lt;- D * S&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;XOR  S,D&lt;/td&gt;
&lt;td&gt;D &amp;lt;- D ^ S&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;OR S,D&lt;/td&gt;
&lt;td&gt;D &amp;lt;- D ｜ S&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;AND S,D&lt;/td&gt;
&lt;td&gt;D &amp;lt;- D &amp;amp; S&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;位移&lt;/td&gt;
&lt;td&gt;SAL k,D&lt;/td&gt;
&lt;td&gt;D &amp;lt;- D &amp;lt;&amp;lt; k&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;SHL k,D&lt;/td&gt;
&lt;td&gt;D &amp;lt;- D &amp;lt;&amp;lt; k&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;SAR k,D&lt;/td&gt;
&lt;td&gt;D &amp;lt;- D &amp;gt;&amp;gt; k&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200802165150-%E7%AE%97%E6%95%B0%E5%8F%B3%E7%A7%BB/&#34;&gt;算数右移&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;SHR k,D&lt;/td&gt;
&lt;td&gt;D &amp;lt;- D &amp;gt;&amp;gt; k&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20200802165502-%E9%80%BB%E8%BE%91%E5%8F%B3%E7%A7%BB/&#34;&gt;逻辑右移&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;特殊&lt;/td&gt;
&lt;td&gt;imulq S&lt;/td&gt;
&lt;td&gt;R[%rdx]: R[%rax] &amp;lt;- S x R[%rax]&lt;/td&gt;
&lt;td&gt;有符号全乘法（支持两个 64 位的数字全 128 位乘积，用两个寄存器表示 8 字）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;mulq&lt;/td&gt;
&lt;td&gt;R[%rdx]: R[%rax] &amp;lt;- S x R[%rax]&lt;/td&gt;
&lt;td&gt;无符号全乘法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;cqto&lt;/td&gt;
&lt;td&gt;R[%rdx]: R[%rax] &amp;lt;- 符号扩展(R[%rax])&lt;/td&gt;
&lt;td&gt;转换为 8 字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;idivq S&lt;/td&gt;
&lt;td&gt;R[%rdx] &amp;lt;- R[%rdx]: R[%rax] mod S&lt;/td&gt;
&lt;td&gt;有符号除法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;R[%rdx] &amp;lt;- (R[%rdx]: R[%rax]) / S&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;divq  S&lt;/td&gt;
&lt;td&gt;同上&lt;/td&gt;
&lt;td&gt;无符号除法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;leaq 将计算出的有效地址写入到目标寄存器，可以根据比例变址寻址进行复杂的数值计算。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;long t = x + 4 * y + 12 * z&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ASM&#34; data-lang=&#34;ASM&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;; x in %rdi, y in %rsi, z in %rdx
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scale:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;leaq&lt;/span&gt; (%rdi,%rsi,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;), %rax   &lt;span style=&#34;color:#75715e&#34;&gt;; x + 4*y
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;leaq&lt;/span&gt; (%rdx,%rdx,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), %rdx   &lt;span style=&#34;color:#75715e&#34;&gt;; z + 2*z = 3 * z
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;leaq&lt;/span&gt; (%rax,%rdx,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;), %rax   &lt;span style=&#34;color:#75715e&#34;&gt;; (x + 4*y) + 4*(3*z) = x + 4*y + 12*z
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;控制&#34;&gt;控制&lt;/h2&gt;
&lt;p&gt;测试数据值，然后根据测试的结果来改变控制流或者数据流。jump 指令可以指定控制应该被传递到程序的某个其他部分。&lt;/p&gt;
&lt;h3 id=&#34;条件码&#34;&gt;条件码&lt;/h3&gt;
&lt;p&gt;条件码寄存器存储了单个位的条件码来描述最近的算术或者逻辑操作的属性。常用的条件码有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CF：进位标志。最近的操作使最高位产生了进位。用来检查无符号操作的溢出。&lt;/li&gt;
&lt;li&gt;ZF：零标志。最近操作得出的结果为 0。&lt;/li&gt;
&lt;li&gt;SF：符号标志。最近的操作结果为负数。&lt;/li&gt;
&lt;li&gt;OF：溢出标志。最近的操作导致一个补码溢出 &amp;ndash; 正溢出或负溢出。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;leaq 不改变任何条件码。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>IEEE 浮点数</title>
      <link>https://www.linuxzen.com/notes/notes/20200802151523-ieee_%E6%B5%AE%E7%82%B9%E6%95%B0/</link>
      <pubDate>Sun, 02 Aug 2020 15:15:00 +0800</pubDate>
      
      <guid>https://www.linuxzen.com/notes/notes/20200802151523-ieee_%E6%B5%AE%E7%82%B9%E6%95%B0/</guid>
      <description>tags: Computer Systems,《深入理解计算机系统》读书笔记 浮点数小数表示形式 .0111 = \(0x2^{-1}+2^{-2}+2^{-3}+2^{-4}\)
IEEE 浮点数表示形式 \[ V=(-1)^s X M X 2^E \]
s = 0 表示负数， s = 1 表示正数 M 是二进制表示的小数 E 是阶码 浮点数二进制组成 一个单独符号位 s 表吗符合 k 位阶码字段 exp 编码阶码 E n 位小数字段 frac 编码尾数 M 两种常见的格式 float s = 1 k = 8 n = 23 double s = 1 k = 11 n = 52 三种计算方式 前置的一些值
e 是 exp 位表示的无符号数 f 是 frac 位表示的小数 \(Bias = 2^{k-1} -1\) 规格化的值 规则：阶码字段 exp 的位模式即不全为 0，也不全为 1（单精度 255，双精度 2047） 计算方式 \(E = e - Bias\) $M = 1 + f $ 非规格化的值 规则：阶码字段 exp 全是 0（用于表示 0） 计算方式 \(E = 1 - Bias\) \(M = f\) 可以表示 +0 和 -0。</description>
      <content>&lt;ul&gt;
&lt;li&gt;tags: &lt;a href=&#34;https://www.linuxzen.com/notes/notes/topics/20200802151319-computer_systems/&#34;&gt;Computer Systems&lt;/a&gt;,&lt;a href=&#34;https://www.linuxzen.com/notes/notes/notes/20220102072835-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/&#34;&gt;《深入理解计算机系统》读书笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;浮点数小数表示形式&#34;&gt;浮点数小数表示形式&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;.0111&lt;/code&gt; = \(0x2^{-1}+2^{-2}+2^{-3}+2^{-4}\)&lt;/p&gt;
&lt;h2 id=&#34;ieee-浮点数表示形式&#34;&gt;IEEE 浮点数表示形式&lt;/h2&gt;
&lt;p&gt;\[ V=(-1)^s X M X 2^E \]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s = 0&lt;/code&gt; 表示负数， &lt;code&gt;s = 1&lt;/code&gt; 表示正数&lt;/li&gt;
&lt;li&gt;M 是二进制表示的小数&lt;/li&gt;
&lt;li&gt;E 是阶码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;浮点数二进制组成&#34;&gt;浮点数二进制组成&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一个单独符号位 s 表吗符合&lt;/li&gt;
&lt;li&gt;k 位阶码字段 exp 编码阶码 E&lt;/li&gt;
&lt;li&gt;n 位小数字段 frac 编码尾数 M&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;两种常见的格式&#34;&gt;两种常见的格式&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;float&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;s = 1&lt;/li&gt;
&lt;li&gt;k = 8&lt;/li&gt;
&lt;li&gt;n = 23&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;double&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;s = 1&lt;/li&gt;
&lt;li&gt;k = 11&lt;/li&gt;
&lt;li&gt;n = 52&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;三种计算方式&#34;&gt;三种计算方式&lt;/h3&gt;
&lt;p&gt;前置的一些值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e 是 exp 位表示的无符号数&lt;/li&gt;
&lt;li&gt;f 是 frac 位表示的小数&lt;/li&gt;
&lt;li&gt;\(Bias = 2^{k-1} -1\)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;规格化的值&#34;&gt;规格化的值&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;规则：阶码字段 exp 的位模式即不全为 0，也不全为 1（单精度 255，双精度 2047）&lt;/li&gt;
&lt;li&gt;计算方式
&lt;ul&gt;
&lt;li&gt;\(E = e - Bias\)&lt;/li&gt;
&lt;li&gt;$M = 1 + f $&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;非规格化的值&#34;&gt;非规格化的值&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;规则：阶码字段 exp 全是 0（用于表示 0）&lt;/li&gt;
&lt;li&gt;计算方式
&lt;ul&gt;
&lt;li&gt;\(E = 1 - Bias\)&lt;/li&gt;
&lt;li&gt;\(M = f\)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以表示 +0 和 -0。&lt;/p&gt;
&lt;h3 id=&#34;特殊值&#34;&gt;特殊值&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;阶码字段 exp 全是 1
&lt;ul&gt;
&lt;li&gt;小数字段全 0 表示：无穷（s = 0 负无穷，s = 1 正无穷）&lt;/li&gt;
&lt;li&gt;小数字段非全 0 表示：NaN（Not a Number）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
  </channel>
</rss>
